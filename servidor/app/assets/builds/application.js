 (() => new EventSource("http://127.0.0.1:4500").onmessage = () => location.reload())();
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../../node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "../../node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: typeof console !== "undefined" ? console : void 0,
        WebSocket: typeof WebSocket !== "undefined" ? WebSocket : void 0
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "../../node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "../../node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => (/* @__PURE__ */ new Date()).getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        // Private
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "../../node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart",
          "remote": "remote"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "../../node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            const socketProtocols = [...protocols, ...this.consumer.subprotocols || []];
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, socketProtocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        triedToReconnect() {
          return this.monitor.reconnectAttempts > 0;
        }
        // Private
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              if (this.triedToReconnect()) {
                this.reconnectAttempted = true;
              }
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              if (this.reconnectAttempted) {
                this.reconnectAttempted = false;
                return this.subscriptions.notify(identifier, "connected", { reconnected: true });
              } else {
                return this.subscriptions.notify(identifier, "connected", { reconnected: false });
              }
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription.js
  var extend, Subscription;
  var init_subscription = __esm({
    "../../node_modules/@rails/actioncable/src/subscription.js"() {
      extend = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }
        // Perform a channel action with the optional data passed as an attribute
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "../../node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s) => s !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "../../node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        // Private
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s) => s !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s) => s.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a = document.createElement("a");
      a.href = url;
      a.href = a.href;
      a.protocol = a.protocol.replace("http", "ws");
      return a.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "../../node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
          this.subprotocols = [];
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
        addSubProtocol(subprotocol) {
          this.subprotocols = [...this.subprotocols, subprotocol];
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "../../node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // ../../node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "../../node_modules/jquery/dist/jquery.js"(exports, module) {
      (function(global, factory) {
        "use strict";
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf2 = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction2(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType2(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.7.1", rhtmlSuffix = /HTML$/i, jQuery2 = function(selector, context) {
          return new jQuery2.fn.init(selector, context);
        };
        jQuery2.fn = jQuery2.prototype = {
          // The current version of jQuery being used
          jquery: version,
          constructor: jQuery2,
          // The default length of a jQuery object is 0
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          // Get the Nth element in the matched element set OR
          // Get the whole matched element set as a clean array
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          // Take an array of elements and push it onto the stack
          // (returning the new matched element set)
          pushStack: function(elems) {
            var ret = jQuery2.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          // Execute a callback for every element in the matched set.
          each: function(callback) {
            return jQuery2.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery2.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          // For internal use only.
          // Behaves like an Array's method, not like a jQuery method.
          push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery2.extend = jQuery2.fn.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                copy = options[name];
                if (name === "__proto__" || target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery2.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery2.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery2.extend({
          // Unique for each copy of jQuery on the page
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          // Assume jQuery is ready without the ready module
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          // Evaluates a script in a provided context; falls back to the global one
          // if not specified.
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          // Retrieve the text value of an array of DOM nodes
          text: function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i++]) {
                ret += jQuery2.text(node);
              }
            }
            if (nodeType === 1 || nodeType === 11) {
              return elem.textContent;
            }
            if (nodeType === 9) {
              return elem.documentElement.textContent;
            }
            if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          },
          // results is for internal usage only
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike(Object(arr2))) {
                jQuery2.merge(
                  ret,
                  typeof arr2 === "string" ? [arr2] : arr2
                );
              } else {
                push.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf2.call(arr2, elem, i);
          },
          isXMLDoc: function(elem) {
            var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
            return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
          },
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches2 = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches2.push(elems[i]);
              }
            }
            return matches2;
          },
          // arg is for internal usage only
          map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          // A global GUID counter for objects
          guid: 1,
          // jQuery.support is not used in Core but other projects attach their
          // properties to it so it needs to exist.
          support
        });
        if (typeof Symbol === "function") {
          jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery2.each(
          "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
          function(_i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
          }
        );
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType2(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var pop = arr.pop;
        var sort = arr.sort;
        var splice = arr.splice;
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        );
        jQuery2.contains = function(a, b) {
          var bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && // Support: IE 9 - 11+
          // IE doesn't have `contains` on SVG.
          (a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        };
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
        function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            if (ch === "\0") {
              return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }
          return "\\" + ch;
        }
        jQuery2.escapeSelector = function(sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        var preferredDoc = document2, pushNative = push;
        (function() {
          var i, Expr, outermostContext, sortInput, hasDuplicate, push2 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches2, expando = jQuery2.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
            }
            return 0;
          }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
          "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
          `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + identifier + ")"),
            CLASS: new RegExp("^\\.(" + identifier + ")"),
            TAG: new RegExp("^(" + identifier + "|[*])"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp(
              "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
              "i"
            ),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            if (nonHex) {
              return nonHex;
            }
            return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          }, unloadHandler = function() {
            setDocument();
          }, inDisabledFieldset = addCombinator(
            function(elem) {
              return elem.disabled === true && nodeName(elem, "fieldset");
            },
            { dir: "parentNode", next: "legend" }
          );
          function safeActiveElement() {
            try {
              return document3.activeElement;
            } catch (err) {
            }
          }
          try {
            push2.apply(
              arr = slice.call(preferredDoc.childNodes),
              preferredDoc.childNodes
            );
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push2 = {
              apply: function(target, els) {
                pushNative.apply(target, slice.call(els));
              },
              call: function(target) {
                pushNative.apply(target, slice.call(arguments, 1));
              }
            };
          }
          function find(selector, context, results, seed) {
            var m2, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed) {
              setDocument(context);
              context = context || document3;
              if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                  if (m2 = match[1]) {
                    if (nodeType === 9) {
                      if (elem = context.getElementById(m2)) {
                        if (elem.id === m2) {
                          push2.call(results, elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (newContext && (elem = newContext.getElementById(m2)) && find.contains(context, elem) && elem.id === m2) {
                        push2.call(results, elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push2.apply(results, context.getElementsByTagName(selector));
                    return results;
                  } else if ((m2 = match[3]) && context.getElementsByClassName) {
                    push2.apply(results, context.getElementsByClassName(m2));
                    return results;
                  }
                }
                if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                  newSelector = selector;
                  newContext = context;
                  if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                    if (newContext != context || !support.scope) {
                      if (nid = context.getAttribute("id")) {
                        nid = jQuery2.escapeSelector(nid);
                      } else {
                        context.setAttribute("id", nid = expando);
                      }
                    }
                    groups = tokenize2(selector);
                    i2 = groups.length;
                    while (i2--) {
                      groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    push2.apply(
                      results,
                      newContext.querySelectorAll(newSelector)
                    );
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute("id");
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
          }
          function createCache() {
            var keys = [];
            function cache2(key, value) {
              if (keys.push(key + " ") > Expr.cacheLength) {
                delete cache2[keys.shift()];
              }
              return cache2[key + " "] = value;
            }
            return cache2;
          }
          function markFunction(fn2) {
            fn2[expando] = true;
            return fn2;
          }
          function assert(fn2) {
            var el = document3.createElement("fieldset");
            try {
              return !!fn2(el);
            } catch (e) {
              return false;
            } finally {
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
              el = null;
            }
          }
          function createInputPseudo(type) {
            return function(elem) {
              return nodeName(elem, "input") && elem.type === type;
            };
          }
          function createButtonPseudo(type) {
            return function(elem) {
              return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
            };
          }
          function createDisabledPseudo(disabled) {
            return function(elem) {
              if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }
                  return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                  elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }
              return false;
            };
          }
          function createPositionalPseudo(fn2) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches3) {
                var j, matchIndexes = fn2([], seed.length, argument), i2 = matchIndexes.length;
                while (i2--) {
                  if (seed[j = matchIndexes[i2]]) {
                    seed[j] = !(matches3[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }
          function setDocument(node) {
            var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
              return document3;
            }
            document3 = doc;
            documentElement2 = document3.documentElement;
            documentIsHTML = !jQuery2.isXMLDoc(document3);
            matches2 = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
            if (documentElement2.msMatchesSelector && // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
              subWindow.addEventListener("unload", unloadHandler);
            }
            support.getById = assert(function(el) {
              documentElement2.appendChild(el).id = jQuery2.expando;
              return !document3.getElementsByName || !document3.getElementsByName(jQuery2.expando).length;
            });
            support.disconnectedMatch = assert(function(el) {
              return matches2.call(el, "*");
            });
            support.scope = assert(function() {
              return document3.querySelectorAll(":scope");
            });
            support.cssHas = assert(function() {
              try {
                document3.querySelector(":has(*,:jqfake)");
                return false;
              } catch (e) {
                return true;
              }
            });
            if (support.getById) {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find.ID = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node2 && node2.value === attrId;
                };
              };
              Expr.find.ID = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var node2, i2, elems, elem = context.getElementById(id);
                  if (elem) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                    elems = context.getElementsByName(id);
                    i2 = 0;
                    while (elem = elems[i2++]) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }
            Expr.find.TAG = function(tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);
              } else {
                return context.querySelectorAll(tag);
              }
            };
            Expr.find.CLASS = function(className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };
            rbuggyQSA = [];
            assert(function(el) {
              var input;
              documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              input = document3.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");
              documentElement2.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              input = document3.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
              }
            });
            if (!support.cssHas) {
              rbuggyQSA.push(":has");
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : (
                // Otherwise we know they are disconnected
                1
              );
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a === document3 || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                  return -1;
                }
                if (b === document3 || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf2.call(sortInput, a) - indexOf2.call(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            };
            return document3;
          }
          find.matches = function(expr, elements) {
            return find(expr, null, null, elements);
          };
          find.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches2.call(elem, expr);
                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return find(expr, document3, null, [elem]).length > 0;
          };
          find.contains = function(context, elem) {
            if ((context.ownerDocument || context) != document3) {
              setDocument(context);
            }
            return jQuery2.contains(context, elem);
          };
          find.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) != document3) {
              setDocument(elem);
            }
            var fn2 = Expr.attrHandle[name.toLowerCase()], val = fn2 && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn2(elem, name, !documentIsHTML) : void 0;
            if (val !== void 0) {
              return val;
            }
            return elem.getAttribute(name);
          };
          find.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };
          jQuery2.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i2 = 0;
            hasDuplicate = !support.sortStable;
            sortInput = !support.sortStable && slice.call(results, 0);
            sort.call(results, sortOrder);
            if (hasDuplicate) {
              while (elem = results[i2++]) {
                if (elem === results[i2]) {
                  j = duplicates.push(i2);
                }
              }
              while (j--) {
                splice.call(results, duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          jQuery2.fn.uniqueSort = function() {
            return this.pushStack(jQuery2.uniqueSort(slice.apply(this)));
          };
          Expr = jQuery2.expr = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },
            preFilter: {
              ATTR: function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              CHILD: function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  if (!match[3]) {
                    find.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                  find.error(match[0]);
                }
                return match;
              },
              PSEUDO: function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr.CHILD.test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                (excess = tokenize2(unquoted, true)) && // advance to the next closing parenthesis
                (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              TAG: function(nodeNameSelector) {
                var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                  return true;
                } : function(elem) {
                  return nodeName(elem, expectedNodeName);
                };
              },
              CLASS: function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                  return pattern.test(
                    typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                  );
                });
              },
              ATTR: function(name, operator, check) {
                return function(elem) {
                  var result = find.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  if (operator === "=") {
                    return result === check;
                  }
                  if (operator === "!=") {
                    return result !== check;
                  }
                  if (operator === "^=") {
                    return check && result.indexOf(check) === 0;
                  }
                  if (operator === "*=") {
                    return check && result.indexOf(check) > -1;
                  }
                  if (operator === "$=") {
                    return check && result.slice(-check.length) === check;
                  }
                  if (operator === "~=") {
                    return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                  }
                  if (operator === "|=") {
                    return result === check || result.slice(0, check.length + 1) === check + "-";
                  }
                  return false;
                };
              },
              CHILD: function(type, what, _argument, first, last) {
                var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                return first === 1 && last === 0 ? (
                  // Shortcut for :nth-*(n)
                  function(elem) {
                    return !!elem.parentNode;
                  }
                ) : function(elem, _context, xml) {
                  var cache2, outerCache, node, nodeIndex, start5, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                  if (parent) {
                    if (simple) {
                      while (dir2) {
                        node = elem;
                        while (node = node[dir2]) {
                          if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start5 = dir2 = type === "only" && !start5 && "nextSibling";
                      }
                      return true;
                    }
                    start5 = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      outerCache = parent[expando] || (parent[expando] = {});
                      cache2 = outerCache[type] || [];
                      nodeIndex = cache2[0] === dirruns && cache2[1];
                      diff = nodeIndex && cache2[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir2] || // Fallback to seeking `elem` from the start
                      (diff = nodeIndex = 0) || start5.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          outerCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      if (useCache) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        cache2 = outerCache[type] || [];
                        nodeIndex = cache2[0] === dirruns && cache2[1];
                        diff = nodeIndex;
                      }
                      if (diff === false) {
                        while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start5.pop()) {
                          if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              outerCache[type] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              PSEUDO: function(pseudo, argument) {
                var args, fn2 = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
                if (fn2[expando]) {
                  return fn2(argument);
                }
                if (fn2.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches3) {
                    var idx, matched = fn2(seed, argument), i2 = matched.length;
                    while (i2--) {
                      idx = indexOf2.call(seed, matched[i2]);
                      seed[idx] = !(matches3[idx] = matched[i2]);
                    }
                  }) : function(elem) {
                    return fn2(elem, 0, args);
                  };
                }
                return fn2;
              }
            },
            pseudos: {
              // Potentially complex pseudos
              not: markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches3, _context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                  while (i2--) {
                    if (elem = unmatched[i2]) {
                      seed[i2] = !(matches3[i2] = elem);
                    }
                  }
                }) : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              has: markFunction(function(selector) {
                return function(elem) {
                  return find(selector, elem).length > 0;
                };
              }),
              contains: markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || jQuery2.text(elem)).indexOf(text) > -1;
                };
              }),
              // "Whether an element is represented by a :lang() selector
              // is based solely on the element's language value
              // being equal to the identifier C,
              // or beginning with the identifier C immediately followed by "-".
              // The matching of C against the element's language value is performed case-insensitively.
              // The identifier C does not have to be a valid language name."
              // https://www.w3.org/TR/selectors/#lang-pseudo
              lang: markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                  find.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              // Miscellaneous
              target: function(elem) {
                var hash3 = window2.location && window2.location.hash;
                return hash3 && hash3.slice(1) === elem.id;
              },
              root: function(elem) {
                return elem === documentElement2;
              },
              focus: function(elem) {
                return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              // Boolean properties
              enabled: createDisabledPseudo(false),
              disabled: createDisabledPseudo(true),
              checked: function(elem) {
                return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
              },
              selected: function(elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              // Contents
              empty: function(elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              parent: function(elem) {
                return !Expr.pseudos.empty(elem);
              },
              // Element/input types
              header: function(elem) {
                return rheader.test(elem.nodeName);
              },
              input: function(elem) {
                return rinputs.test(elem.nodeName);
              },
              button: function(elem) {
                return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
              },
              text: function(elem) {
                var attr;
                return nodeName(elem, "input") && elem.type === "text" && // Support: IE <10 only
                // New HTML5 attribute values (e.g., "search") appear
                // with elem.type === "text"
                ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              // Position-in-collection
              first: createPositionalPseudo(function() {
                return [0];
              }),
              last: createPositionalPseudo(function(_matchIndexes, length) {
                return [length - 1];
              }),
              eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              even: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 0;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              odd: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 1;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2;
                if (argument < 0) {
                  i2 = argument + length;
                } else if (argument > length) {
                  i2 = length;
                } else {
                  i2 = argument;
                }
                for (; --i2 >= 0; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument;
                for (; ++i2 < length; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos.nth = Expr.pseudos.eq;
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          function tokenize2(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rleadingCombinator.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  // Cast descendant combinators to space
                  type: match[0].replace(rtrimCSS, " ")
                });
                soFar = soFar.slice(matched.length);
              }
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            if (parseOnly) {
              return soFar.length;
            }
            return soFar ? find.error(selector) : (
              // Cache the tokens
              tokenCache(selector, groups).slice(0)
            );
          }
          function toSelector(tokens) {
            var i2 = 0, len = tokens.length, selector = "";
            for (; i2 < len; i2++) {
              selector += tokens[i2].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? (
              // Check against closest ancestor/preceding element
              function(elem, context, xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml);
                  }
                }
                return false;
              }
            ) : (
              // Check against all ancestor/preceding elements
              function(elem, context, xml) {
                var oldCache, outerCache, newCache = [dirruns, doneName];
                if (xml) {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      if (matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                } else {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      if (skip && nodeName(elem, skip)) {
                        elem = elem[dir2] || elem;
                      } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                        return newCache[2] = oldCache[2];
                      } else {
                        outerCache[key] = newCache;
                        if (newCache[2] = matcher(elem, context, xml)) {
                          return true;
                        }
                      }
                    }
                  }
                }
                return false;
              }
            );
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
              var i2 = matchers.length;
              while (i2--) {
                if (!matchers[i2](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i2 = 0, len = contexts.length;
            for (; i2 < len; i2++) {
              find(selector, contexts[i2], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
            for (; i2 < len; i2++) {
              if (elem = unmatched[i2]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i2);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
              var temp, i2, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
                selector || "*",
                context.nodeType ? [context] : context,
                []
              ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
              if (matcher) {
                matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? (
                  // ...intermediate processing is necessary
                  []
                ) : (
                  // ...otherwise use results directly
                  results
                );
                matcher(matcherIn, matcherOut, context, xml);
              } else {
                matcherOut = matcherIn;
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i2 = temp.length;
                while (i2--) {
                  if (elem = temp[i2]) {
                    matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i2 = matcherOut.length;
                    while (i2--) {
                      if (elem = matcherOut[i2]) {
                        temp.push(matcherIn[i2] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i2 = matcherOut.length;
                  while (i2--) {
                    if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2.call(seed, elem) : preMap[i2]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(
                  matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
                );
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push2.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
              return indexOf2.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context, xml) {
              var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              checkContext = null;
              return ret;
            }];
            for (; i2 < len; i2++) {
              if (matcher = Expr.relative[tokens[i2].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                if (matcher[expando]) {
                  j = ++i2;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(
                    i2 > 1 && elementMatcher(matchers),
                    i2 > 1 && toSelector(
                      // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                      tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })
                    ).replace(rtrimCSS, "$1"),
                    matcher,
                    i2 < j && matcherFromTokens(tokens.slice(i2, j)),
                    j < len && matcherFromTokens(tokens = tokens.slice(j)),
                    j < len && toSelector(tokens)
                  );
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context == document3 || context || outermost;
              }
              for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument != document3) {
                    setDocument(elem);
                    xml = !documentIsHTML;
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document3, xml)) {
                      push2.call(results, elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i2;
              if (bySet && i2 !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i2--) {
                      if (!(unmatched[i2] || setMatched[i2])) {
                        setMatched[i2] = pop.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push2.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  jQuery2.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          function compile(selector, match) {
            var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
              if (!match) {
                match = tokenize2(selector);
              }
              i2 = match.length;
              while (i2--) {
                cached = matcherFromTokens(match[i2]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(
                selector,
                matcherFromGroupMatchers(elementMatchers, setMatchers)
              );
              cached.selector = selector;
            }
            return cached;
          }
          function select(selector, context, results, seed) {
            var i2, tokens, token, type, find2, compiled = typeof selector === "function" && selector, match = !seed && tokenize2(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find.ID(
                  token.matches[0].replace(runescape, funescape),
                  context
                ) || [])[0];
                if (!context) {
                  return results;
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i2 = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
              while (i2--) {
                token = tokens[i2];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find2 = Expr.find[type]) {
                  if (seed = find2(
                    token.matches[0].replace(runescape, funescape),
                    rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                  )) {
                    tokens.splice(i2, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push2.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(
              seed,
              context,
              !documentIsHTML,
              results,
              !context || rsibling.test(selector) && testContext(context.parentNode) || context
            );
            return results;
          }
          support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
          setDocument();
          support.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
          });
          jQuery2.find = find;
          jQuery2.expr[":"] = jQuery2.expr.pseudos;
          jQuery2.unique = jQuery2.uniqueSort;
          find.compile = compile;
          find.select = select;
          find.setDocument = setDocument;
          find.tokenize = tokenize2;
          find.escape = jQuery2.escapeSelector;
          find.getText = jQuery2.text;
          find.isXML = jQuery2.isXMLDoc;
          find.selectors = jQuery2.expr;
          find.support = jQuery2.support;
          find.uniqueSort = jQuery2.uniqueSort;
        })();
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery2(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery2.expr.match.needsContext;
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return jQuery2.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery2.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery2.grep(elements, function(elem) {
              return indexOf2.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery2.filter(qualifier, elements, not);
        }
        jQuery2.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery2.find.matches(expr, jQuery2.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery2.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery2(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery2.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery2.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery2.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(
              this,
              // If this is a positional/relative selector, check membership in the returned set
              // so $("p:first").is("p:last") won't return true for a doc with two "p".
              typeof selector === "string" && rneedsContext.test(selector) ? jQuery2(selector) : selector || [],
              false
            ).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery2.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery2 ? context[0] : context;
                jQuery2.merge(this, jQuery2.parseHTML(
                  match[1],
                  context && context.nodeType ? context.ownerDocument || context : document2,
                  true
                ));
                if (rsingleTag.test(match[1]) && jQuery2.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : (
              // Execute immediately if ready is not present
              selector(jQuery2)
            );
          }
          return jQuery2.makeArray(selector, this);
        };
        init.prototype = jQuery2.fn;
        rootjQuery = jQuery2(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery2.fn.extend({
          has: function(target) {
            var targets = jQuery2(target, this), l = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery2.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery2(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : (
                    // Don't pass non-elements to jQuery#find
                    cur.nodeType === 1 && jQuery2.find.matchesSelector(cur, selectors)
                  ))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery2.uniqueSort(matched) : matched);
          },
          // Determine the position of an element within the set
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf2.call(jQuery2(elem), this[0]);
            }
            return indexOf2.call(
              this,
              // If it receives a jQuery object, the first element is used
              elem.jquery ? elem[0] : elem
            );
          },
          add: function(selector, context) {
            return this.pushStack(
              jQuery2.uniqueSort(
                jQuery2.merge(this.get(), jQuery2(selector, context))
              )
            );
          },
          addBack: function(selector) {
            return this.add(
              selector == null ? this.prevObject : this.prevObject.filter(selector)
            );
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery2.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery2.merge([], elem.childNodes);
          }
        }, function(name, fn2) {
          jQuery2.fn[name] = function(until, selector) {
            var matched = jQuery2.map(this, fn2, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery2.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery2.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery2.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery2.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery2.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire2 = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add2(args) {
                  jQuery2.each(args, function(_, arg) {
                    if (isFunction(arg)) {
                      if (!options.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType2(arg) !== "string") {
                      add2(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire2();
                }
              }
              return this;
            },
            // Remove a callback from the list
            remove: function() {
              jQuery2.each(arguments, function(_, arg) {
                var index;
                while ((index = jQuery2.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn2) {
              return fn2 ? jQuery2.inArray(fn2, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire2();
                }
              }
              return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery2.extend({
          Deferred: function(func) {
            var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                "notify",
                "progress",
                jQuery2.Callbacks("memory"),
                jQuery2.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn2) {
                return promise.then(null, fn2);
              },
              // Keep pipe for back-compat
              pipe: function() {
                var fns = arguments;
                return jQuery2.Deferred(function(newDefer) {
                  jQuery2.each(tuples, function(_i, tuple) {
                    var fn2 = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn2 && fn2.apply(this, arguments);
                      if (returned && isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this,
                          fn2 ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction(then)) {
                        if (special) {
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special)
                          );
                        } else {
                          maxDepth++;
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special),
                            resolve(
                              maxDepth,
                              deferred2,
                              Identity,
                              deferred2.notifyWith
                            )
                          );
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process2 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery2.Deferred.exceptionHook) {
                          jQuery2.Deferred.exceptionHook(
                            e,
                            process2.error
                          );
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process2();
                    } else {
                      if (jQuery2.Deferred.getErrorHook) {
                        process2.error = jQuery2.Deferred.getErrorHook();
                      } else if (jQuery2.Deferred.getStackHook) {
                        process2.error = jQuery2.Deferred.getStackHook();
                      }
                      window2.setTimeout(process2);
                    }
                  };
                }
                return jQuery2.Deferred(function(newDefer) {
                  tuples[0][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onProgress) ? onProgress : Identity,
                      newDefer.notifyWith
                    )
                  );
                  tuples[1][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onFulfilled) ? onFulfilled : Identity
                    )
                  );
                  tuples[2][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onRejected) ? onRejected : Thrower
                    )
                  );
                }).promise();
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function(obj) {
                return obj != null ? jQuery2.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery2.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(
                  function() {
                    state = stateString;
                  },
                  // rejected_callbacks.disable
                  // fulfilled_callbacks.disable
                  tuples[3 - i][2].disable,
                  // rejected_handlers.disable
                  // fulfilled_handlers.disable
                  tuples[3 - i][3].disable,
                  // progress_callbacks.lock
                  tuples[0][2].lock,
                  // progress_handlers.lock
                  tuples[0][3].lock
                );
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          // Deferred helper
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery2.Deferred(), updateFunc = function(i2) {
              return function(value) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(
                singleValue,
                primary.done(updateFunc(i)).resolve,
                primary.reject,
                !remaining
              );
              if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery2.Deferred.exceptionHook = function(error2, asyncError) {
          if (window2.console && window2.console.warn && error2 && rerrorNames.test(error2.name)) {
            window2.console.warn(
              "jQuery.Deferred exception: " + error2.message,
              error2.stack,
              asyncError
            );
          }
        };
        jQuery2.readyException = function(error2) {
          window2.setTimeout(function() {
            throw error2;
          });
        };
        var readyList = jQuery2.Deferred();
        jQuery2.fn.ready = function(fn2) {
          readyList.then(fn2).catch(function(error2) {
            jQuery2.readyException(error2);
          });
          return this;
        };
        jQuery2.extend({
          // Is the DOM ready to be used? Set to true once it occurs.
          isReady: false,
          // A counter to track how many items to wait for before
          // the ready event fires. See trac-6781
          readyWait: 1,
          // Handle when the DOM is ready
          ready: function(wait) {
            if (wait === true ? --jQuery2.readyWait : jQuery2.isReady) {
              return;
            }
            jQuery2.isReady = true;
            if (wait !== true && --jQuery2.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery2]);
          }
        });
        jQuery2.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery2.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery2.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn2, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType2(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn2, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn2.call(elems, value);
                fn2 = null;
              } else {
                bulk = fn2;
                fn2 = function(elem, _key, value2) {
                  return bulk.call(jQuery2(elem), value2);
                };
              }
            }
            if (fn2) {
              for (; i < len; i++) {
                fn2(
                  elems[i],
                  key,
                  raw ? value : value.call(elems[i], i, fn2(elems[i], key))
                );
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn2.call(elems);
          }
          return len ? fn2(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data2() {
          this.expando = jQuery2.expando + Data2.uid++;
        }
        Data2.uid = 1;
        Data2.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache2 = this.cache(owner);
            if (typeof data === "string") {
              cache2[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache2[camelCase(prop)] = data[prop];
              }
            }
            return cache2;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : (
              // Always use camelCase key (gh-2257)
              owner[this.expando] && owner[this.expando][camelCase(key)]
            );
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i, cache2 = owner[this.expando];
            if (cache2 === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache2 ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache2[key[i]];
              }
            }
            if (key === void 0 || jQuery2.isEmptyObject(cache2)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache2 = owner[this.expando];
            return cache2 !== void 0 && !jQuery2.isEmptyObject(cache2);
          }
        };
        var dataPriv = new Data2();
        var dataUser = new Data2();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData2(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData2(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery2.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          // TODO: Now that all calls to _data and _removeData have been replaced
          // with direct calls to dataPriv methods, these can be deprecated.
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery2.fn.extend({
          data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery2.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery2.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery2.queue(elem, type), startLength = queue.length, fn2 = queue.shift(), hooks = jQuery2._queueHooks(elem, type), next = function() {
              jQuery2.dequeue(elem, type);
            };
            if (fn2 === "inprogress") {
              fn2 = queue.shift();
              startLength--;
            }
            if (fn2) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn2.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          // Not public - generate a queueHooks object, or return the current one
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery2.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery2.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery2.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery2.queue(this, type, data);
              jQuery2._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery2.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery2.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          // Get a promise resolved when queues of a certain type
          // are emptied (fx is the type by default)
          promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery2.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery2.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
          // Support: Firefox <=43 - 45
          // Disconnected elements can have computed display: none, so first confirm that elem is
          // in the document.
          isAttached(elem) && jQuery2.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery2.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery2.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery2.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery2.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery2.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery2.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery2.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery2(this).show();
              } else {
                jQuery2(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          // XHTML parsers do not magically insert elements in the
          // same way that tag soup parsers do. So we cannot shorten
          // this by omitting <tbody> or other required elements.
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery2.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(
              elems[i],
              "globalEval",
              !refElements || dataPriv.get(refElements[i], "globalEval")
            );
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType2(elem) === "object") {
                jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery2.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery2.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery2.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function on(elem, types, selector, data, fn2, one) {
          var origFn, type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types) {
              on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn2 == null) {
            fn2 = selector;
            data = selector = void 0;
          } else if (fn2 == null) {
            if (typeof selector === "string") {
              fn2 = data;
              data = void 0;
            } else {
              fn2 = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn2 === false) {
            fn2 = returnFalse;
          } else if (!fn2) {
            return elem;
          }
          if (one === 1) {
            origFn = fn2;
            fn2 = function(event) {
              jQuery2().off(event);
              return origFn.apply(this, arguments);
            };
            fn2.guid = origFn.guid || (origFn.guid = jQuery2.guid++);
          }
          return elem.each(function() {
            jQuery2.event.add(this, types, fn2, data, selector);
          });
        }
        jQuery2.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery2.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery2.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery2 !== "undefined" && jQuery2.event.triggered !== e.type ? jQuery2.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery2.event.special[type] || {};
              handleObj = jQuery2.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery2.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery2.event.global[type] = true;
            }
          },
          // Detach an event or set of events from an element
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events) {
                  jQuery2.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery2.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery2.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery2.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery2.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery2.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery2(sel, this).index(cur) > -1 : jQuery2.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery2.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery2.expando] ? originalEvent : new jQuery2.Event(originalEvent);
          },
          special: {
            load: {
              // Prevent triggered image.load events from bubbling to window.load
              noBubble: true
            },
            click: {
              // Utilize native event to ensure correct state for checkable inputs
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", true);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              // For cross-browser consistency, suppress native .click() on links
              // Also prevent it if we're currently inside a leveraged native-event stack
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, isSetup) {
          if (!isSetup) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery2.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery2.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type, saved);
                  this[type]();
                  result = dataPriv.get(this, type);
                  dataPriv.set(this, type, false);
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result;
                  }
                } else if ((jQuery2.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved) {
                dataPriv.set(this, type, jQuery2.event.trigger(
                  saved[0],
                  saved.slice(1),
                  this
                ));
                event.stopPropagation();
                event.isImmediatePropagationStopped = returnTrue;
              }
            }
          });
        }
        jQuery2.removeEvent = function(elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        jQuery2.Event = function(src, props) {
          if (!(this instanceof jQuery2.Event)) {
            return new jQuery2.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery2.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery2.expando] = true;
        };
        jQuery2.Event.prototype = {
          constructor: jQuery2.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery2.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery2.event.addProp);
        jQuery2.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          function focusMappedHandler(nativeEvent) {
            if (document2.documentMode) {
              var handle = dataPriv.get(this, "handle"), event = jQuery2.event.fix(nativeEvent);
              event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
              event.isSimulated = true;
              handle(nativeEvent);
              if (event.target === event.currentTarget) {
                handle(event);
              }
            } else {
              jQuery2.event.simulate(
                delegateType,
                nativeEvent.target,
                jQuery2.event.fix(nativeEvent)
              );
            }
          }
          jQuery2.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
              var attaches;
              leverageNative(this, type, true);
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType);
                if (!attaches) {
                  this.addEventListener(delegateType, focusMappedHandler);
                }
                dataPriv.set(this, delegateType, (attaches || 0) + 1);
              } else {
                return false;
              }
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            teardown: function() {
              var attaches;
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType) - 1;
                if (!attaches) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                  dataPriv.remove(this, delegateType);
                } else {
                  dataPriv.set(this, delegateType, attaches);
                }
              } else {
                return false;
              }
            },
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
          jQuery2.event.special[delegateType] = {
            setup: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
              if (!attaches) {
                if (document2.documentMode) {
                  this.addEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.addEventListener(type, focusMappedHandler, true);
                }
              }
              dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
              if (!attaches) {
                if (document2.documentMode) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.removeEventListener(type, focusMappedHandler, true);
                }
                dataPriv.remove(dataHolder, delegateType);
              } else {
                dataPriv.set(dataHolder, delegateType, attaches);
              }
            }
          };
        });
        jQuery2.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery2.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery2.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery2.fn.extend({
          on: function(types, selector, data, fn2) {
            return on(this, types, selector, data, fn2);
          },
          one: function(types, selector, data, fn2) {
            return on(this, types, selector, data, fn2, 1);
          },
          off: function(types, selector, fn2) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery2(types.delegateTarget).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
              );
              return this;
            }
            if (typeof types === "object") {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn2 = selector;
              selector = void 0;
            }
            if (fn2 === false) {
              fn2 = returnFalse;
            }
            return this.each(function() {
              jQuery2.event.remove(this, types, fn2, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery2(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  jQuery2.event.add(dest, type, events[type][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery2.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
          if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
              var self2 = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery2.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery2.clone(node, true, true);
                  if (hasScripts) {
                    jQuery2.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery2.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery2.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery2._evalUrl && !node.noModule) {
                        jQuery2._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery2.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery2.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery2.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery2.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery2.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery2.event.remove(elem, type);
                      } else {
                        jQuery2.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery2.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery2.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery2.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery2.htmlPrefilter(value2);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery2.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery2.inArray(this, ignored) < 0) {
                jQuery2.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery2.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery2.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery2(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery2(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery2.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "box-sizing:content-box;border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery2.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? (
            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + ""
          ) : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery2.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches2 = rcssNum.exec(value);
          return matches2 ? (
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches2[2] - (subtract || 0)) + (matches2[3] || "px")
          ) : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              marginDelta += jQuery2.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              if (box !== "padding") {
                delta += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              } else {
                extra += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(
              elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
              // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
              // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
          }
          return delta + marginDelta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Interestingly, in some cases IE 9 doesn't suffer from this issue.
          !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
          // This happens for inline elements with no explicit setting (gh-3571)
          val === "auto" || // Support: Android <=4.1 - 4.3 only
          // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
          !parseFloat(val) && jQuery2.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
          elem.getClientRects().length) {
            isBorderBox = jQuery2.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(
            elem,
            dimension,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles,
            // Provide the current computed size to request scroll gutter calculation (gh-3589)
            val
          ) + "px";
        }
        jQuery2.extend({
          // Add in style property hooks for overriding the default
          // behavior of getting and setting a style property
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          // Don't automatically add "px" to these possibly-unitless properties
          cssNumber: {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageSlice: true,
            columnCount: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            scale: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeMiterlimit: true,
            strokeOpacity: true
          },
          // Add in properties whose names you wish to fix before
          // setting or getting the value
          cssProps: {},
          // Get and set the style property on a DOM Node
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (value !== void 0) {
              type = typeof value;
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery2.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery2.each(["height", "width"], function(_i, dimension) {
          jQuery2.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery2.css(elem, "display")) && // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches2, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
                elem,
                dimension,
                extra,
                isBorderBox,
                styles
              ) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(
                  elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
                );
              }
              if (subtract && (matches2 = rcssNum.exec(value)) && (matches2[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery2.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery2.cssHooks.marginLeft = addGetHookIf(
          support.reliableMarginLeft,
          function(elem, computed) {
            if (computed) {
              return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px";
            }
          }
        );
        jQuery2.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix, suffix) {
          jQuery2.cssHooks[prefix + suffix] = {
            expand: function(value) {
              var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery2.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles, len, map = {}, i = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map[name2[i]] = jQuery2.css(elem, name2[i], false, styles);
                }
                return map;
              }
              return value2 !== void 0 ? jQuery2.style(elem, name2, value2) : jQuery2.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end3, easing) {
          return new Tween.prototype.init(elem, options, prop, end3, easing);
        }
        jQuery2.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end3, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery2.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end3;
            this.unit = unit || (jQuery2.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery2.easing[this.easing](
                percent,
                this.options.duration * percent,
                0,
                1,
                this.options.duration
              );
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery2.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery2.fx.step[tween.prop]) {
                jQuery2.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery2.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery2.fx = Tween.prototype.init;
        jQuery2.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery2.fx.interval);
            }
            jQuery2.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery2._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery2.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery2.style(elem, prop);
            }
          }
          propTween = !jQuery2.isEmptyObject(props);
          if (!propTween && jQuery2.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery2.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery2.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery2.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery2.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery2.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery2.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery2.extend({}, properties),
            opts: jQuery2.extend(true, {
              specialEasing: {},
              easing: jQuery2.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end3) {
              var tween = jQuery2.Tween(
                elem,
                animation.opts,
                prop,
                end3,
                animation.opts.specialEasing[prop] || animation.opts.easing
              );
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery2.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery2.fx.timer(
            jQuery2.extend(tick, {
              elem,
              anim: animation,
              queue: animation.opts.queue
            })
          );
          return animation;
        }
        jQuery2.Animation = jQuery2.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery2.speed = function(speed, easing, fn2) {
          var opt = speed && typeof speed === "object" ? jQuery2.extend({}, speed) : {
            complete: fn2 || !fn2 && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn2 && easing || easing && !isFunction(easing) && easing
          };
          if (jQuery2.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery2.fx.speeds) {
                opt.duration = jQuery2.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery2.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery2.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery2.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery2.isEmptyObject(prop), optall = jQuery2.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery2.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery2.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery2.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery2.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery2.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery2.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery2.fn[name];
          jQuery2.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery2.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery2.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery2.timers = [];
        jQuery2.fx.tick = function() {
          var timer, i = 0, timers = jQuery2.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery2.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery2.fx.timer = function(timer) {
          jQuery2.timers.push(timer);
          jQuery2.fx.start();
        };
        jQuery2.fx.interval = 13;
        jQuery2.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery2.fx.stop = function() {
          inProgress = null;
        };
        jQuery2.fx.speeds = {
          slow: 600,
          fast: 200,
          // Default speed
          _default: 400
        };
        jQuery2.fn.delay = function(time, type) {
          time = jQuery2.fx ? jQuery2.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery2.expr.attrHandle;
        jQuery2.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery2.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery2.removeAttr(this, name);
            });
          }
        });
        jQuery2.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery2.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              hooks = jQuery2.attrHooks[name.toLowerCase()] || (jQuery2.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery2.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery2.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery2.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery2.each(jQuery2.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery2.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery2.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery2.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery2.propFix[name] || name];
            });
          }
        });
        jQuery2.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              name = jQuery2.propFix[name] || name;
              hooks = jQuery2.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery2.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery2.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery2.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery2.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery2.fn.extend({
          addClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).addClass(value.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).removeClass(value.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var classNames, className, i, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (isFunction(value)) {
              return this.each(function(i2) {
                jQuery2(this).toggleClass(
                  value.call(this, i2, getClass(this), stateVal),
                  stateVal
                );
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function() {
              if (isValidValue) {
                self2 = jQuery2(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute(
                    "class",
                    className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                  );
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery2.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery2.valHooks[elem.type] || jQuery2.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, jQuery2(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery2.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery2.valHooks[this.type] || jQuery2.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery2.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery2.find.attr(elem, "value");
                return val != null ? val : (
                  // Support: IE <=10 - 11 only
                  // option.text throws exceptions (trac-14686, trac-14858)
                  // Strip and collapse whitespace
                  // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                  stripAndCollapse(jQuery2.text(elem))
                );
              }
            },
            select: {
              get: function(elem) {
                var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max2 = one ? index + 1 : options.length;
                if (index < 0) {
                  i = max2;
                } else {
                  i = one ? index : 0;
                }
                for (; i < max2; i++) {
                  option = options[i];
                  if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery2(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery2.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery2.inArray(jQuery2.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery2.each(["radio", "checkbox"], function() {
          jQuery2.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery2.inArray(jQuery2(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery2.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        var location2 = window2.location;
        var nonce2 = { guid: Date.now() };
        var rquery = /\?/;
        jQuery2.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery2.error("Invalid XML: " + (parserErrorElem ? jQuery2.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery2.extend(jQuery2.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery2.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery2.expando] ? event : new jQuery2.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery2.makeArray(data, [event]);
            special = jQuery2.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery2.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery2.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          // Piggyback on a donor event to simulate a different one
          // Used only for `focus(in | out)` events
          simulate: function(type, elem, event) {
            var e = jQuery2.extend(
              new jQuery2.Event(),
              event,
              {
                type,
                isSimulated: true
              }
            );
            jQuery2.event.trigger(e, null, elem);
          }
        });
        jQuery2.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery2.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery2.event.trigger(type, data, elem, true);
            }
          }
        });
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add2) {
          var name;
          if (Array.isArray(obj)) {
            jQuery2.each(obj, function(i, v) {
              if (traditional || rbracket.test(prefix)) {
                add2(prefix, v);
              } else {
                buildParams(
                  prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                  v,
                  traditional,
                  add2
                );
              }
            });
          } else if (!traditional && toType2(obj) === "object") {
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add2);
            }
          } else {
            add2(prefix, obj);
          }
        }
        jQuery2.param = function(a, traditional) {
          var prefix, s = [], add2 = function(key, valueOrFunction) {
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery2.isPlainObject(a)) {
            jQuery2.each(a, function() {
              add2(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add2);
            }
          }
          return s.join("&");
        };
        jQuery2.fn.extend({
          serialize: function() {
            return jQuery2.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery2.prop(this, "elements");
              return elements ? jQuery2.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery2(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery2.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location2.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery2.each(structure[dataType] || [], function(_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery2.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery2.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery2.extend({
          // Counter for holding the number of active queries
          active: 0,
          // Last-Modified header cache for next request
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location2.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location2.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
              // Convert anything to text
              "* text": String,
              // Text to html (true = no transformation)
              "text html": true,
              // Evaluate text as a json expression
              "text json": JSON.parse,
              // Parse text as xml
              "text xml": jQuery2.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
              url: true,
              context: true
            }
          },
          // Creates a full fledged settings object into target
          // with both ajaxSettings and settings fields.
          // If target is omitted, writes into ajaxSettings.
          ajaxSetup: function(target, settings) {
            return settings ? (
              // Building a settings object
              ajaxExtend(ajaxExtend(target, jQuery2.ajaxSettings), settings)
            ) : (
              // Extending ajaxSettings
              ajaxExtend(jQuery2.ajaxSettings, target)
            );
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          // Main method
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery2.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery2(callbackContext) : jQuery2.event, deferred = jQuery2.Deferred(), completeDeferred = jQuery2.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              // Raw string
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              // Caches the header
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              // Overrides response content-type header
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s.mimeType = type;
                }
                return this;
              },
              // Status-dependent callbacks
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              // Cancel the request
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery2.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery2.event && s.global;
            if (fireGlobals && jQuery2.active++ === 0) {
              jQuery2.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce2.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery2.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery2.lastModified[cacheURL]);
              }
              if (jQuery2.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery2.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader(
              "Accept",
              s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]
            );
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error2, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery2.inArray("script", s.dataTypes) > -1 && jQuery2.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery2.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery2.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error2 = response.error;
                  isSuccess = !error2;
                }
              } else {
                error2 = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error2]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(
                  isSuccess ? "ajaxSuccess" : "ajaxError",
                  [jqXHR, s, isSuccess ? success : error2]
                );
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery2.active) {
                  jQuery2.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery2.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery2.get(url, void 0, callback, "script");
          }
        });
        jQuery2.each(["get", "post"], function(_i, method) {
          jQuery2[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery2.ajax(jQuery2.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery2.isPlainObject(url) && url));
          };
        });
        jQuery2.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery2._evalUrl = function(url, options, doc) {
          return jQuery2.ajax({
            url,
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery2.globalEval(response, options, doc);
            }
          });
        };
        jQuery2.fn.extend({
          wrapAll: function(html) {
            var wrap;
            if (this[0]) {
              if (isFunction(html)) {
                html = html.call(this[0]);
              }
              wrap = jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction(html)) {
              return this.each(function(i) {
                jQuery2(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery2(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
              jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery2(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery2.expr.pseudos.hidden = function(elem) {
          return !jQuery2.expr.pseudos.visible(elem);
        };
        jQuery2.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery2.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // trac-1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery2.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery2.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(
                  options.type,
                  options.url,
                  options.async,
                  options.username,
                  options.password
                );
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                            // File: protocol always yields status 0; see trac-8605, trac-14207
                            xhr.status,
                            xhr.statusText
                          );
                        }
                      } else {
                        complete(
                          xhrSuccessStatus[xhr.status] || xhr.status,
                          xhr.statusText,
                          // Support: IE <=9 only
                          // IE9 has no XHR2 but throws on binary (trac-11426)
                          // For XHR2 non-text, let the caller handle it (gh-2498)
                          (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                          xhr.getAllResponseHeaders()
                        );
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery2.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery2.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery2.globalEval(text);
              return text;
            }
          }
        });
        jQuery2.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery2.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_, complete) {
                script = jQuery2("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery2.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery2.expando + "_" + nonce2.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery2.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery2.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery2(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery2.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery2(scripts).remove();
          }
          return jQuery2.merge([], parsed.childNodes);
        };
        jQuery2.fn.load = function(url, params, callback) {
          var selector, type, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self2.length > 0) {
            jQuery2.ajax({
              url,
              // If "type" variable is undefined, then "GET" method will be used.
              // Make value of this field explicit since
              // user can override it through ajaxSetup method
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? (
                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery2("<div>").append(jQuery2.parseHTML(responseText)).find(selector)
              ) : (
                // Otherwise use the full result
                responseText
              ));
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery2.expr.pseudos.animated = function(elem) {
          return jQuery2.grep(jQuery2.timers, function(fn2) {
            return elem === fn2.elem;
          }).length;
        };
        jQuery2.offset = {
          setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery2.css(elem, "position"), curElem = jQuery2(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery2.css(elem, "top");
            curCSSLeft = jQuery2.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
              options = options.call(elem, i, jQuery2.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery2.fn.extend({
          // offset() relates an element's border box to the document origin
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i) {
                jQuery2.offset.setOffset(this, options, i);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          // position() relates an element's margin box to its offset parent's padding box
          // This corresponds to the behavior of CSS absolute positioning
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset2, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery2.css(elem, "position") === "fixed") {
              offset2 = elem.getBoundingClientRect();
            } else {
              offset2 = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery2(offsetParent).offset();
                parentOffset.top += jQuery2.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery2.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset2.top - parentOffset.top - jQuery2.css(elem, "marginTop", true),
              left: offset2.left - parentOffset.left - jQuery2.css(elem, "marginLeft", true)
            };
          },
          // This method will return documentElement in the following cases:
          // 1) For the element inside the iframe without offsetParent, this method will return
          //    documentElement of the parent window
          // 2) For the hidden or detached element
          // 3) For body or html element, i.e. in case of the html node - it will return itself
          //
          // but those exceptions were never presented as a real life use-cases
          // and might be considered as more preferable results.
          //
          // This logic, however, is not guaranteed and can change at any point in the future
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery2.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top3 = "pageYOffset" === prop;
          jQuery2.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(
                  !top3 ? val2 : win.pageXOffset,
                  top3 ? val2 : win.pageYOffset
                );
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery2.each(["top", "left"], function(_i, prop) {
          jQuery2.cssHooks[prop] = addGetHookIf(
            support.pixelPosition,
            function(elem, computed) {
              if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery2(elem).position()[prop] + "px" : computed;
              }
            }
          );
        });
        jQuery2.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery2.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery2.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type2, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(
                    elem.body["scroll" + name],
                    doc["scroll" + name],
                    elem.body["offset" + name],
                    doc["offset" + name],
                    doc["client" + name]
                  );
                }
                return value2 === void 0 ? (
                  // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery2.css(elem, type2, extra)
                ) : (
                  // Set width or height on the element
                  jQuery2.style(elem, type2, value2, extra)
                );
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery2.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery2.fn[type] = function(fn2) {
            return this.on(type, fn2);
          };
        });
        jQuery2.fn.extend({
          bind: function(types, data, fn2) {
            return this.on(types, null, data, fn2);
          },
          unbind: function(types, fn2) {
            return this.off(types, null, fn2);
          },
          delegate: function(selector, types, data, fn2) {
            return this.on(types, selector, data, fn2);
          },
          undelegate: function(selector, types, fn2) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn2);
          },
          hover: function(fnOver, fnOut) {
            return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
          }
        });
        jQuery2.each(
          "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
          function(_i, name) {
            jQuery2.fn[name] = function(data, fn2) {
              return arguments.length > 0 ? this.on(name, null, data, fn2) : this.trigger(name);
            };
          }
        );
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery2.proxy = function(fn2, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn2[context];
            context = fn2;
            fn2 = tmp;
          }
          if (!isFunction(fn2)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn2.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn2.guid = fn2.guid || jQuery2.guid++;
          return proxy;
        };
        jQuery2.holdReady = function(hold) {
          if (hold) {
            jQuery2.readyWait++;
          } else {
            jQuery2.ready(true);
          }
        };
        jQuery2.isArray = Array.isArray;
        jQuery2.parseJSON = JSON.parse;
        jQuery2.nodeName = nodeName;
        jQuery2.isFunction = isFunction;
        jQuery2.isWindow = isWindow;
        jQuery2.camelCase = camelCase;
        jQuery2.type = toType2;
        jQuery2.now = Date.now;
        jQuery2.isNumeric = function(obj) {
          var type = jQuery2.type(obj);
          return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj));
        };
        jQuery2.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery2;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery2.noConflict = function(deep) {
          if (window2.$ === jQuery2) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery2) {
            window2.jQuery = _jQuery;
          }
          return jQuery2;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery2;
        }
        return jQuery2;
      });
    }
  });

  // ../../node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js
  var require_bootstrap_datepicker = __commonJS({
    "../../node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"(exports) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["jquery"], factory);
        } else if (typeof exports === "object") {
          factory(require_jquery());
        } else {
          factory(jQuery);
        }
      })(function($2, undefined2) {
        function UTCDate() {
          return new Date(Date.UTC.apply(Date, arguments));
        }
        function UTCToday() {
          var today = /* @__PURE__ */ new Date();
          return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
        }
        function isUTCEquals(date1, date2) {
          return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();
        }
        function alias(method, deprecationMsg) {
          return function() {
            if (deprecationMsg !== undefined2) {
              $2.fn.datepicker.deprecated(deprecationMsg);
            }
            return this[method].apply(this, arguments);
          };
        }
        function isValidDate(d) {
          return d && !isNaN(d.getTime());
        }
        var DateArray = /* @__PURE__ */ function() {
          var extras = {
            get: function(i) {
              return this.slice(i)[0];
            },
            contains: function(d) {
              var val = d && d.valueOf();
              for (var i = 0, l = this.length; i < l; i++)
                if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1e3 * 60 * 60 * 24)
                  return i;
              return -1;
            },
            remove: function(i) {
              this.splice(i, 1);
            },
            replace: function(new_array) {
              if (!new_array)
                return;
              if (!Array.isArray(new_array))
                new_array = [new_array];
              this.clear();
              this.push.apply(this, new_array);
            },
            clear: function() {
              this.length = 0;
            },
            copy: function() {
              var a = new DateArray();
              a.replace(this);
              return a;
            }
          };
          return function() {
            var a = [];
            a.push.apply(a, arguments);
            $2.extend(a, extras);
            return a;
          };
        }();
        var Datepicker = function(element, options) {
          $2.data(element, "datepicker", this);
          this._events = [];
          this._secondaryEvents = [];
          this._process_options(options);
          this.dates = new DateArray();
          this.viewDate = this.o.defaultViewDate;
          this.focusDate = null;
          this.element = $2(element);
          this.isInput = this.element.is("input");
          this.inputField = this.isInput ? this.element : this.element.find("input");
          this.component = this.element.hasClass("date") ? this.element.find(".add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn") : false;
          if (this.component && this.component.length === 0) {
            this.component = false;
          }
          if (this.o.isInline === null) {
            this.isInline = !this.component && !this.isInput;
          } else {
            this.isInline = this.o.isInline;
          }
          this.picker = $2(DPGlobal.template);
          if (this._check_template(this.o.templates.leftArrow)) {
            this.picker.find(".prev").html(this.o.templates.leftArrow);
          }
          if (this._check_template(this.o.templates.rightArrow)) {
            this.picker.find(".next").html(this.o.templates.rightArrow);
          }
          this._buildEvents();
          this._attachEvents();
          if (this.isInline) {
            this.picker.addClass("datepicker-inline").appendTo(this.element);
          } else {
            this.picker.addClass("datepicker-dropdown dropdown-menu");
          }
          if (this.o.rtl) {
            this.picker.addClass("datepicker-rtl");
          }
          if (this.o.calendarWeeks) {
            this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan", function(i, val) {
              return Number(val) + 1;
            });
          }
          this._process_options({
            startDate: this._o.startDate,
            endDate: this._o.endDate,
            daysOfWeekDisabled: this.o.daysOfWeekDisabled,
            daysOfWeekHighlighted: this.o.daysOfWeekHighlighted,
            datesDisabled: this.o.datesDisabled
          });
          this._allow_update = false;
          this.setViewMode(this.o.startView);
          this._allow_update = true;
          this.fillDow();
          this.fillMonths();
          this.update();
          if (this.isInline) {
            this.show();
          }
        };
        Datepicker.prototype = {
          constructor: Datepicker,
          _resolveViewName: function(view) {
            $2.each(DPGlobal.viewModes, function(i, viewMode) {
              if (view === i || $2.inArray(view, viewMode.names) !== -1) {
                view = i;
                return false;
              }
            });
            return view;
          },
          _resolveDaysOfWeek: function(daysOfWeek) {
            if (!Array.isArray(daysOfWeek))
              daysOfWeek = daysOfWeek.split(/[,\s]*/);
            return $2.map(daysOfWeek, Number);
          },
          _check_template: function(tmp) {
            try {
              if (tmp === undefined2 || tmp === "") {
                return false;
              }
              if ((tmp.match(/[<>]/g) || []).length <= 0) {
                return true;
              }
              var jDom = $2(tmp);
              return jDom.length > 0;
            } catch (ex) {
              return false;
            }
          },
          _process_options: function(opts) {
            this._o = $2.extend({}, this._o, opts);
            var o = this.o = $2.extend({}, this._o);
            var lang = o.language;
            if (!dates[lang]) {
              lang = lang.split("-")[0];
              if (!dates[lang])
                lang = defaults.language;
            }
            o.language = lang;
            o.startView = this._resolveViewName(o.startView);
            o.minViewMode = this._resolveViewName(o.minViewMode);
            o.maxViewMode = this._resolveViewName(o.maxViewMode);
            o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView));
            if (o.multidate !== true) {
              o.multidate = Number(o.multidate) || false;
              if (o.multidate !== false)
                o.multidate = Math.max(0, o.multidate);
            }
            o.multidateSeparator = String(o.multidateSeparator);
            o.weekStart %= 7;
            o.weekEnd = (o.weekStart + 6) % 7;
            var format = DPGlobal.parseFormat(o.format);
            if (o.startDate !== -Infinity) {
              if (!!o.startDate) {
                if (o.startDate instanceof Date)
                  o.startDate = this._local_to_utc(this._zero_time(o.startDate));
                else
                  o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
              } else {
                o.startDate = -Infinity;
              }
            }
            if (o.endDate !== Infinity) {
              if (!!o.endDate) {
                if (o.endDate instanceof Date)
                  o.endDate = this._local_to_utc(this._zero_time(o.endDate));
                else
                  o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
              } else {
                o.endDate = Infinity;
              }
            }
            o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled || []);
            o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted || []);
            o.datesDisabled = o.datesDisabled || [];
            if (!Array.isArray(o.datesDisabled)) {
              o.datesDisabled = o.datesDisabled.split(",");
            }
            o.datesDisabled = $2.map(o.datesDisabled, function(d) {
              return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);
            });
            var plc = String(o.orientation).toLowerCase().split(/\s+/g), _plc = o.orientation.toLowerCase();
            plc = $2.grep(plc, function(word) {
              return /^auto|left|right|top|bottom$/.test(word);
            });
            o.orientation = { x: "auto", y: "auto" };
            if (!_plc || _plc === "auto")
              ;
            else if (plc.length === 1) {
              switch (plc[0]) {
                case "top":
                case "bottom":
                  o.orientation.y = plc[0];
                  break;
                case "left":
                case "right":
                  o.orientation.x = plc[0];
                  break;
              }
            } else {
              _plc = $2.grep(plc, function(word) {
                return /^left|right$/.test(word);
              });
              o.orientation.x = _plc[0] || "auto";
              _plc = $2.grep(plc, function(word) {
                return /^top|bottom$/.test(word);
              });
              o.orientation.y = _plc[0] || "auto";
            }
            if (o.defaultViewDate instanceof Date || typeof o.defaultViewDate === "string") {
              o.defaultViewDate = DPGlobal.parseDate(o.defaultViewDate, format, o.language, o.assumeNearbyYear);
            } else if (o.defaultViewDate) {
              var year = o.defaultViewDate.year || (/* @__PURE__ */ new Date()).getFullYear();
              var month = o.defaultViewDate.month || 0;
              var day = o.defaultViewDate.day || 1;
              o.defaultViewDate = UTCDate(year, month, day);
            } else {
              o.defaultViewDate = UTCToday();
            }
          },
          _applyEvents: function(evs) {
            for (var i = 0, el, ch, ev; i < evs.length; i++) {
              el = evs[i][0];
              if (evs[i].length === 2) {
                ch = undefined2;
                ev = evs[i][1];
              } else if (evs[i].length === 3) {
                ch = evs[i][1];
                ev = evs[i][2];
              }
              el.on(ev, ch);
            }
          },
          _unapplyEvents: function(evs) {
            for (var i = 0, el, ev, ch; i < evs.length; i++) {
              el = evs[i][0];
              if (evs[i].length === 2) {
                ch = undefined2;
                ev = evs[i][1];
              } else if (evs[i].length === 3) {
                ch = evs[i][1];
                ev = evs[i][2];
              }
              el.off(ev, ch);
            }
          },
          _buildEvents: function() {
            var events = {
              keyup: $2.proxy(function(e) {
                if ($2.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                  this.update();
              }, this),
              keydown: $2.proxy(this.keydown, this),
              paste: $2.proxy(this.paste, this)
            };
            if (this.o.showOnFocus === true) {
              events.focus = $2.proxy(this.show, this);
            }
            if (this.isInput) {
              this._events = [
                [this.element, events]
              ];
            } else if (this.component && this.inputField.length) {
              this._events = [
                // For components that are not readonly, allow keyboard nav
                [this.inputField, events],
                [this.component, {
                  click: $2.proxy(this.show, this)
                }]
              ];
            } else {
              this._events = [
                [this.element, {
                  click: $2.proxy(this.show, this),
                  keydown: $2.proxy(this.keydown, this)
                }]
              ];
            }
            this._events.push(
              // Component: listen for blur on element descendants
              [this.element, "*", {
                blur: $2.proxy(function(e) {
                  this._focused_from = e.target;
                }, this)
              }],
              // Input: listen for blur on element
              [this.element, {
                blur: $2.proxy(function(e) {
                  this._focused_from = e.target;
                }, this)
              }]
            );
            if (this.o.immediateUpdates) {
              this._events.push([this.element, {
                "changeYear changeMonth": $2.proxy(function(e) {
                  this.update(e.date);
                }, this)
              }]);
            }
            this._secondaryEvents = [
              [this.picker, {
                click: $2.proxy(this.click, this)
              }],
              [this.picker, ".prev, .next", {
                click: $2.proxy(this.navArrowsClick, this)
              }],
              [this.picker, ".day:not(.disabled)", {
                click: $2.proxy(this.dayCellClick, this)
              }],
              [$2(window), {
                resize: $2.proxy(this.place, this)
              }],
              [$2(document), {
                "mousedown touchstart": $2.proxy(function(e) {
                  if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline)) {
                    this.hide();
                  }
                }, this)
              }]
            ];
          },
          _attachEvents: function() {
            this._detachEvents();
            this._applyEvents(this._events);
          },
          _detachEvents: function() {
            this._unapplyEvents(this._events);
          },
          _attachSecondaryEvents: function() {
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents);
          },
          _detachSecondaryEvents: function() {
            this._unapplyEvents(this._secondaryEvents);
          },
          _trigger: function(event, altdate) {
            var date = altdate || this.dates.get(-1), local_date = this._utc_to_local(date);
            this.element.trigger({
              type: event,
              date: local_date,
              viewMode: this.viewMode,
              dates: $2.map(this.dates, this._utc_to_local),
              format: $2.proxy(function(ix, format) {
                if (arguments.length === 0) {
                  ix = this.dates.length - 1;
                  format = this.o.format;
                } else if (typeof ix === "string") {
                  format = ix;
                  ix = this.dates.length - 1;
                }
                format = format || this.o.format;
                var date2 = this.dates.get(ix);
                return DPGlobal.formatDate(date2, format, this.o.language);
              }, this)
            });
          },
          show: function() {
            if (this.inputField.is(":disabled") || this.inputField.prop("readonly") && this.o.enableOnReadonly === false)
              return;
            if (!this.isInline)
              this.picker.appendTo(this.o.container);
            this.place();
            this.picker.show();
            this._attachSecondaryEvents();
            this._trigger("show");
            if ((window.navigator.msMaxTouchPoints || "ontouchstart" in document) && this.o.disableTouchKeyboard) {
              $2(this.element).blur();
            }
            return this;
          },
          hide: function() {
            if (this.isInline || !this.picker.is(":visible"))
              return this;
            this.focusDate = null;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.setViewMode(this.o.startView);
            if (this.o.forceParse && this.inputField.val())
              this.setValue();
            this._trigger("hide");
            return this;
          },
          destroy: function() {
            this.hide();
            this._detachEvents();
            this._detachSecondaryEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
            if (!this.isInput) {
              delete this.element.data().date;
            }
            return this;
          },
          paste: function(e) {
            var dateString;
            if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types && $2.inArray("text/plain", e.originalEvent.clipboardData.types) !== -1) {
              dateString = e.originalEvent.clipboardData.getData("text/plain");
            } else if (window.clipboardData) {
              dateString = window.clipboardData.getData("Text");
            } else {
              return;
            }
            this.setDate(dateString);
            this.update();
            e.preventDefault();
          },
          _utc_to_local: function(utc) {
            if (!utc) {
              return utc;
            }
            var local = new Date(utc.getTime() + utc.getTimezoneOffset() * 6e4);
            if (local.getTimezoneOffset() !== utc.getTimezoneOffset()) {
              local = new Date(utc.getTime() + local.getTimezoneOffset() * 6e4);
            }
            return local;
          },
          _local_to_utc: function(local) {
            return local && new Date(local.getTime() - local.getTimezoneOffset() * 6e4);
          },
          _zero_time: function(local) {
            return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
          },
          _zero_utc_time: function(utc) {
            return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate());
          },
          getDates: function() {
            return $2.map(this.dates, this._utc_to_local);
          },
          getUTCDates: function() {
            return $2.map(this.dates, function(d) {
              return new Date(d);
            });
          },
          getDate: function() {
            return this._utc_to_local(this.getUTCDate());
          },
          getUTCDate: function() {
            var selected_date = this.dates.get(-1);
            if (selected_date !== undefined2) {
              return new Date(selected_date);
            } else {
              return null;
            }
          },
          clearDates: function() {
            this.inputField.val("");
            this._trigger("changeDate");
            this.update();
            if (this.o.autoclose) {
              this.hide();
            }
          },
          setDates: function() {
            var args = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            this.update.apply(this, args);
            this._trigger("changeDate");
            this.setValue();
            return this;
          },
          setUTCDates: function() {
            var args = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            this.setDates.apply(this, $2.map(args, this._utc_to_local));
            return this;
          },
          setDate: alias("setDates"),
          setUTCDate: alias("setUTCDates"),
          remove: alias("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),
          setValue: function() {
            var formatted = this.getFormattedDate();
            this.inputField.val(formatted);
            return this;
          },
          getFormattedDate: function(format) {
            if (format === undefined2)
              format = this.o.format;
            var lang = this.o.language;
            return $2.map(this.dates, function(d) {
              return DPGlobal.formatDate(d, format, lang);
            }).join(this.o.multidateSeparator);
          },
          getStartDate: function() {
            return this.o.startDate;
          },
          setStartDate: function(startDate) {
            this._process_options({ startDate });
            this.update();
            this.updateNavArrows();
            return this;
          },
          getEndDate: function() {
            return this.o.endDate;
          },
          setEndDate: function(endDate) {
            this._process_options({ endDate });
            this.update();
            this.updateNavArrows();
            return this;
          },
          setDaysOfWeekDisabled: function(daysOfWeekDisabled) {
            this._process_options({ daysOfWeekDisabled });
            this.update();
            return this;
          },
          setDaysOfWeekHighlighted: function(daysOfWeekHighlighted) {
            this._process_options({ daysOfWeekHighlighted });
            this.update();
            return this;
          },
          setDatesDisabled: function(datesDisabled) {
            this._process_options({ datesDisabled });
            this.update();
            return this;
          },
          place: function() {
            if (this.isInline)
              return this;
            var calendarWidth = this.picker.outerWidth(), calendarHeight = this.picker.outerHeight(), visualPadding = 10, container = $2(this.o.container), windowWidth = container.width(), scrollTop = this.o.container === "body" ? $2(document).scrollTop() : container.scrollTop(), appendOffset = container.offset();
            var parentsZindex = [0];
            this.element.parents().each(function() {
              var itemZIndex = $2(this).css("z-index");
              if (itemZIndex !== "auto" && Number(itemZIndex) !== 0)
                parentsZindex.push(Number(itemZIndex));
            });
            var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;
            var offset2 = this.component ? this.component.parent().offset() : this.element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
            var left3 = offset2.left - appendOffset.left;
            var top3 = offset2.top - appendOffset.top;
            if (this.o.container !== "body") {
              top3 += scrollTop;
            }
            this.picker.removeClass(
              "datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"
            );
            if (this.o.orientation.x !== "auto") {
              this.picker.addClass("datepicker-orient-" + this.o.orientation.x);
              if (this.o.orientation.x === "right")
                left3 -= calendarWidth - width;
            } else {
              if (offset2.left < 0) {
                this.picker.addClass("datepicker-orient-left");
                left3 -= offset2.left - visualPadding;
              } else if (left3 + calendarWidth > windowWidth) {
                this.picker.addClass("datepicker-orient-right");
                left3 += width - calendarWidth;
              } else {
                if (this.o.rtl) {
                  this.picker.addClass("datepicker-orient-right");
                } else {
                  this.picker.addClass("datepicker-orient-left");
                }
              }
            }
            var yorient = this.o.orientation.y, top_overflow;
            if (yorient === "auto") {
              top_overflow = -scrollTop + top3 - calendarHeight;
              yorient = top_overflow < 0 ? "bottom" : "top";
            }
            this.picker.addClass("datepicker-orient-" + yorient);
            if (yorient === "top")
              top3 -= calendarHeight + parseInt(this.picker.css("padding-top"));
            else
              top3 += height;
            if (this.o.rtl) {
              var right3 = windowWidth - (left3 + width);
              this.picker.css({
                top: top3,
                right: right3,
                zIndex
              });
            } else {
              this.picker.css({
                top: top3,
                left: left3,
                zIndex
              });
            }
            return this;
          },
          _allow_update: true,
          update: function() {
            if (!this._allow_update)
              return this;
            var oldDates = this.dates.copy(), dates2 = [], fromArgs = false;
            if (arguments.length) {
              $2.each(arguments, $2.proxy(function(i, date) {
                if (date instanceof Date)
                  date = this._local_to_utc(date);
                dates2.push(date);
              }, this));
              fromArgs = true;
            } else {
              dates2 = this.isInput ? this.element.val() : this.element.data("date") || this.inputField.val();
              if (dates2 && this.o.multidate)
                dates2 = dates2.split(this.o.multidateSeparator);
              else
                dates2 = [dates2];
              delete this.element.data().date;
            }
            dates2 = $2.map(dates2, $2.proxy(function(date) {
              return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);
            }, this));
            dates2 = $2.grep(dates2, $2.proxy(function(date) {
              return !this.dateWithinRange(date) || !date;
            }, this), true);
            this.dates.replace(dates2);
            if (this.o.updateViewDate) {
              if (this.dates.length)
                this.viewDate = new Date(this.dates.get(-1));
              else if (this.viewDate < this.o.startDate)
                this.viewDate = new Date(this.o.startDate);
              else if (this.viewDate > this.o.endDate)
                this.viewDate = new Date(this.o.endDate);
              else
                this.viewDate = this.o.defaultViewDate;
            }
            if (fromArgs) {
              this.setValue();
              this.element.change();
            } else if (this.dates.length) {
              if (String(oldDates) !== String(this.dates) && fromArgs) {
                this._trigger("changeDate");
                this.element.change();
              }
            }
            if (!this.dates.length && oldDates.length) {
              this._trigger("clearDate");
              this.element.change();
            }
            this.fill();
            return this;
          },
          fillDow: function() {
            if (this.o.showWeekDays) {
              var dowCnt = this.o.weekStart, html = "<tr>";
              if (this.o.calendarWeeks) {
                html += '<th class="cw">&#160;</th>';
              }
              while (dowCnt < this.o.weekStart + 7) {
                html += '<th class="dow';
                if ($2.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1)
                  html += " disabled";
                html += '">' + dates[this.o.language].daysMin[dowCnt++ % 7] + "</th>";
              }
              html += "</tr>";
              this.picker.find(".datepicker-days thead").append(html);
            }
          },
          fillMonths: function() {
            var localDate = this._utc_to_local(this.viewDate);
            var html = "";
            var focused;
            for (var i = 0; i < 12; i++) {
              focused = localDate && localDate.getMonth() === i ? " focused" : "";
              html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i] + "</span>";
            }
            this.picker.find(".datepicker-months td").html(html);
          },
          setRange: function(range) {
            if (!range || !range.length)
              delete this.range;
            else
              this.range = $2.map(range, function(d) {
                return d.valueOf();
              });
            this.fill();
          },
          getClassNames: function(date) {
            var cls = [], year = this.viewDate.getUTCFullYear(), month = this.viewDate.getUTCMonth(), today = UTCToday();
            if (date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month) {
              cls.push("old");
            } else if (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) {
              cls.push("new");
            }
            if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
              cls.push("focused");
            if (this.o.todayHighlight && isUTCEquals(date, today)) {
              cls.push("today");
            }
            if (this.dates.contains(date) !== -1)
              cls.push("active");
            if (!this.dateWithinRange(date)) {
              cls.push("disabled");
            }
            if (this.dateIsDisabled(date)) {
              cls.push("disabled", "disabled-date");
            }
            if ($2.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1) {
              cls.push("highlighted");
            }
            if (this.range) {
              if (date > this.range[0] && date < this.range[this.range.length - 1]) {
                cls.push("range");
              }
              if ($2.inArray(date.valueOf(), this.range) !== -1) {
                cls.push("selected");
              }
              if (date.valueOf() === this.range[0]) {
                cls.push("range-start");
              }
              if (date.valueOf() === this.range[this.range.length - 1]) {
                cls.push("range-end");
              }
            }
            return cls;
          },
          _fill_yearsView: function(selector, cssClass, factor, year, startYear, endYear, beforeFn) {
            var html = "";
            var step = factor / 10;
            var view = this.picker.find(selector);
            var startVal = Math.floor(year / factor) * factor;
            var endVal = startVal + step * 9;
            var focusedVal = Math.floor(this.viewDate.getFullYear() / step) * step;
            var selected = $2.map(this.dates, function(d) {
              return Math.floor(d.getUTCFullYear() / step) * step;
            });
            var classes, tooltip, before;
            for (var currVal = startVal - step; currVal <= endVal + step; currVal += step) {
              classes = [cssClass];
              tooltip = null;
              if (currVal === startVal - step) {
                classes.push("old");
              } else if (currVal === endVal + step) {
                classes.push("new");
              }
              if ($2.inArray(currVal, selected) !== -1) {
                classes.push("active");
              }
              if (currVal < startYear || currVal > endYear) {
                classes.push("disabled");
              }
              if (currVal === focusedVal) {
                classes.push("focused");
              }
              if (beforeFn !== $2.noop) {
                before = beforeFn(new Date(currVal, 0, 1));
                if (before === undefined2) {
                  before = {};
                } else if (typeof before === "boolean") {
                  before = { enabled: before };
                } else if (typeof before === "string") {
                  before = { classes: before };
                }
                if (before.enabled === false) {
                  classes.push("disabled");
                }
                if (before.classes) {
                  classes = classes.concat(before.classes.split(/\s+/));
                }
                if (before.tooltip) {
                  tooltip = before.tooltip;
                }
              }
              html += '<span class="' + classes.join(" ") + '"' + (tooltip ? ' title="' + tooltip + '"' : "") + ">" + currVal + "</span>";
            }
            view.find(".datepicker-switch").text(startVal + "-" + endVal);
            view.find("td").html(html);
          },
          fill: function() {
            var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, todaytxt = dates[this.o.language].today || dates["en"].today || "", cleartxt = dates[this.o.language].clear || dates["en"].clear || "", titleFormat = dates[this.o.language].titleFormat || dates["en"].titleFormat, todayDate = UTCToday(), titleBtnVisible = (this.o.todayBtn === true || this.o.todayBtn === "linked") && todayDate >= this.o.startDate && todayDate <= this.o.endDate && !this.weekOfDateIsDisabled(todayDate), tooltip, before;
            if (isNaN(year) || isNaN(month))
              return;
            this.picker.find(".datepicker-days .datepicker-switch").text(DPGlobal.formatDate(d, titleFormat, this.o.language));
            this.picker.find("tfoot .today").text(todaytxt).css("display", titleBtnVisible ? "table-cell" : "none");
            this.picker.find("tfoot .clear").text(cleartxt).css("display", this.o.clearBtn === true ? "table-cell" : "none");
            this.picker.find("thead .datepicker-title").text(this.o.title).css("display", typeof this.o.title === "string" && this.o.title !== "" ? "table-cell" : "none");
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month, 0), day = prevMonth.getUTCDate();
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);
            var nextMonth = new Date(prevMonth);
            if (prevMonth.getUTCFullYear() < 100) {
              nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());
            }
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var weekDay, clsName;
            while (prevMonth.valueOf() < nextMonth) {
              weekDay = prevMonth.getUTCDay();
              if (weekDay === this.o.weekStart) {
                html.push("<tr>");
                if (this.o.calendarWeeks) {
                  var ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5), th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5), yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5), calWeek = (th - yth) / 864e5 / 7 + 1;
                  html.push('<td class="cw">' + calWeek + "</td>");
                }
              }
              clsName = this.getClassNames(prevMonth);
              clsName.push("day");
              var content = prevMonth.getUTCDate();
              if (this.o.beforeShowDay !== $2.noop) {
                before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
                if (before === undefined2)
                  before = {};
                else if (typeof before === "boolean")
                  before = { enabled: before };
                else if (typeof before === "string")
                  before = { classes: before };
                if (before.enabled === false)
                  clsName.push("disabled");
                if (before.classes)
                  clsName = clsName.concat(before.classes.split(/\s+/));
                if (before.tooltip)
                  tooltip = before.tooltip;
                if (before.content)
                  content = before.content;
              }
              if (typeof $2.uniqueSort === "function") {
                clsName = $2.uniqueSort(clsName);
              } else {
                clsName = $2.unique(clsName);
              }
              html.push('<td class="' + clsName.join(" ") + '"' + (tooltip ? ' title="' + tooltip + '"' : "") + ' data-date="' + prevMonth.getTime().toString() + '">' + content + "</td>");
              tooltip = null;
              if (weekDay === this.o.weekEnd) {
                html.push("</tr>");
              }
              prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            this.picker.find(".datepicker-days tbody").html(html.join(""));
            var monthsTitle = dates[this.o.language].monthsTitle || dates["en"].monthsTitle || "Months";
            var months = this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode < 2 ? monthsTitle : year).end().find("tbody span").removeClass("active");
            $2.each(this.dates, function(i, d2) {
              if (d2.getUTCFullYear() === year)
                months.eq(d2.getUTCMonth()).addClass("active");
            });
            if (year < startYear || year > endYear) {
              months.addClass("disabled");
            }
            if (year === startYear) {
              months.slice(0, startMonth).addClass("disabled");
            }
            if (year === endYear) {
              months.slice(endMonth + 1).addClass("disabled");
            }
            if (this.o.beforeShowMonth !== $2.noop) {
              var that = this;
              $2.each(months, function(i, month2) {
                var moDate = new Date(year, i, 1);
                var before2 = that.o.beforeShowMonth(moDate);
                if (before2 === undefined2)
                  before2 = {};
                else if (typeof before2 === "boolean")
                  before2 = { enabled: before2 };
                else if (typeof before2 === "string")
                  before2 = { classes: before2 };
                if (before2.enabled === false && !$2(month2).hasClass("disabled"))
                  $2(month2).addClass("disabled");
                if (before2.classes)
                  $2(month2).addClass(before2.classes);
                if (before2.tooltip)
                  $2(month2).prop("title", before2.tooltip);
              });
            }
            this._fill_yearsView(
              ".datepicker-years",
              "year",
              10,
              year,
              startYear,
              endYear,
              this.o.beforeShowYear
            );
            this._fill_yearsView(
              ".datepicker-decades",
              "decade",
              100,
              year,
              startYear,
              endYear,
              this.o.beforeShowDecade
            );
            this._fill_yearsView(
              ".datepicker-centuries",
              "century",
              1e3,
              year,
              startYear,
              endYear,
              this.o.beforeShowCentury
            );
          },
          updateNavArrows: function() {
            if (!this._allow_update)
              return;
            var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, prevIsDisabled, nextIsDisabled, factor = 1;
            switch (this.viewMode) {
              case 4:
                factor *= 10;
              case 3:
                factor *= 10;
              case 2:
                factor *= 10;
              case 1:
                prevIsDisabled = Math.floor(year / factor) * factor <= startYear;
                nextIsDisabled = Math.floor(year / factor) * factor + factor > endYear;
                break;
              case 0:
                prevIsDisabled = year <= startYear && month <= startMonth;
                nextIsDisabled = year >= endYear && month >= endMonth;
                break;
            }
            this.picker.find(".prev").toggleClass("disabled", prevIsDisabled);
            this.picker.find(".next").toggleClass("disabled", nextIsDisabled);
          },
          click: function(e) {
            e.preventDefault();
            e.stopPropagation();
            var target, dir, day, year, month;
            target = $2(e.target);
            if (target.hasClass("datepicker-switch") && this.viewMode !== this.o.maxViewMode) {
              this.setViewMode(this.viewMode + 1);
            }
            if (target.hasClass("today") && !target.hasClass("day")) {
              this.setViewMode(0);
              this._setDate(UTCToday(), this.o.todayBtn === "linked" ? null : "view");
            }
            if (target.hasClass("clear")) {
              this.clearDates();
            }
            if (!target.hasClass("disabled")) {
              if (target.hasClass("month") || target.hasClass("year") || target.hasClass("decade") || target.hasClass("century")) {
                this.viewDate.setUTCDate(1);
                day = 1;
                if (this.viewMode === 1) {
                  month = target.parent().find("span").index(target);
                  year = this.viewDate.getUTCFullYear();
                  this.viewDate.setUTCMonth(month);
                } else {
                  month = 0;
                  year = Number(target.text());
                  this.viewDate.setUTCFullYear(year);
                }
                this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate);
                if (this.viewMode === this.o.minViewMode) {
                  this._setDate(UTCDate(year, month, day));
                } else {
                  this.setViewMode(this.viewMode - 1);
                  this.fill();
                }
              }
            }
            if (this.picker.is(":visible") && this._focused_from) {
              this._focused_from.focus();
            }
            delete this._focused_from;
          },
          dayCellClick: function(e) {
            var $target = $2(e.currentTarget);
            var timestamp = $target.data("date");
            var date = new Date(timestamp);
            if (this.o.updateViewDate) {
              if (date.getUTCFullYear() !== this.viewDate.getUTCFullYear()) {
                this._trigger("changeYear", this.viewDate);
              }
              if (date.getUTCMonth() !== this.viewDate.getUTCMonth()) {
                this._trigger("changeMonth", this.viewDate);
              }
            }
            this._setDate(date);
          },
          // Clicked on prev or next
          navArrowsClick: function(e) {
            var $target = $2(e.currentTarget);
            var dir = $target.hasClass("prev") ? -1 : 1;
            if (this.viewMode !== 0) {
              dir *= DPGlobal.viewModes[this.viewMode].navStep * 12;
            }
            this.viewDate = this.moveMonth(this.viewDate, dir);
            this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate);
            this.fill();
          },
          _toggle_multidate: function(date) {
            var ix = this.dates.contains(date);
            if (!date) {
              this.dates.clear();
            }
            if (ix !== -1) {
              if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) {
                this.dates.remove(ix);
              }
            } else if (this.o.multidate === false) {
              this.dates.clear();
              this.dates.push(date);
            } else {
              this.dates.push(date);
            }
            if (typeof this.o.multidate === "number")
              while (this.dates.length > this.o.multidate)
                this.dates.remove(0);
          },
          _setDate: function(date, which) {
            if (!which || which === "date")
              this._toggle_multidate(date && new Date(date));
            if (!which && this.o.updateViewDate || which === "view")
              this.viewDate = date && new Date(date);
            this.fill();
            this.setValue();
            if (!which || which !== "view") {
              this._trigger("changeDate");
            }
            this.inputField.trigger("change");
            if (this.o.autoclose && (!which || which === "date")) {
              this.hide();
            }
          },
          moveDay: function(date, dir) {
            var newDate = new Date(date);
            newDate.setUTCDate(date.getUTCDate() + dir);
            return newDate;
          },
          moveWeek: function(date, dir) {
            return this.moveDay(date, dir * 7);
          },
          moveMonth: function(date, dir) {
            if (!isValidDate(date))
              return this.o.defaultViewDate;
            if (!dir)
              return date;
            var new_date = new Date(date.valueOf()), day = new_date.getUTCDate(), month = new_date.getUTCMonth(), mag = Math.abs(dir), new_month, test;
            dir = dir > 0 ? 1 : -1;
            if (mag === 1) {
              test = dir === -1 ? function() {
                return new_date.getUTCMonth() === month;
              } : function() {
                return new_date.getUTCMonth() !== new_month;
              };
              new_month = month + dir;
              new_date.setUTCMonth(new_month);
              new_month = (new_month + 12) % 12;
            } else {
              for (var i = 0; i < mag; i++)
                new_date = this.moveMonth(new_date, dir);
              new_month = new_date.getUTCMonth();
              new_date.setUTCDate(day);
              test = function() {
                return new_month !== new_date.getUTCMonth();
              };
            }
            while (test()) {
              new_date.setUTCDate(--day);
              new_date.setUTCMonth(new_month);
            }
            return new_date;
          },
          moveYear: function(date, dir) {
            return this.moveMonth(date, dir * 12);
          },
          moveAvailableDate: function(date, dir, fn2) {
            do {
              date = this[fn2](date, dir);
              if (!this.dateWithinRange(date))
                return false;
              fn2 = "moveDay";
            } while (this.dateIsDisabled(date));
            return date;
          },
          weekOfDateIsDisabled: function(date) {
            return $2.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
          },
          dateIsDisabled: function(date) {
            return this.weekOfDateIsDisabled(date) || $2.grep(this.o.datesDisabled, function(d) {
              return isUTCEquals(date, d);
            }).length > 0;
          },
          dateWithinRange: function(date) {
            return date >= this.o.startDate && date <= this.o.endDate;
          },
          keydown: function(e) {
            if (!this.picker.is(":visible")) {
              if (e.keyCode === 40 || e.keyCode === 27) {
                this.show();
                e.stopPropagation();
              }
              return;
            }
            var dateChanged = false, dir, newViewDate, focusDate = this.focusDate || this.viewDate;
            switch (e.keyCode) {
              case 27:
                if (this.focusDate) {
                  this.focusDate = null;
                  this.viewDate = this.dates.get(-1) || this.viewDate;
                  this.fill();
                } else
                  this.hide();
                e.preventDefault();
                e.stopPropagation();
                break;
              case 37:
              case 38:
              case 39:
              case 40:
                if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
                  break;
                dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;
                if (this.viewMode === 0) {
                  if (e.ctrlKey) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveYear");
                    if (newViewDate)
                      this._trigger("changeYear", this.viewDate);
                  } else if (e.shiftKey) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveMonth");
                    if (newViewDate)
                      this._trigger("changeMonth", this.viewDate);
                  } else if (e.keyCode === 37 || e.keyCode === 39) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveDay");
                  } else if (!this.weekOfDateIsDisabled(focusDate)) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveWeek");
                  }
                } else if (this.viewMode === 1) {
                  if (e.keyCode === 38 || e.keyCode === 40) {
                    dir = dir * 4;
                  }
                  newViewDate = this.moveAvailableDate(focusDate, dir, "moveMonth");
                } else if (this.viewMode === 2) {
                  if (e.keyCode === 38 || e.keyCode === 40) {
                    dir = dir * 4;
                  }
                  newViewDate = this.moveAvailableDate(focusDate, dir, "moveYear");
                }
                if (newViewDate) {
                  this.focusDate = this.viewDate = newViewDate;
                  this.setValue();
                  this.fill();
                  e.preventDefault();
                }
                break;
              case 13:
                if (!this.o.forceParse)
                  break;
                focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
                if (this.o.keyboardNavigation) {
                  this._toggle_multidate(focusDate);
                  dateChanged = true;
                }
                this.focusDate = null;
                this.viewDate = this.dates.get(-1) || this.viewDate;
                this.setValue();
                this.fill();
                if (this.picker.is(":visible")) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (this.o.autoclose)
                    this.hide();
                }
                break;
              case 9:
                this.focusDate = null;
                this.viewDate = this.dates.get(-1) || this.viewDate;
                this.fill();
                this.hide();
                break;
            }
            if (dateChanged) {
              if (this.dates.length)
                this._trigger("changeDate");
              else
                this._trigger("clearDate");
              this.inputField.trigger("change");
            }
          },
          setViewMode: function(viewMode) {
            this.viewMode = viewMode;
            this.picker.children("div").hide().filter(".datepicker-" + DPGlobal.viewModes[this.viewMode].clsName).show();
            this.updateNavArrows();
            this._trigger("changeViewMode", new Date(this.viewDate));
          }
        };
        var DateRangePicker = function(element, options) {
          $2.data(element, "datepicker", this);
          this.element = $2(element);
          this.inputs = $2.map(options.inputs, function(i) {
            return i.jquery ? i[0] : i;
          });
          delete options.inputs;
          this.keepEmptyValues = options.keepEmptyValues;
          delete options.keepEmptyValues;
          datepickerPlugin.call($2(this.inputs), options).on("changeDate", $2.proxy(this.dateUpdated, this));
          this.pickers = $2.map(this.inputs, function(i) {
            return $2.data(i, "datepicker");
          });
          this.updateDates();
        };
        DateRangePicker.prototype = {
          updateDates: function() {
            this.dates = $2.map(this.pickers, function(i) {
              return i.getUTCDate();
            });
            this.updateRanges();
          },
          updateRanges: function() {
            var range = $2.map(this.dates, function(d) {
              return d.valueOf();
            });
            $2.each(this.pickers, function(i, p) {
              p.setRange(range);
            });
          },
          clearDates: function() {
            $2.each(this.pickers, function(i, p) {
              p.clearDates();
            });
          },
          dateUpdated: function(e) {
            if (this.updating)
              return;
            this.updating = true;
            var dp = $2.data(e.target, "datepicker");
            if (dp === undefined2) {
              return;
            }
            var new_date = dp.getUTCDate(), keep_empty_values = this.keepEmptyValues, i = $2.inArray(e.target, this.inputs), j = i - 1, k = i + 1, l = this.inputs.length;
            if (i === -1)
              return;
            $2.each(this.pickers, function(i2, p) {
              if (!p.getUTCDate() && (p === dp || !keep_empty_values))
                p.setUTCDate(new_date);
            });
            if (new_date < this.dates[j]) {
              while (j >= 0 && new_date < this.dates[j] && (this.pickers[j].element.val() || "").length > 0) {
                this.pickers[j--].setUTCDate(new_date);
              }
            } else if (new_date > this.dates[k]) {
              while (k < l && new_date > this.dates[k] && (this.pickers[k].element.val() || "").length > 0) {
                this.pickers[k++].setUTCDate(new_date);
              }
            }
            this.updateDates();
            delete this.updating;
          },
          destroy: function() {
            $2.map(this.pickers, function(p) {
              p.destroy();
            });
            $2(this.inputs).off("changeDate", this.dateUpdated);
            delete this.element.data().datepicker;
          },
          remove: alias("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")
        };
        function opts_from_el(el, prefix) {
          var data = $2(el).data(), out = {}, inkey, replace = new RegExp("^" + prefix.toLowerCase() + "([A-Z])");
          prefix = new RegExp("^" + prefix.toLowerCase());
          function re_lower(_, a) {
            return a.toLowerCase();
          }
          for (var key in data)
            if (prefix.test(key)) {
              inkey = key.replace(replace, re_lower);
              out[inkey] = data[key];
            }
          return out;
        }
        function opts_from_locale(lang) {
          var out = {};
          if (!dates[lang]) {
            lang = lang.split("-")[0];
            if (!dates[lang])
              return;
          }
          var d = dates[lang];
          $2.each(locale_opts, function(i, k) {
            if (k in d)
              out[k] = d[k];
          });
          return out;
        }
        var old = $2.fn.datepicker;
        var datepickerPlugin = function(option) {
          var args = Array.apply(null, arguments);
          args.shift();
          var internal_return;
          this.each(function() {
            var $this = $2(this), data = $this.data("datepicker"), options = typeof option === "object" && option;
            if (!data) {
              var elopts = opts_from_el(this, "date"), xopts = $2.extend({}, defaults, elopts, options), locopts = opts_from_locale(xopts.language), opts = $2.extend({}, defaults, locopts, elopts, options);
              if ($this.hasClass("input-daterange") || opts.inputs) {
                $2.extend(opts, {
                  inputs: opts.inputs || $this.find("input").toArray()
                });
                data = new DateRangePicker(this, opts);
              } else {
                data = new Datepicker(this, opts);
              }
              $this.data("datepicker", data);
            }
            if (typeof option === "string" && typeof data[option] === "function") {
              internal_return = data[option].apply(data, args);
            }
          });
          if (internal_return === undefined2 || internal_return instanceof Datepicker || internal_return instanceof DateRangePicker)
            return this;
          if (this.length > 1)
            throw new Error("Using only allowed for the collection of a single element (" + option + " function)");
          else
            return internal_return;
        };
        $2.fn.datepicker = datepickerPlugin;
        var defaults = $2.fn.datepicker.defaults = {
          assumeNearbyYear: false,
          autoclose: false,
          beforeShowDay: $2.noop,
          beforeShowMonth: $2.noop,
          beforeShowYear: $2.noop,
          beforeShowDecade: $2.noop,
          beforeShowCentury: $2.noop,
          calendarWeeks: false,
          clearBtn: false,
          toggleActive: false,
          daysOfWeekDisabled: [],
          daysOfWeekHighlighted: [],
          datesDisabled: [],
          endDate: Infinity,
          forceParse: true,
          format: "mm/dd/yyyy",
          isInline: null,
          keepEmptyValues: false,
          keyboardNavigation: true,
          language: "en",
          minViewMode: 0,
          maxViewMode: 4,
          multidate: false,
          multidateSeparator: ",",
          orientation: "auto",
          rtl: false,
          startDate: -Infinity,
          startView: 0,
          todayBtn: false,
          todayHighlight: false,
          updateViewDate: true,
          weekStart: 0,
          disableTouchKeyboard: false,
          enableOnReadonly: true,
          showOnFocus: true,
          zIndexOffset: 10,
          container: "body",
          immediateUpdates: false,
          title: "",
          templates: {
            leftArrow: "&#x00AB;",
            rightArrow: "&#x00BB;"
          },
          showWeekDays: true
        };
        var locale_opts = $2.fn.datepicker.locale_opts = [
          "format",
          "rtl",
          "weekStart"
        ];
        $2.fn.datepicker.Constructor = Datepicker;
        var dates = $2.fn.datepicker.dates = {
          en: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            clear: "Clear",
            titleFormat: "MM yyyy"
          }
        };
        var DPGlobal = {
          viewModes: [
            {
              names: ["days", "month"],
              clsName: "days",
              e: "changeMonth"
            },
            {
              names: ["months", "year"],
              clsName: "months",
              e: "changeYear",
              navStep: 1
            },
            {
              names: ["years", "decade"],
              clsName: "years",
              e: "changeDecade",
              navStep: 10
            },
            {
              names: ["decades", "century"],
              clsName: "decades",
              e: "changeCentury",
              navStep: 100
            },
            {
              names: ["centuries", "millennium"],
              clsName: "centuries",
              e: "changeMillennium",
              navStep: 1e3
            }
          ],
          validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
          nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
          parseFormat: function(format) {
            if (typeof format.toValue === "function" && typeof format.toDisplay === "function")
              return format;
            var separators = format.replace(this.validParts, "\0").split("\0"), parts = format.match(this.validParts);
            if (!separators || !separators.length || !parts || parts.length === 0) {
              throw new Error("Invalid date format.");
            }
            return { separators, parts };
          },
          parseDate: function(date, format, language, assumeNearby) {
            if (!date)
              return undefined2;
            if (date instanceof Date)
              return date;
            if (typeof format === "string")
              format = DPGlobal.parseFormat(format);
            if (format.toValue)
              return format.toValue(date, format, language);
            var fn_map = {
              d: "moveDay",
              m: "moveMonth",
              w: "moveWeek",
              y: "moveYear"
            }, dateAliases = {
              yesterday: "-1d",
              today: "+0d",
              tomorrow: "+1d"
            }, parts, part, dir, i, fn2;
            if (date in dateAliases) {
              date = dateAliases[date];
            }
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(date)) {
              parts = date.match(/([\-+]\d+)([dmwy])/gi);
              date = /* @__PURE__ */ new Date();
              for (i = 0; i < parts.length; i++) {
                part = parts[i].match(/([\-+]\d+)([dmwy])/i);
                dir = Number(part[1]);
                fn2 = fn_map[part[2].toLowerCase()];
                date = Datepicker.prototype[fn2](date, dir);
              }
              return Datepicker.prototype._zero_utc_time(date);
            }
            parts = date && date.match(this.nonpunctuation) || [];
            function applyNearbyYear(year, threshold) {
              if (threshold === true)
                threshold = 10;
              if (year < 100) {
                year += 2e3;
                if (year > (/* @__PURE__ */ new Date()).getFullYear() + threshold) {
                  year -= 100;
                }
              }
              return year;
            }
            var parsed = {}, setters_order = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"], setters_map = {
              yyyy: function(d, v) {
                return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
              },
              m: function(d, v) {
                if (isNaN(d))
                  return d;
                v -= 1;
                while (v < 0)
                  v += 12;
                v %= 12;
                d.setUTCMonth(v);
                while (d.getUTCMonth() !== v)
                  d.setUTCDate(d.getUTCDate() - 1);
                return d;
              },
              d: function(d, v) {
                return d.setUTCDate(v);
              }
            }, val, filtered;
            setters_map["yy"] = setters_map["yyyy"];
            setters_map["M"] = setters_map["MM"] = setters_map["mm"] = setters_map["m"];
            setters_map["dd"] = setters_map["d"];
            date = UTCToday();
            var fparts = format.parts.slice();
            if (parts.length !== fparts.length) {
              fparts = $2(fparts).filter(function(i2, p) {
                return $2.inArray(p, setters_order) !== -1;
              }).toArray();
            }
            function match_part() {
              var m2 = this.slice(0, parts[i].length), p = parts[i].slice(0, m2.length);
              return m2.toLowerCase() === p.toLowerCase();
            }
            if (parts.length === fparts.length) {
              var cnt;
              for (i = 0, cnt = fparts.length; i < cnt; i++) {
                val = parseInt(parts[i], 10);
                part = fparts[i];
                if (isNaN(val)) {
                  switch (part) {
                    case "MM":
                      filtered = $2(dates[language].months).filter(match_part);
                      val = $2.inArray(filtered[0], dates[language].months) + 1;
                      break;
                    case "M":
                      filtered = $2(dates[language].monthsShort).filter(match_part);
                      val = $2.inArray(filtered[0], dates[language].monthsShort) + 1;
                      break;
                  }
                }
                parsed[part] = val;
              }
              var _date, s;
              for (i = 0; i < setters_order.length; i++) {
                s = setters_order[i];
                if (s in parsed && !isNaN(parsed[s])) {
                  _date = new Date(date);
                  setters_map[s](_date, parsed[s]);
                  if (!isNaN(_date))
                    date = _date;
                }
              }
            }
            return date;
          },
          formatDate: function(date, format, language) {
            if (!date)
              return "";
            if (typeof format === "string")
              format = DPGlobal.parseFormat(format);
            if (format.toDisplay)
              return format.toDisplay(date, format, language);
            var val = {
              d: date.getUTCDate(),
              D: dates[language].daysShort[date.getUTCDay()],
              DD: dates[language].days[date.getUTCDay()],
              m: date.getUTCMonth() + 1,
              M: dates[language].monthsShort[date.getUTCMonth()],
              MM: dates[language].months[date.getUTCMonth()],
              yy: date.getUTCFullYear().toString().substring(2),
              yyyy: date.getUTCFullYear()
            };
            val.dd = (val.d < 10 ? "0" : "") + val.d;
            val.mm = (val.m < 10 ? "0" : "") + val.m;
            date = [];
            var seps = $2.extend([], format.separators);
            for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {
              if (seps.length)
                date.push(seps.shift());
              date.push(val[format.parts[i]]);
            }
            return date.join("");
          },
          headTemplate: '<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">' + defaults.templates.leftArrow + '</th><th colspan="5" class="datepicker-switch"></th><th class="next">' + defaults.templates.rightArrow + "</th></tr></thead>",
          contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
          footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
        };
        DPGlobal.template = '<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">' + DPGlobal.headTemplate + "<tbody></tbody>" + DPGlobal.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-decades"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-centuries"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + "</table></div></div>";
        $2.fn.datepicker.DPGlobal = DPGlobal;
        $2.fn.datepicker.noConflict = function() {
          $2.fn.datepicker = old;
          return this;
        };
        $2.fn.datepicker.version = "1.10.0";
        $2.fn.datepicker.deprecated = function(msg) {
          var console2 = window.console;
          if (console2 && console2.warn) {
            console2.warn("DEPRECATED: " + msg);
          }
        };
        $2(document).on(
          "focus.datepicker.data-api click.datepicker.data-api",
          '[data-provide="datepicker"]',
          function(e) {
            var $this = $2(this);
            if ($this.data("datepicker"))
              return;
            e.preventDefault();
            datepickerPlugin.call($this, "show");
          }
        );
        $2(function() {
          datepickerPlugin.call($2('[data-provide="datepicker-inline"]'));
        });
      });
    }
  });

  // ../../node_modules/apexcharts/dist/apexcharts.common.js
  var require_apexcharts_common = __commonJS({
    "../../node_modules/apexcharts/dist/apexcharts.common.js"(exports, module) {
      "use strict";
      function t(t2, e2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var a2 = Object.getOwnPropertySymbols(t2);
          e2 && (a2 = a2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), i2.push.apply(i2, a2);
        }
        return i2;
      }
      function e(e2) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var a2 = null != arguments[i2] ? arguments[i2] : {};
          i2 % 2 ? t(Object(a2), true).forEach(function(t2) {
            o(e2, t2, a2[t2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(a2)) : t(Object(a2)).forEach(function(t2) {
            Object.defineProperty(e2, t2, Object.getOwnPropertyDescriptor(a2, t2));
          });
        }
        return e2;
      }
      function i(t2) {
        return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
          return typeof t3;
        } : function(t3) {
          return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
        }, i(t2);
      }
      function a(t2, e2) {
        if (!(t2 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }
      function s(t2, e2) {
        for (var i2 = 0; i2 < e2.length; i2++) {
          var a2 = e2[i2];
          a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(t2, a2.key, a2);
        }
      }
      function r(t2, e2, i2) {
        return e2 && s(t2.prototype, e2), i2 && s(t2, i2), t2;
      }
      function o(t2, e2, i2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
      }
      function n(t2, e2) {
        if ("function" != typeof e2 && null !== e2)
          throw new TypeError("Super expression must either be null or a function");
        t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && h(t2, e2);
      }
      function l(t2) {
        return l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
          return t3.__proto__ || Object.getPrototypeOf(t3);
        }, l(t2);
      }
      function h(t2, e2) {
        return h = Object.setPrototypeOf || function(t3, e3) {
          return t3.__proto__ = e3, t3;
        }, h(t2, e2);
      }
      function c(t2) {
        if (void 0 === t2)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t2;
      }
      function d(t2) {
        var e2 = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }();
        return function() {
          var i2, a2 = l(t2);
          if (e2) {
            var s2 = l(this).constructor;
            i2 = Reflect.construct(a2, arguments, s2);
          } else
            i2 = a2.apply(this, arguments);
          return function(t3, e3) {
            if (e3 && ("object" == typeof e3 || "function" == typeof e3))
              return e3;
            if (void 0 !== e3)
              throw new TypeError("Derived constructors may only return object or undefined");
            return c(t3);
          }(this, i2);
        };
      }
      function g(t2, e2) {
        return function(t3) {
          if (Array.isArray(t3))
            return t3;
        }(t2) || function(t3, e3) {
          var i2 = null == t3 ? null : "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
          if (null == i2)
            return;
          var a2, s2, r2 = [], o2 = true, n2 = false;
          try {
            for (i2 = i2.call(t3); !(o2 = (a2 = i2.next()).done) && (r2.push(a2.value), !e3 || r2.length !== e3); o2 = true)
              ;
          } catch (t4) {
            n2 = true, s2 = t4;
          } finally {
            try {
              o2 || null == i2.return || i2.return();
            } finally {
              if (n2)
                throw s2;
            }
          }
          return r2;
        }(t2, e2) || p(t2, e2) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function u(t2) {
        return function(t3) {
          if (Array.isArray(t3))
            return f(t3);
        }(t2) || function(t3) {
          if ("undefined" != typeof Symbol && null != t3[Symbol.iterator] || null != t3["@@iterator"])
            return Array.from(t3);
        }(t2) || p(t2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function p(t2, e2) {
        if (t2) {
          if ("string" == typeof t2)
            return f(t2, e2);
          var i2 = Object.prototype.toString.call(t2).slice(8, -1);
          return "Object" === i2 && t2.constructor && (i2 = t2.constructor.name), "Map" === i2 || "Set" === i2 ? Array.from(t2) : "Arguments" === i2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i2) ? f(t2, e2) : void 0;
        }
      }
      function f(t2, e2) {
        (null == e2 || e2 > t2.length) && (e2 = t2.length);
        for (var i2 = 0, a2 = new Array(e2); i2 < e2; i2++)
          a2[i2] = t2[i2];
        return a2;
      }
      var x = function() {
        function t2() {
          a(this, t2);
        }
        return r(t2, [{ key: "shadeRGBColor", value: function(t3, e2) {
          var i2 = e2.split(","), a2 = t3 < 0 ? 0 : 255, s2 = t3 < 0 ? -1 * t3 : t3, r2 = parseInt(i2[0].slice(4), 10), o2 = parseInt(i2[1], 10), n2 = parseInt(i2[2], 10);
          return "rgb(" + (Math.round((a2 - r2) * s2) + r2) + "," + (Math.round((a2 - o2) * s2) + o2) + "," + (Math.round((a2 - n2) * s2) + n2) + ")";
        } }, { key: "shadeHexColor", value: function(t3, e2) {
          var i2 = parseInt(e2.slice(1), 16), a2 = t3 < 0 ? 0 : 255, s2 = t3 < 0 ? -1 * t3 : t3, r2 = i2 >> 16, o2 = i2 >> 8 & 255, n2 = 255 & i2;
          return "#" + (16777216 + 65536 * (Math.round((a2 - r2) * s2) + r2) + 256 * (Math.round((a2 - o2) * s2) + o2) + (Math.round((a2 - n2) * s2) + n2)).toString(16).slice(1);
        } }, { key: "shadeColor", value: function(e2, i2) {
          return t2.isColorHex(i2) ? this.shadeHexColor(e2, i2) : this.shadeRGBColor(e2, i2);
        } }], [{ key: "bind", value: function(t3, e2) {
          return function() {
            return t3.apply(e2, arguments);
          };
        } }, { key: "isObject", value: function(t3) {
          return t3 && "object" === i(t3) && !Array.isArray(t3) && null != t3;
        } }, { key: "is", value: function(t3, e2) {
          return Object.prototype.toString.call(e2) === "[object " + t3 + "]";
        } }, { key: "listToArray", value: function(t3) {
          var e2, i2 = [];
          for (e2 = 0; e2 < t3.length; e2++)
            i2[e2] = t3[e2];
          return i2;
        } }, { key: "extend", value: function(t3, e2) {
          var i2 = this;
          "function" != typeof Object.assign && (Object.assign = function(t4) {
            if (null == t4)
              throw new TypeError("Cannot convert undefined or null to object");
            for (var e3 = Object(t4), i3 = 1; i3 < arguments.length; i3++) {
              var a3 = arguments[i3];
              if (null != a3)
                for (var s2 in a3)
                  a3.hasOwnProperty(s2) && (e3[s2] = a3[s2]);
            }
            return e3;
          });
          var a2 = Object.assign({}, t3);
          return this.isObject(t3) && this.isObject(e2) && Object.keys(e2).forEach(function(s2) {
            i2.isObject(e2[s2]) && s2 in t3 ? a2[s2] = i2.extend(t3[s2], e2[s2]) : Object.assign(a2, o({}, s2, e2[s2]));
          }), a2;
        } }, { key: "extendArray", value: function(e2, i2) {
          var a2 = [];
          return e2.map(function(e3) {
            a2.push(t2.extend(i2, e3));
          }), e2 = a2;
        } }, { key: "monthMod", value: function(t3) {
          return t3 % 12;
        } }, { key: "clone", value: function(e2) {
          if (t2.is("Array", e2)) {
            for (var a2 = [], s2 = 0; s2 < e2.length; s2++)
              a2[s2] = this.clone(e2[s2]);
            return a2;
          }
          if (t2.is("Null", e2))
            return null;
          if (t2.is("Date", e2))
            return e2;
          if ("object" === i(e2)) {
            var r2 = {};
            for (var o2 in e2)
              e2.hasOwnProperty(o2) && (r2[o2] = this.clone(e2[o2]));
            return r2;
          }
          return e2;
        } }, { key: "log10", value: function(t3) {
          return Math.log(t3) / Math.LN10;
        } }, { key: "roundToBase10", value: function(t3) {
          return Math.pow(10, Math.floor(Math.log10(t3)));
        } }, { key: "roundToBase", value: function(t3, e2) {
          return Math.pow(e2, Math.floor(Math.log(t3) / Math.log(e2)));
        } }, { key: "parseNumber", value: function(t3) {
          return null === t3 ? t3 : parseFloat(t3);
        } }, { key: "stripNumber", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
          return Number.isInteger(t3) ? t3 : parseFloat(t3.toPrecision(e2));
        } }, { key: "randomId", value: function() {
          return (Math.random() + 1).toString(36).substring(4);
        } }, { key: "noExponents", value: function(t3) {
          var e2 = String(t3).split(/[eE]/);
          if (1 === e2.length)
            return e2[0];
          var i2 = "", a2 = t3 < 0 ? "-" : "", s2 = e2[0].replace(".", ""), r2 = Number(e2[1]) + 1;
          if (r2 < 0) {
            for (i2 = a2 + "0."; r2++; )
              i2 += "0";
            return i2 + s2.replace(/^-/, "");
          }
          for (r2 -= s2.length; r2--; )
            i2 += "0";
          return s2 + i2;
        } }, { key: "getDimensions", value: function(t3) {
          var e2 = getComputedStyle(t3, null), i2 = t3.clientHeight, a2 = t3.clientWidth;
          return i2 -= parseFloat(e2.paddingTop) + parseFloat(e2.paddingBottom), [a2 -= parseFloat(e2.paddingLeft) + parseFloat(e2.paddingRight), i2];
        } }, { key: "getBoundingClientRect", value: function(t3) {
          var e2 = t3.getBoundingClientRect();
          return { top: e2.top, right: e2.right, bottom: e2.bottom, left: e2.left, width: t3.clientWidth, height: t3.clientHeight, x: e2.left, y: e2.top };
        } }, { key: "getLargestStringFromArr", value: function(t3) {
          return t3.reduce(function(t4, e2) {
            return Array.isArray(e2) && (e2 = e2.reduce(function(t5, e3) {
              return t5.length > e3.length ? t5 : e3;
            })), t4.length > e2.length ? t4 : e2;
          }, 0);
        } }, { key: "hexToRgba", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
          "#" !== t3.substring(0, 1) && (t3 = "#999999");
          var i2 = t3.replace("#", "");
          i2 = i2.match(new RegExp("(.{" + i2.length / 3 + "})", "g"));
          for (var a2 = 0; a2 < i2.length; a2++)
            i2[a2] = parseInt(1 === i2[a2].length ? i2[a2] + i2[a2] : i2[a2], 16);
          return void 0 !== e2 && i2.push(e2), "rgba(" + i2.join(",") + ")";
        } }, { key: "getOpacityFromRGBA", value: function(t3) {
          return parseFloat(t3.replace(/^.*,(.+)\)/, "$1"));
        } }, { key: "rgb2hex", value: function(t3) {
          return (t3 = t3.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t3.length ? "#" + ("0" + parseInt(t3[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[3], 10).toString(16)).slice(-2) : "";
        } }, { key: "isColorHex", value: function(t3) {
          return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t3);
        } }, { key: "getPolygonPos", value: function(t3, e2) {
          for (var i2 = [], a2 = 2 * Math.PI / e2, s2 = 0; s2 < e2; s2++) {
            var r2 = {};
            r2.x = t3 * Math.sin(s2 * a2), r2.y = -t3 * Math.cos(s2 * a2), i2.push(r2);
          }
          return i2;
        } }, { key: "polarToCartesian", value: function(t3, e2, i2, a2) {
          var s2 = (a2 - 90) * Math.PI / 180;
          return { x: t3 + i2 * Math.cos(s2), y: e2 + i2 * Math.sin(s2) };
        } }, { key: "escapeString", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i2 = t3.toString().slice();
          return i2 = i2.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e2);
        } }, { key: "negToZero", value: function(t3) {
          return t3 < 0 ? 0 : t3;
        } }, { key: "moveIndexInArray", value: function(t3, e2, i2) {
          if (i2 >= t3.length)
            for (var a2 = i2 - t3.length + 1; a2--; )
              t3.push(void 0);
          return t3.splice(i2, 0, t3.splice(e2, 1)[0]), t3;
        } }, { key: "extractNumber", value: function(t3) {
          return parseFloat(t3.replace(/[^\d.]*/g, ""));
        } }, { key: "findAncestor", value: function(t3, e2) {
          for (; (t3 = t3.parentElement) && !t3.classList.contains(e2); )
            ;
          return t3;
        } }, { key: "setELstyles", value: function(t3, e2) {
          for (var i2 in e2)
            e2.hasOwnProperty(i2) && (t3.style.key = e2[i2]);
        } }, { key: "isNumber", value: function(t3) {
          return !isNaN(t3) && parseFloat(Number(t3)) === t3 && !isNaN(parseInt(t3, 10));
        } }, { key: "isFloat", value: function(t3) {
          return Number(t3) === t3 && t3 % 1 != 0;
        } }, { key: "isSafari", value: function() {
          return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        } }, { key: "isFirefox", value: function() {
          return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
        } }, { key: "isIE11", value: function() {
          if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1)
            return true;
        } }, { key: "isIE", value: function() {
          var t3 = window.navigator.userAgent, e2 = t3.indexOf("MSIE ");
          if (e2 > 0)
            return parseInt(t3.substring(e2 + 5, t3.indexOf(".", e2)), 10);
          if (t3.indexOf("Trident/") > 0) {
            var i2 = t3.indexOf("rv:");
            return parseInt(t3.substring(i2 + 3, t3.indexOf(".", i2)), 10);
          }
          var a2 = t3.indexOf("Edge/");
          return a2 > 0 && parseInt(t3.substring(a2 + 5, t3.indexOf(".", a2)), 10);
        } }, { key: "getGCD", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a2 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t3, e2))));
          for (t3 = Math.round(Math.abs(t3) * a2), e2 = Math.round(Math.abs(e2) * a2); e2; ) {
            var s2 = e2;
            e2 = t3 % e2, t3 = s2;
          }
          return t3 / a2;
        } }, { key: "getPrimeFactors", value: function(t3) {
          for (var e2 = [], i2 = 2; t3 >= 2; )
            t3 % i2 == 0 ? (e2.push(i2), t3 /= i2) : i2++;
          return e2;
        } }, { key: "mod", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a2 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t3, e2))));
          return (t3 = Math.round(Math.abs(t3) * a2)) % (e2 = Math.round(Math.abs(e2) * a2)) / a2;
        } }]), t2;
      }();
      var b = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.setEasingFunctions();
        }
        return r(t2, [{ key: "setEasingFunctions", value: function() {
          var t3;
          if (!this.w.globals.easing) {
            switch (this.w.config.chart.animations.easing) {
              case "linear":
                t3 = "-";
                break;
              case "easein":
                t3 = "<";
                break;
              case "easeout":
                t3 = ">";
                break;
              case "easeinout":
              default:
                t3 = "<>";
                break;
              case "swing":
                t3 = function(t4) {
                  var e2 = 1.70158;
                  return (t4 -= 1) * t4 * ((e2 + 1) * t4 + e2) + 1;
                };
                break;
              case "bounce":
                t3 = function(t4) {
                  return t4 < 1 / 2.75 ? 7.5625 * t4 * t4 : t4 < 2 / 2.75 ? 7.5625 * (t4 -= 1.5 / 2.75) * t4 + 0.75 : t4 < 2.5 / 2.75 ? 7.5625 * (t4 -= 2.25 / 2.75) * t4 + 0.9375 : 7.5625 * (t4 -= 2.625 / 2.75) * t4 + 0.984375;
                };
                break;
              case "elastic":
                t3 = function(t4) {
                  return t4 === !!t4 ? t4 : Math.pow(2, -10 * t4) * Math.sin((t4 - 0.075) * (2 * Math.PI) / 0.3) + 1;
                };
            }
            this.w.globals.easing = t3;
          }
        } }, { key: "animateLine", value: function(t3, e2, i2, a2) {
          t3.attr(e2).animate(a2).attr(i2);
        } }, { key: "animateMarker", value: function(t3, e2, i2, a2, s2, r2) {
          e2 || (e2 = 0), t3.attr({ r: e2, width: e2, height: e2 }).animate(a2, s2).attr({ r: i2, width: i2.width, height: i2.height }).afterAll(function() {
            r2();
          });
        } }, { key: "animateCircle", value: function(t3, e2, i2, a2, s2) {
          t3.attr({ r: e2.r, cx: e2.cx, cy: e2.cy }).animate(a2, s2).attr({ r: i2.r, cx: i2.cx, cy: i2.cy });
        } }, { key: "animateRect", value: function(t3, e2, i2, a2, s2) {
          t3.attr(e2).animate(a2).attr(i2).afterAll(function() {
            return s2();
          });
        } }, { key: "animatePathsGradually", value: function(t3) {
          var e2 = t3.el, i2 = t3.realIndex, a2 = t3.j, s2 = t3.fill, r2 = t3.pathFrom, o2 = t3.pathTo, n2 = t3.speed, l2 = t3.delay, h2 = this.w, c2 = 0;
          h2.config.chart.animations.animateGradually.enabled && (c2 = h2.config.chart.animations.animateGradually.delay), h2.config.chart.animations.dynamicAnimation.enabled && h2.globals.dataChanged && "bar" !== h2.config.chart.type && (c2 = 0), this.morphSVG(e2, i2, a2, "line" !== h2.config.chart.type || h2.globals.comboCharts ? s2 : "stroke", r2, o2, n2, l2 * c2);
        } }, { key: "showDelayedElements", value: function() {
          this.w.globals.delayedElements.forEach(function(t3) {
            var e2 = t3.el;
            e2.classList.remove("apexcharts-element-hidden"), e2.classList.add("apexcharts-hidden-element-shown");
          });
        } }, { key: "animationCompleted", value: function(t3) {
          var e2 = this.w;
          e2.globals.animationEnded || (e2.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e2.config.chart.events.animationEnd && e2.config.chart.events.animationEnd(this.ctx, { el: t3, w: e2 }));
        } }, { key: "morphSVG", value: function(t3, e2, i2, a2, s2, r2, o2, n2) {
          var l2 = this, h2 = this.w;
          s2 || (s2 = t3.attr("pathFrom")), r2 || (r2 = t3.attr("pathTo"));
          var c2 = function(t4) {
            return "radar" === h2.config.chart.type && (o2 = 1), "M 0 ".concat(h2.globals.gridHeight);
          };
          (!s2 || s2.indexOf("undefined") > -1 || s2.indexOf("NaN") > -1) && (s2 = c2()), (!r2 || r2.indexOf("undefined") > -1 || r2.indexOf("NaN") > -1) && (r2 = c2()), h2.globals.shouldAnimate || (o2 = 1), t3.plot(s2).animate(1, h2.globals.easing, n2).plot(s2).animate(o2, h2.globals.easing, n2).plot(r2).afterAll(function() {
            x.isNumber(i2) ? i2 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t3) : "none" !== a2 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e2 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t3), l2.showDelayedElements();
          });
        } }]), t2;
      }();
      var v = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getDefaultFilter", value: function(t3, e2) {
          var i2 = this.w;
          t3.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i2.config.states.normal.filter ? this.applyFilter(t3, e2, i2.config.states.normal.filter.type, i2.config.states.normal.filter.value) : i2.config.chart.dropShadow.enabled && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
        } }, { key: "addNormalFilter", value: function(t3, e2) {
          var i2 = this.w;
          i2.config.chart.dropShadow.enabled && !t3.node.classList.contains("apexcharts-marker") && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
        } }, { key: "addLightenFilter", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = i2.intensity;
          t3.unfilter(true);
          new window.SVG.Filter();
          t3.filter(function(t4) {
            var i3 = s2.config.chart.dropShadow;
            (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: r2 } });
          }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
        } }, { key: "addDarkenFilter", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = i2.intensity;
          t3.unfilter(true);
          new window.SVG.Filter();
          t3.filter(function(t4) {
            var i3 = s2.config.chart.dropShadow;
            (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({ rgb: { type: "linear", slope: r2 } });
          }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
        } }, { key: "applyFilter", value: function(t3, e2, i2) {
          var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
          switch (i2) {
            case "none":
              this.addNormalFilter(t3, e2);
              break;
            case "lighten":
              this.addLightenFilter(t3, e2, { intensity: a2 });
              break;
            case "darken":
              this.addDarkenFilter(t3, e2, { intensity: a2 });
          }
        } }, { key: "addShadow", value: function(t3, e2, i2) {
          var a2, s2 = this.w, r2 = i2.blur, o2 = i2.top, n2 = i2.left, l2 = i2.color, h2 = i2.opacity;
          if ((null === (a2 = s2.config.chart.dropShadow.enabledOnSeries) || void 0 === a2 ? void 0 : a2.length) > 0 && -1 === s2.config.chart.dropShadow.enabledOnSeries.indexOf(e2))
            return t3;
          var c2 = t3.flood(Array.isArray(l2) ? l2[e2] : l2, h2).composite(t3.sourceAlpha, "in").offset(n2, o2).gaussianBlur(r2).merge(t3.source);
          return t3.blend(t3.source, c2);
        } }, { key: "dropShadow", value: function(t3, e2) {
          var i2, a2, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, r2 = e2.top, o2 = e2.left, n2 = e2.blur, l2 = e2.color, h2 = e2.opacity, c2 = e2.noUserSpaceOnUse, d2 = this.w;
          if (t3.unfilter(true), x.isIE() && "radialBar" === d2.config.chart.type)
            return t3;
          if ((null === (i2 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === i2 ? void 0 : i2.length) > 0 && -1 === (null === (a2 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === a2 ? void 0 : a2.indexOf(s2)))
            return t3;
          return l2 = Array.isArray(l2) ? l2[s2] : l2, t3.filter(function(t4) {
            var e3 = null;
            e3 = x.isSafari() || x.isFirefox() || x.isIE() ? t4.flood(l2, h2).composite(t4.sourceAlpha, "in").offset(o2, r2).gaussianBlur(n2) : t4.flood(l2, h2).composite(t4.sourceAlpha, "in").offset(o2, r2).gaussianBlur(n2).merge(t4.source), t4.blend(t4.source, e3);
          }), c2 || t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node), t3;
        } }, { key: "setSelectionFilter", value: function(t3, e2, i2) {
          var a2 = this.w;
          if (void 0 !== a2.globals.selectedDataPoints[e2] && a2.globals.selectedDataPoints[e2].indexOf(i2) > -1) {
            t3.node.setAttribute("selected", true);
            var s2 = a2.config.states.active.filter;
            "none" !== s2 && this.applyFilter(t3, e2, s2.type, s2.value);
          }
        } }, { key: "_scaleFilterSize", value: function(t3) {
          !function(e2) {
            for (var i2 in e2)
              e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
          }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
        } }]), t2;
      }();
      var m2 = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "roundPathCorners", value: function(t3, e2) {
          function i2(t4, e3, i3) {
            var s3 = e3.x - t4.x, r3 = e3.y - t4.y, o3 = Math.sqrt(s3 * s3 + r3 * r3);
            return a2(t4, e3, Math.min(1, i3 / o3));
          }
          function a2(t4, e3, i3) {
            return { x: t4.x + (e3.x - t4.x) * i3, y: t4.y + (e3.y - t4.y) * i3 };
          }
          function s2(t4, e3) {
            t4.length > 2 && (t4[t4.length - 2] = e3.x, t4[t4.length - 1] = e3.y);
          }
          function r2(t4) {
            return { x: parseFloat(t4[t4.length - 2]), y: parseFloat(t4[t4.length - 1]) };
          }
          t3.indexOf("NaN") > -1 && (t3 = "");
          var o2 = t3.split(/[,\s]/).reduce(function(t4, e3) {
            var i3 = e3.match("([a-zA-Z])(.+)");
            return i3 ? (t4.push(i3[1]), t4.push(i3[2])) : t4.push(e3), t4;
          }, []).reduce(function(t4, e3) {
            return parseFloat(e3) == e3 && t4.length ? t4[t4.length - 1].push(e3) : t4.push([e3]), t4;
          }, []), n2 = [];
          if (o2.length > 1) {
            var l2 = r2(o2[0]), h2 = null;
            "Z" == o2[o2.length - 1][0] && o2[0].length > 2 && (h2 = ["L", l2.x, l2.y], o2[o2.length - 1] = h2), n2.push(o2[0]);
            for (var c2 = 1; c2 < o2.length; c2++) {
              var d2 = n2[n2.length - 1], g2 = o2[c2], u2 = g2 == h2 ? o2[1] : o2[c2 + 1];
              if (u2 && d2 && d2.length > 2 && "L" == g2[0] && u2.length > 2 && "L" == u2[0]) {
                var p2, f2, x2 = r2(d2), b2 = r2(g2), v2 = r2(u2);
                p2 = i2(b2, x2, e2), f2 = i2(b2, v2, e2), s2(g2, p2), g2.origPoint = b2, n2.push(g2);
                var m3 = a2(p2, b2, 0.5), y2 = a2(b2, f2, 0.5), w2 = ["C", m3.x, m3.y, y2.x, y2.y, f2.x, f2.y];
                w2.origPoint = b2, n2.push(w2);
              } else
                n2.push(g2);
            }
            if (h2) {
              var k2 = r2(n2[n2.length - 1]);
              n2.push(["Z"]), s2(n2[0], k2);
            }
          } else
            n2 = o2;
          return n2.reduce(function(t4, e3) {
            return t4 + e3.join(" ") + " ";
          }, "");
        } }, { key: "drawLine", value: function(t3, e2, i2, a2) {
          var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
          return this.w.globals.dom.Paper.line().attr({ x1: t3, y1: e2, x2: i2, y2: a2, stroke: s2, "stroke-dasharray": r2, "stroke-width": o2, "stroke-linecap": n2 });
        } }, { key: "drawRect", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h2 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c2 = this.w.globals.dom.Paper.rect();
          return c2.attr({ x: t3, y: e2, width: i2 > 0 ? i2 : 0, height: a2 > 0 ? a2 : 0, rx: s2, ry: s2, opacity: o2, "stroke-width": null !== n2 ? n2 : 0, stroke: null !== l2 ? l2 : "none", "stroke-dasharray": h2 }), c2.node.setAttribute("fill", r2), c2;
        } }, { key: "drawPolygon", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
          return this.w.globals.dom.Paper.polygon(t3).attr({ fill: a2, stroke: e2, "stroke-width": i2 });
        } }, { key: "drawCircle", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
          t3 < 0 && (t3 = 0);
          var i2 = this.w.globals.dom.Paper.circle(2 * t3);
          return null !== e2 && i2.attr(e2), i2;
        } }, { key: "drawPath", value: function(t3) {
          var e2 = t3.d, i2 = void 0 === e2 ? "" : e2, a2 = t3.stroke, s2 = void 0 === a2 ? "#a8a8a8" : a2, r2 = t3.strokeWidth, o2 = void 0 === r2 ? 1 : r2, n2 = t3.fill, l2 = t3.fillOpacity, h2 = void 0 === l2 ? 1 : l2, c2 = t3.strokeOpacity, d2 = void 0 === c2 ? 1 : c2, g2 = t3.classes, u2 = t3.strokeLinecap, p2 = void 0 === u2 ? null : u2, f2 = t3.strokeDashArray, x2 = void 0 === f2 ? 0 : f2, b2 = this.w;
          return null === p2 && (p2 = b2.config.stroke.lineCap), (i2.indexOf("undefined") > -1 || i2.indexOf("NaN") > -1) && (i2 = "M 0 ".concat(b2.globals.gridHeight)), b2.globals.dom.Paper.path(i2).attr({ fill: n2, "fill-opacity": h2, stroke: s2, "stroke-opacity": d2, "stroke-linecap": p2, "stroke-width": o2, "stroke-dasharray": x2, class: g2 });
        } }, { key: "group", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e2 = this.w.globals.dom.Paper.group();
          return null !== t3 && e2.attr(t3), e2;
        } }, { key: "move", value: function(t3, e2) {
          var i2 = ["M", t3, e2].join(" ");
          return i2;
        } }, { key: "line", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = null;
          return null === i2 ? a2 = [" L", t3, e2].join(" ") : "H" === i2 ? a2 = [" H", t3].join(" ") : "V" === i2 && (a2 = [" V", e2].join(" ")), a2;
        } }, { key: "curve", value: function(t3, e2, i2, a2, s2, r2) {
          var o2 = ["C", t3, e2, i2, a2, s2, r2].join(" ");
          return o2;
        } }, { key: "quadraticCurve", value: function(t3, e2, i2, a2) {
          return ["Q", t3, e2, i2, a2].join(" ");
        } }, { key: "arc", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = "A";
          arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n2 = "a");
          var l2 = [n2, t3, e2, i2, a2, s2, r2, o2].join(" ");
          return l2;
        } }, { key: "renderPaths", value: function(t3) {
          var i2, a2 = t3.j, s2 = t3.realIndex, r2 = t3.pathFrom, o2 = t3.pathTo, n2 = t3.stroke, l2 = t3.strokeWidth, h2 = t3.strokeLinecap, c2 = t3.fill, d2 = t3.animationDelay, g2 = t3.initialSpeed, u2 = t3.dataChangeSpeed, p2 = t3.className, f2 = t3.shouldClipToGrid, x2 = void 0 === f2 || f2, m3 = t3.bindEventsOnPaths, y2 = void 0 === m3 || m3, w2 = t3.drawShadow, k2 = void 0 === w2 || w2, A2 = this.w, S2 = new v(this.ctx), C2 = new b(this.ctx), L2 = this.w.config.chart.animations.enabled, P2 = L2 && this.w.config.chart.animations.dynamicAnimation.enabled, M2 = !!(L2 && !A2.globals.resized || P2 && A2.globals.dataChanged && A2.globals.shouldAnimate);
          M2 ? i2 = r2 : (i2 = o2, A2.globals.animationEnded = true);
          var I2 = A2.config.stroke.dashArray, T2 = 0;
          T2 = Array.isArray(I2) ? I2[s2] : A2.config.stroke.dashArray;
          var z2 = this.drawPath({ d: i2, stroke: n2, strokeWidth: l2, fill: c2, fillOpacity: 1, classes: p2, strokeLinecap: h2, strokeDashArray: T2 });
          if (z2.attr("index", s2), x2 && z2.attr({ "clip-path": "url(#gridRectMask".concat(A2.globals.cuid, ")") }), "none" !== A2.config.states.normal.filter.type)
            S2.getDefaultFilter(z2, s2);
          else if (A2.config.chart.dropShadow.enabled && k2) {
            var X2 = A2.config.chart.dropShadow;
            S2.dropShadow(z2, X2, s2);
          }
          y2 && (z2.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z2)), z2.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z2)), z2.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z2))), z2.attr({ pathTo: o2, pathFrom: r2 });
          var E2 = { el: z2, j: a2, realIndex: s2, pathFrom: r2, pathTo: o2, fill: c2, strokeWidth: l2, delay: d2 };
          return !L2 || A2.globals.resized || A2.globals.dataChanged ? !A2.globals.resized && A2.globals.dataChanged || C2.showDelayedElements() : C2.animatePathsGradually(e(e({}, E2), {}, { speed: g2 })), A2.globals.dataChanged && P2 && M2 && C2.animatePathsGradually(e(e({}, E2), {}, { speed: u2 })), z2;
        } }, { key: "drawPattern", value: function(t3, e2, i2) {
          var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
          return this.w.globals.dom.Paper.pattern(e2, i2, function(r2) {
            "horizontalLines" === t3 ? r2.line(0, 0, i2, 0).stroke({ color: a2, width: s2 + 1 }) : "verticalLines" === t3 ? r2.line(0, 0, 0, e2).stroke({ color: a2, width: s2 + 1 }) : "slantedLines" === t3 ? r2.line(0, 0, e2, i2).stroke({ color: a2, width: s2 }) : "squares" === t3 ? r2.rect(e2, i2).fill("none").stroke({ color: a2, width: s2 }) : "circles" === t3 && r2.circle(e2).fill("none").stroke({ color: a2, width: s2 });
          });
        } }, { key: "drawGradient", value: function(t3, e2, i2, a2, s2) {
          var r2, o2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c2 = this.w;
          e2.length < 9 && 0 === e2.indexOf("#") && (e2 = x.hexToRgba(e2, a2)), i2.length < 9 && 0 === i2.indexOf("#") && (i2 = x.hexToRgba(i2, s2));
          var d2 = 0, g2 = 1, u2 = 1, p2 = null;
          null !== n2 && (d2 = void 0 !== n2[0] ? n2[0] / 100 : 0, g2 = void 0 !== n2[1] ? n2[1] / 100 : 1, u2 = void 0 !== n2[2] ? n2[2] / 100 : 1, p2 = void 0 !== n2[3] ? n2[3] / 100 : null);
          var f2 = !("donut" !== c2.config.chart.type && "pie" !== c2.config.chart.type && "polarArea" !== c2.config.chart.type && "bubble" !== c2.config.chart.type);
          if (r2 = null === l2 || 0 === l2.length ? c2.globals.dom.Paper.gradient(f2 ? "radial" : "linear", function(t4) {
            t4.at(d2, e2, a2), t4.at(g2, i2, s2), t4.at(u2, i2, s2), null !== p2 && t4.at(p2, e2, a2);
          }) : c2.globals.dom.Paper.gradient(f2 ? "radial" : "linear", function(t4) {
            (Array.isArray(l2[h2]) ? l2[h2] : l2).forEach(function(e3) {
              t4.at(e3.offset / 100, e3.color, e3.opacity);
            });
          }), f2) {
            var b2 = c2.globals.gridWidth / 2, v2 = c2.globals.gridHeight / 2;
            "bubble" !== c2.config.chart.type ? r2.attr({ gradientUnits: "userSpaceOnUse", cx: b2, cy: v2, r: o2 }) : r2.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
          } else
            "vertical" === t3 ? r2.from(0, 0).to(0, 1) : "diagonal" === t3 ? r2.from(0, 0).to(1, 1) : "horizontal" === t3 ? r2.from(0, 1).to(1, 1) : "diagonal2" === t3 && r2.from(1, 0).to(0, 1);
          return r2;
        } }, { key: "getTextBasedOnMaxWidth", value: function(t3) {
          var e2 = t3.text, i2 = t3.maxWidth, a2 = t3.fontSize, s2 = t3.fontFamily, r2 = this.getTextRects(e2, a2, s2), o2 = r2.width / e2.length, n2 = Math.floor(i2 / o2);
          return i2 < r2.width ? e2.slice(0, n2 - 3) + "..." : e2;
        } }, { key: "drawText", value: function(t3) {
          var i2 = this, a2 = t3.x, s2 = t3.y, r2 = t3.text, o2 = t3.textAnchor, n2 = t3.fontSize, l2 = t3.fontFamily, h2 = t3.fontWeight, c2 = t3.foreColor, d2 = t3.opacity, g2 = t3.maxWidth, u2 = t3.cssClass, p2 = void 0 === u2 ? "" : u2, f2 = t3.isPlainText, x2 = void 0 === f2 || f2, b2 = t3.dominantBaseline, v2 = void 0 === b2 ? "auto" : b2, m3 = this.w;
          void 0 === r2 && (r2 = "");
          var y2 = r2;
          o2 || (o2 = "start"), c2 && c2.length || (c2 = m3.config.chart.foreColor), l2 = l2 || m3.config.chart.fontFamily, h2 = h2 || "regular";
          var w2, k2 = { maxWidth: g2, fontSize: n2 = n2 || "11px", fontFamily: l2 };
          return Array.isArray(r2) ? w2 = m3.globals.dom.Paper.text(function(t4) {
            for (var a3 = 0; a3 < r2.length; a3++)
              y2 = r2[a3], g2 && (y2 = i2.getTextBasedOnMaxWidth(e({ text: r2[a3] }, k2))), 0 === a3 ? t4.tspan(y2) : t4.tspan(y2).newLine();
          }) : (g2 && (y2 = this.getTextBasedOnMaxWidth(e({ text: r2 }, k2))), w2 = x2 ? m3.globals.dom.Paper.plain(r2) : m3.globals.dom.Paper.text(function(t4) {
            return t4.tspan(y2);
          })), w2.attr({ x: a2, y: s2, "text-anchor": o2, "dominant-baseline": v2, "font-size": n2, "font-family": l2, "font-weight": h2, fill: c2, class: "apexcharts-text " + p2 }), w2.node.style.fontFamily = l2, w2.node.style.opacity = d2, w2;
        } }, { key: "createGroupWithAttributes", value: function(t3, e2, i2, a2) {
          var s2 = this.group();
          return i2.forEach(function(t4) {
            return s2.add(t4);
          }), s2.attr({ class: a2.class ? a2.class : "", cy: e2, cx: t3 }), s2;
        } }, { key: "drawPlus", value: function(t3, e2, i2, a2) {
          var s2 = i2 / 2, r2 = this.drawLine(t3, e2 - s2, t3, e2 + s2, a2.pointStrokeColor, a2.pointStrokeDashArray, a2.pointStrokeWidth, a2.pointStrokeLineCap), o2 = this.drawLine(t3 - s2, e2, t3 + s2, e2, a2.pointStrokeColor, a2.pointStrokeDashArray, a2.pointStrokeWidth, a2.pointStrokeLineCap);
          return this.createGroupWithAttributes(t3, e2, [r2, o2], a2);
        } }, { key: "drawX", value: function(t3, e2, i2, a2) {
          var s2 = i2 / 2, r2 = this.drawLine(t3 - s2, e2 - s2, t3 + s2, e2 + s2, a2.pointStrokeColor, a2.pointStrokeDashArray, a2.pointStrokeWidth, a2.pointStrokeLineCap), o2 = this.drawLine(t3 - s2, e2 + s2, t3 + s2, e2 - s2, a2.pointStrokeColor, a2.pointStrokeDashArray, a2.pointStrokeWidth, a2.pointStrokeLineCap);
          return this.createGroupWithAttributes(t3, e2, [r2, o2], a2);
        } }, { key: "drawMarker", value: function(t3, e2, i2) {
          t3 = t3 || 0;
          var a2 = i2.pSize || 0, s2 = null;
          if ("X" === (null == i2 ? void 0 : i2.shape) || "x" === (null == i2 ? void 0 : i2.shape))
            s2 = this.drawX(t3, e2, a2, i2);
          else if ("plus" === (null == i2 ? void 0 : i2.shape) || "+" === (null == i2 ? void 0 : i2.shape))
            s2 = this.drawPlus(t3, e2, a2, i2);
          else if ("square" === i2.shape || "rect" === i2.shape) {
            var r2 = void 0 === i2.pRadius ? a2 / 2 : i2.pRadius;
            null !== e2 && a2 || (a2 = 0, r2 = 0);
            var o2 = 1.2 * a2 + r2, n2 = this.drawRect(o2, o2, o2, o2, r2);
            n2.attr({ x: t3 - o2 / 2, y: e2 - o2 / 2, cx: t3, cy: e2, class: i2.class ? i2.class : "", fill: i2.pointFillColor, "fill-opacity": i2.pointFillOpacity ? i2.pointFillOpacity : 1, stroke: i2.pointStrokeColor, "stroke-width": i2.pointStrokeWidth ? i2.pointStrokeWidth : 0, "stroke-opacity": i2.pointStrokeOpacity ? i2.pointStrokeOpacity : 1 }), s2 = n2;
          } else
            "circle" !== i2.shape && i2.shape || (x.isNumber(e2) || (a2 = 0, e2 = 0), s2 = this.drawCircle(a2, { cx: t3, cy: e2, class: i2.class ? i2.class : "", stroke: i2.pointStrokeColor, fill: i2.pointFillColor, "fill-opacity": i2.pointFillOpacity ? i2.pointFillOpacity : 1, "stroke-width": i2.pointStrokeWidth ? i2.pointStrokeWidth : 0, "stroke-opacity": i2.pointStrokeOpacity ? i2.pointStrokeOpacity : 1 }));
          return s2;
        } }, { key: "pathMouseEnter", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10);
          if ("function" == typeof i2.config.chart.events.dataPointMouseEnter && i2.config.chart.events.dataPointMouseEnter(e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }]), ("none" === i2.config.states.active.filter.type || "true" !== t3.node.getAttribute("selected")) && "none" !== i2.config.states.hover.filter.type && !i2.globals.isTouchDevice) {
            var o2 = i2.config.states.hover.filter;
            a2.applyFilter(t3, s2, o2.type, o2.value);
          }
        } }, { key: "pathMouseLeave", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10);
          "function" == typeof i2.config.chart.events.dataPointMouseLeave && i2.config.chart.events.dataPointMouseLeave(e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }]), "none" !== i2.config.states.active.filter.type && "true" === t3.node.getAttribute("selected") || "none" !== i2.config.states.hover.filter.type && a2.getDefaultFilter(t3, s2);
        } }, { key: "pathMouseDown", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10), o2 = "false";
          if ("true" === t3.node.getAttribute("selected")) {
            if (t3.node.setAttribute("selected", "false"), i2.globals.selectedDataPoints[s2].indexOf(r2) > -1) {
              var n2 = i2.globals.selectedDataPoints[s2].indexOf(r2);
              i2.globals.selectedDataPoints[s2].splice(n2, 1);
            }
          } else {
            if (!i2.config.states.active.allowMultipleDataPointsSelection && i2.globals.selectedDataPoints.length > 0) {
              i2.globals.selectedDataPoints = [];
              var l2 = i2.globals.dom.Paper.select(".apexcharts-series path").members, h2 = i2.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c2 = function(t4) {
                Array.prototype.forEach.call(t4, function(t5) {
                  t5.node.setAttribute("selected", "false"), a2.getDefaultFilter(t5, s2);
                });
              };
              c2(l2), c2(h2);
            }
            t3.node.setAttribute("selected", "true"), o2 = "true", void 0 === i2.globals.selectedDataPoints[s2] && (i2.globals.selectedDataPoints[s2] = []), i2.globals.selectedDataPoints[s2].push(r2);
          }
          if ("true" === o2) {
            var d2 = i2.config.states.active.filter;
            if ("none" !== d2)
              a2.applyFilter(t3, s2, d2.type, d2.value);
            else if ("none" !== i2.config.states.hover.filter && !i2.globals.isTouchDevice) {
              var g2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, g2.type, g2.value);
            }
          } else if ("none" !== i2.config.states.active.filter.type)
            if ("none" === i2.config.states.hover.filter.type || i2.globals.isTouchDevice)
              a2.getDefaultFilter(t3, s2);
            else {
              g2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, g2.type, g2.value);
            }
          "function" == typeof i2.config.chart.events.dataPointSelection && i2.config.chart.events.dataPointSelection(e2, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r2, w: i2 }), e2 && this.ctx.events.fireEvent("dataPointSelection", [e2, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r2, w: i2 }]);
        } }, { key: "rotateAroundCenter", value: function(t3) {
          var e2 = {};
          return t3 && "function" == typeof t3.getBBox && (e2 = t3.getBBox()), { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 };
        } }, { key: "getTextRects", value: function(t3, e2, i2, a2) {
          var s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r2 = this.w, o2 = this.drawText({ x: -200, y: -200, text: t3, textAnchor: "start", fontSize: e2, fontFamily: i2, foreColor: "#fff", opacity: 0 });
          a2 && o2.attr("transform", a2), r2.globals.dom.Paper.add(o2);
          var n2 = o2.bbox();
          return s2 || (n2 = o2.node.getBoundingClientRect()), o2.remove(), { width: n2.width, height: n2.height };
        } }, { key: "placeTextWithEllipsis", value: function(t3, e2, i2) {
          if ("function" == typeof t3.getComputedTextLength && (t3.textContent = e2, e2.length > 0 && t3.getComputedTextLength() >= i2 / 1.1)) {
            for (var a2 = e2.length - 3; a2 > 0; a2 -= 3)
              if (t3.getSubStringLength(0, a2) <= i2 / 1.1)
                return void (t3.textContent = e2.substring(0, a2) + "...");
            t3.textContent = ".";
          }
        } }], [{ key: "setAttrs", value: function(t3, e2) {
          for (var i2 in e2)
            e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
        } }]), t2;
      }();
      var y = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getStackedSeriesTotals", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = this.w, i2 = [];
          if (0 === e2.globals.series.length)
            return i2;
          for (var a2 = 0; a2 < e2.globals.series[e2.globals.maxValsInArrayIndex].length; a2++) {
            for (var s2 = 0, r2 = 0; r2 < e2.globals.series.length; r2++)
              void 0 !== e2.globals.series[r2][a2] && -1 === t3.indexOf(r2) && (s2 += e2.globals.series[r2][a2]);
            i2.push(s2);
          }
          return i2;
        } }, { key: "getSeriesTotalByIndex", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return null === t3 ? this.w.config.series.reduce(function(t4, e2) {
            return t4 + e2;
          }, 0) : this.w.globals.series[t3].reduce(function(t4, e2) {
            return t4 + e2;
          }, 0);
        } }, { key: "getStackedSeriesTotalsByGroups", value: function() {
          var t3 = this, e2 = this.w, i2 = [];
          return e2.globals.seriesGroups.forEach(function(a2) {
            var s2 = [];
            e2.config.series.forEach(function(t4, i3) {
              a2.indexOf(e2.globals.seriesNames[i3]) > -1 && s2.push(i3);
            });
            var r2 = e2.globals.series.map(function(t4, e3) {
              return -1 === s2.indexOf(e3) ? e3 : -1;
            }).filter(function(t4) {
              return -1 !== t4;
            });
            i2.push(t3.getStackedSeriesTotals(r2));
          }), i2;
        } }, { key: "setSeriesYAxisMappings", value: function() {
          var t3 = this.w.globals, e2 = this.w.config, i2 = [], a2 = [], s2 = [], r2 = t3.series.length > e2.yaxis.length || e2.yaxis.some(function(t4) {
            return Array.isArray(t4.seriesName);
          });
          e2.series.forEach(function(t4, e3) {
            s2.push(e3), a2.push(null);
          }), e2.yaxis.forEach(function(t4, e3) {
            i2[e3] = [];
          });
          var o2 = [];
          e2.yaxis.forEach(function(t4, a3) {
            var n3 = false;
            if (t4.seriesName) {
              var l3 = [];
              Array.isArray(t4.seriesName) ? l3 = t4.seriesName : l3.push(t4.seriesName), l3.forEach(function(t5) {
                e2.series.forEach(function(e3, o3) {
                  if (e3.name === t5) {
                    var l4 = o3;
                    a3 === o3 || r2 ? !r2 || s2.indexOf(o3) > -1 ? i2[a3].push([a3, o3]) : console.warn("Series '" + e3.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i2[o3].push([o3, a3]), l4 = a3), n3 = true, -1 !== (l4 = s2.indexOf(l4)) && s2.splice(l4, 1);
                  }
                });
              });
            }
            n3 || o2.push(a3);
          }), i2 = i2.map(function(t4, e3) {
            var i3 = [];
            return t4.forEach(function(t5) {
              a2[t5[1]] = t5[0], i3.push(t5[1]);
            }), i3;
          });
          for (var n2 = e2.yaxis.length - 1, l2 = 0; l2 < o2.length && (n2 = o2[l2], i2[n2] = [], s2); l2++) {
            var h2 = s2[0];
            s2.shift(), i2[n2].push(h2), a2[h2] = n2;
          }
          s2.forEach(function(t4) {
            i2[n2].push(t4), a2[t4] = n2;
          }), t3.seriesYAxisMap = i2.map(function(t4) {
            return t4;
          }), t3.seriesYAxisReverseMap = a2.map(function(t4) {
            return t4;
          }), t3.seriesYAxisMap.forEach(function(t4, i3) {
            t4.forEach(function(t5) {
              e2.series[t5] && void 0 === e2.series[t5].group && (e2.series[t5].group = "apexcharts-axis-".concat(i3.toString()));
            });
          });
        } }, { key: "isSeriesNull", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return 0 === (null === t3 ? this.w.config.series.filter(function(t4) {
            return null !== t4;
          }) : this.w.config.series[t3].data.filter(function(t4) {
            return null !== t4;
          })).length;
        } }, { key: "seriesHaveSameValues", value: function(t3) {
          return this.w.globals.series[t3].every(function(t4, e2, i2) {
            return t4 === i2[0];
          });
        } }, { key: "getCategoryLabels", value: function(t3) {
          var e2 = this.w, i2 = t3.slice();
          return e2.config.xaxis.convertedCatToNumeric && (i2 = t3.map(function(t4, i3) {
            return e2.config.xaxis.labels.formatter(t4 - e2.globals.minX + 1);
          })), i2;
        } }, { key: "getLargestSeries", value: function() {
          var t3 = this.w;
          t3.globals.maxValsInArrayIndex = t3.globals.series.map(function(t4) {
            return t4.length;
          }).indexOf(Math.max.apply(Math, t3.globals.series.map(function(t4) {
            return t4.length;
          })));
        } }, { key: "getLargestMarkerSize", value: function() {
          var t3 = this.w, e2 = 0;
          return t3.globals.markers.size.forEach(function(t4) {
            e2 = Math.max(e2, t4);
          }), t3.config.markers.discrete && t3.config.markers.discrete.length && t3.config.markers.discrete.forEach(function(t4) {
            e2 = Math.max(e2, t4.size);
          }), e2 > 0 && (e2 += t3.config.markers.hover.sizeOffset + 1), t3.globals.markers.largestSize = e2, e2;
        } }, { key: "getSeriesTotals", value: function() {
          var t3 = this.w;
          t3.globals.seriesTotals = t3.globals.series.map(function(t4, e2) {
            var i2 = 0;
            if (Array.isArray(t4))
              for (var a2 = 0; a2 < t4.length; a2++)
                i2 += t4[a2];
            else
              i2 += t4;
            return i2;
          });
        } }, { key: "getSeriesTotalsXRange", value: function(t3, e2) {
          var i2 = this.w;
          return i2.globals.series.map(function(a2, s2) {
            for (var r2 = 0, o2 = 0; o2 < a2.length; o2++)
              i2.globals.seriesX[s2][o2] > t3 && i2.globals.seriesX[s2][o2] < e2 && (r2 += a2[o2]);
            return r2;
          });
        } }, { key: "getPercentSeries", value: function() {
          var t3 = this.w;
          t3.globals.seriesPercent = t3.globals.series.map(function(e2, i2) {
            var a2 = [];
            if (Array.isArray(e2))
              for (var s2 = 0; s2 < e2.length; s2++) {
                var r2 = t3.globals.stackedSeriesTotals[s2], o2 = 0;
                r2 && (o2 = 100 * e2[s2] / r2), a2.push(o2);
              }
            else {
              var n2 = 100 * e2 / t3.globals.seriesTotals.reduce(function(t4, e3) {
                return t4 + e3;
              }, 0);
              a2.push(n2);
            }
            return a2;
          });
        } }, { key: "getCalculatedRatios", value: function() {
          var t3, e2, i2, a2 = this, s2 = this.w, r2 = s2.globals, o2 = [], n2 = 0, l2 = [], h2 = 0.1, c2 = 0;
          if (r2.yRange = [], r2.isMultipleYAxis)
            for (var d2 = 0; d2 < r2.minYArr.length; d2++)
              r2.yRange.push(Math.abs(r2.minYArr[d2] - r2.maxYArr[d2])), l2.push(0);
          else
            r2.yRange.push(Math.abs(r2.minY - r2.maxY));
          r2.xRange = Math.abs(r2.maxX - r2.minX), r2.zRange = Math.abs(r2.maxZ - r2.minZ);
          for (var g2 = 0; g2 < r2.yRange.length; g2++)
            o2.push(r2.yRange[g2] / r2.gridHeight);
          if (e2 = r2.xRange / r2.gridWidth, t3 = r2.yRange / r2.gridWidth, i2 = r2.xRange / r2.gridHeight, (n2 = r2.zRange / r2.gridHeight * 16) || (n2 = 1), r2.minY !== Number.MIN_VALUE && 0 !== Math.abs(r2.minY) && (r2.hasNegs = true), s2.globals.seriesYAxisReverseMap.length > 0) {
            var u2 = function(t4, e3) {
              var i3 = s2.config.yaxis[s2.globals.seriesYAxisReverseMap[e3]], r3 = t4 < 0 ? -1 : 1;
              return t4 = Math.abs(t4), i3.logarithmic && (t4 = a2.getBaseLog(i3.logBase, t4)), -r3 * t4 / o2[e3];
            };
            if (r2.isMultipleYAxis) {
              l2 = [];
              for (var p2 = 0; p2 < o2.length; p2++)
                l2.push(u2(r2.minYArr[p2], p2));
            } else
              (l2 = []).push(u2(r2.minY, 0)), r2.minY !== Number.MIN_VALUE && 0 !== Math.abs(r2.minY) && (h2 = -r2.minY / t3, c2 = r2.minX / e2);
          } else
            (l2 = []).push(0), h2 = 0, c2 = 0;
          return { yRatio: o2, invertedYRatio: t3, zRatio: n2, xRatio: e2, invertedXRatio: i2, baseLineInvertedY: h2, baseLineY: l2, baseLineX: c2 };
        } }, { key: "getLogSeries", value: function(t3) {
          var e2 = this, i2 = this.w;
          return i2.globals.seriesLog = t3.map(function(t4, a2) {
            var s2 = i2.globals.seriesYAxisReverseMap[a2];
            return i2.config.yaxis[s2] && i2.config.yaxis[s2].logarithmic ? t4.map(function(t5) {
              return null === t5 ? null : e2.getLogVal(i2.config.yaxis[s2].logBase, t5, a2);
            }) : t4;
          }), i2.globals.invalidLogScale ? t3 : i2.globals.seriesLog;
        } }, { key: "getBaseLog", value: function(t3, e2) {
          return Math.log(e2) / Math.log(t3);
        } }, { key: "getLogVal", value: function(t3, e2, i2) {
          if (e2 <= 0)
            return 0;
          var a2 = this.w, s2 = 0 === a2.globals.minYArr[i2] ? -1 : this.getBaseLog(t3, a2.globals.minYArr[i2]), r2 = (0 === a2.globals.maxYArr[i2] ? 0 : this.getBaseLog(t3, a2.globals.maxYArr[i2])) - s2;
          return e2 < 1 ? e2 / r2 : (this.getBaseLog(t3, e2) - s2) / r2;
        } }, { key: "getLogYRatios", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = this.w.globals;
          return a2.yLogRatio = t3.slice(), a2.logYRange = a2.yRange.map(function(t4, s2) {
            var r2 = i2.globals.seriesYAxisReverseMap[s2];
            if (i2.config.yaxis[r2] && e2.w.config.yaxis[r2].logarithmic) {
              var o2, n2 = -Number.MAX_VALUE, l2 = Number.MIN_VALUE;
              return a2.seriesLog.forEach(function(t5, e3) {
                t5.forEach(function(t6) {
                  i2.config.yaxis[e3] && i2.config.yaxis[e3].logarithmic && (n2 = Math.max(t6, n2), l2 = Math.min(t6, l2));
                });
              }), o2 = Math.pow(a2.yRange[s2], Math.abs(l2 - n2) / a2.yRange[s2]), a2.yLogRatio[s2] = o2 / a2.gridHeight, o2;
            }
          }), a2.invalidLogScale ? t3.slice() : a2.yLogRatio;
        } }, { key: "drawSeriesByGroup", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = [];
          return t3.series.length > 0 && e2.forEach(function(e3) {
            var o2 = [], n2 = [];
            t3.i.forEach(function(i3, a3) {
              s2.config.series[i3].group === e3 && (o2.push(t3.series[a3]), n2.push(i3));
            }), o2.length > 0 && r2.push(a2.draw(o2, i2, n2));
          }), r2;
        } }], [{ key: "checkComboSeries", value: function(t3, e2) {
          var i2 = false, a2 = 0, s2 = 0;
          return void 0 === e2 && (e2 = "line"), t3.length && void 0 !== t3[0].type && t3.forEach(function(t4) {
            "bar" !== t4.type && "column" !== t4.type && "candlestick" !== t4.type && "boxPlot" !== t4.type || a2++, void 0 !== t4.type && t4.type !== e2 && s2++;
          }), s2 > 0 && (i2 = true), { comboBarCount: a2, comboCharts: i2 };
        } }, { key: "extendArrayProps", value: function(t3, e2, i2) {
          var a2, s2, r2, o2, n2, l2;
          (null !== (a2 = e2) && void 0 !== a2 && a2.yaxis && (e2 = t3.extendYAxis(e2, i2)), null !== (s2 = e2) && void 0 !== s2 && s2.annotations) && (e2.annotations.yaxis && (e2 = t3.extendYAxisAnnotations(e2)), null !== (r2 = e2) && void 0 !== r2 && null !== (o2 = r2.annotations) && void 0 !== o2 && o2.xaxis && (e2 = t3.extendXAxisAnnotations(e2)), null !== (n2 = e2) && void 0 !== n2 && null !== (l2 = n2.annotations) && void 0 !== l2 && l2.points && (e2 = t3.extendPointAnnotations(e2)));
          return e2;
        } }]), t2;
      }();
      var w = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2;
        }
        return r(t2, [{ key: "setOrientations", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.w;
          if ("vertical" === t3.label.orientation) {
            var a2 = null !== e2 ? e2 : 0, s2 = i2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a2, "']"));
            if (null !== s2) {
              var r2 = s2.getBoundingClientRect();
              s2.setAttribute("x", parseFloat(s2.getAttribute("x")) - r2.height + 4), "top" === t3.label.position ? s2.setAttribute("y", parseFloat(s2.getAttribute("y")) + r2.width) : s2.setAttribute("y", parseFloat(s2.getAttribute("y")) - r2.width);
              var o2 = this.annoCtx.graphics.rotateAroundCenter(s2), n2 = o2.x, l2 = o2.y;
              s2.setAttribute("transform", "rotate(-90 ".concat(n2, " ").concat(l2, ")"));
            }
          }
        } }, { key: "addBackgroundToAnno", value: function(t3, e2) {
          var i2 = this.w;
          if (!t3 || void 0 === e2.label.text || void 0 !== e2.label.text && !String(e2.label.text).trim())
            return null;
          var a2 = i2.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s2 = t3.getBoundingClientRect(), r2 = e2.label.style.padding.left, o2 = e2.label.style.padding.right, n2 = e2.label.style.padding.top, l2 = e2.label.style.padding.bottom;
          "vertical" === e2.label.orientation && (n2 = e2.label.style.padding.left, l2 = e2.label.style.padding.right, r2 = e2.label.style.padding.top, o2 = e2.label.style.padding.bottom);
          var h2 = s2.left - a2.left - r2, c2 = s2.top - a2.top - n2, d2 = this.annoCtx.graphics.drawRect(h2 - i2.globals.barPadForNumericAxis, c2, s2.width + r2 + o2, s2.height + n2 + l2, e2.label.borderRadius, e2.label.style.background, 1, e2.label.borderWidth, e2.label.borderColor, 0);
          return e2.id && d2.node.classList.add(e2.id), d2;
        } }, { key: "annotationsBackground", value: function() {
          var t3 = this, e2 = this.w, i2 = function(i3, a2, s2) {
            var r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(a2, "']"));
            if (r2) {
              var o2 = r2.parentNode, n2 = t3.addBackgroundToAnno(r2, i3);
              n2 && (o2.insertBefore(n2.node, r2), i3.label.mouseEnter && n2.node.addEventListener("mouseenter", i3.label.mouseEnter.bind(t3, i3)), i3.label.mouseLeave && n2.node.addEventListener("mouseleave", i3.label.mouseLeave.bind(t3, i3)), i3.label.click && n2.node.addEventListener("click", i3.label.click.bind(t3, i3)));
            }
          };
          e2.config.annotations.xaxis.map(function(t4, e3) {
            i2(t4, e3, "xaxis");
          }), e2.config.annotations.yaxis.map(function(t4, e3) {
            i2(t4, e3, "yaxis");
          }), e2.config.annotations.points.map(function(t4, e3) {
            i2(t4, e3, "point");
          });
        } }, { key: "getY1Y2", value: function(t3, e2) {
          var i2, a2 = "y1" === t3 ? e2.y : e2.y2, s2 = false, r2 = this.w;
          if (this.annoCtx.invertAxis) {
            var o2 = r2.globals.labels;
            r2.config.xaxis.convertedCatToNumeric && (o2 = r2.globals.categoryLabels);
            var n2 = o2.indexOf(a2), l2 = r2.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (n2 + 1) + ")");
            i2 = l2 ? parseFloat(l2.getAttribute("y")) : (r2.globals.gridHeight / o2.length - 1) * (n2 + 1) - r2.globals.barHeight, void 0 !== e2.seriesIndex && r2.globals.barHeight && (i2 = i2 - r2.globals.barHeight / 2 * (r2.globals.series.length - 1) + r2.globals.barHeight * e2.seriesIndex);
          } else {
            var h2, c2 = r2.globals.seriesYAxisMap[e2.yAxisIndex][0];
            if (r2.config.yaxis[e2.yAxisIndex].logarithmic)
              h2 = (a2 = new y(this.annoCtx.ctx).getLogVal(r2.config.yaxis[e2.yAxisIndex].logBase, a2, c2)) / r2.globals.yLogRatio[c2];
            else
              h2 = (a2 - r2.globals.minYArr[c2]) / (r2.globals.yRange[c2] / r2.globals.gridHeight);
            h2 > r2.globals.gridHeight ? (h2 = r2.globals.gridHeight, s2 = true) : h2 < 0 && (h2 = 0, s2 = true), i2 = r2.globals.gridHeight - h2, !e2.marker || void 0 !== e2.y && null !== e2.y || (i2 = 0), r2.config.yaxis[e2.yAxisIndex] && r2.config.yaxis[e2.yAxisIndex].reversed && (i2 = h2);
          }
          return "string" == typeof a2 && a2.indexOf("px") > -1 && (i2 = parseFloat(a2)), { yP: i2, clipped: s2 };
        } }, { key: "getX1X2", value: function(t3, e2) {
          var i2, a2 = "x1" === t3 ? e2.x : e2.x2, s2 = this.w, r2 = this.annoCtx.invertAxis ? s2.globals.minY : s2.globals.minX, o2 = this.annoCtx.invertAxis ? s2.globals.maxY : s2.globals.maxX, n2 = this.annoCtx.invertAxis ? s2.globals.yRange[0] : s2.globals.xRange, l2 = false;
          return i2 = this.annoCtx.inversedReversedAxis ? (o2 - a2) / (n2 / s2.globals.gridWidth) : (a2 - r2) / (n2 / s2.globals.gridWidth), "category" !== s2.config.xaxis.type && !s2.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || s2.globals.dataFormatXNumeric || s2.config.chart.sparkline.enabled || (i2 = this.getStringX(a2)), "string" == typeof a2 && a2.indexOf("px") > -1 && (i2 = parseFloat(a2)), null == a2 && e2.marker && (i2 = s2.globals.gridWidth), void 0 !== e2.seriesIndex && s2.globals.barWidth && !this.annoCtx.invertAxis && (i2 = i2 - s2.globals.barWidth / 2 * (s2.globals.series.length - 1) + s2.globals.barWidth * e2.seriesIndex), i2 > s2.globals.gridWidth ? (i2 = s2.globals.gridWidth, l2 = true) : i2 < 0 && (i2 = 0, l2 = true), { x: i2, clipped: l2 };
        } }, { key: "getStringX", value: function(t3) {
          var e2 = this.w, i2 = t3;
          e2.config.xaxis.convertedCatToNumeric && e2.globals.categoryLabels.length && (t3 = e2.globals.categoryLabels.indexOf(t3) + 1);
          var a2 = e2.globals.labels.indexOf(t3), s2 = e2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a2 + 1) + ")");
          return s2 && (i2 = parseFloat(s2.getAttribute("x"))), i2;
        } }]), t2;
      }();
      var k = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);
        }
        return r(t2, [{ key: "addXaxisAnnotation", value: function(t3, e2, i2) {
          var a2, s2 = this.w, r2 = this.helpers.getX1X2("x1", t3), o2 = r2.x, n2 = r2.clipped, l2 = true, h2 = t3.label.text, c2 = t3.strokeDashArray;
          if (x.isNumber(o2)) {
            if (null === t3.x2 || void 0 === t3.x2) {
              if (!n2) {
                var d2 = this.annoCtx.graphics.drawLine(o2 + t3.offsetX, 0 + t3.offsetY, o2 + t3.offsetX, s2.globals.gridHeight + t3.offsetY, t3.borderColor, c2, t3.borderWidth);
                e2.appendChild(d2.node), t3.id && d2.node.classList.add(t3.id);
              }
            } else {
              var g2 = this.helpers.getX1X2("x2", t3);
              if (a2 = g2.x, l2 = g2.clipped, !n2 || !l2) {
                if (a2 < o2) {
                  var u2 = o2;
                  o2 = a2, a2 = u2;
                }
                var p2 = this.annoCtx.graphics.drawRect(o2 + t3.offsetX, 0 + t3.offsetY, a2 - o2, s2.globals.gridHeight + t3.offsetY, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, c2);
                p2.node.classList.add("apexcharts-annotation-rect"), p2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(p2.node), t3.id && p2.node.classList.add(t3.id);
              }
            }
            if (!n2 || !l2) {
              var f2 = this.annoCtx.graphics.getTextRects(h2, parseFloat(t3.label.style.fontSize)), b2 = "top" === t3.label.position ? 4 : "center" === t3.label.position ? s2.globals.gridHeight / 2 + ("vertical" === t3.label.orientation ? f2.width / 2 : 0) : s2.globals.gridHeight, v2 = this.annoCtx.graphics.drawText({ x: o2 + t3.label.offsetX, y: b2 + t3.label.offsetY - ("vertical" === t3.label.orientation ? "top" === t3.label.position ? f2.width / 2 - 12 : -f2.width / 2 : 0), text: h2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
              v2.attr({ rel: i2 }), e2.appendChild(v2.node), this.annoCtx.helpers.setOrientations(t3, i2);
            }
          }
        } }, { key: "drawXAxisAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
          return e2.config.annotations.xaxis.map(function(e3, a2) {
            t3.addXaxisAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var A = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        }
        return r(t2, [{ key: "isValidDate", value: function(t3) {
          return "number" != typeof t3 && !isNaN(this.parseDate(t3));
        } }, { key: "getTimeStamp", value: function(t3) {
          return Date.parse(t3) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toISOString().substr(0, 25)).getTime() : new Date(t3).getTime() : t3;
        } }, { key: "getDate", value: function(t3) {
          return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toUTCString()) : new Date(t3);
        } }, { key: "parseDate", value: function(t3) {
          var e2 = Date.parse(t3);
          if (!isNaN(e2))
            return this.getTimeStamp(t3);
          var i2 = Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
          return i2 = this.getTimeStamp(i2);
        } }, { key: "parseDateWithTimezone", value: function(t3) {
          return Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        } }, { key: "formatDate", value: function(t3, e2) {
          var i2 = this.w.globals.locale, a2 = this.w.config.xaxis.labels.datetimeUTC, s2 = ["\0"].concat(u(i2.months)), r2 = [""].concat(u(i2.shortMonths)), o2 = [""].concat(u(i2.days)), n2 = [""].concat(u(i2.shortDays));
          function l2(t4, e3) {
            var i3 = t4 + "";
            for (e3 = e3 || 2; i3.length < e3; )
              i3 = "0" + i3;
            return i3;
          }
          var h2 = a2 ? t3.getUTCFullYear() : t3.getFullYear();
          e2 = (e2 = (e2 = e2.replace(/(^|[^\\])yyyy+/g, "$1" + h2)).replace(/(^|[^\\])yy/g, "$1" + h2.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h2);
          var c2 = (a2 ? t3.getUTCMonth() : t3.getMonth()) + 1;
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])MMMM+/g, "$1" + s2[0])).replace(/(^|[^\\])MMM/g, "$1" + r2[0])).replace(/(^|[^\\])MM/g, "$1" + l2(c2))).replace(/(^|[^\\])M/g, "$1" + c2);
          var d2 = a2 ? t3.getUTCDate() : t3.getDate();
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])dddd+/g, "$1" + o2[0])).replace(/(^|[^\\])ddd/g, "$1" + n2[0])).replace(/(^|[^\\])dd/g, "$1" + l2(d2))).replace(/(^|[^\\])d/g, "$1" + d2);
          var g2 = a2 ? t3.getUTCHours() : t3.getHours(), p2 = g2 > 12 ? g2 - 12 : 0 === g2 ? 12 : g2;
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])HH+/g, "$1" + l2(g2))).replace(/(^|[^\\])H/g, "$1" + g2)).replace(/(^|[^\\])hh+/g, "$1" + l2(p2))).replace(/(^|[^\\])h/g, "$1" + p2);
          var f2 = a2 ? t3.getUTCMinutes() : t3.getMinutes();
          e2 = (e2 = e2.replace(/(^|[^\\])mm+/g, "$1" + l2(f2))).replace(/(^|[^\\])m/g, "$1" + f2);
          var x2 = a2 ? t3.getUTCSeconds() : t3.getSeconds();
          e2 = (e2 = e2.replace(/(^|[^\\])ss+/g, "$1" + l2(x2))).replace(/(^|[^\\])s/g, "$1" + x2);
          var b2 = a2 ? t3.getUTCMilliseconds() : t3.getMilliseconds();
          e2 = e2.replace(/(^|[^\\])fff+/g, "$1" + l2(b2, 3)), b2 = Math.round(b2 / 10), e2 = e2.replace(/(^|[^\\])ff/g, "$1" + l2(b2)), b2 = Math.round(b2 / 10);
          var v2 = g2 < 12 ? "AM" : "PM";
          e2 = (e2 = (e2 = e2.replace(/(^|[^\\])f/g, "$1" + b2)).replace(/(^|[^\\])TT+/g, "$1" + v2)).replace(/(^|[^\\])T/g, "$1" + v2.charAt(0));
          var m3 = v2.toLowerCase();
          e2 = (e2 = e2.replace(/(^|[^\\])tt+/g, "$1" + m3)).replace(/(^|[^\\])t/g, "$1" + m3.charAt(0));
          var y2 = -t3.getTimezoneOffset(), w2 = a2 || !y2 ? "Z" : y2 > 0 ? "+" : "-";
          if (!a2) {
            var k2 = (y2 = Math.abs(y2)) % 60;
            w2 += l2(Math.floor(y2 / 60)) + ":" + l2(k2);
          }
          e2 = e2.replace(/(^|[^\\])K/g, "$1" + w2);
          var A2 = (a2 ? t3.getUTCDay() : t3.getDay()) + 1;
          return e2 = (e2 = (e2 = (e2 = (e2 = e2.replace(new RegExp(o2[0], "g"), o2[A2])).replace(new RegExp(n2[0], "g"), n2[A2])).replace(new RegExp(s2[0], "g"), s2[c2])).replace(new RegExp(r2[0], "g"), r2[c2])).replace(/\\(.)/g, "$1");
        } }, { key: "getTimeUnitsfromTimestamp", value: function(t3, e2, i2) {
          var a2 = this.w;
          void 0 !== a2.config.xaxis.min && (t3 = a2.config.xaxis.min), void 0 !== a2.config.xaxis.max && (e2 = a2.config.xaxis.max);
          var s2 = this.getDate(t3), r2 = this.getDate(e2), o2 = this.formatDate(s2, "yyyy MM dd HH mm ss fff").split(" "), n2 = this.formatDate(r2, "yyyy MM dd HH mm ss fff").split(" ");
          return { minMillisecond: parseInt(o2[6], 10), maxMillisecond: parseInt(n2[6], 10), minSecond: parseInt(o2[5], 10), maxSecond: parseInt(n2[5], 10), minMinute: parseInt(o2[4], 10), maxMinute: parseInt(n2[4], 10), minHour: parseInt(o2[3], 10), maxHour: parseInt(n2[3], 10), minDate: parseInt(o2[2], 10), maxDate: parseInt(n2[2], 10), minMonth: parseInt(o2[1], 10) - 1, maxMonth: parseInt(n2[1], 10) - 1, minYear: parseInt(o2[0], 10), maxYear: parseInt(n2[0], 10) };
        } }, { key: "isLeapYear", value: function(t3) {
          return t3 % 4 == 0 && t3 % 100 != 0 || t3 % 400 == 0;
        } }, { key: "calculcateLastDaysOfMonth", value: function(t3, e2, i2) {
          return this.determineDaysOfMonths(t3, e2) - i2;
        } }, { key: "determineDaysOfYear", value: function(t3) {
          var e2 = 365;
          return this.isLeapYear(t3) && (e2 = 366), e2;
        } }, { key: "determineRemainingDaysOfYear", value: function(t3, e2, i2) {
          var a2 = this.daysCntOfYear[e2] + i2;
          return e2 > 1 && this.isLeapYear() && a2++, a2;
        } }, { key: "determineDaysOfMonths", value: function(t3, e2) {
          var i2 = 30;
          switch (t3 = x.monthMod(t3), true) {
            case this.months30.indexOf(t3) > -1:
              2 === t3 && (i2 = this.isLeapYear(e2) ? 29 : 28);
              break;
            case this.months31.indexOf(t3) > -1:
            default:
              i2 = 31;
          }
          return i2;
        } }]), t2;
      }();
      var S = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.tooltipKeyFormat = "dd MMM";
        }
        return r(t2, [{ key: "xLabelFormat", value: function(t3, e2, i2, a2) {
          var s2 = this.w;
          if ("datetime" === s2.config.xaxis.type && void 0 === s2.config.xaxis.labels.formatter && void 0 === s2.config.tooltip.x.formatter) {
            var r2 = new A(this.ctx);
            return r2.formatDate(r2.getDate(e2), s2.config.tooltip.x.format);
          }
          return t3(e2, i2, a2);
        } }, { key: "defaultGeneralFormatter", value: function(t3) {
          return Array.isArray(t3) ? t3.map(function(t4) {
            return t4;
          }) : t3;
        } }, { key: "defaultYFormatter", value: function(t3, e2, i2) {
          var a2 = this.w;
          if (x.isNumber(t3))
            if (0 !== a2.globals.yValueDecimal)
              t3 = t3.toFixed(void 0 !== e2.decimalsInFloat ? e2.decimalsInFloat : a2.globals.yValueDecimal);
            else {
              var s2 = t3.toFixed(0);
              t3 = t3 == s2 ? s2 : t3.toFixed(1);
            }
          return t3;
        } }, { key: "setLabelFormatters", value: function() {
          var t3 = this, e2 = this.w;
          return e2.globals.xaxisTooltipFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, e2.globals.ttKeyFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, e2.globals.ttZFormatter = function(t4) {
            return t4;
          }, e2.globals.legendFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, void 0 !== e2.config.xaxis.labels.formatter ? e2.globals.xLabelFormatter = e2.config.xaxis.labels.formatter : e2.globals.xLabelFormatter = function(t4) {
            if (x.isNumber(t4)) {
              if (!e2.config.xaxis.convertedCatToNumeric && "numeric" === e2.config.xaxis.type) {
                if (x.isNumber(e2.config.xaxis.decimalsInFloat))
                  return t4.toFixed(e2.config.xaxis.decimalsInFloat);
                var i2 = e2.globals.maxX - e2.globals.minX;
                return i2 > 0 && i2 < 100 ? t4.toFixed(1) : t4.toFixed(0);
              }
              if (e2.globals.isBarHorizontal) {
                if (e2.globals.maxY - e2.globals.minYArr < 4)
                  return t4.toFixed(1);
              }
              return t4.toFixed(0);
            }
            return t4;
          }, "function" == typeof e2.config.tooltip.x.formatter ? e2.globals.ttKeyFormatter = e2.config.tooltip.x.formatter : e2.globals.ttKeyFormatter = e2.globals.xLabelFormatter, "function" == typeof e2.config.xaxis.tooltip.formatter && (e2.globals.xaxisTooltipFormatter = e2.config.xaxis.tooltip.formatter), (Array.isArray(e2.config.tooltip.y) || void 0 !== e2.config.tooltip.y.formatter) && (e2.globals.ttVal = e2.config.tooltip.y), void 0 !== e2.config.tooltip.z.formatter && (e2.globals.ttZFormatter = e2.config.tooltip.z.formatter), void 0 !== e2.config.legend.formatter && (e2.globals.legendFormatter = e2.config.legend.formatter), e2.config.yaxis.forEach(function(i2, a2) {
            void 0 !== i2.labels.formatter ? e2.globals.yLabelFormatters[a2] = i2.labels.formatter : e2.globals.yLabelFormatters[a2] = function(s2) {
              return e2.globals.xyCharts ? Array.isArray(s2) ? s2.map(function(e3) {
                return t3.defaultYFormatter(e3, i2, a2);
              }) : t3.defaultYFormatter(s2, i2, a2) : s2;
            };
          }), e2.globals;
        } }, { key: "heatmapLabelFormatters", value: function() {
          var t3 = this.w;
          if ("heatmap" === t3.config.chart.type) {
            t3.globals.yAxisScale[0].result = t3.globals.seriesNames.slice();
            var e2 = t3.globals.seriesNames.reduce(function(t4, e3) {
              return t4.length > e3.length ? t4 : e3;
            }, 0);
            t3.globals.yAxisScale[0].niceMax = e2, t3.globals.yAxisScale[0].niceMin = e2;
          }
        } }]), t2;
      }();
      var C = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getLabel", value: function(t3, e2, i2, a2) {
          var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o2 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n2 = this.w, l2 = void 0 === t3[a2] ? "" : t3[a2], h2 = l2, c2 = n2.globals.xLabelFormatter, d2 = n2.config.xaxis.labels.formatter, g2 = false, u2 = new S(this.ctx), p2 = l2;
          o2 && (h2 = u2.xLabelFormat(c2, l2, p2, { i: a2, dateFormatter: new A(this.ctx).formatDate, w: n2 }), void 0 !== d2 && (h2 = d2(l2, t3[a2], { i: a2, dateFormatter: new A(this.ctx).formatDate, w: n2 })));
          var f2, x2;
          e2.length > 0 ? (f2 = e2[a2].unit, x2 = null, e2.forEach(function(t4) {
            "month" === t4.unit ? x2 = "year" : "day" === t4.unit ? x2 = "month" : "hour" === t4.unit ? x2 = "day" : "minute" === t4.unit && (x2 = "hour");
          }), g2 = x2 === f2, i2 = e2[a2].position, h2 = e2[a2].value) : "datetime" === n2.config.xaxis.type && void 0 === d2 && (h2 = ""), void 0 === h2 && (h2 = ""), h2 = Array.isArray(h2) ? h2 : h2.toString();
          var b2 = new m2(this.ctx), v2 = {};
          v2 = n2.globals.rotateXLabels && o2 ? b2.getTextRects(h2, parseInt(r2, 10), null, "rotate(".concat(n2.config.xaxis.labels.rotate, " 0 0)"), false) : b2.getTextRects(h2, parseInt(r2, 10));
          var y2 = !n2.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
          return !Array.isArray(h2) && ("NaN" === String(h2) || s2.indexOf(h2) >= 0 && y2) && (h2 = ""), { x: i2, text: h2, textRect: v2, isBold: g2 };
        } }, { key: "checkLabelBasedOnTickamount", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.config.xaxis.tickAmount;
          return "dataPoints" === s2 && (s2 = Math.round(a2.globals.gridWidth / 120)), s2 > i2 || t3 % Math.round(i2 / (s2 + 1)) == 0 || (e2.text = ""), e2;
        } }, { key: "checkForOverflowingLabels", value: function(t3, e2, i2, a2, s2) {
          var r2 = this.w;
          if (0 === t3 && r2.globals.skipFirstTimelinelabel && (e2.text = ""), t3 === i2 - 1 && r2.globals.skipLastTimelinelabel && (e2.text = ""), r2.config.xaxis.labels.hideOverlappingLabels && a2.length > 0) {
            var o2 = s2[s2.length - 1];
            e2.x < o2.textRect.width / (r2.globals.rotateXLabels ? Math.abs(r2.config.xaxis.labels.rotate) / 12 : 1.01) + o2.x && (e2.text = "");
          }
          return e2;
        } }, { key: "checkForReversedLabels", value: function(t3, e2) {
          var i2 = this.w;
          return i2.config.yaxis[t3] && i2.config.yaxis[t3].reversed && e2.reverse(), e2;
        } }, { key: "yAxisAllSeriesCollapsed", value: function(t3) {
          var e2 = this.w.globals;
          return !e2.seriesYAxisMap[t3].some(function(t4) {
            return -1 === e2.collapsedSeriesIndices.indexOf(t4);
          });
        } }, { key: "translateYAxisIndex", value: function(t3) {
          var e2 = this.w, i2 = e2.globals, a2 = e2.config.yaxis;
          return i2.series.length > a2.length || a2.some(function(t4) {
            return Array.isArray(t4.seriesName);
          }) ? t3 : i2.seriesYAxisReverseMap[t3];
        } }, { key: "isYAxisHidden", value: function(t3) {
          var e2 = this.w, i2 = e2.config.yaxis[t3];
          if (!i2.show || this.yAxisAllSeriesCollapsed(t3))
            return true;
          if (!i2.showForNullSeries) {
            var a2 = e2.globals.seriesYAxisMap[t3], s2 = new y(this.ctx);
            return a2.every(function(t4) {
              return s2.isSeriesNull(t4);
            });
          }
          return false;
        } }, { key: "getYAxisForeColor", value: function(t3, e2) {
          var i2 = this.w;
          return Array.isArray(t3) && i2.globals.yAxisScale[e2] && this.ctx.theme.pushExtraColors(t3, i2.globals.yAxisScale[e2].result.length, false), t3;
        } }, { key: "drawYAxisTicks", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = new m2(this.ctx), h2 = n2.globals.translateY + n2.config.yaxis[s2].labels.offsetY;
          if (n2.globals.isBarHorizontal ? h2 = 0 : "heatmap" === n2.config.chart.type && (h2 += r2 / 2), a2.show && e2 > 0) {
            true === n2.config.yaxis[s2].opposite && (t3 += a2.width);
            for (var c2 = e2; c2 >= 0; c2--) {
              var d2 = l2.drawLine(t3 + i2.offsetX - a2.width + a2.offsetX, h2 + a2.offsetY, t3 + i2.offsetX + a2.offsetX, h2 + a2.offsetY, a2.color);
              o2.add(d2), h2 += r2;
            }
          }
        } }]), t2;
      }();
      var L = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new w(this.annoCtx), this.axesUtils = new C(this.annoCtx);
        }
        return r(t2, [{ key: "addYaxisAnnotation", value: function(t3, e2, i2) {
          var a2, s2 = this.w, r2 = t3.strokeDashArray, o2 = this.helpers.getY1Y2("y1", t3), n2 = o2.yP, l2 = o2.clipped, h2 = true, c2 = false, d2 = t3.label.text;
          if (null === t3.y2 || void 0 === t3.y2) {
            if (!l2) {
              c2 = true;
              var g2 = this.annoCtx.graphics.drawLine(0 + t3.offsetX, n2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), n2 + t3.offsetY, t3.borderColor, r2, t3.borderWidth);
              e2.appendChild(g2.node), t3.id && g2.node.classList.add(t3.id);
            }
          } else {
            if (a2 = (o2 = this.helpers.getY1Y2("y2", t3)).yP, h2 = o2.clipped, a2 > n2) {
              var u2 = n2;
              n2 = a2, a2 = u2;
            }
            if (!l2 || !h2) {
              c2 = true;
              var p2 = this.annoCtx.graphics.drawRect(0 + t3.offsetX, a2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), n2 - a2, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, r2);
              p2.node.classList.add("apexcharts-annotation-rect"), p2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(p2.node), t3.id && p2.node.classList.add(t3.id);
            }
          }
          if (c2) {
            var f2 = "right" === t3.label.position ? s2.globals.gridWidth : "center" === t3.label.position ? s2.globals.gridWidth / 2 : 0, x2 = this.annoCtx.graphics.drawText({ x: f2 + t3.label.offsetX, y: (null != a2 ? a2 : n2) + t3.label.offsetY - 3, text: d2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
            x2.attr({ rel: i2 }), e2.appendChild(x2.node);
          }
        } }, { key: "_getYAxisAnnotationWidth", value: function(t3) {
          var e2 = this.w;
          e2.globals.gridWidth;
          return (t3.width.indexOf("%") > -1 ? e2.globals.gridWidth * parseInt(t3.width, 10) / 100 : parseInt(t3.width, 10)) + t3.offsetX;
        } }, { key: "drawYAxisAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
          return e2.config.annotations.yaxis.forEach(function(e3, a2) {
            e3.yAxisIndex = t3.axesUtils.translateYAxisIndex(e3.yAxisIndex), t3.axesUtils.isYAxisHidden(e3.yAxisIndex) && t3.axesUtils.yAxisAllSeriesCollapsed(e3.yAxisIndex) || t3.addYaxisAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var P = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new w(this.annoCtx);
        }
        return r(t2, [{ key: "addPointAnnotation", value: function(t3, e2, i2) {
          if (!(this.w.globals.collapsedSeriesIndices.indexOf(t3.seriesIndex) > -1)) {
            var a2 = this.helpers.getX1X2("x1", t3), s2 = a2.x, r2 = a2.clipped, o2 = (a2 = this.helpers.getY1Y2("y1", t3)).yP, n2 = a2.clipped;
            if (x.isNumber(s2) && !n2 && !r2) {
              var l2 = { pSize: t3.marker.size, pointStrokeWidth: t3.marker.strokeWidth, pointFillColor: t3.marker.fillColor, pointStrokeColor: t3.marker.strokeColor, shape: t3.marker.shape, pRadius: t3.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t3.marker.cssClass, " ").concat(t3.id ? t3.id : "") }, h2 = this.annoCtx.graphics.drawMarker(s2 + t3.marker.offsetX, o2 + t3.marker.offsetY, l2);
              e2.appendChild(h2.node);
              var c2 = t3.label.text ? t3.label.text : "", d2 = this.annoCtx.graphics.drawText({ x: s2 + t3.label.offsetX, y: o2 + t3.label.offsetY - t3.marker.size - parseFloat(t3.label.style.fontSize) / 1.6, text: c2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
              if (d2.attr({ rel: i2 }), e2.appendChild(d2.node), t3.customSVG.SVG) {
                var g2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t3.customSVG.cssClass });
                g2.attr({ transform: "translate(".concat(s2 + t3.customSVG.offsetX, ", ").concat(o2 + t3.customSVG.offsetY, ")") }), g2.node.innerHTML = t3.customSVG.SVG, e2.appendChild(g2.node);
              }
              if (t3.image.path) {
                var u2 = t3.image.width ? t3.image.width : 20, p2 = t3.image.height ? t3.image.height : 20;
                h2 = this.annoCtx.addImage({ x: s2 + t3.image.offsetX - u2 / 2, y: o2 + t3.image.offsetY - p2 / 2, width: u2, height: p2, path: t3.image.path, appendTo: ".apexcharts-point-annotations" });
              }
              t3.mouseEnter && h2.node.addEventListener("mouseenter", t3.mouseEnter.bind(this, t3)), t3.mouseLeave && h2.node.addEventListener("mouseleave", t3.mouseLeave.bind(this, t3)), t3.click && h2.node.addEventListener("click", t3.click.bind(this, t3));
            }
          }
        } }, { key: "drawPointAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
          return e2.config.annotations.points.map(function(e3, a2) {
            t3.addPointAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var M = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } };
      var I = function() {
        function t2() {
          a(this, t2), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, stepSize: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: void 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, radius: 2, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
        }
        return r(t2, [{ key: "init", value: function() {
          return { annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "transparent", locales: [M], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, nonce: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0, targets: void 0 }, stacked: false, stackOnlyBar: true, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", dateFormatter: function(t3) {
            return new Date(t3).toDateString();
          } }, png: { filename: void 0 }, svg: { filename: void 0 } }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { line: { isSlopeChart: false }, area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, borderRadiusApplication: "around", borderRadiusWhenStacked: "last", rangeBarOverlap: true, rangeBarGroupRows: false, hideZeroBarsWhenGrouped: false, isDumbbell: false, dumbbellColors: void 0, isFunnel: false, isFunnel3d: true, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { zScaling: true, minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, borderRadius: 4, dataLabels: { format: "scale" }, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t3) {
            return t3;
          } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t3) {
            return t3 + "%";
          } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t3) {
            return t3.globals.seriesTotals.reduce(function(t4, e2) {
              return t4 + e2;
            }, 0) / t3.globals.series.length + "%";
          } } }, barLabels: { enabled: false, margin: 5, useSeriesColors: true, fontFamily: void 0, fontWeight: 600, fontSize: "16px", formatter: function(t3) {
            return t3;
          }, onClick: void 0 } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t3) {
            return t3;
          } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t3) {
            return t3;
          } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t3) {
            return t3.globals.seriesTotals.reduce(function(t4, e2) {
              return t4 + e2;
            }, 0);
          } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t3) {
            return null !== t3 ? t3 : "";
          }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], labels: { colors: void 0, useSeriesColors: false }, markers: { width: 12, height: 12, strokeWidth: 0, fillColors: void 0, strokeColor: "#fff", radius: 12, customHTML: void 0, offsetX: 0, offsetY: 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 2 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", width: 8, height: 8, radius: 2, offsetX: 0, offsetY: 0, onClick: void 0, onDblClick: void 0, showNullDataPoints: true, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { normal: { filter: { type: "none", value: 0 } }, hover: { filter: { type: "lighten", value: 0.1 } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken", value: 0.5 } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, hideEmptySeries: false, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t3) {
            return t3 ? t3 + ": " : "";
          } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, stepSize: void 0, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.4 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "light", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
        } }]), t2;
      }();
      var T = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.graphics = new m2(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new w(this), this.xAxisAnnotations = new k(this), this.yAxisAnnotations = new L(this), this.pointsAnnotations = new P(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
        }
        return r(t2, [{ key: "drawAxesAnnotations", value: function() {
          var t3 = this.w;
          if (t3.globals.axisCharts) {
            for (var e2 = this.yAxisAnnotations.drawYAxisAnnotations(), i2 = this.xAxisAnnotations.drawXAxisAnnotations(), a2 = this.pointsAnnotations.drawPointAnnotations(), s2 = t3.config.chart.animations.enabled, r2 = [e2, i2, a2], o2 = [i2.node, e2.node, a2.node], n2 = 0; n2 < 3; n2++)
              t3.globals.dom.elGraphical.add(r2[n2]), !s2 || t3.globals.resized || t3.globals.dataChanged || "scatter" !== t3.config.chart.type && "bubble" !== t3.config.chart.type && t3.globals.dataPoints > 1 && o2[n2].classList.add("apexcharts-element-hidden"), t3.globals.delayedElements.push({ el: o2[n2], index: 0 });
            this.helpers.annotationsBackground();
          }
        } }, { key: "drawImageAnnos", value: function() {
          var t3 = this;
          this.w.config.annotations.images.map(function(e2, i2) {
            t3.addImage(e2, i2);
          });
        } }, { key: "drawTextAnnos", value: function() {
          var t3 = this;
          this.w.config.annotations.texts.map(function(e2, i2) {
            t3.addText(e2, i2);
          });
        } }, { key: "addXaxisAnnotation", value: function(t3, e2, i2) {
          this.xAxisAnnotations.addXaxisAnnotation(t3, e2, i2);
        } }, { key: "addYaxisAnnotation", value: function(t3, e2, i2) {
          this.yAxisAnnotations.addYaxisAnnotation(t3, e2, i2);
        } }, { key: "addPointAnnotation", value: function(t3, e2, i2) {
          this.pointsAnnotations.addPointAnnotation(t3, e2, i2);
        } }, { key: "addText", value: function(t3, e2) {
          var i2 = t3.x, a2 = t3.y, s2 = t3.text, r2 = t3.textAnchor, o2 = t3.foreColor, n2 = t3.fontSize, l2 = t3.fontFamily, h2 = t3.fontWeight, c2 = t3.cssClass, d2 = t3.backgroundColor, g2 = t3.borderWidth, u2 = t3.strokeDashArray, p2 = t3.borderRadius, f2 = t3.borderColor, x2 = t3.appendTo, b2 = void 0 === x2 ? ".apexcharts-svg" : x2, v2 = t3.paddingLeft, m3 = void 0 === v2 ? 4 : v2, y2 = t3.paddingRight, w2 = void 0 === y2 ? 4 : y2, k2 = t3.paddingBottom, A2 = void 0 === k2 ? 2 : k2, S2 = t3.paddingTop, C2 = void 0 === S2 ? 2 : S2, L2 = this.w, P2 = this.graphics.drawText({ x: i2, y: a2, text: s2, textAnchor: r2 || "start", fontSize: n2 || "12px", fontWeight: h2 || "regular", fontFamily: l2 || L2.config.chart.fontFamily, foreColor: o2 || L2.config.chart.foreColor, cssClass: c2 }), M2 = L2.globals.dom.baseEl.querySelector(b2);
          M2 && M2.appendChild(P2.node);
          var I2 = P2.bbox();
          if (s2) {
            var T2 = this.graphics.drawRect(I2.x - m3, I2.y - C2, I2.width + m3 + w2, I2.height + A2 + C2, p2, d2 || "transparent", 1, g2, f2, u2);
            M2.insertBefore(T2.node, P2.node);
          }
        } }, { key: "addImage", value: function(t3, e2) {
          var i2 = this.w, a2 = t3.path, s2 = t3.x, r2 = void 0 === s2 ? 0 : s2, o2 = t3.y, n2 = void 0 === o2 ? 0 : o2, l2 = t3.width, h2 = void 0 === l2 ? 20 : l2, c2 = t3.height, d2 = void 0 === c2 ? 20 : c2, g2 = t3.appendTo, u2 = void 0 === g2 ? ".apexcharts-svg" : g2, p2 = i2.globals.dom.Paper.image(a2);
          p2.size(h2, d2).move(r2, n2);
          var f2 = i2.globals.dom.baseEl.querySelector(u2);
          return f2 && f2.appendChild(p2.node), p2;
        } }, { key: "addXaxisAnnotationExternal", value: function(t3, e2, i2) {
          return this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "xaxis", contextMethod: i2.addXaxisAnnotation }), i2;
        } }, { key: "addYaxisAnnotationExternal", value: function(t3, e2, i2) {
          return this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "yaxis", contextMethod: i2.addYaxisAnnotation }), i2;
        } }, { key: "addPointAnnotationExternal", value: function(t3, e2, i2) {
          return void 0 === this.invertAxis && (this.invertAxis = i2.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "point", contextMethod: i2.addPointAnnotation }), i2;
        } }, { key: "addAnnotationExternal", value: function(t3) {
          var e2 = t3.params, i2 = t3.pushToMemory, a2 = t3.context, s2 = t3.type, r2 = t3.contextMethod, o2 = a2, n2 = o2.w, l2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations")), h2 = l2.childNodes.length + 1, c2 = new I(), d2 = Object.assign({}, "xaxis" === s2 ? c2.xAxisAnnotation : "yaxis" === s2 ? c2.yAxisAnnotation : c2.pointAnnotation), g2 = x.extend(d2, e2);
          switch (s2) {
            case "xaxis":
              this.addXaxisAnnotation(g2, l2, h2);
              break;
            case "yaxis":
              this.addYaxisAnnotation(g2, l2, h2);
              break;
            case "point":
              this.addPointAnnotation(g2, l2, h2);
          }
          var u2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(h2, "']")), p2 = this.helpers.addBackgroundToAnno(u2, g2);
          return p2 && l2.insertBefore(p2.node, u2), i2 && n2.globals.memory.methodsToExec.push({ context: o2, id: g2.id ? g2.id : x.randomId(), method: r2, label: "addAnnotation", params: e2 }), a2;
        } }, { key: "clearAnnotations", value: function(t3) {
          var e2 = t3.w, i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
          e2.globals.memory.methodsToExec.map(function(t4, i3) {
            "addText" !== t4.label && "addAnnotation" !== t4.label || e2.globals.memory.methodsToExec.splice(i3, 1);
          }), i2 = x.listToArray(i2), Array.prototype.forEach.call(i2, function(t4) {
            for (; t4.firstChild; )
              t4.removeChild(t4.firstChild);
          });
        } }, { key: "removeAnnotation", value: function(t3, e2) {
          var i2 = t3.w, a2 = i2.globals.dom.baseEl.querySelectorAll(".".concat(e2));
          a2 && (i2.globals.memory.methodsToExec.map(function(t4, a3) {
            t4.id === e2 && i2.globals.memory.methodsToExec.splice(a3, 1);
          }), Array.prototype.forEach.call(a2, function(t4) {
            t4.parentElement.removeChild(t4);
          }));
        } }]), t2;
      }();
      var z = function(t2) {
        var e2, i2 = t2.isTimeline, a2 = t2.ctx, s2 = t2.seriesIndex, r2 = t2.dataPointIndex, o2 = t2.y1, n2 = t2.y2, l2 = t2.w, h2 = l2.globals.seriesRangeStart[s2][r2], c2 = l2.globals.seriesRangeEnd[s2][r2], d2 = l2.globals.labels[r2], g2 = l2.config.series[s2].name ? l2.config.series[s2].name : "", u2 = l2.globals.ttKeyFormatter, p2 = l2.config.tooltip.y.title.formatter, f2 = { w: l2, seriesIndex: s2, dataPointIndex: r2, start: h2, end: c2 };
        ("function" == typeof p2 && (g2 = p2(g2, f2)), null !== (e2 = l2.config.series[s2].data[r2]) && void 0 !== e2 && e2.x && (d2 = l2.config.series[s2].data[r2].x), i2) || "datetime" === l2.config.xaxis.type && (d2 = new S(a2).xLabelFormat(l2.globals.ttKeyFormatter, d2, d2, { i: void 0, dateFormatter: new A(a2).formatDate, w: l2 }));
        "function" == typeof u2 && (d2 = u2(d2, f2)), Number.isFinite(o2) && Number.isFinite(n2) && (h2 = o2, c2 = n2);
        var x2 = "", b2 = "", v2 = l2.globals.colors[s2];
        if (void 0 === l2.config.tooltip.x.formatter)
          if ("datetime" === l2.config.xaxis.type) {
            var m3 = new A(a2);
            x2 = m3.formatDate(m3.getDate(h2), l2.config.tooltip.x.format), b2 = m3.formatDate(m3.getDate(c2), l2.config.tooltip.x.format);
          } else
            x2 = h2, b2 = c2;
        else
          x2 = l2.config.tooltip.x.formatter(h2), b2 = l2.config.tooltip.x.formatter(c2);
        return { start: h2, end: c2, startVal: x2, endVal: b2, ylabel: d2, color: v2, seriesName: g2 };
      };
      var X = function(t2) {
        var e2 = t2.color, i2 = t2.seriesName, a2 = t2.ylabel, s2 = t2.start, r2 = t2.end, o2 = t2.seriesIndex, n2 = t2.dataPointIndex, l2 = t2.ctx.tooltip.tooltipLabels.getFormatters(o2);
        s2 = l2.yLbFormatter(s2), r2 = l2.yLbFormatter(r2);
        var h2 = l2.yLbFormatter(t2.w.globals.series[o2][n2]), c2 = '<span class="value start-value">\n  '.concat(s2, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r2, "\n  </span>");
        return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e2 + '">' + (i2 || "") + '</span></div><div> <span class="category">' + a2 + ": </span> " + (t2.w.globals.comboCharts ? "rangeArea" === t2.w.config.series[o2].type || "rangeBar" === t2.w.config.series[o2].type ? c2 : "<span>".concat(h2, "</span>") : c2) + " </div></div>";
      };
      var E = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "hideYAxis", value: function() {
          this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
        } }, { key: "line", value: function() {
          return { chart: { animations: { easing: "swing" } }, dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "sparkline", value: function(t3) {
          this.hideYAxis();
          return x.extend(t3, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
        } }, { key: "slope", value: function() {
          return this.hideYAxis(), { chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: true, formatter: function(t3, e2) {
            var i2 = e2.w.config.series[e2.seriesIndex].name;
            return null !== t3 ? i2 + ": " + t3 : "";
          }, background: { enabled: false }, offsetX: -5 }, grid: { xaxis: { lines: { show: true } }, yaxis: { lines: { show: false } } }, xaxis: { position: "top", labels: { style: { fontSize: 14, fontWeight: 900 } }, tooltip: { enabled: false }, crosshairs: { show: false } }, markers: { size: 8, hover: { sizeOffset: 1 } }, legend: { show: false }, tooltip: { shared: false, intersect: true, followCursor: true }, stroke: { width: 5, curve: "straight" } };
        } }, { key: "bar", value: function() {
          return { chart: { stacked: false, animations: { easing: "swing" } }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "round" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square", radius: 2, size: 8 } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
        } }, { key: "funnel", value: function() {
          return this.hideYAxis(), e(e({}, this.bar()), {}, { chart: { animations: { easing: "linear", speed: 800, animateGradually: { enabled: false } } }, plotOptions: { bar: { horizontal: true, borderRadiusApplication: "around", borderRadius: 0, dataLabels: { position: "center" } } }, grid: { show: false, padding: { left: 0, right: 0 } }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } } });
        } }, { key: "candlestick", value: function() {
          var t3 = this;
          return { stroke: { width: 1, colors: ["#333"] }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e2) {
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w;
            return t3._getBoxTooltip(s2, i2, a2, ["Open", "High", "", "Low", "Close"], "candlestick");
          } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "boxPlot", value: function() {
          var t3 = this;
          return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e2) {
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w;
            return t3._getBoxTooltip(s2, i2, a2, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
          } }, markers: { size: 5, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "rangeBar", value: function() {
          return { chart: { animations: { animateGradually: false } }, stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t3, e2) {
            e2.ctx;
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w, r2 = function() {
              var t4 = s2.globals.seriesRangeStart[i2][a2];
              return s2.globals.seriesRangeEnd[i2][a2] - t4;
            };
            return s2.globals.comboCharts ? "rangeBar" === s2.config.series[i2].type || "rangeArea" === s2.config.series[i2].type ? r2() : t3 : r2();
          }, background: { enabled: false }, style: { colors: ["#fff"] } }, markers: { size: 10 }, tooltip: { shared: false, followCursor: true, custom: function(t3) {
            return t3.w.config.plotOptions && t3.w.config.plotOptions.bar && t3.w.config.plotOptions.bar.horizontal ? function(t4) {
              var i2 = z(e(e({}, t4), {}, { isTimeline: true })), a2 = i2.color, s2 = i2.seriesName, r2 = i2.ylabel, o2 = i2.startVal, n2 = i2.endVal;
              return X(e(e({}, t4), {}, { color: a2, seriesName: s2, ylabel: r2, start: o2, end: n2 }));
            }(t3) : function(t4) {
              var i2 = z(t4), a2 = i2.color, s2 = i2.seriesName, r2 = i2.ylabel, o2 = i2.start, n2 = i2.end;
              return X(e(e({}, t4), {}, { color: a2, seriesName: s2, ylabel: r2, start: o2, end: n2 }));
            }(t3);
          } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
        } }, { key: "dumbbell", value: function(t3) {
          var e2, i2;
          return null !== (e2 = t3.plotOptions.bar) && void 0 !== e2 && e2.barHeight || (t3.plotOptions.bar.barHeight = 2), null !== (i2 = t3.plotOptions.bar) && void 0 !== i2 && i2.columnWidth || (t3.plotOptions.bar.columnWidth = 2), t3;
        } }, { key: "area", value: function() {
          return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
        } }, { key: "rangeArea", value: function() {
          return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t3) {
            return function(t4) {
              var i2 = z(t4), a2 = i2.color, s2 = i2.seriesName, r2 = i2.ylabel, o2 = i2.start, n2 = i2.end;
              return X(e(e({}, t4), {}, { color: a2, seriesName: s2, ylabel: r2, start: o2, end: n2 }));
            }(t3);
          } } };
        } }, { key: "brush", value: function(t3) {
          return x.extend(t3, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
        } }, { key: "stacked100", value: function(t3) {
          t3.dataLabels = t3.dataLabels || {}, t3.dataLabels.formatter = t3.dataLabels.formatter || void 0;
          var e2 = t3.dataLabels.formatter;
          return t3.yaxis.forEach(function(e3, i2) {
            t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
          }), "bar" === t3.chart.type && (t3.dataLabels.formatter = e2 || function(t4) {
            return "number" == typeof t4 && t4 ? t4.toFixed(0) + "%" : t4;
          }), t3;
        } }, { key: "stackedBars", value: function() {
          var t3 = this.bar();
          return e(e({}, t3), {}, { plotOptions: e(e({}, t3.plotOptions), {}, { bar: e(e({}, t3.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
        } }, { key: "convertCatToNumeric", value: function(t3) {
          return t3.xaxis.convertedCatToNumeric = true, t3;
        } }, { key: "convertCatToNumericXaxis", value: function(t3, e2, i2) {
          t3.xaxis.type = "numeric", t3.xaxis.labels = t3.xaxis.labels || {}, t3.xaxis.labels.formatter = t3.xaxis.labels.formatter || function(t4) {
            return x.isNumber(t4) ? Math.floor(t4) : t4;
          };
          var a2 = t3.xaxis.labels.formatter, s2 = t3.xaxis.categories && t3.xaxis.categories.length ? t3.xaxis.categories : t3.labels;
          return i2 && i2.length && (s2 = i2.map(function(t4) {
            return Array.isArray(t4) ? t4 : String(t4);
          })), s2 && s2.length && (t3.xaxis.labels.formatter = function(t4) {
            return x.isNumber(t4) ? a2(s2[Math.floor(t4) - 1]) : a2(t4);
          }), t3.xaxis.categories = [], t3.labels = [], t3.xaxis.tickAmount = t3.xaxis.tickAmount || "dataPoints", t3;
        } }, { key: "bubble", value: function() {
          return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
        } }, { key: "scatter", value: function() {
          return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
        } }, { key: "heatmap", value: function() {
          return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square", size: 10, offsetY: 2 } }, grid: { padding: { right: 20 } } };
        } }, { key: "treemap", value: function() {
          return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
        } }, { key: "pie", value: function() {
          return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "donut", value: function() {
          return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "polarArea", value: function() {
          return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "radar", value: function() {
          return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false }, xaxis: { labels: { formatter: function(t3) {
            return t3;
          }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
        } }, { key: "radialBar", value: function() {
          return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true } };
        } }, { key: "_getBoxTooltip", value: function(t3, e2, i2, a2, s2) {
          var r2 = t3.globals.seriesCandleO[e2][i2], o2 = t3.globals.seriesCandleH[e2][i2], n2 = t3.globals.seriesCandleM[e2][i2], l2 = t3.globals.seriesCandleL[e2][i2], h2 = t3.globals.seriesCandleC[e2][i2];
          return t3.config.series[e2].type && t3.config.series[e2].type !== s2 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t3.config.series[e2].name ? t3.config.series[e2].name : "series-" + (e2 + 1), ": <strong>").concat(t3.globals.series[e2][i2], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t3.config.chart.type, '">') + "<div>".concat(a2[0], ': <span class="value">') + r2 + "</span></div>" + "<div>".concat(a2[1], ': <span class="value">') + o2 + "</span></div>" + (n2 ? "<div>".concat(a2[2], ': <span class="value">') + n2 + "</span></div>" : "") + "<div>".concat(a2[3], ': <span class="value">') + l2 + "</span></div>" + "<div>".concat(a2[4], ': <span class="value">') + h2 + "</span></div></div>";
        } }]), t2;
      }();
      var Y = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "init", value: function(t3) {
          var e2 = t3.responsiveOverride, a2 = this.opts, s2 = new I(), r2 = new E(a2);
          this.chartType = a2.chart.type, a2 = this.extendYAxis(a2), a2 = this.extendAnnotations(a2);
          var o2 = s2.init(), n2 = {};
          if (a2 && "object" === i(a2)) {
            var l2, h2, c2, d2, g2, u2, p2, f2, b2, v2, m3 = {};
            m3 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(a2.chart.type) ? r2[a2.chart.type]() : r2.line(), null !== (l2 = a2.plotOptions) && void 0 !== l2 && null !== (h2 = l2.bar) && void 0 !== h2 && h2.isFunnel && (m3 = r2.funnel()), a2.chart.stacked && "bar" === a2.chart.type && (m3 = r2.stackedBars()), null !== (c2 = a2.chart.brush) && void 0 !== c2 && c2.enabled && (m3 = r2.brush(m3)), null !== (d2 = a2.plotOptions) && void 0 !== d2 && null !== (g2 = d2.line) && void 0 !== g2 && g2.isSlopeChart && (m3 = r2.slope()), a2.chart.stacked && "100%" === a2.chart.stackType && (a2 = r2.stacked100(a2)), null !== (u2 = a2.plotOptions) && void 0 !== u2 && null !== (p2 = u2.bar) && void 0 !== p2 && p2.isDumbbell && (a2 = r2.dumbbell(a2)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a2), a2.xaxis = a2.xaxis || window.Apex.xaxis || {}, e2 || (a2.xaxis.convertedCatToNumeric = false), (null !== (f2 = (a2 = this.checkForCatToNumericXAxis(this.chartType, m3, a2)).chart.sparkline) && void 0 !== f2 && f2.enabled || null !== (b2 = window.Apex.chart) && void 0 !== b2 && null !== (v2 = b2.sparkline) && void 0 !== v2 && v2.enabled) && (m3 = r2.sparkline(m3)), n2 = x.extend(o2, m3);
          }
          var y2 = x.extend(n2, window.Apex);
          return o2 = x.extend(y2, a2), o2 = this.handleUserInputErrors(o2);
        } }, { key: "checkForCatToNumericXAxis", value: function(t3, e2, i2) {
          var a2, s2, r2 = new E(i2), o2 = ("bar" === t3 || "boxPlot" === t3) && (null === (a2 = i2.plotOptions) || void 0 === a2 || null === (s2 = a2.bar) || void 0 === s2 ? void 0 : s2.horizontal), n2 = "pie" === t3 || "polarArea" === t3 || "donut" === t3 || "radar" === t3 || "radialBar" === t3 || "heatmap" === t3, l2 = "datetime" !== i2.xaxis.type && "numeric" !== i2.xaxis.type, h2 = i2.xaxis.tickPlacement ? i2.xaxis.tickPlacement : e2.xaxis && e2.xaxis.tickPlacement;
          return o2 || n2 || !l2 || "between" === h2 || (i2 = r2.convertCatToNumeric(i2)), i2;
        } }, { key: "extendYAxis", value: function(t3, e2) {
          var i2 = new I();
          (void 0 === t3.yaxis || !t3.yaxis || Array.isArray(t3.yaxis) && 0 === t3.yaxis.length) && (t3.yaxis = {}), t3.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t3.yaxis = x.extend(t3.yaxis, window.Apex.yaxis)), t3.yaxis.constructor !== Array ? t3.yaxis = [x.extend(i2.yAxis, t3.yaxis)] : t3.yaxis = x.extendArray(t3.yaxis, i2.yAxis);
          var a2 = false;
          t3.yaxis.forEach(function(t4) {
            t4.logarithmic && (a2 = true);
          });
          var s2 = t3.series;
          return e2 && !s2 && (s2 = e2.config.series), a2 && s2.length !== t3.yaxis.length && s2.length && (t3.yaxis = s2.map(function(e3, a3) {
            if (e3.name || (s2[a3].name = "series-".concat(a3 + 1)), t3.yaxis[a3])
              return t3.yaxis[a3].seriesName = s2[a3].name, t3.yaxis[a3];
            var r2 = x.extend(i2.yAxis, t3.yaxis[0]);
            return r2.show = false, r2;
          })), a2 && s2.length > 1 && s2.length !== t3.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes"), t3;
        } }, { key: "extendAnnotations", value: function(t3) {
          return void 0 === t3.annotations && (t3.annotations = {}, t3.annotations.yaxis = [], t3.annotations.xaxis = [], t3.annotations.points = []), t3 = this.extendYAxisAnnotations(t3), t3 = this.extendXAxisAnnotations(t3), t3 = this.extendPointAnnotations(t3);
        } }, { key: "extendYAxisAnnotations", value: function(t3) {
          var e2 = new I();
          return t3.annotations.yaxis = x.extendArray(void 0 !== t3.annotations.yaxis ? t3.annotations.yaxis : [], e2.yAxisAnnotation), t3;
        } }, { key: "extendXAxisAnnotations", value: function(t3) {
          var e2 = new I();
          return t3.annotations.xaxis = x.extendArray(void 0 !== t3.annotations.xaxis ? t3.annotations.xaxis : [], e2.xAxisAnnotation), t3;
        } }, { key: "extendPointAnnotations", value: function(t3) {
          var e2 = new I();
          return t3.annotations.points = x.extendArray(void 0 !== t3.annotations.points ? t3.annotations.points : [], e2.pointAnnotation), t3;
        } }, { key: "checkForDarkTheme", value: function(t3) {
          t3.theme && "dark" === t3.theme.mode && (t3.tooltip || (t3.tooltip = {}), "light" !== t3.tooltip.theme && (t3.tooltip.theme = "dark"), t3.chart.foreColor || (t3.chart.foreColor = "#f6f7f8"), t3.chart.background || (t3.chart.background = "#424242"), t3.theme.palette || (t3.theme.palette = "palette4"));
        } }, { key: "handleUserInputErrors", value: function(t3) {
          var e2 = t3;
          if (e2.tooltip.shared && e2.tooltip.intersect)
            throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
          if ("bar" === e2.chart.type && e2.plotOptions.bar.horizontal) {
            if (e2.yaxis.length > 1)
              throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
            e2.yaxis[0].reversed && (e2.yaxis[0].opposite = true), e2.xaxis.tooltip.enabled = false, e2.yaxis[0].tooltip.enabled = false, e2.chart.zoom.enabled = false;
          }
          return "bar" !== e2.chart.type && "rangeBar" !== e2.chart.type || e2.tooltip.shared && "barWidth" === e2.xaxis.crosshairs.width && e2.series.length > 1 && (e2.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e2.chart.type && "boxPlot" !== e2.chart.type || e2.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e2.chart.type, " chart is not supported.")), e2.yaxis[0].reversed = false), e2;
        } }]), t2;
      }();
      var F = function() {
        function t2() {
          a(this, t2);
        }
        return r(t2, [{ key: "initGlobalVars", value: function(t3) {
          t3.series = [], t3.seriesCandleO = [], t3.seriesCandleH = [], t3.seriesCandleM = [], t3.seriesCandleL = [], t3.seriesCandleC = [], t3.seriesRangeStart = [], t3.seriesRangeEnd = [], t3.seriesRange = [], t3.seriesPercent = [], t3.seriesGoals = [], t3.seriesX = [], t3.seriesZ = [], t3.seriesNames = [], t3.seriesTotals = [], t3.seriesLog = [], t3.seriesColors = [], t3.stackedSeriesTotals = [], t3.seriesXvalues = [], t3.seriesYvalues = [], t3.labels = [], t3.hasXaxisGroups = false, t3.groups = [], t3.barGroups = [], t3.lineGroups = [], t3.areaGroups = [], t3.hasSeriesGroups = false, t3.seriesGroups = [], t3.categoryLabels = [], t3.timescaleLabels = [], t3.noLabelsProvided = false, t3.resizeTimer = null, t3.selectionResizeTimer = null, t3.delayedElements = [], t3.pointsArray = [], t3.dataLabelsRects = [], t3.isXNumeric = false, t3.skipLastTimelinelabel = false, t3.skipFirstTimelinelabel = false, t3.isDataXYZ = false, t3.isMultiLineX = false, t3.isMultipleYAxis = false, t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE, t3.minYArr = [], t3.maxYArr = [], t3.maxX = -Number.MAX_VALUE, t3.minX = Number.MAX_VALUE, t3.initialMaxX = -Number.MAX_VALUE, t3.initialMinX = Number.MAX_VALUE, t3.maxDate = 0, t3.minDate = Number.MAX_VALUE, t3.minZ = Number.MAX_VALUE, t3.maxZ = -Number.MAX_VALUE, t3.minXDiff = Number.MAX_VALUE, t3.yAxisScale = [], t3.xAxisScale = null, t3.xAxisTicksPositions = [], t3.yLabelsCoords = [], t3.yTitleCoords = [], t3.barPadForNumericAxis = 0, t3.padHorizontal = 0, t3.xRange = 0, t3.yRange = [], t3.zRange = 0, t3.dataPoints = 0, t3.xTickAmount = 0, t3.multiAxisTickAmount = 0;
        } }, { key: "globalVars", value: function(t3) {
          return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t3.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], goldenPadding: 35, invalidLogScale: false, ignoreYAxisIndexes: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.zoom && t3.chart.zoom.enabled, panEnabled: "pan" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.pan, selectionEnabled: "selection" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, isSlopeChart: t3.plotOptions.line.isSlopeChart, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, easing: null, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null, niceScaleAllowedMagMsd: [[1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10], [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10]], niceScaleDefaultTicks: [1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24], seriesYAxisMap: [], seriesYAxisReverseMap: [] };
        } }, { key: "init", value: function(t3) {
          var e2 = this.globalVars(t3);
          return this.initGlobalVars(e2), e2.initialConfig = x.extend({}, t3), e2.initialSeries = x.clone(t3.series), e2.lastXAxis = x.clone(e2.initialConfig.xaxis), e2.lastYAxis = x.clone(e2.initialConfig.yaxis), e2;
        } }]), t2;
      }();
      var R = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "init", value: function() {
          var t3 = new Y(this.opts).init({ responsiveOverride: false });
          return { config: t3, globals: new F().init(t3) };
        } }]), t2;
      }();
      var H = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.opts = null, this.seriesIndex = 0;
        }
        return r(t2, [{ key: "clippedImgArea", value: function(t3) {
          var e2 = this.w, i2 = e2.config, a2 = parseInt(e2.globals.gridWidth, 10), s2 = parseInt(e2.globals.gridHeight, 10), r2 = a2 > s2 ? a2 : s2, o2 = t3.image, n2 = 0, l2 = 0;
          void 0 === t3.width && void 0 === t3.height ? void 0 !== i2.fill.image.width && void 0 !== i2.fill.image.height ? (n2 = i2.fill.image.width + 1, l2 = i2.fill.image.height) : (n2 = r2 + 1, l2 = r2) : (n2 = t3.width, l2 = t3.height);
          var h2 = document.createElementNS(e2.globals.SVGNS, "pattern");
          m2.setAttrs(h2, { id: t3.patternID, patternUnits: t3.patternUnits ? t3.patternUnits : "userSpaceOnUse", width: n2 + "px", height: l2 + "px" });
          var c2 = document.createElementNS(e2.globals.SVGNS, "image");
          h2.appendChild(c2), c2.setAttributeNS(window.SVG.xlink, "href", o2), m2.setAttrs(c2, { x: 0, y: 0, preserveAspectRatio: "none", width: n2 + "px", height: l2 + "px" }), c2.style.opacity = t3.opacity, e2.globals.dom.elDefs.node.appendChild(h2);
        } }, { key: "getSeriesIndex", value: function(t3) {
          var e2 = this.w, i2 = e2.config.chart.type;
          return ("bar" === i2 || "rangeBar" === i2) && e2.config.plotOptions.bar.distributed || "heatmap" === i2 || "treemap" === i2 ? this.seriesIndex = t3.seriesNumber : this.seriesIndex = t3.seriesNumber % e2.globals.series.length, this.seriesIndex;
        } }, { key: "fillPath", value: function(t3) {
          var e2 = this.w;
          this.opts = t3;
          var i2, a2, s2, r2 = this.w.config;
          this.seriesIndex = this.getSeriesIndex(t3);
          var o2 = this.getFillColors()[this.seriesIndex];
          void 0 !== e2.globals.seriesColors[this.seriesIndex] && (o2 = e2.globals.seriesColors[this.seriesIndex]), "function" == typeof o2 && (o2 = o2({ seriesIndex: this.seriesIndex, dataPointIndex: t3.dataPointIndex, value: t3.value, w: e2 }));
          var n2 = t3.fillType ? t3.fillType : this.getFillType(this.seriesIndex), l2 = Array.isArray(r2.fill.opacity) ? r2.fill.opacity[this.seriesIndex] : r2.fill.opacity;
          t3.color && (o2 = t3.color), o2 || (o2 = "#fff", console.warn("undefined color - ApexCharts"));
          var h2 = o2;
          if (-1 === o2.indexOf("rgb") ? o2.length < 9 && (h2 = x.hexToRgba(o2, l2)) : o2.indexOf("rgba") > -1 && (l2 = x.getOpacityFromRGBA(o2)), t3.opacity && (l2 = t3.opacity), "pattern" === n2 && (a2 = this.handlePatternFill({ fillConfig: t3.fillConfig, patternFill: a2, fillColor: o2, fillOpacity: l2, defaultColor: h2 })), "gradient" === n2 && (s2 = this.handleGradientFill({ fillConfig: t3.fillConfig, fillColor: o2, fillOpacity: l2, i: this.seriesIndex })), "image" === n2) {
            var c2 = r2.fill.image.src, d2 = t3.patternID ? t3.patternID : "";
            this.clippedImgArea({ opacity: l2, image: Array.isArray(c2) ? t3.seriesNumber < c2.length ? c2[t3.seriesNumber] : c2[0] : c2, width: t3.width ? t3.width : void 0, height: t3.height ? t3.height : void 0, patternUnits: t3.patternUnits, patternID: "pattern".concat(e2.globals.cuid).concat(t3.seriesNumber + 1).concat(d2) }), i2 = "url(#pattern".concat(e2.globals.cuid).concat(t3.seriesNumber + 1).concat(d2, ")");
          } else
            i2 = "gradient" === n2 ? s2 : "pattern" === n2 ? a2 : h2;
          return t3.solid && (i2 = h2), i2;
        } }, { key: "getFillType", value: function(t3) {
          var e2 = this.w;
          return Array.isArray(e2.config.fill.type) ? e2.config.fill.type[t3] : e2.config.fill.type;
        } }, { key: "getFillColors", value: function() {
          var t3 = this.w, e2 = t3.config, i2 = this.opts, a2 = [];
          return t3.globals.comboCharts ? "line" === t3.config.series[this.seriesIndex].type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors) : "line" === e2.chart.type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors), void 0 !== i2.fillColors && (a2 = [], Array.isArray(i2.fillColors) ? a2 = i2.fillColors.slice() : a2.push(i2.fillColors)), a2;
        } }, { key: "handlePatternFill", value: function(t3) {
          var e2 = t3.fillConfig, i2 = t3.patternFill, a2 = t3.fillColor, s2 = t3.fillOpacity, r2 = t3.defaultColor, o2 = this.w.config.fill;
          e2 && (o2 = e2);
          var n2 = this.opts, l2 = new m2(this.ctx), h2 = Array.isArray(o2.pattern.strokeWidth) ? o2.pattern.strokeWidth[this.seriesIndex] : o2.pattern.strokeWidth, c2 = a2;
          Array.isArray(o2.pattern.style) ? i2 = void 0 !== o2.pattern.style[n2.seriesNumber] ? l2.drawPattern(o2.pattern.style[n2.seriesNumber], o2.pattern.width, o2.pattern.height, c2, h2, s2) : r2 : i2 = l2.drawPattern(o2.pattern.style, o2.pattern.width, o2.pattern.height, c2, h2, s2);
          return i2;
        } }, { key: "handleGradientFill", value: function(t3) {
          var i2 = t3.fillColor, a2 = t3.fillOpacity, s2 = t3.fillConfig, r2 = t3.i, o2 = this.w.config.fill;
          s2 && (o2 = e(e({}, o2), s2));
          var n2, l2 = this.opts, h2 = new m2(this.ctx), c2 = new x(), d2 = o2.gradient.type, g2 = i2, u2 = void 0 === o2.gradient.opacityFrom ? a2 : Array.isArray(o2.gradient.opacityFrom) ? o2.gradient.opacityFrom[r2] : o2.gradient.opacityFrom;
          g2.indexOf("rgba") > -1 && (u2 = x.getOpacityFromRGBA(g2));
          var p2 = void 0 === o2.gradient.opacityTo ? a2 : Array.isArray(o2.gradient.opacityTo) ? o2.gradient.opacityTo[r2] : o2.gradient.opacityTo;
          if (void 0 === o2.gradient.gradientToColors || 0 === o2.gradient.gradientToColors.length)
            n2 = "dark" === o2.gradient.shade ? c2.shadeColor(-1 * parseFloat(o2.gradient.shadeIntensity), i2.indexOf("rgb") > -1 ? x.rgb2hex(i2) : i2) : c2.shadeColor(parseFloat(o2.gradient.shadeIntensity), i2.indexOf("rgb") > -1 ? x.rgb2hex(i2) : i2);
          else if (o2.gradient.gradientToColors[l2.seriesNumber]) {
            var f2 = o2.gradient.gradientToColors[l2.seriesNumber];
            n2 = f2, f2.indexOf("rgba") > -1 && (p2 = x.getOpacityFromRGBA(f2));
          } else
            n2 = i2;
          if (o2.gradient.gradientFrom && (g2 = o2.gradient.gradientFrom), o2.gradient.gradientTo && (n2 = o2.gradient.gradientTo), o2.gradient.inverseColors) {
            var b2 = g2;
            g2 = n2, n2 = b2;
          }
          return g2.indexOf("rgb") > -1 && (g2 = x.rgb2hex(g2)), n2.indexOf("rgb") > -1 && (n2 = x.rgb2hex(n2)), h2.drawGradient(d2, g2, n2, u2, p2, l2.size, o2.gradient.stops, o2.gradient.colorStops, r2);
        } }]), t2;
      }();
      var D = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "setGlobalMarkerSize", value: function() {
          var t3 = this.w;
          if (t3.globals.markers.size = Array.isArray(t3.config.markers.size) ? t3.config.markers.size : [t3.config.markers.size], t3.globals.markers.size.length > 0) {
            if (t3.globals.markers.size.length < t3.globals.series.length + 1)
              for (var e2 = 0; e2 <= t3.globals.series.length; e2++)
                void 0 === t3.globals.markers.size[e2] && t3.globals.markers.size.push(t3.globals.markers.size[0]);
          } else
            t3.globals.markers.size = t3.config.series.map(function(e3) {
              return t3.config.markers.size;
            });
        } }, { key: "plotChartMarkers", value: function(t3, e2, i2, a2) {
          var s2, r2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o2 = this.w, n2 = e2, l2 = t3, h2 = null, c2 = new m2(this.ctx), d2 = o2.config.markers.discrete && o2.config.markers.discrete.length;
          if ((o2.globals.markers.size[e2] > 0 || r2 || d2) && (h2 = c2.group({ class: r2 || d2 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o2.globals.cuid, ")")), Array.isArray(l2.x))
            for (var g2 = 0; g2 < l2.x.length; g2++) {
              var u2 = i2;
              1 === i2 && 0 === g2 && (u2 = 0), 1 === i2 && 1 === g2 && (u2 = 1);
              var p2 = "apexcharts-marker";
              if ("line" !== o2.config.chart.type && "area" !== o2.config.chart.type || o2.globals.comboCharts || o2.config.tooltip.intersect || (p2 += " no-pointer-events"), (Array.isArray(o2.config.markers.size) ? o2.globals.markers.size[e2] > 0 : o2.config.markers.size > 0) || r2 || d2) {
                x.isNumber(l2.y[g2]) ? p2 += " w".concat(x.randomId()) : p2 = "apexcharts-nullpoint";
                var f2 = this.getMarkerConfig({ cssClass: p2, seriesIndex: e2, dataPointIndex: u2 });
                o2.config.series[n2].data[u2] && (o2.config.series[n2].data[u2].fillColor && (f2.pointFillColor = o2.config.series[n2].data[u2].fillColor), o2.config.series[n2].data[u2].strokeColor && (f2.pointStrokeColor = o2.config.series[n2].data[u2].strokeColor)), a2 && (f2.pSize = a2), (l2.x[g2] < -o2.globals.markers.largestSize || l2.x[g2] > o2.globals.gridWidth + o2.globals.markers.largestSize || l2.y[g2] < -o2.globals.markers.largestSize || l2.y[g2] > o2.globals.gridHeight + o2.globals.markers.largestSize) && (f2.pSize = 0), (s2 = c2.drawMarker(l2.x[g2], l2.y[g2], f2)).attr("rel", u2), s2.attr("j", u2), s2.attr("index", e2), s2.node.setAttribute("default-marker-size", f2.pSize), new v(this.ctx).setSelectionFilter(s2, e2, u2), this.addEvents(s2), h2 && h2.add(s2);
              } else
                void 0 === o2.globals.pointsArray[e2] && (o2.globals.pointsArray[e2] = []), o2.globals.pointsArray[e2].push([l2.x[g2], l2.y[g2]]);
            }
          return h2;
        } }, { key: "getMarkerConfig", value: function(t3) {
          var e2 = t3.cssClass, i2 = t3.seriesIndex, a2 = t3.dataPointIndex, s2 = void 0 === a2 ? null : a2, r2 = t3.finishRadius, o2 = void 0 === r2 ? null : r2, n2 = this.w, l2 = this.getMarkerStyle(i2), h2 = n2.globals.markers.size[i2], c2 = n2.config.markers;
          return null !== s2 && c2.discrete.length && c2.discrete.map(function(t4) {
            t4.seriesIndex === i2 && t4.dataPointIndex === s2 && (l2.pointStrokeColor = t4.strokeColor, l2.pointFillColor = t4.fillColor, h2 = t4.size, l2.pointShape = t4.shape);
          }), { pSize: null === o2 ? h2 : o2, pRadius: c2.radius, width: Array.isArray(c2.width) ? c2.width[i2] : c2.width, height: Array.isArray(c2.height) ? c2.height[i2] : c2.height, pointStrokeWidth: Array.isArray(c2.strokeWidth) ? c2.strokeWidth[i2] : c2.strokeWidth, pointStrokeColor: l2.pointStrokeColor, pointFillColor: l2.pointFillColor, shape: l2.pointShape || (Array.isArray(c2.shape) ? c2.shape[i2] : c2.shape), class: e2, pointStrokeOpacity: Array.isArray(c2.strokeOpacity) ? c2.strokeOpacity[i2] : c2.strokeOpacity, pointStrokeDashArray: Array.isArray(c2.strokeDashArray) ? c2.strokeDashArray[i2] : c2.strokeDashArray, pointFillOpacity: Array.isArray(c2.fillOpacity) ? c2.fillOpacity[i2] : c2.fillOpacity, seriesIndex: i2 };
        } }, { key: "addEvents", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx);
          t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this.ctx, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this.ctx, t3)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this.ctx, t3)), t3.node.addEventListener("click", e2.config.markers.onClick), t3.node.addEventListener("dblclick", e2.config.markers.onDblClick), t3.node.addEventListener("touchstart", i2.pathMouseDown.bind(this.ctx, t3), { passive: true });
        } }, { key: "getMarkerStyle", value: function(t3) {
          var e2 = this.w, i2 = e2.globals.markers.colors, a2 = e2.config.markers.strokeColor || e2.config.markers.strokeColors;
          return { pointStrokeColor: Array.isArray(a2) ? a2[t3] : a2, pointFillColor: Array.isArray(i2) ? i2[t3] : i2 };
        } }]), t2;
      }();
      var O = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
        }
        return r(t2, [{ key: "draw", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = new m2(this.ctx), r2 = i2.realIndex, o2 = i2.pointsPos, n2 = i2.zRatio, l2 = i2.elParent, h2 = s2.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a2.config.chart.type) });
          if (h2.attr("clip-path", "url(#gridRectMarkerMask".concat(a2.globals.cuid, ")")), Array.isArray(o2.x))
            for (var c2 = 0; c2 < o2.x.length; c2++) {
              var d2 = e2 + 1, g2 = true;
              0 === e2 && 0 === c2 && (d2 = 0), 0 === e2 && 1 === c2 && (d2 = 1);
              var u2 = 0, p2 = a2.globals.markers.size[r2];
              if (n2 !== 1 / 0) {
                var f2 = a2.config.plotOptions.bubble;
                p2 = a2.globals.seriesZ[r2][d2], f2.zScaling && (p2 /= n2), f2.minBubbleRadius && p2 < f2.minBubbleRadius && (p2 = f2.minBubbleRadius), f2.maxBubbleRadius && p2 > f2.maxBubbleRadius && (p2 = f2.maxBubbleRadius);
              }
              a2.config.chart.animations.enabled || (u2 = p2);
              var x2 = o2.x[c2], b2 = o2.y[c2];
              if (u2 = u2 || 0, null !== b2 && void 0 !== a2.globals.series[r2][d2] || (g2 = false), g2) {
                var v2 = this.drawPoint(x2, b2, u2, p2, r2, d2, e2);
                h2.add(v2);
              }
              l2.add(h2);
            }
        } }, { key: "drawPoint", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = s2, h2 = new b(this.ctx), c2 = new v(this.ctx), d2 = new H(this.ctx), g2 = new D(this.ctx), u2 = new m2(this.ctx), p2 = g2.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: l2, dataPointIndex: r2, finishRadius: "bubble" === n2.config.chart.type || n2.globals.comboCharts && n2.config.series[s2] && "bubble" === n2.config.series[s2].type ? a2 : null });
          a2 = p2.pSize;
          var f2, x2 = d2.fillPath({ seriesNumber: s2, dataPointIndex: r2, color: p2.pointFillColor, patternUnits: "objectBoundingBox", value: n2.globals.series[s2][o2] });
          if ("circle" === p2.shape ? f2 = u2.drawCircle(i2) : "square" !== p2.shape && "rect" !== p2.shape || (f2 = u2.drawRect(0, 0, p2.width - p2.pointStrokeWidth / 2, p2.height - p2.pointStrokeWidth / 2, p2.pRadius)), n2.config.series[l2].data[r2] && n2.config.series[l2].data[r2].fillColor && (x2 = n2.config.series[l2].data[r2].fillColor), f2.attr({ x: t3 - p2.width / 2 - p2.pointStrokeWidth / 2, y: e2 - p2.height / 2 - p2.pointStrokeWidth / 2, cx: t3, cy: e2, fill: x2, "fill-opacity": p2.pointFillOpacity, stroke: p2.pointStrokeColor, r: a2, "stroke-width": p2.pointStrokeWidth, "stroke-dasharray": p2.pointStrokeDashArray, "stroke-opacity": p2.pointStrokeOpacity }), n2.config.chart.dropShadow.enabled) {
            var y2 = n2.config.chart.dropShadow;
            c2.dropShadow(f2, y2, s2);
          }
          if (!this.initialAnim || n2.globals.dataChanged || n2.globals.resized)
            n2.globals.animationEnded = true;
          else {
            var w2 = n2.config.chart.animations.speed;
            h2.animateMarker(f2, 0, "circle" === p2.shape ? a2 : { width: p2.width, height: p2.height }, w2, n2.globals.easing, function() {
              window.setTimeout(function() {
                h2.animationCompleted(f2);
              }, 100);
            });
          }
          if (n2.globals.dataChanged && "circle" === p2.shape)
            if (this.dynamicAnim) {
              var k2, A2, S2, C2, L2 = n2.config.chart.animations.dynamicAnimation.speed;
              null != (C2 = n2.globals.previousPaths[s2] && n2.globals.previousPaths[s2][o2]) && (k2 = C2.x, A2 = C2.y, S2 = void 0 !== C2.r ? C2.r : a2);
              for (var P2 = 0; P2 < n2.globals.collapsedSeries.length; P2++)
                n2.globals.collapsedSeries[P2].index === s2 && (L2 = 1, a2 = 0);
              0 === t3 && 0 === e2 && (a2 = 0), h2.animateCircle(f2, { cx: k2, cy: A2, r: S2 }, { cx: t3, cy: e2, r: a2 }, L2, n2.globals.easing);
            } else
              f2.attr({ r: a2 });
          return f2.attr({ rel: r2, j: r2, index: s2, "default-marker-size": a2 }), c2.setSelectionFilter(f2, s2, r2), g2.addEvents(f2), f2.node.classList.add("apexcharts-marker"), f2;
        } }, { key: "centerTextInBubble", value: function(t3) {
          var e2 = this.w;
          return { y: t3 += parseInt(e2.config.dataLabels.style.fontSize, 10) / 4 };
        } }]), t2;
      }();
      var N = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "dataLabelsCorrection", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = false, h2 = new m2(this.ctx).getTextRects(i2, o2), c2 = h2.width, d2 = h2.height;
          e2 < 0 && (e2 = 0), e2 > n2.globals.gridHeight + d2 && (e2 = n2.globals.gridHeight + d2 / 2), void 0 === n2.globals.dataLabelsRects[a2] && (n2.globals.dataLabelsRects[a2] = []), n2.globals.dataLabelsRects[a2].push({ x: t3, y: e2, width: c2, height: d2 });
          var g2 = n2.globals.dataLabelsRects[a2].length - 2, u2 = void 0 !== n2.globals.lastDrawnDataLabelsIndexes[a2] ? n2.globals.lastDrawnDataLabelsIndexes[a2][n2.globals.lastDrawnDataLabelsIndexes[a2].length - 1] : 0;
          if (void 0 !== n2.globals.dataLabelsRects[a2][g2]) {
            var p2 = n2.globals.dataLabelsRects[a2][u2];
            (t3 > p2.x + p2.width || e2 > p2.y + p2.height || e2 + d2 < p2.y || t3 + c2 < p2.x) && (l2 = true);
          }
          return (0 === s2 || r2) && (l2 = true), { x: t3, y: e2, textRects: h2, drawnextLabel: l2 };
        } }, { key: "drawDataLabel", value: function(t3) {
          var e2 = this, i2 = t3.type, a2 = t3.pos, s2 = t3.i, r2 = t3.j, o2 = t3.isRangeStart, n2 = t3.strokeWidth, l2 = void 0 === n2 ? 2 : n2, h2 = this.w, c2 = new m2(this.ctx), d2 = h2.config.dataLabels, g2 = 0, u2 = 0, p2 = r2, f2 = null;
          if (-1 !== h2.globals.collapsedSeriesIndices.indexOf(s2) || !d2.enabled || !Array.isArray(a2.x))
            return f2;
          f2 = c2.group({ class: "apexcharts-data-labels" });
          for (var x2 = 0; x2 < a2.x.length; x2++)
            if (g2 = a2.x[x2] + d2.offsetX, u2 = a2.y[x2] + d2.offsetY + l2, !isNaN(g2)) {
              1 === r2 && 0 === x2 && (p2 = 0), 1 === r2 && 1 === x2 && (p2 = 1);
              var b2 = h2.globals.series[s2][p2];
              "rangeArea" === i2 && (b2 = o2 ? h2.globals.seriesRangeStart[s2][p2] : h2.globals.seriesRangeEnd[s2][p2]);
              var v2 = "", y2 = function(t4) {
                return h2.config.dataLabels.formatter(t4, { ctx: e2.ctx, seriesIndex: s2, dataPointIndex: p2, w: h2 });
              };
              if ("bubble" === h2.config.chart.type)
                v2 = y2(b2 = h2.globals.seriesZ[s2][p2]), u2 = a2.y[x2], u2 = new O(this.ctx).centerTextInBubble(u2, s2, p2).y;
              else
                void 0 !== b2 && (v2 = y2(b2));
              var w2 = h2.config.dataLabels.textAnchor;
              h2.globals.isSlopeChart && (w2 = 0 === p2 ? "end" : p2 === h2.config.series[s2].data.length - 1 ? "start" : "middle"), this.plotDataLabelsText({ x: g2, y: u2, text: v2, i: s2, j: p2, parent: f2, offsetCorrection: true, dataLabelsConfig: h2.config.dataLabels, textAnchor: w2 });
            }
          return f2;
        } }, { key: "plotDataLabelsText", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx), a2 = t3.x, s2 = t3.y, r2 = t3.i, o2 = t3.j, n2 = t3.text, l2 = t3.textAnchor, h2 = t3.fontSize, c2 = t3.parent, d2 = t3.dataLabelsConfig, g2 = t3.color, u2 = t3.alwaysDrawDataLabel, p2 = t3.offsetCorrection;
          if (!(Array.isArray(e2.config.dataLabels.enabledOnSeries) && e2.config.dataLabels.enabledOnSeries.indexOf(r2) < 0)) {
            var f2 = { x: a2, y: s2, drawnextLabel: true, textRects: null };
            p2 && (f2 = this.dataLabelsCorrection(a2, s2, n2, r2, o2, u2, parseInt(d2.style.fontSize, 10))), e2.globals.zoomed || (a2 = f2.x, s2 = f2.y), f2.textRects && (a2 < -20 - f2.textRects.width || a2 > e2.globals.gridWidth + f2.textRects.width + 30) && (n2 = "");
            var x2 = e2.globals.dataLabels.style.colors[r2];
            (("bar" === e2.config.chart.type || "rangeBar" === e2.config.chart.type) && e2.config.plotOptions.bar.distributed || e2.config.dataLabels.distributed) && (x2 = e2.globals.dataLabels.style.colors[o2]), "function" == typeof x2 && (x2 = x2({ series: e2.globals.series, seriesIndex: r2, dataPointIndex: o2, w: e2 })), g2 && (x2 = g2);
            var b2 = d2.offsetX, y2 = d2.offsetY;
            if ("bar" !== e2.config.chart.type && "rangeBar" !== e2.config.chart.type || (b2 = 0, y2 = 0), e2.globals.isSlopeChart && (0 !== o2 && (b2 = -2 * d2.offsetX + 5), 0 !== o2 && o2 !== e2.config.series[r2].data.length - 1 && (b2 = 0)), f2.drawnextLabel) {
              var w2 = i2.drawText({ width: 100, height: parseInt(d2.style.fontSize, 10), x: a2 + b2, y: s2 + y2, foreColor: x2, textAnchor: l2 || d2.textAnchor, text: n2, fontSize: h2 || d2.style.fontSize, fontFamily: d2.style.fontFamily, fontWeight: d2.style.fontWeight || "normal" });
              if (w2.attr({ class: "apexcharts-datalabel", cx: a2, cy: s2 }), d2.dropShadow.enabled) {
                var k2 = d2.dropShadow;
                new v(this.ctx).dropShadow(w2, k2);
              }
              c2.add(w2), void 0 === e2.globals.lastDrawnDataLabelsIndexes[r2] && (e2.globals.lastDrawnDataLabelsIndexes[r2] = []), e2.globals.lastDrawnDataLabelsIndexes[r2].push(o2);
            }
          }
        } }, { key: "addBackgroundToDataLabel", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config.dataLabels.background, s2 = a2.padding, r2 = a2.padding / 2, o2 = e2.width, n2 = e2.height, l2 = new m2(this.ctx).drawRect(e2.x - s2, e2.y - r2 / 2, o2 + 2 * s2, n2 + r2, a2.borderRadius, "transparent" === i2.config.chart.background ? "#fff" : i2.config.chart.background, a2.opacity, a2.borderWidth, a2.borderColor);
          a2.dropShadow.enabled && new v(this.ctx).dropShadow(l2, a2.dropShadow);
          return l2;
        } }, { key: "dataLabelsBackground", value: function() {
          var t3 = this.w;
          if ("bubble" !== t3.config.chart.type)
            for (var e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i2 = 0; i2 < e2.length; i2++) {
              var a2 = e2[i2], s2 = a2.getBBox(), r2 = null;
              if (s2.width && s2.height && (r2 = this.addBackgroundToDataLabel(a2, s2)), r2) {
                a2.parentNode.insertBefore(r2.node, a2);
                var o2 = a2.getAttribute("fill");
                t3.config.chart.animations.enabled && !t3.globals.resized && !t3.globals.dataChanged ? r2.animate().attr({ fill: o2 }) : r2.attr({ fill: o2 }), a2.setAttribute("fill", t3.config.dataLabels.background.foreColor);
              }
            }
        } }, { key: "bringForward", value: function() {
          for (var t3 = this.w, e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a2 = 0; a2 < e2.length; a2++)
            i2 && i2.insertBefore(e2[a2], i2.nextSibling);
        } }]), t2;
      }();
      var W = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.legendInactiveClass = "legend-mouseover-inactive";
        }
        return r(t2, [{ key: "getAllSeriesEls", value: function() {
          return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
        } }, { key: "getSeriesByName", value: function(t3) {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(x.escapeString(t3), "']"));
        } }, { key: "isSeriesHidden", value: function(t3) {
          var e2 = this.getSeriesByName(t3), i2 = parseInt(e2.getAttribute("data:realIndex"), 10);
          return { isHidden: e2.classList.contains("apexcharts-series-collapsed"), realIndex: i2 };
        } }, { key: "addCollapsedClassToSeries", value: function(t3, e2) {
          var i2 = this.w;
          function a2(i3) {
            for (var a3 = 0; a3 < i3.length; a3++)
              i3[a3].index === e2 && t3.node.classList.add("apexcharts-series-collapsed");
          }
          a2(i2.globals.collapsedSeries), a2(i2.globals.ancillaryCollapsedSeries);
        } }, { key: "toggleSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          return this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, e2.isHidden), e2.isHidden;
        } }, { key: "showSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          e2.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, true);
        } }, { key: "hideSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          e2.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, false);
        } }, { key: "resetSeries", value: function() {
          var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = this.w, s2 = x.clone(a2.globals.initialSeries);
          a2.globals.previousPaths = [], i2 ? (a2.globals.collapsedSeries = [], a2.globals.ancillaryCollapsedSeries = [], a2.globals.collapsedSeriesIndices = [], a2.globals.ancillaryCollapsedSeriesIndices = []) : s2 = this.emptyCollapsedSeries(s2), a2.config.series = s2, t3 && (e2 && (a2.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled));
        } }, { key: "emptyCollapsedSeries", value: function(t3) {
          for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++)
            e2.globals.collapsedSeriesIndices.indexOf(i2) > -1 && (t3[i2].data = []);
          return t3;
        } }, { key: "toggleSeriesOnHover", value: function(t3, e2) {
          var i2 = this.w;
          e2 || (e2 = t3.target);
          var a2 = i2.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis");
          if ("mousemove" === t3.type) {
            var s2 = parseInt(e2.getAttribute("rel"), 10) - 1, r2 = null, o2 = null, n2 = null;
            if (i2.globals.axisCharts || "radialBar" === i2.config.chart.type)
              if (i2.globals.axisCharts) {
                r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s2, "']")), o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s2, "']"));
                var l2 = i2.globals.seriesYAxisReverseMap[s2];
                n2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(l2, "']"));
              } else
                r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "']"));
            else
              r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "'] path"));
            for (var h2 = 0; h2 < a2.length; h2++)
              a2[h2].classList.add(this.legendInactiveClass);
            null !== r2 && (i2.globals.axisCharts || r2.parentNode.classList.remove(this.legendInactiveClass), r2.classList.remove(this.legendInactiveClass), null !== o2 && o2.classList.remove(this.legendInactiveClass), null !== n2 && n2.classList.remove(this.legendInactiveClass));
          } else if ("mouseout" === t3.type)
            for (var c2 = 0; c2 < a2.length; c2++)
              a2[c2].classList.remove(this.legendInactiveClass);
        } }, { key: "highlightRangeInSeries", value: function(t3, e2) {
          var i2 = this, a2 = this.w, s2 = a2.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r2 = function(t4) {
            for (var e3 = 0; e3 < s2.length; e3++)
              s2[e3].classList[t4](i2.legendInactiveClass);
          };
          if ("mousemove" === t3.type) {
            var o2 = parseInt(e2.getAttribute("rel"), 10) - 1;
            r2("add"), function(t4) {
              for (var e3 = 0; e3 < s2.length; e3++) {
                var a3 = parseInt(s2[e3].getAttribute("val"), 10);
                a3 >= t4.from && a3 <= t4.to && s2[e3].classList.remove(i2.legendInactiveClass);
              }
            }(a2.config.plotOptions.heatmap.colorScale.ranges[o2]);
          } else
            "mouseout" === t3.type && r2("remove");
        } }, { key: "getActiveConfigSeriesIndex", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i2 = this.w, a2 = 0;
          if (i2.config.series.length > 1) {
            for (var s2 = i2.config.series.map(function(t4, a3) {
              return t4.data && t4.data.length > 0 && -1 === i2.globals.collapsedSeriesIndices.indexOf(a3) && (!i2.globals.comboCharts || 0 === e2.length || e2.length && e2.indexOf(i2.config.series[a3].type) > -1) ? a3 : -1;
            }), r2 = "asc" === t3 ? 0 : s2.length - 1; "asc" === t3 ? r2 < s2.length : r2 >= 0; "asc" === t3 ? r2++ : r2--)
              if (-1 !== s2[r2]) {
                a2 = s2[r2];
                break;
              }
          }
          return a2;
        } }, { key: "getBarSeriesIndices", value: function() {
          return this.w.globals.comboCharts ? this.w.config.series.map(function(t3, e2) {
            return "bar" === t3.type || "column" === t3.type ? e2 : -1;
          }).filter(function(t3) {
            return -1 !== t3;
          }) : this.w.config.series.map(function(t3, e2) {
            return e2;
          });
        } }, { key: "getPreviousPaths", value: function() {
          var t3 = this.w;
          function e2(e3, i3, a3) {
            for (var s3 = e3[i3].childNodes, r2 = { type: a3, paths: [], realIndex: e3[i3].getAttribute("data:realIndex") }, o2 = 0; o2 < s3.length; o2++)
              if (s3[o2].hasAttribute("pathTo")) {
                var n2 = s3[o2].getAttribute("pathTo");
                r2.paths.push({ d: n2 });
              }
            t3.globals.previousPaths.push(r2);
          }
          t3.globals.previousPaths = [];
          ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i3) {
            for (var a3, s3 = (a3 = i3, t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a3, "-series .apexcharts-series"))), r2 = 0; r2 < s3.length; r2++)
              e2(s3, r2, i3);
          }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
          var i2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series"));
          if (i2.length > 0)
            for (var a2 = function(e3) {
              for (var i3 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e3, "'] rect")), a3 = [], s3 = function(t4) {
                var e4 = function(e5) {
                  return i3[t4].getAttribute(e5);
                }, s4 = { x: parseFloat(e4("x")), y: parseFloat(e4("y")), width: parseFloat(e4("width")), height: parseFloat(e4("height")) };
                a3.push({ rect: s4, color: i3[t4].getAttribute("color") });
              }, r2 = 0; r2 < i3.length; r2++)
                s3(r2);
              t3.globals.previousPaths.push(a3);
            }, s2 = 0; s2 < i2.length; s2++)
              a2(s2);
          t3.globals.axisCharts || (t3.globals.previousPaths = t3.globals.series);
        } }, { key: "handlePrevBubbleScatterPaths", value: function(t3) {
          var e2 = this.w, i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series"));
          if (i2.length > 0)
            for (var a2 = 0; a2 < i2.length; a2++) {
              for (var s2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series[data\\:realIndex='").concat(a2, "'] circle")), r2 = [], o2 = 0; o2 < s2.length; o2++)
                r2.push({ x: s2[o2].getAttribute("cx"), y: s2[o2].getAttribute("cy"), r: s2[o2].getAttribute("r") });
              e2.globals.previousPaths.push(r2);
            }
        } }, { key: "clearPreviousPaths", value: function() {
          var t3 = this.w;
          t3.globals.previousPaths = [], t3.globals.allSeriesCollapsed = false;
        } }, { key: "handleNoData", value: function() {
          var t3 = this.w, e2 = t3.config.noData, i2 = new m2(this.ctx), a2 = t3.globals.svgWidth / 2, s2 = t3.globals.svgHeight / 2, r2 = "middle";
          if (t3.globals.noData = true, t3.globals.animationEnded = true, "left" === e2.align ? (a2 = 10, r2 = "start") : "right" === e2.align && (a2 = t3.globals.svgWidth - 10, r2 = "end"), "top" === e2.verticalAlign ? s2 = 50 : "bottom" === e2.verticalAlign && (s2 = t3.globals.svgHeight - 50), a2 += e2.offsetX, s2 = s2 + parseInt(e2.style.fontSize, 10) + 2 + e2.offsetY, void 0 !== e2.text && "" !== e2.text) {
            var o2 = i2.drawText({ x: a2, y: s2, text: e2.text, textAnchor: r2, fontSize: e2.style.fontSize, fontFamily: e2.style.fontFamily, foreColor: e2.style.color, opacity: 1, class: "apexcharts-text-nodata" });
            t3.globals.dom.Paper.add(o2);
          }
        } }, { key: "setNullSeriesToZeroValues", value: function(t3) {
          for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++)
            if (0 === t3[i2].length)
              for (var a2 = 0; a2 < t3[e2.globals.maxValsInArrayIndex].length; a2++)
                t3[i2].push(0);
          return t3;
        } }, { key: "hasAllSeriesEqualX", value: function() {
          for (var t3 = true, e2 = this.w, i2 = this.filteredSeriesX(), a2 = 0; a2 < i2.length - 1; a2++)
            if (i2[a2][0] !== i2[a2 + 1][0]) {
              t3 = false;
              break;
            }
          return e2.globals.allSeriesHasEqualX = t3, t3;
        } }, { key: "filteredSeriesX", value: function() {
          var t3 = this.w.globals.seriesX.map(function(t4) {
            return t4.length > 0 ? t4 : [];
          });
          return t3;
        } }]), t2;
      }();
      var B = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);
        }
        return r(t2, [{ key: "isMultiFormat", value: function() {
          return this.isFormatXY() || this.isFormat2DArray();
        } }, { key: "isFormatXY", value: function() {
          var t3 = this.w.config.series.slice(), e2 = new W(this.ctx);
          if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && null !== t3[this.activeSeriesIndex].data[0] && void 0 !== t3[this.activeSeriesIndex].data[0].x && null !== t3[this.activeSeriesIndex].data[0])
            return true;
        } }, { key: "isFormat2DArray", value: function() {
          var t3 = this.w.config.series.slice(), e2 = new W(this.ctx);
          if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && void 0 !== t3[this.activeSeriesIndex].data[0] && null !== t3[this.activeSeriesIndex].data[0] && t3[this.activeSeriesIndex].data[0].constructor === Array)
            return true;
        } }, { key: "handleFormat2DArray", value: function(t3, e2) {
          for (var i2 = this.w.config, a2 = this.w.globals, s2 = "boxPlot" === i2.chart.type || "boxPlot" === i2.series[e2].type, r2 = 0; r2 < t3[e2].data.length; r2++)
            if (void 0 !== t3[e2].data[r2][1] && (Array.isArray(t3[e2].data[r2][1]) && 4 === t3[e2].data[r2][1].length && !s2 ? this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][1][3])) : t3[e2].data[r2].length >= 5 ? this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][4])) : this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][1])), a2.dataFormatXNumeric = true), "datetime" === i2.xaxis.type) {
              var o2 = new Date(t3[e2].data[r2][0]);
              o2 = new Date(o2).getTime(), this.twoDSeriesX.push(o2);
            } else
              this.twoDSeriesX.push(t3[e2].data[r2][0]);
          for (var n2 = 0; n2 < t3[e2].data.length; n2++)
            void 0 !== t3[e2].data[n2][2] && (this.threeDSeries.push(t3[e2].data[n2][2]), a2.isDataXYZ = true);
        } }, { key: "handleFormatXY", value: function(t3, e2) {
          var i2 = this.w.config, a2 = this.w.globals, s2 = new A(this.ctx), r2 = e2;
          a2.collapsedSeriesIndices.indexOf(e2) > -1 && (r2 = this.activeSeriesIndex);
          for (var o2 = 0; o2 < t3[e2].data.length; o2++)
            void 0 !== t3[e2].data[o2].y && (Array.isArray(t3[e2].data[o2].y) ? this.twoDSeries.push(x.parseNumber(t3[e2].data[o2].y[t3[e2].data[o2].y.length - 1])) : this.twoDSeries.push(x.parseNumber(t3[e2].data[o2].y))), void 0 !== t3[e2].data[o2].goals && Array.isArray(t3[e2].data[o2].goals) ? (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(t3[e2].data[o2].goals)) : (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(null));
          for (var n2 = 0; n2 < t3[r2].data.length; n2++) {
            var l2 = "string" == typeof t3[r2].data[n2].x, h2 = Array.isArray(t3[r2].data[n2].x), c2 = !h2 && !!s2.isValidDate(t3[r2].data[n2].x);
            if (l2 || c2)
              if (l2 || i2.xaxis.convertedCatToNumeric) {
                var d2 = a2.isBarHorizontal && a2.isRangeData;
                "datetime" !== i2.xaxis.type || d2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x), isNaN(t3[r2].data[n2].x) || "category" === this.w.config.xaxis.type || "string" == typeof t3[r2].data[n2].x || (a2.isXNumeric = true)) : this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x));
              } else
                "datetime" === i2.xaxis.type ? this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x.toString())) : (a2.dataFormatXNumeric = true, a2.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t3[r2].data[n2].x)));
            else
              h2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x)) : (a2.isXNumeric = true, a2.dataFormatXNumeric = true, this.twoDSeriesX.push(t3[r2].data[n2].x));
          }
          if (t3[e2].data[0] && void 0 !== t3[e2].data[0].z) {
            for (var g2 = 0; g2 < t3[e2].data.length; g2++)
              this.threeDSeries.push(t3[e2].data[g2].z);
            a2.isDataXYZ = true;
          }
        } }, { key: "handleRangeData", value: function(t3, e2) {
          var i2 = this.w.globals, a2 = {};
          return this.isFormat2DArray() ? a2 = this.handleRangeDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleRangeDataFormat("xy", t3, e2)), i2.seriesRangeStart.push(void 0 === a2.start ? [] : a2.start), i2.seriesRangeEnd.push(void 0 === a2.end ? [] : a2.end), i2.seriesRange.push(a2.rangeUniques), i2.seriesRange.forEach(function(t4, e3) {
            t4 && t4.forEach(function(t5, e4) {
              t5.y.forEach(function(e5, i3) {
                for (var a3 = 0; a3 < t5.y.length; a3++)
                  if (i3 !== a3) {
                    var s2 = e5.y1, r2 = e5.y2, o2 = t5.y[a3].y1;
                    s2 <= t5.y[a3].y2 && o2 <= r2 && (t5.overlaps.indexOf(e5.rangeName) < 0 && t5.overlaps.push(e5.rangeName), t5.overlaps.indexOf(t5.y[a3].rangeName) < 0 && t5.overlaps.push(t5.y[a3].rangeName));
                  }
              });
            });
          }), a2;
        } }, { key: "handleCandleStickBoxData", value: function(t3, e2) {
          var i2 = this.w.globals, a2 = {};
          return this.isFormat2DArray() ? a2 = this.handleCandleStickBoxDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleCandleStickBoxDataFormat("xy", t3, e2)), i2.seriesCandleO[e2] = a2.o, i2.seriesCandleH[e2] = a2.h, i2.seriesCandleM[e2] = a2.m, i2.seriesCandleL[e2] = a2.l, i2.seriesCandleC[e2] = a2.c, a2;
        } }, { key: "handleRangeDataFormat", value: function(t3, e2, i2) {
          var a2 = [], s2 = [], r2 = e2[i2].data.filter(function(t4, e3, i3) {
            return e3 === i3.findIndex(function(e4) {
              return e4.x === t4.x;
            });
          }).map(function(t4, e3) {
            return { x: t4.x, overlaps: [], y: [] };
          });
          if ("array" === t3)
            for (var o2 = 0; o2 < e2[i2].data.length; o2++)
              Array.isArray(e2[i2].data[o2]) ? (a2.push(e2[i2].data[o2][1][0]), s2.push(e2[i2].data[o2][1][1])) : (a2.push(e2[i2].data[o2]), s2.push(e2[i2].data[o2]));
          else if ("xy" === t3)
            for (var n2 = function(t4) {
              var o3 = Array.isArray(e2[i2].data[t4].y), n3 = x.randomId(), l3 = e2[i2].data[t4].x, h2 = { y1: o3 ? e2[i2].data[t4].y[0] : e2[i2].data[t4].y, y2: o3 ? e2[i2].data[t4].y[1] : e2[i2].data[t4].y, rangeName: n3 };
              e2[i2].data[t4].rangeName = n3;
              var c2 = r2.findIndex(function(t5) {
                return t5.x === l3;
              });
              r2[c2].y.push(h2), a2.push(h2.y1), s2.push(h2.y2);
            }, l2 = 0; l2 < e2[i2].data.length; l2++)
              n2(l2);
          return { start: a2, end: s2, rangeUniques: r2 };
        } }, { key: "handleCandleStickBoxDataFormat", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = "boxPlot" === a2.config.chart.type || "boxPlot" === a2.config.series[i2].type, r2 = [], o2 = [], n2 = [], l2 = [], h2 = [];
          if ("array" === t3)
            if (s2 && 6 === e2[i2].data[0].length || !s2 && 5 === e2[i2].data[0].length)
              for (var c2 = 0; c2 < e2[i2].data.length; c2++)
                r2.push(e2[i2].data[c2][1]), o2.push(e2[i2].data[c2][2]), s2 ? (n2.push(e2[i2].data[c2][3]), l2.push(e2[i2].data[c2][4]), h2.push(e2[i2].data[c2][5])) : (l2.push(e2[i2].data[c2][3]), h2.push(e2[i2].data[c2][4]));
            else
              for (var d2 = 0; d2 < e2[i2].data.length; d2++)
                Array.isArray(e2[i2].data[d2][1]) && (r2.push(e2[i2].data[d2][1][0]), o2.push(e2[i2].data[d2][1][1]), s2 ? (n2.push(e2[i2].data[d2][1][2]), l2.push(e2[i2].data[d2][1][3]), h2.push(e2[i2].data[d2][1][4])) : (l2.push(e2[i2].data[d2][1][2]), h2.push(e2[i2].data[d2][1][3])));
          else if ("xy" === t3)
            for (var g2 = 0; g2 < e2[i2].data.length; g2++)
              Array.isArray(e2[i2].data[g2].y) && (r2.push(e2[i2].data[g2].y[0]), o2.push(e2[i2].data[g2].y[1]), s2 ? (n2.push(e2[i2].data[g2].y[2]), l2.push(e2[i2].data[g2].y[3]), h2.push(e2[i2].data[g2].y[4])) : (l2.push(e2[i2].data[g2].y[2]), h2.push(e2[i2].data[g2].y[3])));
          return { o: r2, h: o2, m: n2, l: l2, c: h2 };
        } }, { key: "parseDataAxisCharts", value: function(t3) {
          var e2 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a2 = this.w.config, s2 = this.w.globals, r2 = new A(i2), o2 = a2.labels.length > 0 ? a2.labels.slice() : a2.xaxis.categories.slice();
          s2.isRangeBar = "rangeBar" === a2.chart.type && s2.isBarHorizontal, s2.hasXaxisGroups = "category" === a2.xaxis.type && a2.xaxis.group.groups.length > 0, s2.hasXaxisGroups && (s2.groups = a2.xaxis.group.groups), t3.forEach(function(t4, e3) {
            void 0 !== t4.name ? s2.seriesNames.push(t4.name) : s2.seriesNames.push("series-" + parseInt(e3 + 1, 10));
          }), this.coreUtils.setSeriesYAxisMappings();
          var n2 = [], l2 = u(new Set(a2.series.map(function(t4) {
            return t4.group;
          })));
          a2.series.forEach(function(t4, e3) {
            var i3 = l2.indexOf(t4.group);
            n2[i3] || (n2[i3] = []), n2[i3].push(s2.seriesNames[e3]);
          }), s2.seriesGroups = n2;
          for (var h2 = function() {
            for (var t4 = 0; t4 < o2.length; t4++)
              if ("string" == typeof o2[t4]) {
                if (!r2.isValidDate(o2[t4]))
                  throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                e2.twoDSeriesX.push(r2.parseDate(o2[t4]));
              } else
                e2.twoDSeriesX.push(o2[t4]);
          }, c2 = 0; c2 < t3.length; c2++) {
            if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t3[c2].data)
              return void console.error("It is a possibility that you may have not included 'data' property in series.");
            if ("rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type && "rangeBar" !== t3[c2].type && "rangeArea" !== t3[c2].type || (s2.isRangeData = true, "rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type || this.handleRangeData(t3, c2)), this.isMultiFormat())
              this.isFormat2DArray() ? this.handleFormat2DArray(t3, c2) : this.isFormatXY() && this.handleFormatXY(t3, c2), "candlestick" !== a2.chart.type && "candlestick" !== t3[c2].type && "boxPlot" !== a2.chart.type && "boxPlot" !== t3[c2].type || this.handleCandleStickBoxData(t3, c2), s2.series.push(this.twoDSeries), s2.labels.push(this.twoDSeriesX), s2.seriesX.push(this.twoDSeriesX), s2.seriesGoals = this.seriesGoals, c2 !== this.activeSeriesIndex || this.fallbackToCategory || (s2.isXNumeric = true);
            else {
              "datetime" === a2.xaxis.type ? (s2.isXNumeric = true, h2(), s2.seriesX.push(this.twoDSeriesX)) : "numeric" === a2.xaxis.type && (s2.isXNumeric = true, o2.length > 0 && (this.twoDSeriesX = o2, s2.seriesX.push(this.twoDSeriesX))), s2.labels.push(this.twoDSeriesX);
              var d2 = t3[c2].data.map(function(t4) {
                return x.parseNumber(t4);
              });
              s2.series.push(d2);
            }
            s2.seriesZ.push(this.threeDSeries), void 0 !== t3[c2].color ? s2.seriesColors.push(t3[c2].color) : s2.seriesColors.push(void 0);
          }
          return this.w;
        } }, { key: "parseDataNonAxisCharts", value: function(t3) {
          var e2 = this.w.globals, i2 = this.w.config;
          e2.series = t3.slice(), e2.seriesNames = i2.labels.slice();
          for (var a2 = 0; a2 < e2.series.length; a2++)
            void 0 === e2.seriesNames[a2] && e2.seriesNames.push("series-" + (a2 + 1));
          return this.w;
        } }, { key: "handleExternalLabelsData", value: function(t3) {
          var e2 = this.w.config, i2 = this.w.globals;
          if (e2.xaxis.categories.length > 0)
            i2.labels = e2.xaxis.categories;
          else if (e2.labels.length > 0)
            i2.labels = e2.labels.slice();
          else if (this.fallbackToCategory) {
            if (i2.labels = i2.labels[0], i2.seriesRange.length && (i2.seriesRange.map(function(t4) {
              t4.forEach(function(t5) {
                i2.labels.indexOf(t5.x) < 0 && t5.x && i2.labels.push(t5.x);
              });
            }), i2.labels = Array.from(new Set(i2.labels.map(JSON.stringify)), JSON.parse)), e2.xaxis.convertedCatToNumeric)
              new E(e2).convertCatToNumericXaxis(e2, this.ctx, i2.seriesX[0]), this._generateExternalLabels(t3);
          } else
            this._generateExternalLabels(t3);
        } }, { key: "_generateExternalLabels", value: function(t3) {
          var e2 = this.w.globals, i2 = this.w.config, a2 = [];
          if (e2.axisCharts) {
            if (e2.series.length > 0)
              if (this.isFormatXY())
                for (var s2 = i2.series.map(function(t4, e3) {
                  return t4.data.filter(function(t5, e4, i3) {
                    return i3.findIndex(function(e5) {
                      return e5.x === t5.x;
                    }) === e4;
                  });
                }), r2 = s2.reduce(function(t4, e3, i3, a3) {
                  return a3[t4].length > e3.length ? t4 : i3;
                }, 0), o2 = 0; o2 < s2[r2].length; o2++)
                  a2.push(o2 + 1);
              else
                for (var n2 = 0; n2 < e2.series[e2.maxValsInArrayIndex].length; n2++)
                  a2.push(n2 + 1);
            e2.seriesX = [];
            for (var l2 = 0; l2 < t3.length; l2++)
              e2.seriesX.push(a2);
            this.w.globals.isBarHorizontal || (e2.isXNumeric = true);
          }
          if (0 === a2.length) {
            a2 = e2.axisCharts ? [] : e2.series.map(function(t4, e3) {
              return e3 + 1;
            });
            for (var h2 = 0; h2 < t3.length; h2++)
              e2.seriesX.push(a2);
          }
          e2.labels = a2, i2.xaxis.convertedCatToNumeric && (e2.categoryLabels = a2.map(function(t4) {
            return i2.xaxis.labels.formatter(t4);
          })), e2.noLabelsProvided = true;
        } }, { key: "parseData", value: function(t3) {
          var e2 = this.w, i2 = e2.config, a2 = e2.globals;
          if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a2.axisCharts ? (this.parseDataAxisCharts(t3), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t3), i2.chart.stacked) {
            var s2 = new W(this.ctx);
            a2.series = s2.setNullSeriesToZeroValues(a2.series);
          }
          this.coreUtils.getSeriesTotals(), a2.axisCharts && (a2.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a2.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a2.dataFormatXNumeric || a2.isXNumeric && ("numeric" !== i2.xaxis.type || 0 !== i2.labels.length || 0 !== i2.xaxis.categories.length) || this.handleExternalLabelsData(t3);
          for (var r2 = this.coreUtils.getCategoryLabels(a2.labels), o2 = 0; o2 < r2.length; o2++)
            if (Array.isArray(r2[o2])) {
              a2.isMultiLineX = true;
              break;
            }
        } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
          var t3 = this.w, e2 = [];
          t3.globals.seriesYAxisMap.forEach(function(i2, a2) {
            var s2 = 0;
            i2.forEach(function(e3) {
              -1 !== t3.globals.collapsedSeriesIndices.indexOf(e3) && s2++;
            }), s2 > 0 && s2 == i2.length && e2.push(a2);
          }), t3.globals.ignoreYAxisIndexes = e2.map(function(t4) {
            return t4;
          });
        } }]), t2;
      }();
      var G = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "scaleSvgNode", value: function(t3, e2) {
          var i2 = parseFloat(t3.getAttributeNS(null, "width")), a2 = parseFloat(t3.getAttributeNS(null, "height"));
          t3.setAttributeNS(null, "width", i2 * e2), t3.setAttributeNS(null, "height", a2 * e2), t3.setAttributeNS(null, "viewBox", "0 0 " + i2 + " " + a2);
        } }, { key: "fixSvgStringForIe11", value: function(t3) {
          if (!x.isIE11())
            return t3.replace(/&nbsp;/g, "&#160;");
          var e2 = 0, i2 = t3.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t4) {
            return 2 === ++e2 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t4;
          });
          return i2 = (i2 = i2.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
        } }, { key: "getSvgString", value: function(t3) {
          null == t3 && (t3 = 1);
          var e2 = this.w.globals.dom.Paper.svg();
          if (1 !== t3) {
            var i2 = this.w.globals.dom.Paper.node.cloneNode(true);
            this.scaleSvgNode(i2, t3), e2 = new XMLSerializer().serializeToString(i2);
          }
          return this.fixSvgStringForIe11(e2);
        } }, { key: "cleanup", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
          Array.prototype.forEach.call(a2, function(t4) {
            t4.setAttribute("width", 0);
          }), e2 && e2[0] && (e2[0].setAttribute("x", -500), e2[0].setAttribute("x1", -500), e2[0].setAttribute("x2", -500)), i2 && i2[0] && (i2[0].setAttribute("y", -100), i2[0].setAttribute("y1", -100), i2[0].setAttribute("y2", -100));
        } }, { key: "svgUrl", value: function() {
          this.cleanup();
          var t3 = this.getSvgString(), e2 = new Blob([t3], { type: "image/svg+xml;charset=utf-8" });
          return URL.createObjectURL(e2);
        } }, { key: "dataURI", value: function(t3) {
          var e2 = this;
          return new Promise(function(i2) {
            var a2 = e2.w, s2 = t3 ? t3.scale || t3.width / a2.globals.svgWidth : 1;
            e2.cleanup();
            var r2 = document.createElement("canvas");
            r2.width = a2.globals.svgWidth * s2, r2.height = parseInt(a2.globals.dom.elWrap.style.height, 10) * s2;
            var o2 = "transparent" === a2.config.chart.background ? "#fff" : a2.config.chart.background, n2 = r2.getContext("2d");
            n2.fillStyle = o2, n2.fillRect(0, 0, r2.width * s2, r2.height * s2);
            var l2 = e2.getSvgString(s2);
            if (window.canvg && x.isIE11()) {
              var h2 = window.canvg.Canvg.fromString(n2, l2, { ignoreClear: true, ignoreDimensions: true });
              h2.start();
              var c2 = r2.msToBlob();
              h2.stop(), i2({ blob: c2 });
            } else {
              var d2 = "data:image/svg+xml," + encodeURIComponent(l2), g2 = new Image();
              g2.crossOrigin = "anonymous", g2.onload = function() {
                if (n2.drawImage(g2, 0, 0), r2.msToBlob) {
                  var t4 = r2.msToBlob();
                  i2({ blob: t4 });
                } else {
                  var e3 = r2.toDataURL("image/png");
                  i2({ imgURI: e3 });
                }
              }, g2.src = d2;
            }
          });
        } }, { key: "exportToSVG", value: function() {
          this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
        } }, { key: "exportToPng", value: function() {
          var t3 = this;
          this.dataURI().then(function(e2) {
            var i2 = e2.imgURI, a2 = e2.blob;
            a2 ? navigator.msSaveOrOpenBlob(a2, t3.w.globals.chartID + ".png") : t3.triggerDownload(i2, t3.w.config.chart.toolbar.export.png.filename, ".png");
          });
        } }, { key: "exportToCSV", value: function(t3) {
          var e2 = this, i2 = t3.series, a2 = t3.fileName, s2 = t3.columnDelimiter, r2 = void 0 === s2 ? "," : s2, o2 = t3.lineDelimiter, n2 = void 0 === o2 ? "\n" : o2, l2 = this.w;
          i2 || (i2 = l2.config.series);
          var h2, c2, d2 = [], g2 = [], p2 = "", f2 = l2.globals.series.map(function(t4, e3) {
            return -1 === l2.globals.collapsedSeriesIndices.indexOf(e3) ? t4 : [];
          }), b2 = function(t4) {
            return "datetime" === l2.config.xaxis.type && String(t4).length >= 10;
          }, v2 = Math.max.apply(Math, u(i2.map(function(t4) {
            return t4.data ? t4.data.length : 0;
          }))), m3 = new B(this.ctx), y2 = new C(this.ctx), w2 = function(t4) {
            var i3 = "";
            if (l2.globals.axisCharts) {
              if ("category" === l2.config.xaxis.type || l2.config.xaxis.convertedCatToNumeric)
                if (l2.globals.isBarHorizontal) {
                  var a3 = l2.globals.yLabelFormatters[0], s3 = new W(e2.ctx).getActiveConfigSeriesIndex();
                  i3 = a3(l2.globals.labels[t4], { seriesIndex: s3, dataPointIndex: t4, w: l2 });
                } else
                  i3 = y2.getLabel(l2.globals.labels, l2.globals.timescaleLabels, 0, t4).text;
              "datetime" === l2.config.xaxis.type && (l2.config.xaxis.categories.length ? i3 = l2.config.xaxis.categories[t4] : l2.config.labels.length && (i3 = l2.config.labels[t4]));
            } else
              i3 = l2.config.labels[t4];
            return null === i3 ? "nullvalue" : (Array.isArray(i3) && (i3 = i3.join(" ")), x.isNumber(i3) ? i3 : i3.split(r2).join(""));
          }, k2 = function(t4, e3) {
            if (d2.length && 0 === e3 && g2.push(d2.join(r2)), t4.data) {
              t4.data = t4.data.length && t4.data || u(Array(v2)).map(function() {
                return "";
              });
              for (var a3 = 0; a3 < t4.data.length; a3++) {
                d2 = [];
                var s3 = w2(a3);
                if ("nullvalue" !== s3) {
                  if (s3 || (m3.isFormatXY() ? s3 = i2[e3].data[a3].x : m3.isFormat2DArray() && (s3 = i2[e3].data[a3] ? i2[e3].data[a3][0] : "")), 0 === e3) {
                    d2.push(b2(s3) ? l2.config.chart.toolbar.export.csv.dateFormatter(s3) : x.isNumber(s3) ? s3 : s3.split(r2).join(""));
                    for (var o3 = 0; o3 < l2.globals.series.length; o3++) {
                      var n3;
                      if (m3.isFormatXY())
                        d2.push(null === (n3 = i2[o3].data[a3]) || void 0 === n3 ? void 0 : n3.y);
                      else
                        d2.push(f2[o3][a3]);
                    }
                  }
                  ("candlestick" === l2.config.chart.type || t4.type && "candlestick" === t4.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e3][a3]), d2.push(l2.globals.seriesCandleH[e3][a3]), d2.push(l2.globals.seriesCandleL[e3][a3]), d2.push(l2.globals.seriesCandleC[e3][a3])), ("boxPlot" === l2.config.chart.type || t4.type && "boxPlot" === t4.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e3][a3]), d2.push(l2.globals.seriesCandleH[e3][a3]), d2.push(l2.globals.seriesCandleM[e3][a3]), d2.push(l2.globals.seriesCandleL[e3][a3]), d2.push(l2.globals.seriesCandleC[e3][a3])), "rangeBar" === l2.config.chart.type && (d2.pop(), d2.push(l2.globals.seriesRangeStart[e3][a3]), d2.push(l2.globals.seriesRangeEnd[e3][a3])), d2.length && g2.push(d2.join(r2));
                }
              }
            }
          };
          d2.push(l2.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l2.config.chart.type ? (d2.push("minimum"), d2.push("q1"), d2.push("median"), d2.push("q3"), d2.push("maximum")) : "candlestick" === l2.config.chart.type ? (d2.push("open"), d2.push("high"), d2.push("low"), d2.push("close")) : "rangeBar" === l2.config.chart.type ? (d2.push("minimum"), d2.push("maximum")) : i2.map(function(t4, e3) {
            var i3 = (t4.name ? t4.name : "series-".concat(e3)) + "";
            l2.globals.axisCharts && d2.push(i3.split(r2).join("") ? i3.split(r2).join("") : "series-".concat(e3));
          }), l2.globals.axisCharts || (d2.push(l2.config.chart.toolbar.export.csv.headerValue), g2.push(d2.join(r2))), l2.globals.allSeriesHasEqualX || !l2.globals.axisCharts || l2.config.xaxis.categories.length || l2.config.labels.length ? i2.map(function(t4, e3) {
            l2.globals.axisCharts ? k2(t4, e3) : ((d2 = []).push(l2.globals.labels[e3].split(r2).join("")), d2.push(f2[e3]), g2.push(d2.join(r2)));
          }) : (h2 = /* @__PURE__ */ new Set(), c2 = {}, i2.forEach(function(t4, e3) {
            null == t4 || t4.data.forEach(function(t5) {
              var a3, s3;
              if (m3.isFormatXY())
                a3 = t5.x, s3 = t5.y;
              else {
                if (!m3.isFormat2DArray())
                  return;
                a3 = t5[0], s3 = t5[1];
              }
              c2[a3] || (c2[a3] = Array(i2.length).fill("")), c2[a3][e3] = s3, h2.add(a3);
            });
          }), d2.length && g2.push(d2.join(r2)), Array.from(h2).sort().forEach(function(t4) {
            g2.push([b2(t4) && "datetime" === l2.config.xaxis.type ? l2.config.chart.toolbar.export.csv.dateFormatter(t4) : x.isNumber(t4) ? t4 : t4.split(r2).join(""), c2[t4].join(r2)]);
          })), p2 += g2.join(n2), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + p2), a2 || l2.config.chart.toolbar.export.csv.filename, ".csv");
        } }, { key: "triggerDownload", value: function(t3, e2, i2) {
          var a2 = document.createElement("a");
          a2.href = t3, a2.download = (e2 || this.w.globals.chartID) + i2, document.body.appendChild(a2), a2.click(), document.body.removeChild(a2);
        } }]), t2;
      }();
      var V = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.elgrid = i2, this.w = e2.w;
          var s2 = this.w;
          this.axesUtils = new C(e2), this.xaxisLabels = s2.globals.labels.slice(), s2.globals.timescaleLabels.length > 0 && !s2.globals.isBarHorizontal && (this.xaxisLabels = s2.globals.timescaleLabels.slice()), s2.config.xaxis.overwriteCategories && (this.xaxisLabels = s2.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s2.config.xaxis.position ? this.offY = 0 : this.offY = s2.globals.gridHeight, this.offY = this.offY + s2.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s2.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s2.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s2.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s2.config.xaxis.axisBorder.height, this.yaxis = s2.config.yaxis[0];
        }
        return r(t2, [{ key: "drawXaxis", value: function() {
          var t3 = this.w, e2 = new m2(this.ctx), i2 = e2.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t3.config.xaxis.offsetX, ", ").concat(t3.config.xaxis.offsetY, ")") }), a2 = e2.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t3.globals.translateXAxisX, ", ").concat(t3.globals.translateXAxisY, ")") });
          i2.add(a2);
          for (var s2 = [], r2 = 0; r2 < this.xaxisLabels.length; r2++)
            s2.push(this.xaxisLabels[r2]);
          if (this.drawXAxisLabelAndGroup(true, e2, a2, s2, t3.globals.isXNumeric, function(t4, e3) {
            return e3;
          }), t3.globals.hasXaxisGroups) {
            var o2 = t3.globals.groups;
            s2 = [];
            for (var n2 = 0; n2 < o2.length; n2++)
              s2.push(o2[n2].title);
            var l2 = {};
            t3.config.xaxis.group.style && (l2.xaxisFontSize = t3.config.xaxis.group.style.fontSize, l2.xaxisFontFamily = t3.config.xaxis.group.style.fontFamily, l2.xaxisForeColors = t3.config.xaxis.group.style.colors, l2.fontWeight = t3.config.xaxis.group.style.fontWeight, l2.cssClass = t3.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e2, a2, s2, false, function(t4, e3) {
              return o2[t4].cols * e3;
            }, l2);
          }
          if (void 0 !== t3.config.xaxis.title.text) {
            var h2 = e2.group({ class: "apexcharts-xaxis-title" }), c2 = e2.drawText({ x: t3.globals.gridWidth / 2 + t3.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t3.config.xaxis.position ? t3.globals.xAxisLabelsHeight : -t3.globals.xAxisLabelsHeight - 10) + t3.config.xaxis.title.offsetY, text: t3.config.xaxis.title.text, textAnchor: "middle", fontSize: t3.config.xaxis.title.style.fontSize, fontFamily: t3.config.xaxis.title.style.fontFamily, fontWeight: t3.config.xaxis.title.style.fontWeight, foreColor: t3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t3.config.xaxis.title.style.cssClass });
            h2.add(c2), i2.add(h2);
          }
          if (t3.config.xaxis.axisBorder.show) {
            var d2 = t3.globals.barPadForNumericAxis, g2 = e2.drawLine(t3.globals.padHorizontal + t3.config.xaxis.axisBorder.offsetX - d2, this.offY, this.xaxisBorderWidth + d2, this.offY, t3.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
            this.elgrid && this.elgrid.elGridBorders && t3.config.grid.show ? this.elgrid.elGridBorders.add(g2) : i2.add(g2);
          }
          return i2;
        } }, { key: "drawXAxisLabelAndGroup", value: function(t3, e2, i2, a2, s2, r2) {
          var o2, n2 = this, l2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h2 = [], c2 = [], d2 = this.w, g2 = l2.xaxisFontSize || this.xaxisFontSize, u2 = l2.xaxisFontFamily || this.xaxisFontFamily, p2 = l2.xaxisForeColors || this.xaxisForeColors, f2 = l2.fontWeight || d2.config.xaxis.labels.style.fontWeight, x2 = l2.cssClass || d2.config.xaxis.labels.style.cssClass, b2 = d2.globals.padHorizontal, v2 = a2.length, m3 = "category" === d2.config.xaxis.type ? d2.globals.dataPoints : v2;
          if (0 === m3 && v2 > m3 && (m3 = v2), s2) {
            var y2 = m3 > 1 ? m3 - 1 : m3;
            o2 = d2.globals.gridWidth / Math.min(y2, v2 - 1), b2 = b2 + r2(0, o2) / 2 + d2.config.xaxis.labels.offsetX;
          } else
            o2 = d2.globals.gridWidth / m3, b2 = b2 + r2(0, o2) + d2.config.xaxis.labels.offsetX;
          for (var w2 = function(s3) {
            var l3 = b2 - r2(s3, o2) / 2 + d2.config.xaxis.labels.offsetX;
            0 === s3 && 1 === v2 && o2 / 2 === b2 && 1 === m3 && (l3 = d2.globals.gridWidth / 2);
            var y3 = n2.axesUtils.getLabel(a2, d2.globals.timescaleLabels, l3, s3, h2, g2, t3), w3 = 28;
            d2.globals.rotateXLabels && t3 && (w3 = 22), d2.config.xaxis.title.text && "top" === d2.config.xaxis.position && (w3 += parseFloat(d2.config.xaxis.title.style.fontSize) + 2), t3 || (w3 = w3 + parseFloat(g2) + (d2.globals.xAxisLabelsHeight - d2.globals.xAxisGroupLabelsHeight) + (d2.globals.rotateXLabels ? 10 : 0)), y3 = void 0 !== d2.config.xaxis.tickAmount && "dataPoints" !== d2.config.xaxis.tickAmount && "datetime" !== d2.config.xaxis.type ? n2.axesUtils.checkLabelBasedOnTickamount(s3, y3, v2) : n2.axesUtils.checkForOverflowingLabels(s3, y3, v2, h2, c2);
            if (d2.config.xaxis.labels.show) {
              var k3 = e2.drawText({ x: y3.x, y: n2.offY + d2.config.xaxis.labels.offsetY + w3 - ("top" === d2.config.xaxis.position ? d2.globals.xAxisHeight + d2.config.xaxis.axisTicks.height - 2 : 0), text: y3.text, textAnchor: "middle", fontWeight: y3.isBold ? 600 : f2, fontSize: g2, fontFamily: u2, foreColor: Array.isArray(p2) ? t3 && d2.config.xaxis.convertedCatToNumeric ? p2[d2.globals.minX + s3 - 1] : p2[s3] : p2, isPlainText: false, cssClass: (t3 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x2 });
              if (i2.add(k3), k3.on("click", function(t4) {
                if ("function" == typeof d2.config.chart.events.xAxisLabelClick) {
                  var e3 = Object.assign({}, d2, { labelIndex: s3 });
                  d2.config.chart.events.xAxisLabelClick(t4, n2.ctx, e3);
                }
              }), t3) {
                var A2 = document.createElementNS(d2.globals.SVGNS, "title");
                A2.textContent = Array.isArray(y3.text) ? y3.text.join(" ") : y3.text, k3.node.appendChild(A2), "" !== y3.text && (h2.push(y3.text), c2.push(y3));
              }
            }
            s3 < v2 - 1 && (b2 += r2(s3 + 1, o2));
          }, k2 = 0; k2 <= v2 - 1; k2++)
            w2(k2);
        } }, { key: "drawXaxisInversed", value: function(t3) {
          var e2, i2, a2 = this, s2 = this.w, r2 = new m2(this.ctx), o2 = s2.config.yaxis[0].opposite ? s2.globals.translateYAxisX[t3] : 0, n2 = r2.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t3 }), l2 = r2.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o2 + ", 0)" });
          n2.add(l2);
          var h2 = [];
          if (s2.config.yaxis[t3].show)
            for (var c2 = 0; c2 < this.xaxisLabels.length; c2++)
              h2.push(this.xaxisLabels[c2]);
          e2 = s2.globals.gridHeight / h2.length, i2 = -e2 / 2.2;
          var d2 = s2.globals.yLabelFormatters[0], g2 = s2.config.yaxis[0].labels;
          if (g2.show)
            for (var u2 = function(o3) {
              var n3 = void 0 === h2[o3] ? "" : h2[o3];
              n3 = d2(n3, { seriesIndex: t3, dataPointIndex: o3, w: s2 });
              var c3 = a2.axesUtils.getYAxisForeColor(g2.style.colors, t3), u3 = 0;
              Array.isArray(n3) && (u3 = n3.length / 2 * parseInt(g2.style.fontSize, 10));
              var p3 = g2.offsetX - 15, f3 = "end";
              a2.yaxis.opposite && (f3 = "start"), "left" === s2.config.yaxis[0].labels.align ? (p3 = g2.offsetX, f3 = "start") : "center" === s2.config.yaxis[0].labels.align ? (p3 = g2.offsetX, f3 = "middle") : "right" === s2.config.yaxis[0].labels.align && (f3 = "end");
              var x3 = r2.drawText({ x: p3, y: i2 + e2 + g2.offsetY - u3, text: n3, textAnchor: f3, foreColor: Array.isArray(c3) ? c3[o3] : c3, fontSize: g2.style.fontSize, fontFamily: g2.style.fontFamily, fontWeight: g2.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + g2.style.cssClass, maxWidth: g2.maxWidth });
              l2.add(x3), x3.on("click", function(t4) {
                if ("function" == typeof s2.config.chart.events.xAxisLabelClick) {
                  var e3 = Object.assign({}, s2, { labelIndex: o3 });
                  s2.config.chart.events.xAxisLabelClick(t4, a2.ctx, e3);
                }
              });
              var b3 = document.createElementNS(s2.globals.SVGNS, "title");
              if (b3.textContent = Array.isArray(n3) ? n3.join(" ") : n3, x3.node.appendChild(b3), 0 !== s2.config.yaxis[t3].labels.rotate) {
                var v3 = r2.rotateAroundCenter(x3.node);
                x3.node.setAttribute("transform", "rotate(".concat(s2.config.yaxis[t3].labels.rotate, " 0 ").concat(v3.y, ")"));
              }
              i2 += e2;
            }, p2 = 0; p2 <= h2.length - 1; p2++)
              u2(p2);
          if (void 0 !== s2.config.yaxis[0].title.text) {
            var f2 = r2.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o2 + ", 0)" }), x2 = r2.drawText({ x: s2.config.yaxis[0].title.offsetX, y: s2.globals.gridHeight / 2 + s2.config.yaxis[0].title.offsetY, text: s2.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s2.config.yaxis[0].title.style.color, fontSize: s2.config.yaxis[0].title.style.fontSize, fontWeight: s2.config.yaxis[0].title.style.fontWeight, fontFamily: s2.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s2.config.yaxis[0].title.style.cssClass });
            f2.add(x2), n2.add(f2);
          }
          var b2 = 0;
          this.isCategoryBarHorizontal && s2.config.yaxis[0].opposite && (b2 = s2.globals.gridWidth);
          var v2 = s2.config.xaxis.axisBorder;
          if (v2.show) {
            var y2 = r2.drawLine(s2.globals.padHorizontal + v2.offsetX + b2, 1 + v2.offsetY, s2.globals.padHorizontal + v2.offsetX + b2, s2.globals.gridHeight + v2.offsetY, v2.color, 0);
            this.elgrid && this.elgrid.elGridBorders && s2.config.grid.show ? this.elgrid.elGridBorders.add(y2) : n2.add(y2);
          }
          return s2.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b2, h2.length, s2.config.yaxis[0].axisBorder, s2.config.yaxis[0].axisTicks, 0, e2, n2), n2;
        } }, { key: "drawXaxisTicks", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = t3;
          if (!(t3 < 0 || t3 - 2 > a2.globals.gridWidth)) {
            var r2 = this.offY + a2.config.xaxis.axisTicks.offsetY;
            if (e2 = e2 + r2 + a2.config.xaxis.axisTicks.height, "top" === a2.config.xaxis.position && (e2 = r2 - a2.config.xaxis.axisTicks.height), a2.config.xaxis.axisTicks.show) {
              var o2 = new m2(this.ctx).drawLine(t3 + a2.config.xaxis.axisTicks.offsetX, r2 + a2.config.xaxis.offsetY, s2 + a2.config.xaxis.axisTicks.offsetX, e2 + a2.config.xaxis.offsetY, a2.config.xaxis.axisTicks.color);
              i2.add(o2), o2.node.classList.add("apexcharts-xaxis-tick");
            }
          }
        } }, { key: "getXAxisTicksPositions", value: function() {
          var t3 = this.w, e2 = [], i2 = this.xaxisLabels.length, a2 = t3.globals.padHorizontal;
          if (t3.globals.timescaleLabels.length > 0)
            for (var s2 = 0; s2 < i2; s2++)
              a2 = this.xaxisLabels[s2].position, e2.push(a2);
          else
            for (var r2 = i2, o2 = 0; o2 < r2; o2++) {
              var n2 = r2;
              t3.globals.isXNumeric && "bar" !== t3.config.chart.type && (n2 -= 1), a2 += t3.globals.gridWidth / n2, e2.push(a2);
            }
          return e2;
        } }, { key: "xAxisLabelCorrections", value: function() {
          var t3 = this.w, e2 = new m2(this.ctx), i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
          if (t3.globals.rotateXLabels || t3.config.xaxis.labels.rotateAlways)
            for (var o2 = 0; o2 < a2.length; o2++) {
              var n2 = e2.rotateAroundCenter(a2[o2]);
              n2.y = n2.y - 1, n2.x = n2.x + 1, a2[o2].setAttribute("transform", "rotate(".concat(t3.config.xaxis.labels.rotate, " ").concat(n2.x, " ").concat(n2.y, ")")), a2[o2].setAttribute("text-anchor", "end");
              i2.setAttribute("transform", "translate(0, ".concat(-10, ")"));
              var l2 = a2[o2].childNodes;
              t3.config.xaxis.labels.trim && Array.prototype.forEach.call(l2, function(i3) {
                e2.placeTextWithEllipsis(i3, i3.textContent, t3.globals.xAxisLabelsHeight - ("bottom" === t3.config.legend.position ? 20 : 10));
              });
            }
          else
            !function() {
              for (var i3 = t3.globals.gridWidth / (t3.globals.labels.length + 1), s3 = 0; s3 < a2.length; s3++) {
                var r3 = a2[s3].childNodes;
                t3.config.xaxis.labels.trim && "datetime" !== t3.config.xaxis.type && Array.prototype.forEach.call(r3, function(t4) {
                  e2.placeTextWithEllipsis(t4, t4.textContent, i3);
                });
              }
            }();
          if (s2.length > 0) {
            var h2 = s2[s2.length - 1].getBBox(), c2 = s2[0].getBBox();
            h2.x < -20 && s2[s2.length - 1].parentNode.removeChild(s2[s2.length - 1]), c2.x + c2.width > t3.globals.gridWidth && !t3.globals.isBarHorizontal && s2[0].parentNode.removeChild(s2[0]);
            for (var d2 = 0; d2 < r2.length; d2++)
              e2.placeTextWithEllipsis(r2[d2], r2[d2].textContent, t3.config.yaxis[0].labels.maxWidth - (t3.config.yaxis[0].title.text ? 2 * parseFloat(t3.config.yaxis[0].title.style.fontSize) : 0) - 15);
          }
        } }]), t2;
      }();
      var j = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.xaxisLabels = i2.globals.labels.slice(), this.axesUtils = new C(e2), this.isRangeBar = i2.globals.seriesRange.length && i2.globals.isBarHorizontal, i2.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i2.globals.timescaleLabels.slice());
        }
        return r(t2, [{ key: "drawGridArea", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e2 = this.w, i2 = new m2(this.ctx);
          null === t3 && (t3 = i2.group({ class: "apexcharts-grid" }));
          var a2 = i2.drawLine(e2.globals.padHorizontal, 1, e2.globals.padHorizontal, e2.globals.gridHeight, "transparent"), s2 = i2.drawLine(e2.globals.padHorizontal, e2.globals.gridHeight, e2.globals.gridWidth, e2.globals.gridHeight, "transparent");
          return t3.add(s2), t3.add(a2), t3;
        } }, { key: "drawGrid", value: function() {
          var t3 = null;
          return this.w.globals.axisCharts && (t3 = this.renderGrid(), this.drawGridArea(t3.el)), t3;
        } }, { key: "createGridMask", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = new m2(this.ctx), a2 = Array.isArray(t3.config.stroke.width) ? 0 : t3.config.stroke.width;
          if (Array.isArray(t3.config.stroke.width)) {
            var s2 = 0;
            t3.config.stroke.width.forEach(function(t4) {
              s2 = Math.max(s2, t4);
            }), a2 = s2;
          }
          e2.dom.elGridRectMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e2.cuid)), e2.dom.elGridRectMarkerMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e2.cuid)), e2.dom.elForecastMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e2.cuid)), e2.dom.elNonForecastMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e2.cuid));
          var r2 = t3.config.chart.type, o2 = 0, n2 = 0;
          ("bar" === r2 || "rangeBar" === r2 || "candlestick" === r2 || "boxPlot" === r2 || t3.globals.comboBarCount > 0) && t3.globals.isXNumeric && !t3.globals.isBarHorizontal && (o2 = t3.config.grid.padding.left, n2 = t3.config.grid.padding.right, e2.barPadForNumericAxis > o2 && (o2 = e2.barPadForNumericAxis, n2 = e2.barPadForNumericAxis)), e2.dom.elGridRect = i2.drawRect(-a2 / 2 - o2 - 2, -a2 / 2 - 2, e2.gridWidth + a2 + n2 + o2 + 4, e2.gridHeight + a2 + 4, 0, "#fff");
          var l2 = t3.globals.markers.largestSize + 1;
          e2.dom.elGridRectMarker = i2.drawRect(2 * -l2, 2 * -l2, e2.gridWidth + 4 * l2, e2.gridHeight + 4 * l2, 0, "#fff"), e2.dom.elGridRectMask.appendChild(e2.dom.elGridRect.node), e2.dom.elGridRectMarkerMask.appendChild(e2.dom.elGridRectMarker.node);
          var h2 = e2.dom.baseEl.querySelector("defs");
          h2.appendChild(e2.dom.elGridRectMask), h2.appendChild(e2.dom.elForecastMask), h2.appendChild(e2.dom.elNonForecastMask), h2.appendChild(e2.dom.elGridRectMarkerMask);
        } }, { key: "_drawGridLines", value: function(t3) {
          var e2 = t3.i, i2 = t3.x1, a2 = t3.y1, s2 = t3.x2, r2 = t3.y2, o2 = t3.xCount, n2 = t3.parent, l2 = this.w;
          if (!(0 === e2 && l2.globals.skipFirstTimelinelabel || e2 === o2 - 1 && l2.globals.skipLastTimelinelabel && !l2.config.xaxis.labels.formatter || "radar" === l2.config.chart.type)) {
            l2.config.grid.xaxis.lines.show && this._drawGridLine({ i: e2, x1: i2, y1: a2, x2: s2, y2: r2, xCount: o2, parent: n2 });
            var h2 = 0;
            if (l2.globals.hasXaxisGroups && "between" === l2.config.xaxis.tickPlacement) {
              var c2 = l2.globals.groups;
              if (c2) {
                for (var d2 = 0, g2 = 0; d2 < e2 && g2 < c2.length; g2++)
                  d2 += c2[g2].cols;
                d2 === e2 && (h2 = 0.6 * l2.globals.xAxisLabelsHeight);
              }
            }
            new V(this.ctx).drawXaxisTicks(i2, h2, l2.globals.dom.elGraphical);
          }
        } }, { key: "_drawGridLine", value: function(t3) {
          var e2 = t3.i, i2 = t3.x1, a2 = t3.y1, s2 = t3.x2, r2 = t3.y2, o2 = t3.xCount, n2 = t3.parent, l2 = this.w, h2 = false, c2 = n2.node.classList.contains("apexcharts-gridlines-horizontal"), d2 = l2.config.grid.strokeDashArray, g2 = l2.globals.barPadForNumericAxis;
          (0 === a2 && 0 === r2 || 0 === i2 && 0 === s2) && (h2 = true), a2 === l2.globals.gridHeight && r2 === l2.globals.gridHeight && (h2 = true), !l2.globals.isBarHorizontal || 0 !== e2 && e2 !== o2 - 1 || (h2 = true);
          var u2 = new m2(this).drawLine(i2 - (c2 ? g2 : 0), a2, s2 + (c2 ? g2 : 0), r2, l2.config.grid.borderColor, d2);
          u2.node.classList.add("apexcharts-gridline"), h2 && l2.config.grid.show ? this.elGridBorders.add(u2) : n2.add(u2);
        } }, { key: "_drawGridBandRect", value: function(t3) {
          var e2 = t3.c, i2 = t3.x1, a2 = t3.y1, s2 = t3.x2, r2 = t3.y2, o2 = t3.type, n2 = this.w, l2 = new m2(this.ctx), h2 = n2.globals.barPadForNumericAxis;
          if ("column" !== o2 || "datetime" !== n2.config.xaxis.type) {
            var c2 = n2.config.grid[o2].colors[e2], d2 = l2.drawRect(i2 - ("row" === o2 ? h2 : 0), a2, s2 + ("row" === o2 ? 2 * h2 : 0), r2, 0, c2, n2.config.grid[o2].opacity);
            this.elg.add(d2), d2.attr("clip-path", "url(#gridRectMask".concat(n2.globals.cuid, ")")), d2.node.classList.add("apexcharts-grid-".concat(o2));
          }
        } }, { key: "_drawXYLines", value: function(t3) {
          var e2 = this, i2 = t3.xCount, a2 = t3.tickAmount, s2 = this.w;
          if (s2.config.grid.xaxis.lines.show || s2.config.xaxis.axisTicks.show) {
            var r2, o2 = s2.globals.padHorizontal, n2 = s2.globals.gridHeight;
            s2.globals.timescaleLabels.length ? function(t4) {
              for (var a3 = t4.xC, s3 = t4.x1, r3 = t4.y1, o3 = t4.x2, n3 = t4.y2, l3 = 0; l3 < a3; l3++)
                s3 = e2.xaxisLabels[l3].position, o3 = e2.xaxisLabels[l3].position, e2._drawGridLines({ i: l3, x1: s3, y1: r3, x2: o3, y2: n3, xCount: i2, parent: e2.elgridLinesV });
            }({ xC: i2, x1: o2, y1: 0, x2: r2, y2: n2 }) : (s2.globals.isXNumeric && (i2 = s2.globals.xAxisScale.result.length), function(t4) {
              for (var a3 = t4.xC, r3 = t4.x1, o3 = t4.y1, n3 = t4.x2, l3 = t4.y2, h3 = 0; h3 < a3 + (s2.globals.isXNumeric ? 0 : 1); h3++)
                0 === h3 && 1 === a3 && 1 === s2.globals.dataPoints && (n3 = r3 = s2.globals.gridWidth / 2), e2._drawGridLines({ i: h3, x1: r3, y1: o3, x2: n3, y2: l3, xCount: i2, parent: e2.elgridLinesV }), n3 = r3 += s2.globals.gridWidth / (s2.globals.isXNumeric ? a3 - 1 : a3);
            }({ xC: i2, x1: o2, y1: 0, x2: r2, y2: n2 }));
          }
          if (s2.config.grid.yaxis.lines.show) {
            var l2 = 0, h2 = 0, c2 = s2.globals.gridWidth, d2 = a2 + 1;
            this.isRangeBar && (d2 = s2.globals.labels.length);
            for (var g2 = 0; g2 < d2 + (this.isRangeBar ? 1 : 0); g2++)
              this._drawGridLine({ i: g2, xCount: d2 + (this.isRangeBar ? 1 : 0), x1: 0, y1: l2, x2: c2, y2: h2, parent: this.elgridLinesH }), h2 = l2 += s2.globals.gridHeight / (this.isRangeBar ? d2 : a2);
          }
        } }, { key: "_drawInvertedXYLines", value: function(t3) {
          var e2 = t3.xCount, i2 = this.w;
          if (i2.config.grid.xaxis.lines.show || i2.config.xaxis.axisTicks.show)
            for (var a2, s2 = i2.globals.padHorizontal, r2 = i2.globals.gridHeight, o2 = 0; o2 < e2 + 1; o2++) {
              i2.config.grid.xaxis.lines.show && this._drawGridLine({ i: o2, xCount: e2 + 1, x1: s2, y1: 0, x2: a2, y2: r2, parent: this.elgridLinesV }), new V(this.ctx).drawXaxisTicks(s2, 0, i2.globals.dom.elGraphical), a2 = s2 += i2.globals.gridWidth / e2;
            }
          if (i2.config.grid.yaxis.lines.show)
            for (var n2 = 0, l2 = 0, h2 = i2.globals.gridWidth, c2 = 0; c2 < i2.globals.dataPoints + 1; c2++)
              this._drawGridLine({ i: c2, xCount: i2.globals.dataPoints + 1, x1: 0, y1: n2, x2: h2, y2: l2, parent: this.elgridLinesH }), l2 = n2 += i2.globals.gridHeight / i2.globals.dataPoints;
        } }, { key: "renderGrid", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = new m2(this.ctx);
          this.elg = i2.group({ class: "apexcharts-grid" }), this.elgridLinesH = i2.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = i2.group({ class: "apexcharts-gridlines-vertical" }), this.elGridBorders = i2.group({ class: "apexcharts-grid-borders" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t3.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
          for (var a2 = 0; a2 < e2.seriesYAxisMap.length && -1 !== e2.ignoreYAxisIndexes.indexOf(a2); )
            a2++;
          a2 === e2.seriesYAxisMap.length && (a2 = 0);
          var s2, r2 = e2.yAxisScale[a2].result.length - 1;
          if (!e2.isBarHorizontal || this.isRangeBar) {
            var o2, n2, l2;
            if (s2 = this.xaxisLabels.length, this.isRangeBar)
              r2 = e2.labels.length, t3.config.xaxis.tickAmount && t3.config.xaxis.labels.formatter && (s2 = t3.config.xaxis.tickAmount), (null === (o2 = e2.yAxisScale) || void 0 === o2 || null === (n2 = o2[a2]) || void 0 === n2 || null === (l2 = n2.result) || void 0 === l2 ? void 0 : l2.length) > 0 && "datetime" !== t3.config.xaxis.type && (s2 = e2.yAxisScale[a2].result.length - 1);
            this._drawXYLines({ xCount: s2, tickAmount: r2 });
          } else
            s2 = r2, r2 = e2.xTickAmount, this._drawInvertedXYLines({ xCount: s2, tickAmount: r2 });
          return this.drawGridBands(s2, r2), { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: e2.gridWidth / s2 };
        } }, { key: "drawGridBands", value: function(t3, e2) {
          var i2 = this.w;
          if (void 0 !== i2.config.grid.row.colors && i2.config.grid.row.colors.length > 0)
            for (var a2 = 0, s2 = i2.globals.gridHeight / e2, r2 = i2.globals.gridWidth, o2 = 0, n2 = 0; o2 < e2; o2++, n2++)
              n2 >= i2.config.grid.row.colors.length && (n2 = 0), this._drawGridBandRect({ c: n2, x1: 0, y1: a2, x2: r2, y2: s2, type: "row" }), a2 += i2.globals.gridHeight / e2;
          if (void 0 !== i2.config.grid.column.colors && i2.config.grid.column.colors.length > 0)
            for (var l2 = i2.globals.isBarHorizontal || "on" !== i2.config.xaxis.tickPlacement || "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric ? t3 : t3 - 1, h2 = i2.globals.padHorizontal, c2 = i2.globals.padHorizontal + i2.globals.gridWidth / l2, d2 = i2.globals.gridHeight, g2 = 0, u2 = 0; g2 < t3; g2++, u2++)
              u2 >= i2.config.grid.column.colors.length && (u2 = 0), this._drawGridBandRect({ c: u2, x1: h2, y1: 0, x2: c2, y2: d2, type: "column" }), h2 += i2.globals.gridWidth / l2;
        } }]), t2;
      }();
      var _ = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "niceScale", value: function(t3, e2) {
          var i2, a2, s2, r2, o2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n2 = 1e-11, l2 = this.w, h2 = l2.globals;
          h2.isBarHorizontal ? (i2 = l2.config.xaxis, a2 = Math.max((h2.svgWidth - 100) / 25, 2)) : (i2 = l2.config.yaxis[o2], a2 = Math.max((h2.svgHeight - 100) / 15, 2)), s2 = void 0 !== i2.min && null !== i2.min, r2 = void 0 !== i2.max && null !== i2.min;
          var c2 = void 0 !== i2.stepSize && null !== i2.stepSize, d2 = void 0 !== i2.tickAmount && null !== i2.tickAmount, g2 = d2 ? i2.tickAmount : i2.forceNiceScale ? h2.niceScaleDefaultTicks[Math.min(Math.round(a2 / 2), h2.niceScaleDefaultTicks.length - 1)] : 10;
          if (h2.isMultipleYAxis && !d2 && h2.multiAxisTickAmount > 0 && (g2 = h2.multiAxisTickAmount, d2 = true), g2 = "dataPoints" === g2 ? h2.dataPoints - 1 : Math.abs(Math.round(g2)), (t3 === Number.MIN_VALUE && 0 === e2 || !x.isNumber(t3) && !x.isNumber(e2) || t3 === Number.MIN_VALUE && e2 === -Number.MAX_VALUE) && (t3 = x.isNumber(i2.min) ? i2.min : 0, e2 = x.isNumber(i2.max) ? i2.max : t3 + g2, h2.allSeriesCollapsed = false), t3 > e2) {
            console.warn("axis.min cannot be greater than axis.max: swapping min and max");
            var u2 = e2;
            e2 = t3, t3 = u2;
          } else
            t3 === e2 && (t3 = 0 === t3 ? 0 : t3 - 1, e2 = 0 === e2 ? 2 : e2 + 1);
          var p2 = [];
          g2 < 1 && (g2 = 1);
          var f2 = g2, b2 = Math.abs(e2 - t3);
          if (i2.forceNiceScale) {
            !s2 && t3 > 0 && t3 / b2 < 0.15 && (t3 = 0, s2 = true), !r2 && e2 < 0 && -e2 / b2 < 0.15 && (e2 = 0, r2 = true), b2 = Math.abs(e2 - t3);
          }
          var v2 = b2 / f2, m3 = v2, y2 = Math.floor(Math.log10(m3)), w2 = Math.pow(10, y2), k2 = Math.ceil(m3 / w2);
          if (v2 = m3 = (k2 = h2.niceScaleAllowedMagMsd[0 === h2.yValueDecimal ? 0 : 1][k2]) * w2, h2.isBarHorizontal && i2.stepSize && "datetime" !== i2.type ? (v2 = i2.stepSize, c2 = true) : c2 && (v2 = i2.stepSize), c2 && i2.forceNiceScale) {
            var A2 = Math.floor(Math.log10(v2));
            v2 *= Math.pow(10, y2 - A2);
          }
          if (s2 && r2) {
            var S2 = b2 / f2;
            if (d2)
              if (c2)
                if (0 != x.mod(b2, v2)) {
                  var C2 = x.getGCD(v2, S2);
                  v2 = S2 / C2 < 10 ? C2 : S2;
                } else
                  0 == x.mod(v2, S2) ? v2 = S2 : (S2 = v2, d2 = false);
              else
                v2 = S2;
            else if (c2)
              0 == x.mod(b2, v2) ? S2 = v2 : v2 = S2;
            else if (0 == x.mod(b2, v2))
              S2 = v2;
            else {
              S2 = b2 / (f2 = Math.ceil(b2 / v2));
              var L2 = x.getGCD(b2, v2);
              b2 / L2 < a2 && (S2 = L2), v2 = S2;
            }
            f2 = Math.round(b2 / v2);
          } else {
            if (s2 || r2) {
              if (r2)
                if (d2)
                  t3 = e2 - v2 * f2;
                else {
                  var P2 = t3;
                  t3 = v2 * Math.floor(t3 / v2), Math.abs(e2 - t3) / x.getGCD(b2, v2) > a2 && (t3 = e2 - v2 * g2, t3 += v2 * Math.floor((P2 - t3) / v2));
                }
              else if (s2)
                if (d2)
                  e2 = t3 + v2 * f2;
                else {
                  var M2 = e2;
                  e2 = v2 * Math.ceil(e2 / v2), Math.abs(e2 - t3) / x.getGCD(b2, v2) > a2 && (e2 = t3 + v2 * g2, e2 += v2 * Math.ceil((M2 - e2) / v2));
                }
            } else if (d2) {
              var I2 = v2 / (e2 - t3 > e2 ? 1 : 2), T2 = I2 * Math.floor(t3 / I2);
              Math.abs(T2 - t3) <= I2 / 2 ? e2 = (t3 = T2) + v2 * f2 : t3 = (e2 = I2 * Math.ceil(e2 / I2)) - v2 * f2;
            } else
              t3 = v2 * Math.floor(t3 / v2), e2 = v2 * Math.ceil(e2 / v2);
            b2 = Math.abs(e2 - t3), v2 = x.getGCD(b2, v2), f2 = Math.round(b2 / v2);
          }
          if (d2 || s2 || r2 || (f2 = Math.ceil((b2 - n2) / (v2 + n2))) > 16 && x.getPrimeFactors(f2).length < 2 && f2++, !d2 && i2.forceNiceScale && 0 === h2.yValueDecimal && f2 > b2 && (f2 = b2, v2 = Math.round(b2 / f2)), f2 > a2 && (!d2 && !c2 || i2.forceNiceScale)) {
            var z2 = x.getPrimeFactors(f2), X2 = z2.length - 1, E2 = f2;
            t:
              for (var Y2 = 0; Y2 < X2; Y2++)
                for (var F2 = 0; F2 <= X2 - Y2; F2++) {
                  for (var R2 = Math.min(F2 + Y2, X2), H2 = E2, D2 = 1, O2 = F2; O2 <= R2; O2++)
                    D2 *= z2[O2];
                  if ((H2 /= D2) < a2) {
                    E2 = H2;
                    break t;
                  }
                }
            v2 = E2 === f2 ? b2 : b2 / E2, f2 = Math.round(b2 / v2);
          }
          h2.isMultipleYAxis && 0 == h2.multiAxisTickAmount && h2.ignoreYAxisIndexes.indexOf(o2) < 0 && (h2.multiAxisTickAmount = f2);
          var N2 = t3 - v2, W2 = v2 * n2;
          do {
            N2 += v2, p2.push(x.stripNumber(N2, 7));
          } while (e2 - N2 > W2);
          return { result: p2, niceMin: p2[0], niceMax: p2[p2.length - 1] };
        } }, { key: "linearScale", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r2 = Math.abs(e2 - t3);
          "dataPoints" === (i2 = this._adjustTicksForSmallRange(i2, a2, r2)) && (i2 = this.w.globals.dataPoints - 1), s2 || (s2 = r2 / i2), i2 === Number.MAX_VALUE && (i2 = 5, s2 = 1);
          for (var o2 = [], n2 = t3; i2 >= 0; )
            o2.push(n2), n2 += s2, i2 -= 1;
          return { result: o2, niceMin: o2[0], niceMax: o2[o2.length - 1] };
        } }, { key: "logarithmicScaleNice", value: function(t3, e2, i2) {
          e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
          for (var a2 = [], s2 = Math.ceil(Math.log(e2) / Math.log(i2) + 1), r2 = Math.floor(Math.log(t3) / Math.log(i2)); r2 < s2; r2++)
            a2.push(Math.pow(i2, r2));
          return { result: a2, niceMin: a2[0], niceMax: a2[a2.length - 1] };
        } }, { key: "logarithmicScale", value: function(t3, e2, i2) {
          e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
          for (var a2 = [], s2 = Math.log(e2) / Math.log(i2), r2 = Math.log(t3) / Math.log(i2), o2 = s2 - r2, n2 = Math.round(o2), l2 = o2 / n2, h2 = 0, c2 = r2; h2 < n2; h2++, c2 += l2)
            a2.push(Math.pow(i2, c2));
          return a2.push(Math.pow(i2, s2)), { result: a2, niceMin: t3, niceMax: e2 };
        } }, { key: "_adjustTicksForSmallRange", value: function(t3, e2, i2) {
          var a2 = t3;
          if (void 0 !== e2 && this.w.config.yaxis[e2].labels.formatter && void 0 === this.w.config.yaxis[e2].tickAmount) {
            var s2 = Number(this.w.config.yaxis[e2].labels.formatter(1));
            x.isNumber(s2) && 0 === this.w.globals.yValueDecimal && (a2 = Math.ceil(i2));
          }
          return a2 < t3 ? a2 : t3;
        } }, { key: "setYScaleForIndex", value: function(t3, e2, i2) {
          var a2 = this.w.globals, s2 = this.w.config, r2 = a2.isBarHorizontal ? s2.xaxis : s2.yaxis[t3];
          void 0 === a2.yAxisScale[t3] && (a2.yAxisScale[t3] = []);
          var o2 = Math.abs(i2 - e2);
          r2.logarithmic && o2 <= 5 && (a2.invalidLogScale = true), r2.logarithmic && o2 > 5 ? (a2.allSeriesCollapsed = false, a2.yAxisScale[t3] = r2.forceNiceScale ? this.logarithmicScaleNice(e2, i2, r2.logBase) : this.logarithmicScale(e2, i2, r2.logBase)) : i2 !== -Number.MAX_VALUE && x.isNumber(i2) && e2 !== Number.MAX_VALUE && x.isNumber(e2) ? (a2.allSeriesCollapsed = false, a2.yAxisScale[t3] = this.niceScale(e2, i2, t3)) : a2.yAxisScale[t3] = this.niceScale(Number.MIN_VALUE, 0, t3);
        } }, { key: "setXScale", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.globals, s2 = Math.abs(e2 - t3);
          return e2 !== -Number.MAX_VALUE && x.isNumber(e2) ? a2.xAxisScale = this.linearScale(t3, e2, i2.config.xaxis.tickAmount ? i2.config.xaxis.tickAmount : s2 < 10 && s2 > 1 ? s2 + 1 : 10, 0, i2.config.xaxis.stepSize) : a2.xAxisScale = this.linearScale(0, 10, 10), a2.xAxisScale;
        } }, { key: "setSeriesYAxisMappings", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          t3.minYArr, t3.maxYArr;
          var i2 = [], a2 = [], s2 = [], r2 = t3.series.length > e2.yaxis.length || e2.yaxis.some(function(t4) {
            return Array.isArray(t4.seriesName);
          });
          e2.series.forEach(function(t4, e3) {
            s2.push(e3), a2.push(null);
          }), e2.yaxis.forEach(function(t4, e3) {
            i2[e3] = [];
          });
          var o2 = [];
          e2.yaxis.forEach(function(t4, a3) {
            var n3 = false;
            if (t4.seriesName) {
              var l3 = [];
              Array.isArray(t4.seriesName) ? l3 = t4.seriesName : l3.push(t4.seriesName), l3.forEach(function(t5) {
                e2.series.forEach(function(e3, o3) {
                  if (e3.name === t5) {
                    var l4 = o3;
                    a3 === o3 || r2 ? !r2 || s2.indexOf(o3) > -1 ? i2[a3].push([a3, o3]) : console.warn("Series '" + e3.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i2[o3].push([o3, a3]), l4 = a3), n3 = true, -1 !== (l4 = s2.indexOf(l4)) && s2.splice(l4, 1);
                  }
                });
              });
            }
            n3 || o2.push(a3);
          }), i2 = i2.map(function(t4, e3) {
            var i3 = [];
            return t4.forEach(function(t5) {
              a2[t5[1]] = t5[0], i3.push(t5[1]);
            }), i3;
          });
          for (var n2 = e2.yaxis.length - 1, l2 = 0; l2 < o2.length && (n2 = o2[l2], i2[n2] = [], s2); l2++) {
            var h2 = s2[0];
            s2.shift(), i2[n2].push(h2), a2[h2] = n2;
          }
          s2.forEach(function(t4) {
            i2[n2].push(t4), a2[t4] = n2;
          }), t3.seriesYAxisMap = i2.map(function(t4) {
            return t4;
          }), t3.seriesYAxisReverseMap = a2.map(function(t4) {
            return t4;
          });
        } }, { key: "scaleMultipleYAxes", value: function() {
          var t3 = this, e2 = this.w.config, i2 = this.w.globals;
          this.setSeriesYAxisMappings();
          var a2 = i2.seriesYAxisMap, s2 = i2.minYArr, r2 = i2.maxYArr;
          i2.allSeriesCollapsed = true, i2.barGroups = [], a2.forEach(function(a3, o2) {
            var n2 = [];
            a3.forEach(function(t4) {
              var i3 = e2.series[t4].group;
              n2.indexOf(i3) < 0 && n2.push(i3);
            }), a3.length > 0 ? function() {
              var l2, h2, c2 = Number.MAX_VALUE, d2 = -Number.MAX_VALUE, g2 = c2, u2 = d2;
              if (e2.chart.stacked)
                !function() {
                  var t4 = i2.seriesX[a3[0]], s3 = [], r3 = [], p3 = [];
                  n2.forEach(function() {
                    s3.push(t4.map(function() {
                      return Number.MIN_VALUE;
                    })), r3.push(t4.map(function() {
                      return Number.MIN_VALUE;
                    })), p3.push(t4.map(function() {
                      return Number.MIN_VALUE;
                    }));
                  });
                  for (var f3 = function(t5) {
                    !l2 && e2.series[a3[t5]].type && (l2 = e2.series[a3[t5]].type);
                    var c3 = a3[t5];
                    h2 = e2.series[c3].group ? e2.series[c3].group : "axis-".concat(o2), !(i2.collapsedSeriesIndices.indexOf(c3) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(c3) < 0) || (i2.allSeriesCollapsed = false, n2.forEach(function(t6, a4) {
                      if (e2.series[c3].group === t6)
                        for (var o3 = 0; o3 < i2.series[c3].length; o3++) {
                          var n3 = i2.series[c3][o3];
                          n3 >= 0 ? r3[a4][o3] += n3 : p3[a4][o3] += n3, s3[a4][o3] += n3, g2 = Math.min(g2, n3), u2 = Math.max(u2, n3);
                        }
                    })), "bar" !== l2 && "column" !== l2 || i2.barGroups.push(h2);
                  }, x2 = 0; x2 < a3.length; x2++)
                    f3(x2);
                  l2 || (l2 = e2.chart.type), "bar" === l2 || "column" === l2 ? n2.forEach(function(t5, e3) {
                    c2 = Math.min(c2, Math.min.apply(null, p3[e3])), d2 = Math.max(d2, Math.max.apply(null, r3[e3]));
                  }) : (n2.forEach(function(t5, e3) {
                    g2 = Math.min(g2, Math.min.apply(null, s3[e3])), u2 = Math.max(u2, Math.max.apply(null, s3[e3]));
                  }), c2 = g2, d2 = u2), c2 === Number.MIN_VALUE && d2 === Number.MIN_VALUE && (d2 = -Number.MAX_VALUE);
                }();
              else
                for (var p2 = 0; p2 < a3.length; p2++) {
                  var f2 = a3[p2];
                  c2 = Math.min(c2, s2[f2]), d2 = Math.max(d2, r2[f2]), !(i2.collapsedSeriesIndices.indexOf(f2) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(f2) < 0) || (i2.allSeriesCollapsed = false);
                }
              void 0 !== e2.yaxis[o2].min && (c2 = "function" == typeof e2.yaxis[o2].min ? e2.yaxis[o2].min(c2) : e2.yaxis[o2].min), void 0 !== e2.yaxis[o2].max && (d2 = "function" == typeof e2.yaxis[o2].max ? e2.yaxis[o2].max(d2) : e2.yaxis[o2].max), i2.barGroups = i2.barGroups.filter(function(t4, e3, i3) {
                return i3.indexOf(t4) === e3;
              }), t3.setYScaleForIndex(o2, c2, d2), a3.forEach(function(t4) {
                s2[t4] = i2.yAxisScale[o2].niceMin, r2[t4] = i2.yAxisScale[o2].niceMax;
              });
            }() : t3.setYScaleForIndex(o2, 0, -Number.MAX_VALUE);
          });
        } }]), t2;
      }();
      var U = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.scales = new _(e2);
        }
        return r(t2, [{ key: "init", value: function() {
          this.setYRange(), this.setXRange(), this.setZRange();
        } }, { key: "getMinYMaxY", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w.config, r2 = this.w.globals, o2 = -Number.MAX_VALUE, n2 = Number.MIN_VALUE;
          null === a2 && (a2 = t3 + 1);
          var l2 = 0, h2 = 0, c2 = void 0;
          if (r2.seriesX.length >= a2) {
            var d2, g2;
            l2 = 0, h2 = (c2 = u(new Set((d2 = []).concat.apply(d2, u(r2.seriesX.slice(t3, a2)))))).length - 1;
            var p2 = null === (g2 = r2.brushSource) || void 0 === g2 ? void 0 : g2.w.config.chart.brush;
            if (s2.chart.zoom.enabled && s2.chart.zoom.autoScaleYaxis || null != p2 && p2.enabled && null != p2 && p2.autoScaleYaxis) {
              if (s2.xaxis.min)
                for (l2 = 0; l2 < h2 && c2[l2] < s2.xaxis.min; l2++)
                  ;
              if (s2.xaxis.max)
                for (; h2 > l2 && c2[h2] > s2.xaxis.max; h2--)
                  ;
            }
          }
          var f2 = r2.series, b2 = f2, v2 = f2;
          "candlestick" === s2.chart.type ? (b2 = r2.seriesCandleL, v2 = r2.seriesCandleH) : "boxPlot" === s2.chart.type ? (b2 = r2.seriesCandleO, v2 = r2.seriesCandleC) : r2.isRangeData && (b2 = r2.seriesRangeStart, v2 = r2.seriesRangeEnd);
          for (var m3 = t3; m3 < a2; m3++) {
            r2.dataPoints = Math.max(r2.dataPoints, f2[m3].length);
            var y2 = s2.series[m3].type;
            r2.categoryLabels.length && (r2.dataPoints = r2.categoryLabels.filter(function(t4) {
              return void 0 !== t4;
            }).length), r2.labels.length && "datetime" !== s2.xaxis.type && 0 !== r2.series.reduce(function(t4, e3) {
              return t4 + e3.length;
            }, 0) && (r2.dataPoints = Math.max(r2.dataPoints, r2.labels.length)), c2 || (l2 = 0, h2 = r2.series[m3].length);
            for (var w2 = l2; w2 <= h2 && w2 < r2.series[m3].length; w2++) {
              var k2 = f2[m3][w2];
              if (null !== k2 && x.isNumber(k2)) {
                switch (void 0 !== v2[m3][w2] && (o2 = Math.max(o2, v2[m3][w2]), e2 = Math.min(e2, v2[m3][w2])), void 0 !== b2[m3][w2] && (e2 = Math.min(e2, b2[m3][w2]), i2 = Math.max(i2, b2[m3][w2])), y2) {
                  case "candlestick":
                    void 0 !== r2.seriesCandleC[m3][w2] && (o2 = Math.max(o2, r2.seriesCandleH[m3][w2]), e2 = Math.min(e2, r2.seriesCandleL[m3][w2]));
                    break;
                  case "boxPlot":
                    void 0 !== r2.seriesCandleC[m3][w2] && (o2 = Math.max(o2, r2.seriesCandleC[m3][w2]), e2 = Math.min(e2, r2.seriesCandleO[m3][w2]));
                }
                y2 && "candlestick" !== y2 && "boxPlot" !== y2 && "rangeArea" !== y2 && "rangeBar" !== y2 && (o2 = Math.max(o2, r2.series[m3][w2]), e2 = Math.min(e2, r2.series[m3][w2])), i2 = o2, r2.seriesGoals[m3] && r2.seriesGoals[m3][w2] && Array.isArray(r2.seriesGoals[m3][w2]) && r2.seriesGoals[m3][w2].forEach(function(t4) {
                  n2 !== Number.MIN_VALUE && (n2 = Math.min(n2, t4.value), e2 = n2), o2 = Math.max(o2, t4.value), i2 = o2;
                }), x.isFloat(k2) && (k2 = x.noExponents(k2), r2.yValueDecimal = Math.max(r2.yValueDecimal, k2.toString().split(".")[1].length)), n2 > b2[m3][w2] && b2[m3][w2] < 0 && (n2 = b2[m3][w2]);
              } else
                r2.hasNullValues = true;
            }
            "bar" !== y2 && "column" !== y2 || (n2 < 0 && o2 < 0 && (o2 = 0, i2 = Math.max(i2, 0)), n2 === Number.MIN_VALUE && (n2 = 0, e2 = Math.min(e2, 0)));
          }
          return "rangeBar" === s2.chart.type && r2.seriesRangeStart.length && r2.isBarHorizontal && (n2 = e2), "bar" === s2.chart.type && (n2 < 0 && o2 < 0 && (o2 = 0), n2 === Number.MIN_VALUE && (n2 = 0)), { minY: n2, maxY: o2, lowestY: e2, highestY: i2 };
        } }, { key: "setYRange", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE;
          var i2, a2 = Number.MAX_VALUE;
          if (t3.isMultipleYAxis) {
            a2 = Number.MAX_VALUE;
            for (var s2 = 0; s2 < t3.series.length; s2++)
              i2 = this.getMinYMaxY(s2), t3.minYArr[s2] = i2.lowestY, t3.maxYArr[s2] = i2.highestY, a2 = Math.min(a2, i2.lowestY);
          }
          if (i2 = this.getMinYMaxY(0, a2, null, t3.series.length), "bar" === e2.chart.type ? (t3.minY = i2.minY, t3.maxY = i2.maxY) : (t3.minY = i2.lowestY, t3.maxY = i2.highestY), a2 = i2.lowestY, e2.chart.stacked && this._setStackedMinMax(), "line" === e2.chart.type || "area" === e2.chart.type || "scatter" === e2.chart.type || "candlestick" === e2.chart.type || "boxPlot" === e2.chart.type || "rangeBar" === e2.chart.type && !t3.isBarHorizontal ? t3.minY === Number.MIN_VALUE && a2 !== -Number.MAX_VALUE && a2 !== t3.maxY && (t3.minY = a2) : t3.minY = i2.minY, e2.yaxis.forEach(function(e3, i3) {
            void 0 !== e3.max && ("number" == typeof e3.max ? t3.maxYArr[i3] = e3.max : "function" == typeof e3.max && (t3.maxYArr[i3] = e3.max(t3.isMultipleYAxis ? t3.maxYArr[i3] : t3.maxY)), t3.maxY = t3.maxYArr[i3]), void 0 !== e3.min && ("number" == typeof e3.min ? t3.minYArr[i3] = e3.min : "function" == typeof e3.min && (t3.minYArr[i3] = e3.min(t3.isMultipleYAxis ? t3.minYArr[i3] === Number.MIN_VALUE ? 0 : t3.minYArr[i3] : t3.minY)), t3.minY = t3.minYArr[i3]);
          }), t3.isBarHorizontal) {
            ["min", "max"].forEach(function(i3) {
              void 0 !== e2.xaxis[i3] && "number" == typeof e2.xaxis[i3] && ("min" === i3 ? t3.minY = e2.xaxis[i3] : t3.maxY = e2.xaxis[i3]);
            });
          }
          return t3.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t3.minY = a2) : (this.scales.setYScaleForIndex(0, t3.minY, t3.maxY), t3.minY = t3.yAxisScale[0].niceMin, t3.maxY = t3.yAxisScale[0].niceMax, t3.minYArr[0] = t3.minY, t3.maxYArr[0] = t3.maxY), t3.barGroups = [], t3.lineGroups = [], t3.areaGroups = [], e2.series.forEach(function(i3) {
            switch (i3.type || e2.chart.type) {
              case "bar":
              case "column":
                t3.barGroups.push(i3.group);
                break;
              case "line":
                t3.lineGroups.push(i3.group);
                break;
              case "area":
                t3.areaGroups.push(i3.group);
            }
          }), t3.barGroups = t3.barGroups.filter(function(t4, e3, i3) {
            return i3.indexOf(t4) === e3;
          }), t3.lineGroups = t3.lineGroups.filter(function(t4, e3, i3) {
            return i3.indexOf(t4) === e3;
          }), t3.areaGroups = t3.areaGroups.filter(function(t4, e3, i3) {
            return i3.indexOf(t4) === e3;
          }), { minY: t3.minY, maxY: t3.maxY, minYArr: t3.minYArr, maxYArr: t3.maxYArr, yAxisScale: t3.yAxisScale };
        } }, { key: "setXRange", value: function() {
          var t3 = this.w.globals, e2 = this.w.config, i2 = "numeric" === e2.xaxis.type || "datetime" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided || t3.noLabelsProvided || t3.isXNumeric;
          if (t3.isXNumeric && function() {
            for (var e3 = 0; e3 < t3.series.length; e3++)
              if (t3.labels[e3])
                for (var i3 = 0; i3 < t3.labels[e3].length; i3++)
                  null !== t3.labels[e3][i3] && x.isNumber(t3.labels[e3][i3]) && (t3.maxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.initialMaxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.minX = Math.min(t3.minX, t3.labels[e3][i3]), t3.initialMinX = Math.min(t3.minX, t3.labels[e3][i3]));
          }(), t3.noLabelsProvided && 0 === e2.xaxis.categories.length && (t3.maxX = t3.labels[t3.labels.length - 1], t3.initialMaxX = t3.labels[t3.labels.length - 1], t3.minX = 1, t3.initialMinX = 1), t3.isXNumeric || t3.noLabelsProvided || t3.dataFormatXNumeric) {
            var a2;
            if (void 0 === e2.xaxis.tickAmount ? (a2 = Math.round(t3.svgWidth / 150), "numeric" === e2.xaxis.type && t3.dataPoints < 30 && (a2 = t3.dataPoints - 1), a2 > t3.dataPoints && 0 !== t3.dataPoints && (a2 = t3.dataPoints - 1)) : "dataPoints" === e2.xaxis.tickAmount ? (t3.series.length > 1 && (a2 = t3.series[t3.maxValsInArrayIndex].length - 1), t3.isXNumeric && (a2 = t3.maxX - t3.minX - 1)) : a2 = e2.xaxis.tickAmount, t3.xTickAmount = a2, void 0 !== e2.xaxis.max && "number" == typeof e2.xaxis.max && (t3.maxX = e2.xaxis.max), void 0 !== e2.xaxis.min && "number" == typeof e2.xaxis.min && (t3.minX = e2.xaxis.min), void 0 !== e2.xaxis.range && (t3.minX = t3.maxX - e2.xaxis.range), t3.minX !== Number.MAX_VALUE && t3.maxX !== -Number.MAX_VALUE)
              if (e2.xaxis.convertedCatToNumeric && !t3.dataFormatXNumeric) {
                for (var s2 = [], r2 = t3.minX - 1; r2 < t3.maxX; r2++)
                  s2.push(r2 + 1);
                t3.xAxisScale = { result: s2, niceMin: s2[0], niceMax: s2[s2.length - 1] };
              } else
                t3.xAxisScale = this.scales.setXScale(t3.minX, t3.maxX);
            else
              t3.xAxisScale = this.scales.linearScale(0, a2, a2, 0, e2.xaxis.stepSize), t3.noLabelsProvided && t3.labels.length > 0 && (t3.xAxisScale = this.scales.linearScale(1, t3.labels.length, a2 - 1, 0, e2.xaxis.stepSize), t3.seriesX = t3.labels.slice());
            i2 && (t3.labels = t3.xAxisScale.result.slice());
          }
          return t3.isBarHorizontal && t3.labels.length && (t3.xTickAmount = t3.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t3.minX, maxX: t3.maxX };
        } }, { key: "setZRange", value: function() {
          var t3 = this.w.globals;
          if (t3.isDataXYZ) {
            for (var e2 = 0; e2 < t3.series.length; e2++)
              if (void 0 !== t3.seriesZ[e2])
                for (var i2 = 0; i2 < t3.seriesZ[e2].length; i2++)
                  null !== t3.seriesZ[e2][i2] && x.isNumber(t3.seriesZ[e2][i2]) && (t3.maxZ = Math.max(t3.maxZ, t3.seriesZ[e2][i2]), t3.minZ = Math.min(t3.minZ, t3.seriesZ[e2][i2]));
          }
        } }, { key: "_handleSingleDataPoint", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          if (t3.minX === t3.maxX) {
            var i2 = new A(this.ctx);
            if ("datetime" === e2.xaxis.type) {
              var a2 = i2.getDate(t3.minX);
              e2.xaxis.labels.datetimeUTC ? a2.setUTCDate(a2.getUTCDate() - 2) : a2.setDate(a2.getDate() - 2), t3.minX = new Date(a2).getTime();
              var s2 = i2.getDate(t3.maxX);
              e2.xaxis.labels.datetimeUTC ? s2.setUTCDate(s2.getUTCDate() + 2) : s2.setDate(s2.getDate() + 2), t3.maxX = new Date(s2).getTime();
            } else
              ("numeric" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided) && (t3.minX = t3.minX - 2, t3.initialMinX = t3.minX, t3.maxX = t3.maxX + 2, t3.initialMaxX = t3.maxX);
          }
        } }, { key: "_getMinXDiff", value: function() {
          var t3 = this.w.globals;
          t3.isXNumeric && t3.seriesX.forEach(function(e2, i2) {
            1 === e2.length && e2.push(t3.seriesX[t3.maxValsInArrayIndex][t3.seriesX[t3.maxValsInArrayIndex].length - 1]);
            var a2 = e2.slice();
            a2.sort(function(t4, e3) {
              return t4 - e3;
            }), a2.forEach(function(e3, i3) {
              if (i3 > 0) {
                var s2 = e3 - a2[i3 - 1];
                s2 > 0 && (t3.minXDiff = Math.min(s2, t3.minXDiff));
              }
            }), 1 !== t3.dataPoints && t3.minXDiff !== Number.MAX_VALUE || (t3.minXDiff = 0.5);
          });
        } }, { key: "_setStackedMinMax", value: function() {
          var t3 = this, e2 = this.w.globals;
          if (e2.series.length) {
            var i2 = e2.seriesGroups;
            i2.length || (i2 = [this.w.globals.seriesNames.map(function(t4) {
              return t4;
            })]);
            var a2 = {}, s2 = {};
            i2.forEach(function(i3) {
              a2[i3] = [], s2[i3] = [], t3.w.config.series.map(function(t4, a3) {
                return i3.indexOf(e2.seriesNames[a3]) > -1 ? a3 : null;
              }).filter(function(t4) {
                return null !== t4;
              }).forEach(function(r2) {
                for (var o2 = 0; o2 < e2.series[e2.maxValsInArrayIndex].length; o2++) {
                  var n2, l2, h2, c2;
                  void 0 === a2[i3][o2] && (a2[i3][o2] = 0, s2[i3][o2] = 0), (t3.w.config.chart.stacked && !e2.comboCharts || t3.w.config.chart.stacked && e2.comboCharts && (!t3.w.config.chart.stackOnlyBar || "bar" === (null === (n2 = t3.w.config.series) || void 0 === n2 || null === (l2 = n2[r2]) || void 0 === l2 ? void 0 : l2.type) || "column" === (null === (h2 = t3.w.config.series) || void 0 === h2 || null === (c2 = h2[r2]) || void 0 === c2 ? void 0 : c2.type))) && null !== e2.series[r2][o2] && x.isNumber(e2.series[r2][o2]) && (e2.series[r2][o2] > 0 ? a2[i3][o2] += parseFloat(e2.series[r2][o2]) + 1e-4 : s2[i3][o2] += parseFloat(e2.series[r2][o2]));
                }
              });
            }), Object.entries(a2).forEach(function(t4) {
              var i3 = g(t4, 1)[0];
              a2[i3].forEach(function(t5, r2) {
                e2.maxY = Math.max(e2.maxY, a2[i3][r2]), e2.minY = Math.min(e2.minY, s2[i3][r2]);
              });
            });
          }
        } }]), t2;
      }();
      var q = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.elgrid = i2, this.w = e2.w;
          var s2 = this.w;
          this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.axisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === s2.config.xaxis.position && (this.xAxisoffX = s2.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new C(e2);
        }
        return r(t2, [{ key: "drawYaxis", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m2(this.ctx), s2 = i2.config.yaxis[t3].labels.style, r2 = s2.fontSize, o2 = s2.fontFamily, n2 = s2.fontWeight, l2 = a2.group({ class: "apexcharts-yaxis", rel: t3, transform: "translate(" + i2.globals.translateYAxisX[t3] + ", 0)" });
          if (this.axesUtils.isYAxisHidden(t3))
            return l2;
          var h2 = a2.group({ class: "apexcharts-yaxis-texts-g" });
          l2.add(h2);
          var c2 = i2.globals.yAxisScale[t3].result.length - 1, d2 = i2.globals.gridHeight / c2, g2 = i2.globals.yLabelFormatters[t3], u2 = i2.globals.yAxisScale[t3].result.slice();
          u2 = this.axesUtils.checkForReversedLabels(t3, u2);
          var p2 = "";
          if (i2.config.yaxis[t3].labels.show) {
            var f2 = i2.globals.translateY + i2.config.yaxis[t3].labels.offsetY;
            i2.globals.isBarHorizontal ? f2 = 0 : "heatmap" === i2.config.chart.type && (f2 -= d2 / 2), f2 += parseInt(i2.config.yaxis[t3].labels.style.fontSize, 10) / 3;
            for (var x2 = function(l3) {
              var x3 = u2[l3];
              x3 = g2(x3, l3, i2);
              var b3 = i2.config.yaxis[t3].labels.padding;
              i2.config.yaxis[t3].opposite && 0 !== i2.config.yaxis.length && (b3 *= -1);
              var v3 = "end";
              i2.config.yaxis[t3].opposite && (v3 = "start"), "left" === i2.config.yaxis[t3].labels.align ? v3 = "start" : "center" === i2.config.yaxis[t3].labels.align ? v3 = "middle" : "right" === i2.config.yaxis[t3].labels.align && (v3 = "end");
              var m3 = e2.axesUtils.getYAxisForeColor(s2.colors, t3), y3 = a2.drawText({ x: b3, y: f2, text: x3, textAnchor: v3, fontSize: r2, fontFamily: o2, fontWeight: n2, maxWidth: i2.config.yaxis[t3].labels.maxWidth, foreColor: Array.isArray(m3) ? m3[l3] : m3, isPlainText: false, cssClass: "apexcharts-yaxis-label " + s2.cssClass });
              l3 === c2 && (p2 = y3), h2.add(y3);
              var w3 = document.createElementNS(i2.globals.SVGNS, "title");
              if (w3.textContent = Array.isArray(x3) ? x3.join(" ") : x3, y3.node.appendChild(w3), 0 !== i2.config.yaxis[t3].labels.rotate) {
                var k3 = a2.rotateAroundCenter(p2.node), A3 = a2.rotateAroundCenter(y3.node);
                y3.node.setAttribute("transform", "rotate(".concat(i2.config.yaxis[t3].labels.rotate, " ").concat(k3.x, " ").concat(A3.y, ")"));
              }
              f2 += d2;
            }, b2 = c2; b2 >= 0; b2--)
              x2(b2);
          }
          if (void 0 !== i2.config.yaxis[t3].title.text) {
            var v2 = a2.group({ class: "apexcharts-yaxis-title" }), y2 = 0;
            i2.config.yaxis[t3].opposite && (y2 = i2.globals.translateYAxisX[t3]);
            var w2 = a2.drawText({ x: y2, y: i2.globals.gridHeight / 2 + i2.globals.translateY + i2.config.yaxis[t3].title.offsetY, text: i2.config.yaxis[t3].title.text, textAnchor: "end", foreColor: i2.config.yaxis[t3].title.style.color, fontSize: i2.config.yaxis[t3].title.style.fontSize, fontWeight: i2.config.yaxis[t3].title.style.fontWeight, fontFamily: i2.config.yaxis[t3].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + i2.config.yaxis[t3].title.style.cssClass });
            v2.add(w2), l2.add(v2);
          }
          var k2 = i2.config.yaxis[t3].axisBorder, A2 = 31 + k2.offsetX;
          if (i2.config.yaxis[t3].opposite && (A2 = -31 - k2.offsetX), k2.show) {
            var S2 = a2.drawLine(A2, i2.globals.translateY + k2.offsetY - 2, A2, i2.globals.gridHeight + i2.globals.translateY + k2.offsetY + 2, k2.color, 0, k2.width);
            l2.add(S2);
          }
          return i2.config.yaxis[t3].axisTicks.show && this.axesUtils.drawYAxisTicks(A2, c2, k2, i2.config.yaxis[t3].axisTicks, t3, d2, l2), l2;
        } }, { key: "drawYaxisInversed", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx), a2 = i2.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s2 = i2.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e2.globals.translateXAxisX, ", ").concat(e2.globals.translateXAxisY, ")") });
          a2.add(s2);
          var r2 = e2.globals.yAxisScale[t3].result.length - 1, o2 = e2.globals.gridWidth / r2 + 0.1, n2 = o2 + e2.config.xaxis.labels.offsetX, l2 = e2.globals.xLabelFormatter, h2 = e2.globals.yAxisScale[t3].result.slice(), c2 = e2.globals.timescaleLabels;
          c2.length > 0 && (this.xaxisLabels = c2.slice(), r2 = (h2 = c2.slice()).length), h2 = this.axesUtils.checkForReversedLabels(t3, h2);
          var d2 = c2.length;
          if (e2.config.xaxis.labels.show)
            for (var g2 = d2 ? 0 : r2; d2 ? g2 < d2 : g2 >= 0; d2 ? g2++ : g2--) {
              var u2 = h2[g2];
              u2 = l2(u2, g2, e2);
              var p2 = e2.globals.gridWidth + e2.globals.padHorizontal - (n2 - o2 + e2.config.xaxis.labels.offsetX);
              if (c2.length) {
                var f2 = this.axesUtils.getLabel(h2, c2, p2, g2, this.drawnLabels, this.xaxisFontSize);
                p2 = f2.x, u2 = f2.text, this.drawnLabels.push(f2.text), 0 === g2 && e2.globals.skipFirstTimelinelabel && (u2 = ""), g2 === h2.length - 1 && e2.globals.skipLastTimelinelabel && (u2 = "");
              }
              var x2 = i2.drawText({ x: p2, y: this.xAxisoffX + e2.config.xaxis.labels.offsetY + 30 - ("top" === e2.config.xaxis.position ? e2.globals.xAxisHeight + e2.config.xaxis.axisTicks.height - 2 : 0), text: u2, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t3] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e2.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label " + e2.config.xaxis.labels.style.cssClass });
              s2.add(x2), x2.tspan(u2);
              var b2 = document.createElementNS(e2.globals.SVGNS, "title");
              b2.textContent = u2, x2.node.appendChild(b2), n2 += o2;
            }
          return this.inversedYAxisTitleText(a2), this.inversedYAxisBorder(a2), a2;
        } }, { key: "inversedYAxisBorder", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx), a2 = e2.config.xaxis.axisBorder;
          if (a2.show) {
            var s2 = 0;
            "bar" === e2.config.chart.type && e2.globals.isXNumeric && (s2 -= 15);
            var r2 = i2.drawLine(e2.globals.padHorizontal + s2 + a2.offsetX, this.xAxisoffX, e2.globals.gridWidth, this.xAxisoffX, a2.color, 0, a2.height);
            this.elgrid && this.elgrid.elGridBorders && e2.config.grid.show ? this.elgrid.elGridBorders.add(r2) : t3.add(r2);
          }
        } }, { key: "inversedYAxisTitleText", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx);
          if (void 0 !== e2.config.xaxis.title.text) {
            var a2 = i2.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s2 = i2.drawText({ x: e2.globals.gridWidth / 2 + e2.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e2.config.xaxis.title.style.fontSize) + e2.config.xaxis.title.offsetY + 20, text: e2.config.xaxis.title.text, textAnchor: "middle", fontSize: e2.config.xaxis.title.style.fontSize, fontFamily: e2.config.xaxis.title.style.fontFamily, fontWeight: e2.config.xaxis.title.style.fontWeight, foreColor: e2.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + e2.config.xaxis.title.style.cssClass });
            a2.add(s2), t3.add(a2);
          }
        } }, { key: "yAxisTitleRotate", value: function(t3, e2) {
          var i2 = this.w, a2 = new m2(this.ctx), s2 = { width: 0, height: 0 }, r2 = { width: 0, height: 0 }, o2 = i2.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-texts-g"));
          null !== o2 && (s2 = o2.getBoundingClientRect());
          var n2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-title text"));
          if (null !== n2 && (r2 = n2.getBoundingClientRect()), null !== n2) {
            var l2 = this.xPaddingForYAxisTitle(t3, s2, r2, e2);
            n2.setAttribute("x", l2.xPos - (e2 ? 10 : 0));
          }
          if (null !== n2) {
            var h2 = a2.rotateAroundCenter(n2);
            n2.setAttribute("transform", "rotate(".concat(e2 ? -1 * i2.config.yaxis[t3].title.rotate : i2.config.yaxis[t3].title.rotate, " ").concat(h2.x, " ").concat(h2.y, ")"));
          }
        } }, { key: "xPaddingForYAxisTitle", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 0, o2 = 0, n2 = 10;
          return void 0 === s2.config.yaxis[t3].title.text || t3 < 0 ? { xPos: o2, padd: 0 } : (a2 ? (o2 = e2.width + s2.config.yaxis[t3].title.offsetX + i2.width / 2 + n2 / 2, 0 === (r2 += 1) && (o2 -= n2 / 2)) : (o2 = -1 * e2.width + s2.config.yaxis[t3].title.offsetX + n2 / 2 + i2.width / 2, s2.globals.isBarHorizontal && (n2 = 25, o2 = -1 * e2.width - s2.config.yaxis[t3].title.offsetX - n2)), { xPos: o2, padd: n2 });
        } }, { key: "setYAxisXPosition", value: function(t3, e2) {
          var i2 = this.w, a2 = 0, s2 = 0, r2 = 18, o2 = 1;
          i2.config.yaxis.length > 1 && (this.multipleYs = true), i2.config.yaxis.map(function(n2, l2) {
            var h2 = i2.globals.ignoreYAxisIndexes.indexOf(l2) > -1 || !n2.show || n2.floating || 0 === t3[l2].width, c2 = t3[l2].width + e2[l2].width;
            n2.opposite ? i2.globals.isBarHorizontal ? (s2 = i2.globals.gridWidth + i2.globals.translateX - 1, i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX) : (s2 = i2.globals.gridWidth + i2.globals.translateX + o2, h2 || (o2 = o2 + c2 + 20), i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX + 20) : (a2 = i2.globals.translateX - r2, h2 || (r2 = r2 + c2 + 20), i2.globals.translateYAxisX[l2] = a2 + n2.labels.offsetX);
          });
        } }, { key: "setYAxisTextAlignments", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
          (e2 = x.listToArray(e2)).forEach(function(e3, i2) {
            var a2 = t3.config.yaxis[i2];
            if (a2 && !a2.floating && void 0 !== a2.labels.align) {
              var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-texts-g")), r2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-label"));
              r2 = x.listToArray(r2);
              var o2 = s2.getBoundingClientRect();
              "left" === a2.labels.align ? (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "start");
              }), a2.opposite || s2.setAttribute("transform", "translate(-".concat(o2.width, ", 0)"))) : "center" === a2.labels.align ? (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "middle");
              }), s2.setAttribute("transform", "translate(".concat(o2.width / 2 * (a2.opposite ? 1 : -1), ", 0)"))) : "right" === a2.labels.align && (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "end");
              }), a2.opposite && s2.setAttribute("transform", "translate(".concat(o2.width, ", 0)")));
            }
          });
        } }]), t2;
      }();
      var Z = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.documentEvent = x.bind(this.documentEvent, this);
        }
        return r(t2, [{ key: "addEventListener", value: function(t3, e2) {
          var i2 = this.w;
          i2.globals.events.hasOwnProperty(t3) ? i2.globals.events[t3].push(e2) : i2.globals.events[t3] = [e2];
        } }, { key: "removeEventListener", value: function(t3, e2) {
          var i2 = this.w;
          if (i2.globals.events.hasOwnProperty(t3)) {
            var a2 = i2.globals.events[t3].indexOf(e2);
            -1 !== a2 && i2.globals.events[t3].splice(a2, 1);
          }
        } }, { key: "fireEvent", value: function(t3, e2) {
          var i2 = this.w;
          if (i2.globals.events.hasOwnProperty(t3)) {
            e2 && e2.length || (e2 = []);
            for (var a2 = i2.globals.events[t3], s2 = a2.length, r2 = 0; r2 < s2; r2++)
              a2[r2].apply(null, e2);
          }
        } }, { key: "setupEventHandlers", value: function() {
          var t3 = this, e2 = this.w, i2 = this.ctx, a2 = e2.globals.dom.baseEl.querySelector(e2.globals.chartClass);
          this.ctx.eventList.forEach(function(t4) {
            a2.addEventListener(t4, function(t5) {
              var a3 = Object.assign({}, e2, { seriesIndex: e2.globals.axisCharts ? e2.globals.capturedSeriesIndex : 0, dataPointIndex: e2.globals.capturedDataPointIndex });
              "mousemove" === t5.type || "touchmove" === t5.type ? "function" == typeof e2.config.chart.events.mouseMove && e2.config.chart.events.mouseMove(t5, i2, a3) : "mouseleave" === t5.type || "touchleave" === t5.type ? "function" == typeof e2.config.chart.events.mouseLeave && e2.config.chart.events.mouseLeave(t5, i2, a3) : ("mouseup" === t5.type && 1 === t5.which || "touchend" === t5.type) && ("function" == typeof e2.config.chart.events.click && e2.config.chart.events.click(t5, i2, a3), i2.ctx.events.fireEvent("click", [t5, i2, a3]));
            }, { capture: false, passive: true });
          }), this.ctx.eventList.forEach(function(i3) {
            e2.globals.dom.baseEl.addEventListener(i3, t3.documentEvent, { passive: true });
          }), this.ctx.core.setupBrushHandler();
        } }, { key: "documentEvent", value: function(t3) {
          var e2 = this.w, i2 = t3.target.className;
          if ("click" === t3.type) {
            var a2 = e2.globals.dom.baseEl.querySelector(".apexcharts-menu");
            a2 && a2.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i2 && a2.classList.remove("apexcharts-menu-open");
          }
          e2.globals.clientX = "touchmove" === t3.type ? t3.touches[0].clientX : t3.clientX, e2.globals.clientY = "touchmove" === t3.type ? t3.touches[0].clientY : t3.clientY;
        } }]), t2;
      }();
      var $2 = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "setCurrentLocaleValues", value: function(t3) {
          var e2 = this.w.config.chart.locales;
          window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e2 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
          var i2 = e2.filter(function(e3) {
            return e3.name === t3;
          })[0];
          if (!i2)
            throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
          var a2 = x.extend(M, i2);
          this.w.globals.locale = a2.options;
        } }]), t2;
      }();
      var J = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawAxis", value: function(t3, e2) {
          var i2, a2, s2 = this, r2 = this.w.globals, o2 = this.w.config, n2 = new V(this.ctx, e2), l2 = new q(this.ctx, e2);
          r2.axisCharts && "radar" !== t3 && (r2.isBarHorizontal ? (a2 = l2.drawYaxisInversed(0), i2 = n2.drawXaxisInversed(0), r2.dom.elGraphical.add(i2), r2.dom.elGraphical.add(a2)) : (i2 = n2.drawXaxis(), r2.dom.elGraphical.add(i2), o2.yaxis.map(function(t4, e3) {
            if (-1 === r2.ignoreYAxisIndexes.indexOf(e3) && (a2 = l2.drawYaxis(e3), r2.dom.Paper.add(a2), "back" === s2.w.config.grid.position)) {
              var i3 = r2.dom.Paper.children()[1];
              i3.remove(), r2.dom.Paper.add(i3);
            }
          })));
        } }]), t2;
      }();
      var Q = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawXCrosshairs", value: function() {
          var t3 = this.w, e2 = new m2(this.ctx), i2 = new v(this.ctx), a2 = t3.config.xaxis.crosshairs.fill.gradient, s2 = t3.config.xaxis.crosshairs.dropShadow, r2 = t3.config.xaxis.crosshairs.fill.type, o2 = a2.colorFrom, n2 = a2.colorTo, l2 = a2.opacityFrom, h2 = a2.opacityTo, c2 = a2.stops, d2 = s2.enabled, g2 = s2.left, u2 = s2.top, p2 = s2.blur, f2 = s2.color, b2 = s2.opacity, y2 = t3.config.xaxis.crosshairs.fill.color;
          if (t3.config.xaxis.crosshairs.show) {
            "gradient" === r2 && (y2 = e2.drawGradient("vertical", o2, n2, l2, h2, null, c2, null));
            var w2 = e2.drawRect();
            1 === t3.config.xaxis.crosshairs.width && (w2 = e2.drawLine());
            var k2 = t3.globals.gridHeight;
            (!x.isNumber(k2) || k2 < 0) && (k2 = 0);
            var A2 = t3.config.xaxis.crosshairs.width;
            (!x.isNumber(A2) || A2 < 0) && (A2 = 0), w2.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: k2, width: A2, height: k2, fill: y2, filter: "none", "fill-opacity": t3.config.xaxis.crosshairs.opacity, stroke: t3.config.xaxis.crosshairs.stroke.color, "stroke-width": t3.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t3.config.xaxis.crosshairs.stroke.dashArray }), d2 && (w2 = i2.dropShadow(w2, { left: g2, top: u2, blur: p2, color: f2, opacity: b2 })), t3.globals.dom.elGraphical.add(w2);
          }
        } }, { key: "drawYCrosshairs", value: function() {
          var t3 = this.w, e2 = new m2(this.ctx), i2 = t3.config.yaxis[0].crosshairs, a2 = t3.globals.barPadForNumericAxis;
          if (t3.config.yaxis[0].crosshairs.show) {
            var s2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, i2.stroke.dashArray, i2.stroke.width);
            s2.attr({ class: "apexcharts-ycrosshairs" }), t3.globals.dom.elGraphical.add(s2);
          }
          var r2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, 0, 0);
          r2.attr({ class: "apexcharts-ycrosshairs-hidden" }), t3.globals.dom.elGraphical.add(r2);
        } }]), t2;
      }();
      var K = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "checkResponsiveConfig", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.config;
          if (0 !== a2.responsive.length) {
            var s2 = a2.responsive.slice();
            s2.sort(function(t4, e3) {
              return t4.breakpoint > e3.breakpoint ? 1 : e3.breakpoint > t4.breakpoint ? -1 : 0;
            }).reverse();
            var r2 = new Y({}), o2 = function() {
              var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a3 = s2[0].breakpoint, o3 = window.innerWidth > 0 ? window.innerWidth : screen.width;
              if (o3 > a3) {
                var n3 = x.clone(i2.globals.initialConfig);
                n3.series = x.clone(i2.config.series);
                var l2 = y.extendArrayProps(r2, n3, i2);
                t4 = x.extend(l2, t4), t4 = x.extend(i2.config, t4), e2.overrideResponsiveOptions(t4);
              } else
                for (var h2 = 0; h2 < s2.length; h2++)
                  if (o3 < s2[h2].breakpoint) {
                    var c2 = y.extendArrayProps(r2, s2[h2].options, i2);
                    t4 = x.extend(c2, t4), t4 = x.extend(i2.config, t4), e2.overrideResponsiveOptions(t4);
                  }
            };
            if (t3) {
              var n2 = y.extendArrayProps(r2, t3, i2);
              n2 = x.extend(i2.config, n2), o2(n2 = x.extend(n2, t3));
            } else
              o2({});
          }
        } }, { key: "overrideResponsiveOptions", value: function(t3) {
          var e2 = new Y(t3).init({ responsiveOverride: true });
          this.w.config = e2;
        } }]), t2;
      }();
      var tt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.colors = [], this.w = e2.w;
          var i2 = this.w;
          this.isColorFn = false, this.isHeatmapDistributed = "treemap" === i2.config.chart.type && i2.config.plotOptions.treemap.distributed || "heatmap" === i2.config.chart.type && i2.config.plotOptions.heatmap.distributed, this.isBarDistributed = i2.config.plotOptions.bar.distributed && ("bar" === i2.config.chart.type || "rangeBar" === i2.config.chart.type);
        }
        return r(t2, [{ key: "init", value: function() {
          this.setDefaultColors();
        } }, { key: "setDefaultColors", value: function() {
          var t3, e2 = this, i2 = this.w, a2 = new x();
          if (i2.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(i2.config.theme.mode)), void 0 === i2.config.colors || 0 === (null === (t3 = i2.config.colors) || void 0 === t3 ? void 0 : t3.length) ? i2.globals.colors = this.predefined() : (i2.globals.colors = i2.config.colors, Array.isArray(i2.config.colors) && i2.config.colors.length > 0 && "function" == typeof i2.config.colors[0] && (i2.globals.colors = i2.config.series.map(function(t4, a3) {
            var s3 = i2.config.colors[a3];
            return s3 || (s3 = i2.config.colors[0]), "function" == typeof s3 ? (e2.isColorFn = true, s3({ value: i2.globals.axisCharts ? i2.globals.series[a3][0] ? i2.globals.series[a3][0] : 0 : i2.globals.series[a3], seriesIndex: a3, dataPointIndex: a3, w: i2 })) : s3;
          }))), i2.globals.seriesColors.map(function(t4, e3) {
            t4 && (i2.globals.colors[e3] = t4);
          }), i2.config.theme.monochrome.enabled) {
            var s2 = [], r2 = i2.globals.series.length;
            (this.isBarDistributed || this.isHeatmapDistributed) && (r2 = i2.globals.series[0].length * i2.globals.series.length);
            for (var o2 = i2.config.theme.monochrome.color, n2 = 1 / (r2 / i2.config.theme.monochrome.shadeIntensity), l2 = i2.config.theme.monochrome.shadeTo, h2 = 0, c2 = 0; c2 < r2; c2++) {
              var d2 = void 0;
              "dark" === l2 ? (d2 = a2.shadeColor(-1 * h2, o2), h2 += n2) : (d2 = a2.shadeColor(h2, o2), h2 += n2), s2.push(d2);
            }
            i2.globals.colors = s2.slice();
          }
          var g2 = i2.globals.colors.slice();
          this.pushExtraColors(i2.globals.colors);
          ["fill", "stroke"].forEach(function(t4) {
            void 0 === i2.config[t4].colors ? i2.globals[t4].colors = e2.isColorFn ? i2.config.colors : g2 : i2.globals[t4].colors = i2.config[t4].colors.slice(), e2.pushExtraColors(i2.globals[t4].colors);
          }), void 0 === i2.config.dataLabels.style.colors ? i2.globals.dataLabels.style.colors = g2 : i2.globals.dataLabels.style.colors = i2.config.dataLabels.style.colors.slice(), this.pushExtraColors(i2.globals.dataLabels.style.colors, 50), void 0 === i2.config.plotOptions.radar.polygons.fill.colors ? i2.globals.radarPolygons.fill.colors = ["dark" === i2.config.theme.mode ? "#424242" : "none"] : i2.globals.radarPolygons.fill.colors = i2.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(i2.globals.radarPolygons.fill.colors, 20), void 0 === i2.config.markers.colors ? i2.globals.markers.colors = g2 : i2.globals.markers.colors = i2.config.markers.colors.slice(), this.pushExtraColors(i2.globals.markers.colors);
        } }, { key: "pushExtraColors", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = this.w, s2 = e2 || a2.globals.series.length;
          if (null === i2 && (i2 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a2.config.chart.type && a2.config.plotOptions.heatmap.colorScale.inverse), i2 && a2.globals.series.length && (s2 = a2.globals.series[a2.globals.maxValsInArrayIndex].length * a2.globals.series.length), t3.length < s2)
            for (var r2 = s2 - t3.length, o2 = 0; o2 < r2; o2++)
              t3.push(t3[o2]);
        } }, { key: "updateThemeOptions", value: function(t3) {
          t3.chart = t3.chart || {}, t3.tooltip = t3.tooltip || {};
          var e2 = t3.theme.mode || "light", i2 = t3.theme.palette ? t3.theme.palette : "dark" === e2 ? "palette4" : "palette1", a2 = t3.chart.foreColor ? t3.chart.foreColor : "dark" === e2 ? "#f6f7f8" : "#373d3f";
          return t3.tooltip.theme = e2, t3.chart.foreColor = a2, t3.theme.palette = i2, t3;
        } }, { key: "predefined", value: function() {
          switch (this.w.config.theme.palette) {
            case "palette1":
            default:
              this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
              break;
            case "palette2":
              this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
              break;
            case "palette3":
              this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
              break;
            case "palette4":
              this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
              break;
            case "palette5":
              this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
              break;
            case "palette6":
              this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
              break;
            case "palette7":
              this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
              break;
            case "palette8":
              this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
              break;
            case "palette9":
              this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
              break;
            case "palette10":
              this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
          }
          return this.colors;
        } }]), t2;
      }();
      var et = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "draw", value: function() {
          this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
        } }, { key: "drawTitleSubtitle", value: function(t3) {
          var e2 = this.w, i2 = "title" === t3 ? e2.config.title : e2.config.subtitle, a2 = e2.globals.svgWidth / 2, s2 = i2.offsetY, r2 = "middle";
          if ("left" === i2.align ? (a2 = 10, r2 = "start") : "right" === i2.align && (a2 = e2.globals.svgWidth - 10, r2 = "end"), a2 += i2.offsetX, s2 = s2 + parseInt(i2.style.fontSize, 10) + i2.margin / 2, void 0 !== i2.text) {
            var o2 = new m2(this.ctx).drawText({ x: a2, y: s2, text: i2.text, textAnchor: r2, fontSize: i2.style.fontSize, fontFamily: i2.style.fontFamily, fontWeight: i2.style.fontWeight, foreColor: i2.style.color, opacity: 1 });
            o2.node.setAttribute("class", "apexcharts-".concat(t3, "-text")), e2.globals.dom.Paper.add(o2);
          }
        } }]), t2;
      }();
      var it = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getTitleSubtitleCoords", value: function(t3) {
          var e2 = this.w, i2 = 0, a2 = 0, s2 = "title" === t3 ? e2.config.title.floating : e2.config.subtitle.floating, r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(t3, "-text"));
          if (null !== r2 && !s2) {
            var o2 = r2.getBoundingClientRect();
            i2 = o2.width, a2 = e2.globals.axisCharts ? o2.height + 5 : o2.height;
          }
          return { width: i2, height: a2 };
        } }, { key: "getLegendsRect", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.elLegendWrap;
          t3.config.legend.height || "top" !== t3.config.legend.position && "bottom" !== t3.config.legend.position || (e2.style.maxHeight = t3.globals.svgHeight / 2 + "px");
          var i2 = Object.assign({}, x.getBoundingClientRect(e2));
          return null !== e2 && !t3.config.legend.floating && t3.config.legend.show ? this.dCtx.lgRect = { x: i2.x, y: i2.y, height: i2.height, width: 0 === i2.height ? 0 : i2.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t3.config.legend.position && "right" !== t3.config.legend.position || 1.5 * this.dCtx.lgRect.width > t3.globals.svgWidth && (this.dCtx.lgRect.width = t3.globals.svgWidth / 1.5), this.dCtx.lgRect;
        } }, { key: "getDatalabelsRect", value: function() {
          var t3 = this, e2 = this.w, i2 = [];
          e2.config.series.forEach(function(s3, r3) {
            s3.data.forEach(function(s4, o3) {
              var n2;
              n2 = e2.globals.series[r3][o3], a2 = e2.config.dataLabels.formatter(n2, { ctx: t3.dCtx.ctx, seriesIndex: r3, dataPointIndex: o3, w: e2 }), i2.push(a2);
            });
          });
          var a2 = x.getLargestStringFromArr(i2), s2 = new m2(this.dCtx.ctx), r2 = e2.config.dataLabels.style, o2 = s2.getTextRects(a2, parseInt(r2.fontSize), r2.fontFamily);
          return { width: 1.05 * o2.width, height: o2.height };
        } }, { key: "getLargestStringFromMultiArr", value: function(t3, e2) {
          var i2 = t3;
          if (this.w.globals.isMultiLineX) {
            var a2 = e2.map(function(t4, e3) {
              return Array.isArray(t4) ? t4.length : 1;
            }), s2 = Math.max.apply(Math, u(a2));
            i2 = e2[a2.indexOf(s2)];
          }
          return i2;
        } }]), t2;
      }();
      var at = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getxAxisLabelsCoords", value: function() {
          var t3, e2 = this.w, i2 = e2.globals.labels.slice();
          if (e2.config.xaxis.convertedCatToNumeric && 0 === i2.length && (i2 = e2.globals.categoryLabels), e2.globals.timescaleLabels.length > 0) {
            var a2 = this.getxAxisTimeScaleLabelsCoords();
            t3 = { width: a2.width, height: a2.height }, e2.globals.rotateXLabels = false;
          } else {
            this.dCtx.lgWidthForSideLegends = "left" !== e2.config.legend.position && "right" !== e2.config.legend.position || e2.config.legend.floating ? 0 : this.dCtx.lgRect.width;
            var s2 = e2.globals.xLabelFormatter, r2 = x.getLargestStringFromArr(i2), o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, i2);
            e2.globals.isBarHorizontal && (o2 = r2 = e2.globals.yAxisScale[0].result.reduce(function(t4, e3) {
              return t4.length > e3.length ? t4 : e3;
            }, 0));
            var n2 = new S(this.dCtx.ctx), l2 = r2;
            r2 = n2.xLabelFormat(s2, r2, l2, { i: void 0, dateFormatter: new A(this.dCtx.ctx).formatDate, w: e2 }), o2 = n2.xLabelFormat(s2, o2, l2, { i: void 0, dateFormatter: new A(this.dCtx.ctx).formatDate, w: e2 }), (e2.config.xaxis.convertedCatToNumeric && void 0 === r2 || "" === String(r2).trim()) && (o2 = r2 = "1");
            var h2 = new m2(this.dCtx.ctx), c2 = h2.getTextRects(r2, e2.config.xaxis.labels.style.fontSize), d2 = c2;
            if (r2 !== o2 && (d2 = h2.getTextRects(o2, e2.config.xaxis.labels.style.fontSize)), (t3 = { width: c2.width >= d2.width ? c2.width : d2.width, height: c2.height >= d2.height ? c2.height : d2.height }).width * i2.length > e2.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e2.config.xaxis.labels.rotate || e2.config.xaxis.labels.rotateAlways) {
              if (!e2.globals.isBarHorizontal) {
                e2.globals.rotateXLabels = true;
                var g2 = function(t4) {
                  return h2.getTextRects(t4, e2.config.xaxis.labels.style.fontSize, e2.config.xaxis.labels.style.fontFamily, "rotate(".concat(e2.config.xaxis.labels.rotate, " 0 0)"), false);
                };
                c2 = g2(r2), r2 !== o2 && (d2 = g2(o2)), t3.height = (c2.height > d2.height ? c2.height : d2.height) / 1.5, t3.width = c2.width > d2.width ? c2.width : d2.width;
              }
            } else
              e2.globals.rotateXLabels = false;
          }
          return e2.config.xaxis.labels.show || (t3 = { width: 0, height: 0 }), { width: t3.width, height: t3.height };
        } }, { key: "getxAxisGroupLabelsCoords", value: function() {
          var t3, e2 = this.w;
          if (!e2.globals.hasXaxisGroups)
            return { width: 0, height: 0 };
          var i2, a2 = (null === (t3 = e2.config.xaxis.group.style) || void 0 === t3 ? void 0 : t3.fontSize) || e2.config.xaxis.labels.style.fontSize, s2 = e2.globals.groups.map(function(t4) {
            return t4.title;
          }), r2 = x.getLargestStringFromArr(s2), o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, s2), n2 = new m2(this.dCtx.ctx), l2 = n2.getTextRects(r2, a2), h2 = l2;
          return r2 !== o2 && (h2 = n2.getTextRects(o2, a2)), i2 = { width: l2.width >= h2.width ? l2.width : h2.width, height: l2.height >= h2.height ? l2.height : h2.height }, e2.config.xaxis.labels.show || (i2 = { width: 0, height: 0 }), { width: i2.width, height: i2.height };
        } }, { key: "getxAxisTitleCoords", value: function() {
          var t3 = this.w, e2 = 0, i2 = 0;
          if (void 0 !== t3.config.xaxis.title.text) {
            var a2 = new m2(this.dCtx.ctx).getTextRects(t3.config.xaxis.title.text, t3.config.xaxis.title.style.fontSize);
            e2 = a2.width, i2 = a2.height;
          }
          return { width: e2, height: i2 };
        } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
          var t3, e2 = this.w;
          this.dCtx.timescaleLabels = e2.globals.timescaleLabels.slice();
          var i2 = this.dCtx.timescaleLabels.map(function(t4) {
            return t4.value;
          }), a2 = i2.reduce(function(t4, e3) {
            return void 0 === t4 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t4.length > e3.length ? t4 : e3;
          }, 0);
          return 1.05 * (t3 = new m2(this.dCtx.ctx).getTextRects(a2, e2.config.xaxis.labels.style.fontSize)).width * i2.length > e2.globals.gridWidth && 0 !== e2.config.xaxis.labels.rotate && (e2.globals.overlappingXLabels = true), t3;
        } }, { key: "additionalPaddingXLabels", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.globals, s2 = i2.config, r2 = s2.xaxis.type, o2 = t3.width;
          a2.skipLastTimelinelabel = false, a2.skipFirstTimelinelabel = false;
          var n2 = i2.config.yaxis[0].opposite && i2.globals.isBarHorizontal, l2 = function(t4, n3) {
            s2.yaxis.length > 1 && function(t5) {
              return -1 !== a2.collapsedSeriesIndices.indexOf(t5);
            }(n3) || function(t5) {
              if (e2.dCtx.timescaleLabels && e2.dCtx.timescaleLabels.length) {
                var n4 = e2.dCtx.timescaleLabels[0], l3 = e2.dCtx.timescaleLabels[e2.dCtx.timescaleLabels.length - 1].position + o2 / 1.75 - e2.dCtx.yAxisWidthRight, h2 = n4.position - o2 / 1.75 + e2.dCtx.yAxisWidthLeft, c2 = "right" === i2.config.legend.position && e2.dCtx.lgRect.width > 0 ? e2.dCtx.lgRect.width : 0;
                l3 > a2.svgWidth - a2.translateX - c2 && (a2.skipLastTimelinelabel = true), h2 < -(t5.show && !t5.floating || "bar" !== s2.chart.type && "candlestick" !== s2.chart.type && "rangeBar" !== s2.chart.type && "boxPlot" !== s2.chart.type ? 10 : o2 / 1.75) && (a2.skipFirstTimelinelabel = true);
              } else
                "datetime" === r2 ? e2.dCtx.gridPad.right < o2 && !a2.rotateXLabels && (a2.skipLastTimelinelabel = true) : "datetime" !== r2 && e2.dCtx.gridPad.right < o2 / 2 - e2.dCtx.yAxisWidthRight && !a2.rotateXLabels && !i2.config.xaxis.labels.trim && ("between" !== i2.config.xaxis.tickPlacement || i2.globals.isBarHorizontal) && (e2.dCtx.xPadRight = o2 / 2 + 1);
            }(t4);
          };
          s2.yaxis.forEach(function(t4, i3) {
            n2 ? (e2.dCtx.gridPad.left < o2 && (e2.dCtx.xPadLeft = o2 / 2 + 1), e2.dCtx.xPadRight = o2 / 2 + 1) : l2(t4, i3);
          });
        } }]), t2;
      }();
      var st = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getyAxisLabelsCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = [], a2 = 10, s2 = new C(this.dCtx.ctx);
          return e2.config.yaxis.map(function(r2, o2) {
            var n2 = { seriesIndex: o2, dataPointIndex: -1, w: e2 }, l2 = e2.globals.yAxisScale[o2], h2 = 0;
            if (!s2.isYAxisHidden(o2) && r2.labels.show && void 0 !== r2.labels.minWidth && (h2 = r2.labels.minWidth), !s2.isYAxisHidden(o2) && r2.labels.show && l2.result.length) {
              var c2 = e2.globals.yLabelFormatters[o2], d2 = l2.niceMin === Number.MIN_VALUE ? 0 : l2.niceMin, g2 = l2.result.reduce(function(t4, e3) {
                var i3, a3;
                return (null === (i3 = String(c2(t4, n2))) || void 0 === i3 ? void 0 : i3.length) > (null === (a3 = String(c2(e3, n2))) || void 0 === a3 ? void 0 : a3.length) ? t4 : e3;
              }, d2), u2 = g2 = c2(g2, n2);
              if (void 0 !== g2 && 0 !== g2.length || (g2 = l2.niceMax), e2.globals.isBarHorizontal) {
                a2 = 0;
                var p2 = e2.globals.labels.slice();
                g2 = x.getLargestStringFromArr(p2), g2 = c2(g2, { seriesIndex: o2, dataPointIndex: -1, w: e2 }), u2 = t3.dCtx.dimHelpers.getLargestStringFromMultiArr(g2, p2);
              }
              var f2 = new m2(t3.dCtx.ctx), b2 = "rotate(".concat(r2.labels.rotate, " 0 0)"), v2 = f2.getTextRects(g2, r2.labels.style.fontSize, r2.labels.style.fontFamily, b2, false), y2 = v2;
              g2 !== u2 && (y2 = f2.getTextRects(u2, r2.labels.style.fontSize, r2.labels.style.fontFamily, b2, false)), i2.push({ width: (h2 > y2.width || h2 > v2.width ? h2 : y2.width > v2.width ? y2.width : v2.width) + a2, height: y2.height > v2.height ? y2.height : v2.height });
            } else
              i2.push({ width: 0, height: 0 });
          }), i2;
        } }, { key: "getyAxisTitleCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = [];
          return e2.config.yaxis.map(function(e3, a2) {
            if (e3.show && void 0 !== e3.title.text) {
              var s2 = new m2(t3.dCtx.ctx), r2 = "rotate(".concat(e3.title.rotate, " 0 0)"), o2 = s2.getTextRects(e3.title.text, e3.title.style.fontSize, e3.title.style.fontFamily, r2, false);
              i2.push({ width: o2.width, height: o2.height });
            } else
              i2.push({ width: 0, height: 0 });
          }), i2;
        } }, { key: "getTotalYAxisWidth", value: function() {
          var t3 = this.w, e2 = 0, i2 = 0, a2 = 0, s2 = t3.globals.yAxisScale.length > 1 ? 10 : 0, r2 = new C(this.dCtx.ctx), o2 = function(o3, n2) {
            var l2 = t3.config.yaxis[n2].floating, h2 = 0;
            o3.width > 0 && !l2 ? (h2 = o3.width + s2, function(e3) {
              return t3.globals.ignoreYAxisIndexes.indexOf(e3) > -1;
            }(n2) && (h2 = h2 - o3.width - s2)) : h2 = l2 || r2.isYAxisHidden(n2) ? 0 : 5, t3.config.yaxis[n2].opposite ? a2 += h2 : i2 += h2, e2 += h2;
          };
          return t3.globals.yLabelsCoords.map(function(t4, e3) {
            o2(t4, e3);
          }), t3.globals.yTitleCoords.map(function(t4, e3) {
            o2(t4, e3);
          }), t3.globals.isBarHorizontal && !t3.config.yaxis[0].floating && (e2 = t3.globals.yLabelsCoords[0].width + t3.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i2, this.dCtx.yAxisWidthRight = a2, e2;
        } }]), t2;
      }();
      var rt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "gridPadForColumnsInNumericAxis", value: function(t3) {
          var e2 = this.w, i2 = e2.config, a2 = e2.globals;
          if (a2.noData || a2.collapsedSeries.length + a2.ancillaryCollapsedSeries.length === i2.series.length)
            return 0;
          var s2 = function(t4) {
            return "bar" === t4 || "rangeBar" === t4 || "candlestick" === t4 || "boxPlot" === t4;
          }, r2 = i2.chart.type, o2 = 0, n2 = s2(r2) ? i2.series.length : 1;
          if (a2.comboBarCount > 0 && (n2 = a2.comboBarCount), a2.collapsedSeries.forEach(function(t4) {
            s2(t4.type) && (n2 -= 1);
          }), i2.chart.stacked && (n2 = 1), (s2(r2) || a2.comboBarCount > 0) && a2.isXNumeric && !a2.isBarHorizontal && n2 > 0) {
            var l2, h2, c2 = Math.abs(a2.initialMaxX - a2.initialMinX);
            c2 <= 3 && (c2 = a2.dataPoints), l2 = c2 / t3, a2.minXDiff && a2.minXDiff / l2 > 0 && (h2 = a2.minXDiff / l2), h2 > t3 / 2 && (h2 /= 2), (o2 = h2 * parseInt(i2.plotOptions.bar.columnWidth, 10) / 100) < 1 && (o2 = 1), a2.barPadForNumericAxis = o2;
          }
          return o2;
        } }, { key: "gridPadFortitleSubtitle", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals, a2 = this.dCtx.isSparkline || !e2.globals.axisCharts ? 0 : 10;
          ["title", "subtitle"].forEach(function(i3) {
            void 0 !== e2.config[i3].text ? a2 += e2.config[i3].margin : a2 += t3.dCtx.isSparkline || !e2.globals.axisCharts ? 0 : 5;
          }), !e2.config.legend.show || "bottom" !== e2.config.legend.position || e2.config.legend.floating || e2.globals.axisCharts || (a2 += 10);
          var s2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
          i2.gridHeight = i2.gridHeight - s2.height - r2.height - a2, i2.translateY = i2.translateY + s2.height + r2.height + a2;
        } }, { key: "setGridXPosForDualYAxis", value: function(t3, e2) {
          var i2 = this.w, a2 = new C(this.dCtx.ctx);
          i2.config.yaxis.map(function(s2, r2) {
            -1 !== i2.globals.ignoreYAxisIndexes.indexOf(r2) || s2.floating || a2.isYAxisHidden(r2) || (s2.opposite && (i2.globals.translateX = i2.globals.translateX - (e2[r2].width + t3[r2].width) - parseInt(i2.config.yaxis[r2].labels.style.fontSize, 10) / 1.2 - 12), i2.globals.translateX < 2 && (i2.globals.translateX = 2));
          });
        } }]), t2;
      }();
      var ot = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it(this), this.dimYAxis = new st(this), this.dimXAxis = new at(this), this.dimGrid = new rt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
        }
        return r(t2, [{ key: "plotCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals;
          this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = { width: 0, height: 0 };
          var a2 = Array.isArray(e2.config.stroke.width) ? Math.max.apply(Math, u(e2.config.stroke.width)) : e2.config.stroke.width;
          this.isSparkline && ((e2.config.markers.discrete.length > 0 || e2.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e3) {
            var i3 = g(e3, 2), a3 = i3[0], s3 = i3[1];
            t3.gridPad[a3] = Math.max(s3, t3.w.globals.markers.largestSize / 1.5);
          }), this.gridPad.top = Math.max(a2 / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a2 / 2, this.gridPad.bottom)), i2.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i2.gridHeight = i2.gridHeight - this.gridPad.top - this.gridPad.bottom, i2.gridWidth = i2.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
          var s2 = this.dimGrid.gridPadForColumnsInNumericAxis(i2.gridWidth);
          i2.gridWidth = i2.gridWidth - 2 * s2, i2.translateX = i2.translateX + this.gridPad.left + this.xPadLeft + (s2 > 0 ? s2 : 0), i2.translateY = i2.translateY + this.gridPad.top;
        } }, { key: "setDimensionsForAxisCharts", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals, a2 = this.dimYAxis.getyAxisLabelsCoords(), s2 = this.dimYAxis.getyAxisTitleCoords();
          i2.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e2.globals.yLabelsCoords = [], e2.globals.yTitleCoords = [], e2.config.yaxis.map(function(t4, i3) {
            e2.globals.yLabelsCoords.push({ width: a2[i3].width, index: i3 }), e2.globals.yTitleCoords.push({ width: s2[i3].width, index: i3 });
          }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
          var r2 = this.dimXAxis.getxAxisLabelsCoords(), o2 = this.dimXAxis.getxAxisGroupLabelsCoords(), n2 = this.dimXAxis.getxAxisTitleCoords();
          this.conditionalChecksForAxisCoords(r2, n2, o2), i2.translateXAxisY = e2.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i2.translateXAxisX = e2.globals.rotateXLabels && e2.globals.isXNumeric && e2.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e2.globals.isBarHorizontal && (i2.rotateXLabels = false, i2.translateXAxisY = parseInt(e2.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i2.translateXAxisY = i2.translateXAxisY + e2.config.xaxis.labels.offsetY, i2.translateXAxisX = i2.translateXAxisX + e2.config.xaxis.labels.offsetX;
          var l2 = this.yAxisWidth, h2 = this.xAxisHeight;
          i2.xAxisLabelsHeight = this.xAxisHeight - n2.height, i2.xAxisGroupLabelsHeight = i2.xAxisLabelsHeight - r2.height, i2.xAxisLabelsWidth = this.xAxisWidth, i2.xAxisHeight = this.xAxisHeight;
          var c2 = 10;
          ("radar" === e2.config.chart.type || this.isSparkline) && (l2 = 0, h2 = i2.goldenPadding), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e2.config.chart.type) && (l2 = 0, h2 = 0, c2 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r2);
          var d2 = function() {
            i2.translateX = l2 + t3.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - t3.lgRect.height - h2 - (t3.isSparkline || "treemap" === e2.config.chart.type ? 0 : e2.globals.rotateXLabels ? 10 : 15), i2.gridWidth = i2.svgWidth - l2 - 2 * t3.datalabelsCoords.width;
          };
          switch ("top" === e2.config.xaxis.position && (c2 = i2.xAxisHeight - e2.config.xaxis.axisTicks.height - 5), e2.config.legend.position) {
            case "bottom":
              i2.translateY = c2, d2();
              break;
            case "top":
              i2.translateY = this.lgRect.height + c2, d2();
              break;
            case "left":
              i2.translateY = c2, i2.translateX = this.lgRect.width + l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width;
              break;
            case "right":
              i2.translateY = c2, i2.translateX = l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width - 5;
              break;
            default:
              throw new Error("Legend position not supported");
          }
          this.dimGrid.setGridXPosForDualYAxis(s2, a2), new q(this.ctx).setYAxisXPosition(a2, s2);
        } }, { key: "setDimensionsForNonAxisCharts", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = t3.config, a2 = 0;
          t3.config.legend.show && !t3.config.legend.floating && (a2 = 20);
          var s2 = "pie" === i2.chart.type || "polarArea" === i2.chart.type || "donut" === i2.chart.type ? "pie" : "radialBar", r2 = i2.plotOptions[s2].offsetY, o2 = i2.plotOptions[s2].offsetX;
          if (!i2.legend.show || i2.legend.floating)
            return e2.gridHeight = e2.svgHeight - i2.grid.padding.left + i2.grid.padding.right, e2.gridWidth = Math.min(e2.svgWidth, e2.gridHeight), e2.translateY = r2, void (e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2);
          switch (i2.legend.position) {
            case "bottom":
              e2.gridHeight = e2.svgHeight - this.lgRect.height - e2.goldenPadding, e2.gridWidth = e2.svgWidth, e2.translateY = r2 - 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
              break;
            case "top":
              e2.gridHeight = e2.svgHeight - this.lgRect.height - e2.goldenPadding, e2.gridWidth = e2.svgWidth, e2.translateY = this.lgRect.height + r2 + 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
              break;
            case "left":
              e2.gridWidth = e2.svgWidth - this.lgRect.width - a2, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + this.lgRect.width + a2;
              break;
            case "right":
              e2.gridWidth = e2.svgWidth - this.lgRect.width - a2 - 5, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + 10;
              break;
            default:
              throw new Error("Legend position not supported");
          }
        } }, { key: "conditionalChecksForAxisCoords", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.globals.hasXaxisGroups ? 2 : 1, r2 = i2.height + t3.height + e2.height, o2 = a2.globals.isMultiLineX ? 1.2 : a2.globals.LINE_HEIGHT_RATIO, n2 = a2.globals.rotateXLabels ? 22 : 10, l2 = a2.globals.rotateXLabels && "bottom" === a2.config.legend.position ? 10 : 0;
          this.xAxisHeight = r2 * o2 + s2 * n2 + l2, this.xAxisWidth = t3.width, this.xAxisHeight - e2.height > a2.config.xaxis.labels.maxHeight && (this.xAxisHeight = a2.config.xaxis.labels.maxHeight), a2.config.xaxis.labels.minHeight && this.xAxisHeight < a2.config.xaxis.labels.minHeight && (this.xAxisHeight = a2.config.xaxis.labels.minHeight), a2.config.xaxis.floating && (this.xAxisHeight = 0);
          var h2 = 0, c2 = 0;
          a2.config.yaxis.forEach(function(t4) {
            h2 += t4.labels.minWidth, c2 += t4.labels.maxWidth;
          }), this.yAxisWidth < h2 && (this.yAxisWidth = h2), this.yAxisWidth > c2 && (this.yAxisWidth = c2);
        } }]), t2;
      }();
      var nt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.lgCtx = e2;
        }
        return r(t2, [{ key: "getLegendStyles", value: function() {
          var t3, e2, i2, a2 = document.createElement("style");
          a2.setAttribute("type", "text/css");
          var s2 = (null === (t3 = this.lgCtx.ctx) || void 0 === t3 || null === (e2 = t3.opts) || void 0 === e2 || null === (i2 = e2.chart) || void 0 === i2 ? void 0 : i2.nonce) || this.w.config.chart.nonce;
          s2 && a2.setAttribute("nonce", s2);
          var r2 = document.createTextNode("\n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        justify-content: flex-start;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\n        justify-content: center;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\n        justify-content: flex-end;\n      }\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n      }\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\n        display: flex;\n        align-items: center;\n      }\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n      .apexcharts-legend-marker {\n        position: relative;\n        display: inline-block;\n        cursor: pointer;\n        margin-right: 3px;\n        border-style: solid;\n      }\n\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\n        display: inline-block;\n      }\n      .apexcharts-legend-series.apexcharts-no-click {\n        cursor: auto;\n      }\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n      .apexcharts-inactive-legend {\n        opacity: 0.45;\n      }");
          return a2.appendChild(r2), a2;
        } }, { key: "getLegendBBox", value: function() {
          var t3 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e2 = t3.width;
          return { clwh: t3.height, clww: e2 };
        } }, { key: "appendToForeignObject", value: function() {
          this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
        } }, { key: "toggleDataSeries", value: function(t3, e2) {
          var i2 = this, a2 = this.w;
          if (a2.globals.axisCharts || "radialBar" === a2.config.chart.type) {
            a2.globals.resized = true;
            var s2 = null, r2 = null;
            if (a2.globals.risingSeries = [], a2.globals.axisCharts ? (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t3, "']")), r2 = parseInt(s2.getAttribute("data:realIndex"), 10)) : (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t3 + 1, "']")), r2 = parseInt(s2.getAttribute("rel"), 10) - 1), e2)
              [{ cs: a2.globals.collapsedSeries, csi: a2.globals.collapsedSeriesIndices }, { cs: a2.globals.ancillaryCollapsedSeries, csi: a2.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t4) {
                i2.riseCollapsedSeries(t4.cs, t4.csi, r2);
              });
            else
              this.hideSeries({ seriesEl: s2, realIndex: r2 });
          } else {
            var o2 = a2.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t3 + 1, "'] path")), n2 = a2.config.chart.type;
            if ("pie" === n2 || "polarArea" === n2 || "donut" === n2) {
              var l2 = a2.config.plotOptions.pie.donut.labels;
              new m2(this.lgCtx.ctx).pathMouseDown(o2.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o2.members[0].node, l2);
            }
            o2.fire("click");
          }
        } }, { key: "hideSeries", value: function(t3) {
          var e2 = t3.seriesEl, i2 = t3.realIndex, a2 = this.w, s2 = a2.globals, r2 = x.clone(a2.config.series);
          if (s2.axisCharts) {
            var o2 = a2.config.yaxis[s2.seriesYAxisReverseMap[i2]];
            if (o2 && o2.show && o2.showAlways)
              s2.ancillaryCollapsedSeriesIndices.indexOf(i2) < 0 && (s2.ancillaryCollapsedSeries.push({ index: i2, data: r2[i2].data.slice(), type: e2.parentNode.className.baseVal.split("-")[1] }), s2.ancillaryCollapsedSeriesIndices.push(i2));
            else if (s2.collapsedSeriesIndices.indexOf(i2) < 0) {
              s2.collapsedSeries.push({ index: i2, data: r2[i2].data.slice(), type: e2.parentNode.className.baseVal.split("-")[1] }), s2.collapsedSeriesIndices.push(i2);
              var n2 = s2.risingSeries.indexOf(i2);
              s2.risingSeries.splice(n2, 1);
            }
          } else
            s2.collapsedSeries.push({ index: i2, data: r2[i2] }), s2.collapsedSeriesIndices.push(i2);
          for (var l2 = e2.childNodes, h2 = 0; h2 < l2.length; h2++)
            l2[h2].classList.contains("apexcharts-series-markers-wrap") && (l2[h2].classList.contains("apexcharts-hide") ? l2[h2].classList.remove("apexcharts-hide") : l2[h2].classList.add("apexcharts-hide"));
          s2.allSeriesCollapsed = s2.collapsedSeries.length + s2.ancillaryCollapsedSeries.length === a2.config.series.length, r2 = this._getSeriesBasedOnCollapsedState(r2), this.lgCtx.ctx.updateHelpers._updateSeries(r2, a2.config.chart.animations.dynamicAnimation.enabled);
        } }, { key: "riseCollapsedSeries", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = x.clone(a2.config.series);
          if (t3.length > 0) {
            for (var r2 = 0; r2 < t3.length; r2++)
              t3[r2].index === i2 && (a2.globals.axisCharts ? (s2[i2].data = t3[r2].data.slice(), t3.splice(r2, 1), e2.splice(r2, 1), a2.globals.risingSeries.push(i2)) : (s2[i2] = t3[r2].data, t3.splice(r2, 1), e2.splice(r2, 1), a2.globals.risingSeries.push(i2)));
            s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled);
          }
        } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t3) {
          var e2 = this.w, i2 = 0;
          return e2.globals.axisCharts ? t3.forEach(function(a2, s2) {
            e2.globals.collapsedSeriesIndices.indexOf(s2) < 0 && e2.globals.ancillaryCollapsedSeriesIndices.indexOf(s2) < 0 || (t3[s2].data = [], i2++);
          }) : t3.forEach(function(a2, s2) {
            !e2.globals.collapsedSeriesIndices.indexOf(s2) < 0 && (t3[s2] = 0, i2++);
          }), e2.globals.allSeriesCollapsed = i2 === t3.length, t3;
        } }]), t2;
      }();
      var lt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt(this);
        }
        return r(t2, [{ key: "init", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = t3.config;
          if ((i2.legend.showForSingleSeries && 1 === e2.series.length || this.isBarsDistributed || e2.series.length > 1 || !e2.axisCharts) && i2.legend.show) {
            for (; e2.dom.elLegendWrap.firstChild; )
              e2.dom.elLegendWrap.removeChild(e2.dom.elLegendWrap.firstChild);
            this.drawLegends(), x.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i2.legend.position || "top" === i2.legend.position ? this.legendAlignHorizontal() : "right" !== i2.legend.position && "left" !== i2.legend.position || this.legendAlignVertical();
          }
        } }, { key: "drawLegends", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.config.legend.fontFamily, a2 = e2.globals.seriesNames, s2 = e2.globals.colors.slice();
          if ("heatmap" === e2.config.chart.type) {
            var r2 = e2.config.plotOptions.heatmap.colorScale.ranges;
            a2 = r2.map(function(t4) {
              return t4.name ? t4.name : t4.from + " - " + t4.to;
            }), s2 = r2.map(function(t4) {
              return t4.color;
            });
          } else
            this.isBarsDistributed && (a2 = e2.globals.labels.slice());
          e2.config.legend.customLegendItems.length && (a2 = e2.config.legend.customLegendItems);
          for (var o2 = e2.globals.legendFormatter, n2 = e2.config.legend.inverseOrder, l2 = n2 ? a2.length - 1 : 0; n2 ? l2 >= 0 : l2 <= a2.length - 1; n2 ? l2-- : l2++) {
            var h2, c2 = o2(a2[l2], { seriesIndex: l2, w: e2 }), d2 = false, g2 = false;
            if (e2.globals.collapsedSeries.length > 0)
              for (var u2 = 0; u2 < e2.globals.collapsedSeries.length; u2++)
                e2.globals.collapsedSeries[u2].index === l2 && (d2 = true);
            if (e2.globals.ancillaryCollapsedSeriesIndices.length > 0)
              for (var p2 = 0; p2 < e2.globals.ancillaryCollapsedSeriesIndices.length; p2++)
                e2.globals.ancillaryCollapsedSeriesIndices[p2] === l2 && (g2 = true);
            var f2 = document.createElement("span");
            f2.classList.add("apexcharts-legend-marker");
            var b2 = e2.config.legend.markers.offsetX, v2 = e2.config.legend.markers.offsetY, w2 = e2.config.legend.markers.height, k2 = e2.config.legend.markers.width, A2 = e2.config.legend.markers.strokeWidth, S2 = e2.config.legend.markers.strokeColor, C2 = e2.config.legend.markers.radius, L2 = f2.style;
            L2.background = s2[l2], L2.color = s2[l2], L2.setProperty("background", s2[l2], "important"), e2.config.legend.markers.fillColors && e2.config.legend.markers.fillColors[l2] && (L2.background = e2.config.legend.markers.fillColors[l2]), void 0 !== e2.globals.seriesColors[l2] && (L2.background = e2.globals.seriesColors[l2], L2.color = e2.globals.seriesColors[l2]), L2.height = Array.isArray(w2) ? parseFloat(w2[l2]) + "px" : parseFloat(w2) + "px", L2.width = Array.isArray(k2) ? parseFloat(k2[l2]) + "px" : parseFloat(k2) + "px", L2.left = (Array.isArray(b2) ? parseFloat(b2[l2]) : parseFloat(b2)) + "px", L2.top = (Array.isArray(v2) ? parseFloat(v2[l2]) : parseFloat(v2)) + "px", L2.borderWidth = Array.isArray(A2) ? A2[l2] : A2, L2.borderColor = Array.isArray(S2) ? S2[l2] : S2, L2.borderRadius = Array.isArray(C2) ? parseFloat(C2[l2]) + "px" : parseFloat(C2) + "px", e2.config.legend.markers.customHTML && (Array.isArray(e2.config.legend.markers.customHTML) ? e2.config.legend.markers.customHTML[l2] && (f2.innerHTML = e2.config.legend.markers.customHTML[l2]()) : f2.innerHTML = e2.config.legend.markers.customHTML()), m2.setAttrs(f2, { rel: l2 + 1, "data:collapsed": d2 || g2 }), (d2 || g2) && f2.classList.add("apexcharts-inactive-legend");
            var P2 = document.createElement("div"), M2 = document.createElement("span");
            M2.classList.add("apexcharts-legend-text"), M2.innerHTML = Array.isArray(c2) ? c2.join(" ") : c2;
            var I2 = e2.config.legend.labels.useSeriesColors ? e2.globals.colors[l2] : Array.isArray(e2.config.legend.labels.colors) ? null === (h2 = e2.config.legend.labels.colors) || void 0 === h2 ? void 0 : h2[l2] : e2.config.legend.labels.colors;
            I2 || (I2 = e2.config.chart.foreColor), M2.style.color = I2, M2.style.fontSize = parseFloat(e2.config.legend.fontSize) + "px", M2.style.fontWeight = e2.config.legend.fontWeight, M2.style.fontFamily = i2 || e2.config.chart.fontFamily, m2.setAttrs(M2, { rel: l2 + 1, i: l2, "data:default-text": encodeURIComponent(c2), "data:collapsed": d2 || g2 }), P2.appendChild(f2), P2.appendChild(M2);
            var T2 = new y(this.ctx);
            if (!e2.config.legend.showForZeroSeries)
              0 === T2.getSeriesTotalByIndex(l2) && T2.seriesHaveSameValues(l2) && !T2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && P2.classList.add("apexcharts-hidden-zero-series");
            e2.config.legend.showForNullSeries || T2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && P2.classList.add("apexcharts-hidden-null-series"), e2.globals.dom.elLegendWrap.appendChild(P2), e2.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e2.config.legend.horizontalAlign)), e2.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e2.config.legend.position), P2.classList.add("apexcharts-legend-series"), P2.style.margin = "".concat(e2.config.legend.itemMargin.vertical, "px ").concat(e2.config.legend.itemMargin.horizontal, "px"), e2.globals.dom.elLegendWrap.style.width = e2.config.legend.width ? e2.config.legend.width + "px" : "", e2.globals.dom.elLegendWrap.style.height = e2.config.legend.height ? e2.config.legend.height + "px" : "", m2.setAttrs(P2, { rel: l2 + 1, seriesName: x.escapeString(a2[l2]), "data:collapsed": d2 || g2 }), (d2 || g2) && P2.classList.add("apexcharts-inactive-legend"), e2.config.legend.onItemClick.toggleDataSeries || P2.classList.add("apexcharts-no-click");
          }
          e2.globals.dom.elWrap.addEventListener("click", t3.onLegendClick, true), e2.config.legend.onItemHover.highlightDataSeries && 0 === e2.config.legend.customLegendItems.length && (e2.globals.dom.elWrap.addEventListener("mousemove", t3.onLegendHovered, true), e2.globals.dom.elWrap.addEventListener("mouseout", t3.onLegendHovered, true));
        } }, { key: "setLegendWrapXY", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.globals.dom.elLegendWrap, s2 = a2.getBoundingClientRect(), r2 = 0, o2 = 0;
          if ("bottom" === i2.config.legend.position)
            o2 += i2.globals.svgHeight - s2.height / 2;
          else if ("top" === i2.config.legend.position) {
            var n2 = new ot(this.ctx), l2 = n2.dimHelpers.getTitleSubtitleCoords("title").height, h2 = n2.dimHelpers.getTitleSubtitleCoords("subtitle").height;
            o2 = o2 + (l2 > 0 ? l2 - 10 : 0) + (h2 > 0 ? h2 - 10 : 0);
          }
          a2.style.position = "absolute", r2 = r2 + t3 + i2.config.legend.offsetX, o2 = o2 + e2 + i2.config.legend.offsetY, a2.style.left = r2 + "px", a2.style.top = o2 + "px", "bottom" === i2.config.legend.position ? (a2.style.top = "auto", a2.style.bottom = 5 - i2.config.legend.offsetY + "px") : "right" === i2.config.legend.position && (a2.style.left = "auto", a2.style.right = 25 + i2.config.legend.offsetX + "px");
          ["width", "height"].forEach(function(t4) {
            a2.style[t4] && (a2.style[t4] = parseInt(i2.config.legend[t4], 10) + "px");
          });
        } }, { key: "legendAlignHorizontal", value: function() {
          var t3 = this.w;
          t3.globals.dom.elLegendWrap.style.right = 0;
          var e2 = this.legendHelpers.getLegendBBox(), i2 = new ot(this.ctx), a2 = i2.dimHelpers.getTitleSubtitleCoords("title"), s2 = i2.dimHelpers.getTitleSubtitleCoords("subtitle"), r2 = 0;
          "bottom" === t3.config.legend.position ? r2 = -e2.clwh / 1.8 : "top" === t3.config.legend.position && (r2 = a2.height + s2.height + t3.config.title.margin + t3.config.subtitle.margin - 10), this.setLegendWrapXY(20, r2);
        } }, { key: "legendAlignVertical", value: function() {
          var t3 = this.w, e2 = this.legendHelpers.getLegendBBox(), i2 = 0;
          "left" === t3.config.legend.position && (i2 = 20), "right" === t3.config.legend.position && (i2 = t3.globals.svgWidth - e2.clww - 10), this.setLegendWrapXY(i2, 20);
        } }, { key: "onLegendHovered", value: function(t3) {
          var e2 = this.w, i2 = t3.target.classList.contains("apexcharts-legend-series") || t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker");
          if ("heatmap" === e2.config.chart.type || this.isBarsDistributed) {
            if (i2) {
              var a2 = parseInt(t3.target.getAttribute("rel"), 10) - 1;
              this.ctx.events.fireEvent("legendHover", [this.ctx, a2, this.w]), new W(this.ctx).highlightRangeInSeries(t3, t3.target);
            }
          } else
            !t3.target.classList.contains("apexcharts-inactive-legend") && i2 && new W(this.ctx).toggleSeriesOnHover(t3, t3.target);
        } }, { key: "onLegendClick", value: function(t3) {
          var e2 = this.w;
          if (!e2.config.legend.customLegendItems.length && (t3.target.classList.contains("apexcharts-legend-series") || t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker"))) {
            var i2 = parseInt(t3.target.getAttribute("rel"), 10) - 1, a2 = "true" === t3.target.getAttribute("data:collapsed"), s2 = this.w.config.chart.events.legendClick;
            "function" == typeof s2 && s2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i2, this.w]);
            var r2 = this.w.config.legend.markers.onClick;
            "function" == typeof r2 && t3.target.classList.contains("apexcharts-legend-marker") && (r2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i2, this.w])), "treemap" !== e2.config.chart.type && "heatmap" !== e2.config.chart.type && !this.isBarsDistributed && e2.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i2, a2);
          }
        } }]), t2;
      }();
      var ht = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i2.globals.minX, this.maxX = i2.globals.maxX;
        }
        return r(t2, [{ key: "createToolbar", value: function() {
          var t3 = this, e2 = this.w, i2 = function() {
            return document.createElement("div");
          }, a2 = i2();
          if (a2.setAttribute("class", "apexcharts-toolbar"), a2.style.top = e2.config.chart.toolbar.offsetY + "px", a2.style.right = 3 - e2.config.chart.toolbar.offsetX + "px", e2.globals.dom.elWrap.appendChild(a2), this.elZoom = i2(), this.elZoomIn = i2(), this.elZoomOut = i2(), this.elPan = i2(), this.elSelection = i2(), this.elZoomReset = i2(), this.elMenuIcon = i2(), this.elMenu = i2(), this.elCustomIcons = [], this.t = e2.config.chart.toolbar.tools, Array.isArray(this.t.customIcons))
            for (var s2 = 0; s2 < this.t.customIcons.length; s2++)
              this.elCustomIcons.push(i2());
          var r2 = [], o2 = function(i3, a3, s3) {
            var o3 = i3.toLowerCase();
            t3.t[o3] && e2.config.chart.zoom.enabled && r2.push({ el: a3, icon: "string" == typeof t3.t[o3] ? t3.t[o3] : s3, title: t3.localeValues[i3], class: "apexcharts-".concat(o3, "-icon") });
          };
          o2("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o2("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
          var n2 = function(i3) {
            t3.t[i3] && e2.config.chart[i3].enabled && r2.push({ el: "zoom" === i3 ? t3.elZoom : t3.elSelection, icon: "string" == typeof t3.t[i3] ? t3.t[i3] : "zoom" === i3 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t3.localeValues["zoom" === i3 ? "selectionZoom" : "selection"], class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i3, "-icon") });
          };
          n2("zoom"), n2("selection"), this.t.pan && e2.config.chart.zoom.enabled && r2.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), o2("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r2.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
          for (var l2 = 0; l2 < this.elCustomIcons.length; l2++)
            r2.push({ el: this.elCustomIcons[l2], icon: this.t.customIcons[l2].icon, title: this.t.customIcons[l2].title, index: this.t.customIcons[l2].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l2].class });
          r2.forEach(function(t4, e3) {
            t4.index && x.moveIndexInArray(r2, e3, t4.index);
          });
          for (var h2 = 0; h2 < r2.length; h2++)
            m2.setAttrs(r2[h2].el, { class: r2[h2].class, title: r2[h2].title }), r2[h2].el.innerHTML = r2[h2].icon, a2.appendChild(r2[h2].el);
          this._createHamburgerMenu(a2), e2.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e2.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e2.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
        } }, { key: "_createHamburgerMenu", value: function(t3) {
          this.elMenuItems = [], t3.appendChild(this.elMenu), m2.setAttrs(this.elMenu, { class: "apexcharts-menu" });
          for (var e2 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }], i2 = 0; i2 < e2.length; i2++)
            this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i2].innerHTML = e2[i2].title, m2.setAttrs(this.elMenuItems[i2], { class: "apexcharts-menu-item ".concat(e2[i2].name), title: e2[i2].title }), this.elMenu.appendChild(this.elMenuItems[i2]);
        } }, { key: "addToolbarEventListeners", value: function() {
          var t3 = this;
          this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e3) {
            e3.classList.contains("exportSVG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "svg")) : e3.classList.contains("exportPNG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "png")) : e3.classList.contains("exportCSV") && e3.addEventListener("click", t3.handleDownload.bind(t3, "csv"));
          });
          for (var e2 = 0; e2 < this.t.customIcons.length; e2++)
            this.elCustomIcons[e2].addEventListener("click", this.t.customIcons[e2].click.bind(this, this.ctx, this.ctx.w));
        } }, { key: "toggleZoomSelection", value: function(t3) {
          this.ctx.getSyncedCharts().forEach(function(e2) {
            e2.ctx.toolbar.toggleOtherControls();
            var i2 = "selection" === t3 ? e2.ctx.toolbar.elSelection : e2.ctx.toolbar.elZoom, a2 = "selection" === t3 ? "selectionEnabled" : "zoomEnabled";
            e2.w.globals[a2] = !e2.w.globals[a2], i2.classList.contains(e2.ctx.toolbar.selectedClass) ? i2.classList.remove(e2.ctx.toolbar.selectedClass) : i2.classList.add(e2.ctx.toolbar.selectedClass);
          });
        } }, { key: "getToolbarIconsReference", value: function() {
          var t3 = this.w;
          this.elZoom || (this.elZoom = t3.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t3.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t3.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
        } }, { key: "enableZoomPanFromToolbar", value: function(t3) {
          this.toggleOtherControls(), "pan" === t3 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
          var e2 = "pan" === t3 ? this.elPan : this.elZoom, i2 = "pan" === t3 ? this.elZoom : this.elPan;
          e2 && e2.classList.add(this.selectedClass), i2 && i2.classList.remove(this.selectedClass);
        } }, { key: "togglePanning", value: function() {
          this.ctx.getSyncedCharts().forEach(function(t3) {
            t3.ctx.toolbar.toggleOtherControls(), t3.w.globals.panEnabled = !t3.w.globals.panEnabled, t3.ctx.toolbar.elPan.classList.contains(t3.ctx.toolbar.selectedClass) ? t3.ctx.toolbar.elPan.classList.remove(t3.ctx.toolbar.selectedClass) : t3.ctx.toolbar.elPan.classList.add(t3.ctx.toolbar.selectedClass);
          });
        } }, { key: "toggleOtherControls", value: function() {
          var t3 = this, e2 = this.w;
          e2.globals.panEnabled = false, e2.globals.zoomEnabled = false, e2.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e3) {
            e3 && e3.classList.remove(t3.selectedClass);
          });
        } }, { key: "handleZoomIn", value: function() {
          var t3 = this.w;
          t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY);
          var e2 = (this.minX + this.maxX) / 2, i2 = (this.minX + e2) / 2, a2 = (this.maxX + e2) / 2, s2 = this._getNewMinXMaxX(i2, a2);
          t3.globals.disableZoomIn || this.zoomUpdateOptions(s2.minX, s2.maxX);
        } }, { key: "handleZoomOut", value: function() {
          var t3 = this.w;
          if (t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY), !("datetime" === t3.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
            var e2 = (this.minX + this.maxX) / 2, i2 = this.minX - (e2 - this.minX), a2 = this.maxX - (e2 - this.maxX), s2 = this._getNewMinXMaxX(i2, a2);
            t3.globals.disableZoomOut || this.zoomUpdateOptions(s2.minX, s2.maxX);
          }
        } }, { key: "_getNewMinXMaxX", value: function(t3, e2) {
          var i2 = this.w.config.xaxis.convertedCatToNumeric;
          return { minX: i2 ? Math.floor(t3) : t3, maxX: i2 ? Math.floor(e2) : e2 };
        } }, { key: "zoomUpdateOptions", value: function(t3, e2) {
          var i2 = this.w;
          if (void 0 !== t3 || void 0 !== e2) {
            if (!(i2.config.xaxis.convertedCatToNumeric && (t3 < 1 && (t3 = 1, e2 = i2.globals.dataPoints), e2 - t3 < 2))) {
              var a2 = { min: t3, max: e2 }, s2 = this.getBeforeZoomRange(a2);
              s2 && (a2 = s2.xaxis);
              var r2 = { xaxis: a2 }, o2 = x.clone(i2.globals.initialConfig.yaxis);
              i2.config.chart.group || (r2.yaxis = o2), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r2, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a2, o2);
            }
          } else
            this.handleZoomReset();
        } }, { key: "zoomCallback", value: function(t3, e2) {
          "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t3, yaxis: e2 });
        } }, { key: "getBeforeZoomRange", value: function(t3, e2) {
          var i2 = null;
          return "function" == typeof this.ev.beforeZoom && (i2 = this.ev.beforeZoom(this, { xaxis: t3, yaxis: e2 })), i2;
        } }, { key: "toggleMenu", value: function() {
          var t3 = this;
          window.setTimeout(function() {
            t3.elMenu.classList.contains("apexcharts-menu-open") ? t3.elMenu.classList.remove("apexcharts-menu-open") : t3.elMenu.classList.add("apexcharts-menu-open");
          }, 0);
        } }, { key: "handleDownload", value: function(t3) {
          var e2 = this.w, i2 = new G(this.ctx);
          switch (t3) {
            case "svg":
              i2.exportToSVG(this.ctx);
              break;
            case "png":
              i2.exportToPng(this.ctx);
              break;
            case "csv":
              i2.exportToCSV({ series: e2.config.series, columnDelimiter: e2.config.chart.toolbar.export.csv.columnDelimiter });
          }
        } }, { key: "handleZoomReset", value: function(t3) {
          this.ctx.getSyncedCharts().forEach(function(t4) {
            var e2 = t4.w;
            if (e2.globals.lastXAxis.min = e2.globals.initialConfig.xaxis.min, e2.globals.lastXAxis.max = e2.globals.initialConfig.xaxis.max, t4.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e2.config.chart.events.beforeResetZoom) {
              var i2 = e2.config.chart.events.beforeResetZoom(t4, e2);
              i2 && t4.updateHelpers.revertDefaultAxisMinMax(i2);
            }
            "function" == typeof e2.config.chart.events.zoomed && t4.ctx.toolbar.zoomCallback({ min: e2.config.xaxis.min, max: e2.config.xaxis.max }), e2.globals.zoomed = false;
            var a2 = t4.ctx.series.emptyCollapsedSeries(x.clone(e2.globals.initialSeries));
            t4.updateHelpers._updateSeries(a2, e2.config.chart.animations.dynamicAnimation.enabled);
          });
        } }, { key: "destroy", value: function() {
          this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
        } }]), t2;
      }();
      var ct = function(t2) {
        n(i2, ht);
        var e2 = d(i2);
        function i2(t3) {
          var s2;
          return a(this, i2), (s2 = e2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.dragged = false, s2.graphics = new m2(s2.ctx), s2.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], s2.clientX = 0, s2.clientY = 0, s2.startX = 0, s2.endX = 0, s2.dragX = 0, s2.startY = 0, s2.endY = 0, s2.dragY = 0, s2.moveDirection = "none", s2;
        }
        return r(i2, [{ key: "init", value: function(t3) {
          var e3 = this, i3 = t3.xyRatios, a2 = this.w, s2 = this;
          this.xyRatios = i3, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a2.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a2.globals.dom.elGraphical.add(this.zoomRect), a2.globals.dom.elGraphical.add(this.selectionRect), "x" === a2.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a2.globals.gridWidth, maxY: a2.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a2.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a2.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a2.globals.dom.baseEl.querySelector("".concat(a2.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t4) {
            e3.hoverArea.addEventListener(t4, s2.svgMouseEvents.bind(s2, i3), { capture: false, passive: true });
          });
        } }, { key: "destroy", value: function() {
          this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
        } }, { key: "svgMouseEvents", value: function(t3, e3) {
          var i3 = this.w, a2 = this, s2 = this.ctx.toolbar, r2 = i3.globals.zoomEnabled ? i3.config.chart.zoom.type : i3.config.chart.selection.type, o2 = i3.config.chart.toolbar.autoSelected;
          if (e3.shiftKey ? (this.shiftWasPressed = true, s2.enableZoomPanFromToolbar("pan" === o2 ? "zoom" : "pan")) : this.shiftWasPressed && (s2.enableZoomPanFromToolbar(o2), this.shiftWasPressed = false), e3.target) {
            var n2, l2 = e3.target.classList;
            if (e3.target.parentNode && null !== e3.target.parentNode && (n2 = e3.target.parentNode.classList), !(l2.contains("apexcharts-selection-rect") || l2.contains("apexcharts-legend-marker") || l2.contains("apexcharts-legend-text") || n2 && n2.contains("apexcharts-toolbar"))) {
              if (a2.clientX = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientX : "touchend" === e3.type ? e3.changedTouches[0].clientX : e3.clientX, a2.clientY = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientY : "touchend" === e3.type ? e3.changedTouches[0].clientY : e3.clientY, "mousedown" === e3.type && 1 === e3.which) {
                var h2 = a2.gridRect.getBoundingClientRect();
                a2.startX = a2.clientX - h2.left, a2.startY = a2.clientY - h2.top, a2.dragged = false, a2.w.globals.mousedown = true;
              }
              if (("mousemove" === e3.type && 1 === e3.which || "touchmove" === e3.type) && (a2.dragged = true, i3.globals.panEnabled ? (i3.globals.selection = null, a2.w.globals.mousedown && a2.panDragging({ context: a2, zoomtype: r2, xyRatios: t3 })) : (a2.w.globals.mousedown && i3.globals.zoomEnabled || a2.w.globals.mousedown && i3.globals.selectionEnabled) && (a2.selection = a2.selectionDrawing({ context: a2, zoomtype: r2 }))), "mouseup" === e3.type || "touchend" === e3.type || "mouseleave" === e3.type) {
                var c2 = a2.gridRect.getBoundingClientRect();
                a2.w.globals.mousedown && (a2.endX = a2.clientX - c2.left, a2.endY = a2.clientY - c2.top, a2.dragX = Math.abs(a2.endX - a2.startX), a2.dragY = Math.abs(a2.endY - a2.startY), (i3.globals.zoomEnabled || i3.globals.selectionEnabled) && a2.selectionDrawn({ context: a2, zoomtype: r2 }), i3.globals.panEnabled && i3.config.xaxis.convertedCatToNumeric && a2.delayedPanScrolled()), i3.globals.zoomEnabled && a2.hideSelectionRect(this.selectionRect), a2.dragged = false, a2.w.globals.mousedown = false;
              }
              this.makeSelectionRectDraggable();
            }
          }
        } }, { key: "makeSelectionRectDraggable", value: function() {
          var t3 = this.w;
          if (this.selectionRect) {
            var e3 = this.selectionRect.node.getBoundingClientRect();
            e3.width > 0 && e3.height > 0 && this.slDraggableRect.selectize({ points: "l, r", pointSize: 8, pointType: "rect" }).resize({ constraint: { minX: 0, minY: 0, maxX: t3.globals.gridWidth, maxY: t3.globals.gridHeight } }).on("resizing", this.selectionDragging.bind(this, "resizing"));
          }
        } }, { key: "preselectedSelection", value: function() {
          var t3 = this.w, e3 = this.xyRatios;
          if (!t3.globals.zoomEnabled) {
            if (void 0 !== t3.globals.selection && null !== t3.globals.selection)
              this.drawSelectionRect(t3.globals.selection);
            else if (void 0 !== t3.config.chart.selection.xaxis.min && void 0 !== t3.config.chart.selection.xaxis.max) {
              var i3 = (t3.config.chart.selection.xaxis.min - t3.globals.minX) / e3.xRatio, a2 = t3.globals.gridWidth - (t3.globals.maxX - t3.config.chart.selection.xaxis.max) / e3.xRatio - i3;
              t3.globals.isRangeBar && (i3 = (t3.config.chart.selection.xaxis.min - t3.globals.yAxisScale[0].niceMin) / e3.invertedYRatio, a2 = (t3.config.chart.selection.xaxis.max - t3.config.chart.selection.xaxis.min) / e3.invertedYRatio);
              var s2 = { x: i3, y: 0, width: a2, height: t3.globals.gridHeight, translateX: 0, translateY: 0, selectionEnabled: true };
              this.drawSelectionRect(s2), this.makeSelectionRectDraggable(), "function" == typeof t3.config.chart.events.selection && t3.config.chart.events.selection(this.ctx, { xaxis: { min: t3.config.chart.selection.xaxis.min, max: t3.config.chart.selection.xaxis.max }, yaxis: {} });
            }
          }
        } }, { key: "drawSelectionRect", value: function(t3) {
          var e3 = t3.x, i3 = t3.y, a2 = t3.width, s2 = t3.height, r2 = t3.translateX, o2 = void 0 === r2 ? 0 : r2, n2 = t3.translateY, l2 = void 0 === n2 ? 0 : n2, h2 = this.w, c2 = this.zoomRect, d2 = this.selectionRect;
          if (this.dragged || null !== h2.globals.selection) {
            var g2 = { transform: "translate(" + o2 + ", " + l2 + ")" };
            h2.globals.zoomEnabled && this.dragged && (a2 < 0 && (a2 = 1), c2.attr({ x: e3, y: i3, width: a2, height: s2, fill: h2.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h2.config.chart.zoom.zoomedArea.fill.opacity, stroke: h2.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h2.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h2.config.chart.zoom.zoomedArea.stroke.opacity }), m2.setAttrs(c2.node, g2)), h2.globals.selectionEnabled && (d2.attr({ x: e3, y: i3, width: a2 > 0 ? a2 : 0, height: s2 > 0 ? s2 : 0, fill: h2.config.chart.selection.fill.color, "fill-opacity": h2.config.chart.selection.fill.opacity, stroke: h2.config.chart.selection.stroke.color, "stroke-width": h2.config.chart.selection.stroke.width, "stroke-dasharray": h2.config.chart.selection.stroke.dashArray, "stroke-opacity": h2.config.chart.selection.stroke.opacity }), m2.setAttrs(d2.node, g2));
          }
        } }, { key: "hideSelectionRect", value: function(t3) {
          t3 && t3.attr({ x: 0, y: 0, width: 0, height: 0 });
        } }, { key: "selectionDrawing", value: function(t3) {
          var e3 = t3.context, i3 = t3.zoomtype, a2 = this.w, s2 = e3, r2 = this.gridRect.getBoundingClientRect(), o2 = s2.startX - 1, n2 = s2.startY, l2 = false, h2 = false, c2 = s2.clientX - r2.left - o2, d2 = s2.clientY - r2.top - n2, g2 = {};
          return Math.abs(c2 + o2) > a2.globals.gridWidth ? c2 = a2.globals.gridWidth - o2 : s2.clientX - r2.left < 0 && (c2 = o2), o2 > s2.clientX - r2.left && (l2 = true, c2 = Math.abs(c2)), n2 > s2.clientY - r2.top && (h2 = true, d2 = Math.abs(d2)), g2 = "x" === i3 ? { x: l2 ? o2 - c2 : o2, y: 0, width: c2, height: a2.globals.gridHeight } : "y" === i3 ? { x: 0, y: h2 ? n2 - d2 : n2, width: a2.globals.gridWidth, height: d2 } : { x: l2 ? o2 - c2 : o2, y: h2 ? n2 - d2 : n2, width: c2, height: d2 }, s2.drawSelectionRect(g2), s2.selectionDragging("resizing"), g2;
        } }, { key: "selectionDragging", value: function(t3, e3) {
          var i3 = this, a2 = this.w, s2 = this.xyRatios, r2 = this.selectionRect, o2 = 0;
          "resizing" === t3 && (o2 = 30);
          var n2 = function(t4) {
            return parseFloat(r2.node.getAttribute(t4));
          }, l2 = { x: n2("x"), y: n2("y"), width: n2("width"), height: n2("height") };
          a2.globals.selection = l2, "function" == typeof a2.config.chart.events.selection && a2.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
            var t4, e4, o3, n3, l3 = i3.gridRect.getBoundingClientRect(), h2 = r2.node.getBoundingClientRect();
            a2.globals.isRangeBar ? (t4 = a2.globals.yAxisScale[0].niceMin + (h2.left - l3.left) * s2.invertedYRatio, e4 = a2.globals.yAxisScale[0].niceMin + (h2.right - l3.left) * s2.invertedYRatio, o3 = 0, n3 = 1) : (t4 = a2.globals.xAxisScale.niceMin + (h2.left - l3.left) * s2.xRatio, e4 = a2.globals.xAxisScale.niceMin + (h2.right - l3.left) * s2.xRatio, o3 = a2.globals.yAxisScale[0].niceMin + (l3.bottom - h2.bottom) * s2.yRatio[0], n3 = a2.globals.yAxisScale[0].niceMax - (h2.top - l3.top) * s2.yRatio[0]);
            var c2 = { xaxis: { min: t4, max: e4 }, yaxis: { min: o3, max: n3 } };
            a2.config.chart.events.selection(i3.ctx, c2), a2.config.chart.brush.enabled && void 0 !== a2.config.chart.events.brushScrolled && a2.config.chart.events.brushScrolled(i3.ctx, c2);
          }, o2));
        } }, { key: "selectionDrawn", value: function(t3) {
          var e3 = t3.context, i3 = t3.zoomtype, a2 = this.w, s2 = e3, r2 = this.xyRatios, o2 = this.ctx.toolbar;
          if (s2.startX > s2.endX) {
            var n2 = s2.startX;
            s2.startX = s2.endX, s2.endX = n2;
          }
          if (s2.startY > s2.endY) {
            var l2 = s2.startY;
            s2.startY = s2.endY, s2.endY = l2;
          }
          var h2 = void 0, c2 = void 0;
          a2.globals.isRangeBar ? (h2 = a2.globals.yAxisScale[0].niceMin + s2.startX * r2.invertedYRatio, c2 = a2.globals.yAxisScale[0].niceMin + s2.endX * r2.invertedYRatio) : (h2 = a2.globals.xAxisScale.niceMin + s2.startX * r2.xRatio, c2 = a2.globals.xAxisScale.niceMin + s2.endX * r2.xRatio);
          var d2 = [], g2 = [];
          if (a2.config.yaxis.forEach(function(t4, e4) {
            if (a2.globals.seriesYAxisMap[e4].length > 0) {
              var i4 = a2.globals.seriesYAxisMap[e4][0];
              d2.push(a2.globals.yAxisScale[e4].niceMax - r2.yRatio[i4] * s2.startY), g2.push(a2.globals.yAxisScale[e4].niceMax - r2.yRatio[i4] * s2.endY);
            }
          }), s2.dragged && (s2.dragX > 10 || s2.dragY > 10) && h2 !== c2) {
            if (a2.globals.zoomEnabled) {
              var u2 = x.clone(a2.globals.initialConfig.yaxis), p2 = x.clone(a2.globals.initialConfig.xaxis);
              if (a2.globals.zoomed = true, a2.config.xaxis.convertedCatToNumeric && (h2 = Math.floor(h2), c2 = Math.floor(c2), h2 < 1 && (h2 = 1, c2 = a2.globals.dataPoints), c2 - h2 < 2 && (c2 = h2 + 1)), "xy" !== i3 && "x" !== i3 || (p2 = { min: h2, max: c2 }), "xy" !== i3 && "y" !== i3 || u2.forEach(function(t4, e4) {
                u2[e4].min = g2[e4], u2[e4].max = d2[e4];
              }), o2) {
                var f2 = o2.getBeforeZoomRange(p2, u2);
                f2 && (p2 = f2.xaxis ? f2.xaxis : p2, u2 = f2.yaxis ? f2.yaxis : u2);
              }
              var b2 = { xaxis: p2 };
              a2.config.chart.group || (b2.yaxis = u2), s2.ctx.updateHelpers._updateOptions(b2, false, s2.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a2.config.chart.events.zoomed && o2.zoomCallback(p2, u2);
            } else if (a2.globals.selectionEnabled) {
              var v2, m3 = null;
              v2 = { min: h2, max: c2 }, "xy" !== i3 && "y" !== i3 || (m3 = x.clone(a2.config.yaxis)).forEach(function(t4, e4) {
                m3[e4].min = g2[e4], m3[e4].max = d2[e4];
              }), a2.globals.selection = s2.selection, "function" == typeof a2.config.chart.events.selection && a2.config.chart.events.selection(s2.ctx, { xaxis: v2, yaxis: m3 });
            }
          }
        } }, { key: "panDragging", value: function(t3) {
          var e3 = t3.context, i3 = this.w, a2 = e3;
          if (void 0 !== i3.globals.lastClientPosition.x) {
            var s2 = i3.globals.lastClientPosition.x - a2.clientX, r2 = i3.globals.lastClientPosition.y - a2.clientY;
            Math.abs(s2) > Math.abs(r2) && s2 > 0 ? this.moveDirection = "left" : Math.abs(s2) > Math.abs(r2) && s2 < 0 ? this.moveDirection = "right" : Math.abs(r2) > Math.abs(s2) && r2 > 0 ? this.moveDirection = "up" : Math.abs(r2) > Math.abs(s2) && r2 < 0 && (this.moveDirection = "down");
          }
          i3.globals.lastClientPosition = { x: a2.clientX, y: a2.clientY };
          var o2 = i3.globals.isRangeBar ? i3.globals.minY : i3.globals.minX, n2 = i3.globals.isRangeBar ? i3.globals.maxY : i3.globals.maxX;
          i3.config.xaxis.convertedCatToNumeric || a2.panScrolled(o2, n2);
        } }, { key: "delayedPanScrolled", value: function() {
          var t3 = this.w, e3 = t3.globals.minX, i3 = t3.globals.maxX, a2 = (t3.globals.maxX - t3.globals.minX) / 2;
          "left" === this.moveDirection ? (e3 = t3.globals.minX + a2, i3 = t3.globals.maxX + a2) : "right" === this.moveDirection && (e3 = t3.globals.minX - a2, i3 = t3.globals.maxX - a2), e3 = Math.floor(e3), i3 = Math.floor(i3), this.updateScrolledChart({ xaxis: { min: e3, max: i3 } }, e3, i3);
        } }, { key: "panScrolled", value: function(t3, e3) {
          var i3 = this.w, a2 = this.xyRatios, s2 = x.clone(i3.globals.initialConfig.yaxis), r2 = a2.xRatio, o2 = i3.globals.minX, n2 = i3.globals.maxX;
          i3.globals.isRangeBar && (r2 = a2.invertedYRatio, o2 = i3.globals.minY, n2 = i3.globals.maxY), "left" === this.moveDirection ? (t3 = o2 + i3.globals.gridWidth / 15 * r2, e3 = n2 + i3.globals.gridWidth / 15 * r2) : "right" === this.moveDirection && (t3 = o2 - i3.globals.gridWidth / 15 * r2, e3 = n2 - i3.globals.gridWidth / 15 * r2), i3.globals.isRangeBar || (t3 < i3.globals.initialMinX || e3 > i3.globals.initialMaxX) && (t3 = o2, e3 = n2);
          var l2 = { xaxis: { min: t3, max: e3 } };
          i3.config.chart.group || (l2.yaxis = s2), this.updateScrolledChart(l2, t3, e3);
        } }, { key: "updateScrolledChart", value: function(t3, e3, i3) {
          var a2 = this.w;
          this.ctx.updateHelpers._updateOptions(t3, false, false), "function" == typeof a2.config.chart.events.scrolled && a2.config.chart.events.scrolled(this.ctx, { xaxis: { min: e3, max: i3 } });
        } }]), i2;
      }();
      var dt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx;
        }
        return r(t2, [{ key: "getNearestValues", value: function(t3) {
          var e2 = t3.hoverArea, i2 = t3.elGrid, a2 = t3.clientX, s2 = t3.clientY, r2 = this.w, o2 = i2.getBoundingClientRect(), n2 = o2.width, l2 = o2.height, h2 = n2 / (r2.globals.dataPoints - 1), c2 = l2 / r2.globals.dataPoints, d2 = this.hasBars();
          !r2.globals.comboCharts && !d2 || r2.config.xaxis.convertedCatToNumeric || (h2 = n2 / r2.globals.dataPoints);
          var g2 = a2 - o2.left - r2.globals.barPadForNumericAxis, u2 = s2 - o2.top;
          g2 < 0 || u2 < 0 || g2 > n2 || u2 > l2 ? (e2.classList.remove("hovering-zoom"), e2.classList.remove("hovering-pan")) : r2.globals.zoomEnabled ? (e2.classList.remove("hovering-pan"), e2.classList.add("hovering-zoom")) : r2.globals.panEnabled && (e2.classList.remove("hovering-zoom"), e2.classList.add("hovering-pan"));
          var p2 = Math.round(g2 / h2), f2 = Math.floor(u2 / c2);
          d2 && !r2.config.xaxis.convertedCatToNumeric && (p2 = Math.ceil(g2 / h2), p2 -= 1);
          var b2 = null, v2 = null, m3 = r2.globals.seriesXvalues.map(function(t4) {
            return t4.filter(function(t5) {
              return x.isNumber(t5);
            });
          }), y2 = r2.globals.seriesYvalues.map(function(t4) {
            return t4.filter(function(t5) {
              return x.isNumber(t5);
            });
          });
          if (r2.globals.isXNumeric) {
            var w2 = this.ttCtx.getElGrid().getBoundingClientRect(), k2 = g2 * (w2.width / n2), A2 = u2 * (w2.height / l2);
            b2 = (v2 = this.closestInMultiArray(k2, A2, m3, y2)).index, p2 = v2.j, null !== b2 && (m3 = r2.globals.seriesXvalues[b2], p2 = (v2 = this.closestInArray(k2, m3)).index);
          }
          return r2.globals.capturedSeriesIndex = null === b2 ? -1 : b2, (!p2 || p2 < 1) && (p2 = 0), r2.globals.isBarHorizontal ? r2.globals.capturedDataPointIndex = f2 : r2.globals.capturedDataPointIndex = p2, { capturedSeries: b2, j: r2.globals.isBarHorizontal ? f2 : p2, hoverX: g2, hoverY: u2 };
        } }, { key: "closestInMultiArray", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 0, o2 = null, n2 = -1;
          s2.globals.series.length > 1 ? r2 = this.getFirstActiveXArray(i2) : o2 = 0;
          var l2 = i2[r2][0], h2 = Math.abs(t3 - l2);
          if (i2.forEach(function(e3) {
            e3.forEach(function(e4, i3) {
              var a3 = Math.abs(t3 - e4);
              a3 <= h2 && (h2 = a3, n2 = i3);
            });
          }), -1 !== n2) {
            var c2 = a2[r2][n2], d2 = Math.abs(e2 - c2);
            o2 = r2, a2.forEach(function(t4, i3) {
              var a3 = Math.abs(e2 - t4[n2]);
              a3 <= d2 && (d2 = a3, o2 = i3);
            });
          }
          return { index: o2, j: n2 };
        } }, { key: "getFirstActiveXArray", value: function(t3) {
          for (var e2 = this.w, i2 = 0, a2 = t3.map(function(t4, e3) {
            return t4.length > 0 ? e3 : -1;
          }), s2 = 0; s2 < a2.length; s2++)
            if (-1 !== a2[s2] && -1 === e2.globals.collapsedSeriesIndices.indexOf(s2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(s2)) {
              i2 = a2[s2];
              break;
            }
          return i2;
        } }, { key: "closestInArray", value: function(t3, e2) {
          for (var i2 = e2[0], a2 = null, s2 = Math.abs(t3 - i2), r2 = 0; r2 < e2.length; r2++) {
            var o2 = Math.abs(t3 - e2[r2]);
            o2 < s2 && (s2 = o2, a2 = r2);
          }
          return { index: a2 };
        } }, { key: "isXoverlap", value: function(t3) {
          var e2 = [], i2 = this.w.globals.seriesX.filter(function(t4) {
            return void 0 !== t4[0];
          });
          if (i2.length > 0)
            for (var a2 = 0; a2 < i2.length - 1; a2++)
              void 0 !== i2[a2][t3] && void 0 !== i2[a2 + 1][t3] && i2[a2][t3] !== i2[a2 + 1][t3] && e2.push("unEqual");
          return 0 === e2.length;
        } }, { key: "isInitialSeriesSameLen", value: function() {
          for (var t3 = true, e2 = this.w.globals.initialSeries, i2 = 0; i2 < e2.length - 1; i2++)
            if (e2[i2].data.length !== e2[i2 + 1].data.length) {
              t3 = false;
              break;
            }
          return t3;
        } }, { key: "getBarsHeight", value: function(t3) {
          return u(t3).reduce(function(t4, e2) {
            return t4 + e2.getBBox().height;
          }, 0);
        } }, { key: "getElMarkers", value: function(t3) {
          return "number" == typeof t3 ? this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex='".concat(t3, "'] .apexcharts-series-markers-wrap > *")) : this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap > *");
        } }, { key: "getAllMarkers", value: function() {
          var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
          (t3 = u(t3)).sort(function(t4, e3) {
            var i2 = Number(t4.getAttribute("data:realIndex")), a2 = Number(e3.getAttribute("data:realIndex"));
            return a2 < i2 ? 1 : a2 > i2 ? -1 : 0;
          });
          var e2 = [];
          return t3.forEach(function(t4) {
            e2.push(t4.querySelector(".apexcharts-marker"));
          }), e2;
        } }, { key: "hasMarkers", value: function(t3) {
          return this.getElMarkers(t3).length > 0;
        } }, { key: "getElBars", value: function() {
          return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
        } }, { key: "hasBars", value: function() {
          return this.getElBars().length > 0;
        } }, { key: "getHoverMarkerSize", value: function(t3) {
          var e2 = this.w, i2 = e2.config.markers.hover.size;
          return void 0 === i2 && (i2 = e2.globals.markers.size[t3] + e2.config.markers.hover.sizeOffset), i2;
        } }, { key: "toggleAllTooltipSeriesGroups", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          0 === i2.allTooltipSeriesGroups.length && (i2.allTooltipSeriesGroups = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
          for (var a2 = i2.allTooltipSeriesGroups, s2 = 0; s2 < a2.length; s2++)
            "enable" === t3 ? (a2[s2].classList.add("apexcharts-active"), a2[s2].style.display = e2.config.tooltip.items.display) : (a2[s2].classList.remove("apexcharts-active"), a2[s2].style.display = "none");
        } }]), t2;
      }();
      var gt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ctx = e2.ctx, this.ttCtx = e2, this.tooltipUtil = new dt(e2);
        }
        return r(t2, [{ key: "drawSeriesTexts", value: function(t3) {
          var e2 = t3.shared, i2 = void 0 === e2 || e2, a2 = t3.ttItems, s2 = t3.i, r2 = void 0 === s2 ? 0 : s2, o2 = t3.j, n2 = void 0 === o2 ? null : o2, l2 = t3.y1, h2 = t3.y2, c2 = t3.e, d2 = this.w;
          void 0 !== d2.config.tooltip.custom ? this.handleCustomTooltip({ i: r2, j: n2, y1: l2, y2: h2, w: d2 }) : this.toggleActiveInactiveSeries(i2);
          var g2 = this.getValuesToPrint({ i: r2, j: n2 });
          this.printLabels({ i: r2, j: n2, values: g2, ttItems: a2, shared: i2, e: c2 });
          var u2 = this.ttCtx.getElTooltip();
          this.ttCtx.tooltipRect.ttWidth = u2.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u2.getBoundingClientRect().height;
        } }, { key: "printLabels", value: function(t3) {
          var i2, a2 = this, s2 = t3.i, r2 = t3.j, o2 = t3.values, n2 = t3.ttItems, l2 = t3.shared, h2 = t3.e, c2 = this.w, d2 = [], g2 = function(t4) {
            return c2.globals.seriesGoals[t4] && c2.globals.seriesGoals[t4][r2] && Array.isArray(c2.globals.seriesGoals[t4][r2]);
          }, u2 = o2.xVal, p2 = o2.zVal, f2 = o2.xAxisTTVal, x2 = "", b2 = c2.globals.colors[s2];
          null !== r2 && c2.config.plotOptions.bar.distributed && (b2 = c2.globals.colors[r2]);
          for (var v2 = function(t4, o3) {
            var v3 = a2.getFormatters(s2);
            x2 = a2.getSeriesName({ fn: v3.yLbTitleFormatter, index: s2, seriesIndex: s2, j: r2 }), "treemap" === c2.config.chart.type && (x2 = v3.yLbTitleFormatter(String(c2.config.series[s2].data[r2].x), { series: c2.globals.series, seriesIndex: s2, dataPointIndex: r2, w: c2 }));
            var m4 = c2.config.tooltip.inverseOrder ? o3 : t4;
            if (c2.globals.axisCharts) {
              var y3 = function(t5) {
                var e2, i3, a3, s3;
                return c2.globals.isRangeData ? v3.yLbFormatter(null === (e2 = c2.globals.seriesRangeStart) || void 0 === e2 || null === (i3 = e2[t5]) || void 0 === i3 ? void 0 : i3[r2], { series: c2.globals.seriesRangeStart, seriesIndex: t5, dataPointIndex: r2, w: c2 }) + " - " + v3.yLbFormatter(null === (a3 = c2.globals.seriesRangeEnd) || void 0 === a3 || null === (s3 = a3[t5]) || void 0 === s3 ? void 0 : s3[r2], { series: c2.globals.seriesRangeEnd, seriesIndex: t5, dataPointIndex: r2, w: c2 }) : v3.yLbFormatter(c2.globals.series[t5][r2], { series: c2.globals.series, seriesIndex: t5, dataPointIndex: r2, w: c2 });
              };
              if (l2)
                v3 = a2.getFormatters(m4), x2 = a2.getSeriesName({ fn: v3.yLbTitleFormatter, index: m4, seriesIndex: s2, j: r2 }), b2 = c2.globals.colors[m4], i2 = y3(m4), g2(m4) && (d2 = c2.globals.seriesGoals[m4][r2].map(function(t5) {
                  return { attrs: t5, val: v3.yLbFormatter(t5.value, { seriesIndex: m4, dataPointIndex: r2, w: c2 }) };
                }));
              else {
                var w2, k2 = null == h2 || null === (w2 = h2.target) || void 0 === w2 ? void 0 : w2.getAttribute("fill");
                k2 && (b2 = -1 !== k2.indexOf("url") ? document.querySelector(k2.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k2), i2 = y3(s2), g2(s2) && Array.isArray(c2.globals.seriesGoals[s2][r2]) && (d2 = c2.globals.seriesGoals[s2][r2].map(function(t5) {
                  return { attrs: t5, val: v3.yLbFormatter(t5.value, { seriesIndex: s2, dataPointIndex: r2, w: c2 }) };
                }));
              }
            }
            null === r2 && (i2 = v3.yLbFormatter(c2.globals.series[s2], e(e({}, c2), {}, { seriesIndex: s2, dataPointIndex: s2 }))), a2.DOMHandling({ i: s2, t: m4, j: r2, ttItems: n2, values: { val: i2, goalVals: d2, xVal: u2, xAxisTTVal: f2, zVal: p2 }, seriesName: x2, shared: l2, pColor: b2 });
          }, m3 = 0, y2 = c2.globals.series.length - 1; m3 < c2.globals.series.length; m3++, y2--)
            v2(m3, y2);
        } }, { key: "getFormatters", value: function(t3) {
          var e2, i2 = this.w, a2 = i2.globals.yLabelFormatters[t3];
          return void 0 !== i2.globals.ttVal ? Array.isArray(i2.globals.ttVal) ? (a2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].formatter, e2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].title && i2.globals.ttVal[t3].title.formatter) : (a2 = i2.globals.ttVal.formatter, "function" == typeof i2.globals.ttVal.title.formatter && (e2 = i2.globals.ttVal.title.formatter)) : e2 = i2.config.tooltip.y.title.formatter, "function" != typeof a2 && (a2 = i2.globals.yLabelFormatters[0] ? i2.globals.yLabelFormatters[0] : function(t4) {
            return t4;
          }), "function" != typeof e2 && (e2 = function(t4) {
            return t4;
          }), { yLbFormatter: a2, yLbTitleFormatter: e2 };
        } }, { key: "getSeriesName", value: function(t3) {
          var e2 = t3.fn, i2 = t3.index, a2 = t3.seriesIndex, s2 = t3.j, r2 = this.w;
          return e2(String(r2.globals.seriesNames[i2]), { series: r2.globals.series, seriesIndex: a2, dataPointIndex: s2, w: r2 });
        } }, { key: "DOMHandling", value: function(t3) {
          t3.i;
          var e2 = t3.t, i2 = t3.j, a2 = t3.ttItems, s2 = t3.values, r2 = t3.seriesName, o2 = t3.shared, n2 = t3.pColor, l2 = this.w, h2 = this.ttCtx, c2 = s2.val, d2 = s2.goalVals, g2 = s2.xVal, u2 = s2.xAxisTTVal, p2 = s2.zVal, f2 = null;
          f2 = a2[e2].children, l2.config.tooltip.fillSeriesColor && (a2[e2].style.backgroundColor = n2, f2[0].style.display = "none"), h2.showTooltipTitle && (null === h2.tooltipTitle && (h2.tooltipTitle = l2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h2.tooltipTitle.innerHTML = g2), h2.isXAxisTooltipEnabled && (h2.xaxisTooltipText.innerHTML = "" !== u2 ? u2 : g2);
          var x2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-label");
          x2 && (x2.innerHTML = r2 || "");
          var b2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-value");
          b2 && (b2.innerHTML = void 0 !== c2 ? c2 : ""), f2[0] && f2[0].classList.contains("apexcharts-tooltip-marker") && (l2.config.tooltip.marker.fillColors && Array.isArray(l2.config.tooltip.marker.fillColors) && (n2 = l2.config.tooltip.marker.fillColors[e2]), f2[0].style.backgroundColor = n2), l2.config.tooltip.marker.show || (f2[0].style.display = "none");
          var v2 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-label"), m3 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-value");
          if (d2.length && l2.globals.seriesGoals[e2]) {
            var y2 = function() {
              var t4 = "<div >", e3 = "<div>";
              d2.forEach(function(i3, a3) {
                t4 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i3.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i3.attrs.name, "</div>"), e3 += "<div>".concat(i3.val, "</div>");
              }), v2.innerHTML = t4 + "</div>", m3.innerHTML = e3 + "</div>";
            };
            o2 ? l2.globals.seriesGoals[e2][i2] && Array.isArray(l2.globals.seriesGoals[e2][i2]) ? y2() : (v2.innerHTML = "", m3.innerHTML = "") : y2();
          } else
            v2.innerHTML = "", m3.innerHTML = "";
          null !== p2 && (a2[e2].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l2.config.tooltip.z.title, a2[e2].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p2 ? p2 : "");
          if (o2 && f2[0]) {
            if (l2.config.tooltip.hideEmptySeries) {
              var w2 = a2[e2].querySelector(".apexcharts-tooltip-marker"), k2 = a2[e2].querySelector(".apexcharts-tooltip-text");
              0 == parseFloat(c2) ? (w2.style.display = "none", k2.style.display = "none") : (w2.style.display = "block", k2.style.display = "block");
            }
            null == c2 || l2.globals.ancillaryCollapsedSeriesIndices.indexOf(e2) > -1 || l2.globals.collapsedSeriesIndices.indexOf(e2) > -1 ? f2[0].parentNode.style.display = "none" : f2[0].parentNode.style.display = l2.config.tooltip.items.display;
          }
        } }, { key: "toggleActiveInactiveSeries", value: function(t3) {
          var e2 = this.w;
          if (t3)
            this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
          else {
            this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
            var i2 = e2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
            i2 && (i2.classList.add("apexcharts-active"), i2.style.display = e2.config.tooltip.items.display);
          }
        } }, { key: "getValuesToPrint", value: function(t3) {
          var e2 = t3.i, i2 = t3.j, a2 = this.w, s2 = this.ctx.series.filteredSeriesX(), r2 = "", o2 = "", n2 = null, l2 = null, h2 = { series: a2.globals.series, seriesIndex: e2, dataPointIndex: i2, w: a2 }, c2 = a2.globals.ttZFormatter;
          null === i2 ? l2 = a2.globals.series[e2] : a2.globals.isXNumeric && "treemap" !== a2.config.chart.type ? (r2 = s2[e2][i2], 0 === s2[e2].length && (r2 = s2[this.tooltipUtil.getFirstActiveXArray(s2)][i2])) : r2 = void 0 !== a2.globals.labels[i2] ? a2.globals.labels[i2] : "";
          var d2 = r2;
          a2.globals.isXNumeric && "datetime" === a2.config.xaxis.type ? r2 = new S(this.ctx).xLabelFormat(a2.globals.ttKeyFormatter, d2, d2, { i: void 0, dateFormatter: new A(this.ctx).formatDate, w: this.w }) : r2 = a2.globals.isBarHorizontal ? a2.globals.yLabelFormatters[0](d2, h2) : a2.globals.xLabelFormatter(d2, h2);
          return void 0 !== a2.config.tooltip.x.formatter && (r2 = a2.globals.ttKeyFormatter(d2, h2)), a2.globals.seriesZ.length > 0 && a2.globals.seriesZ[e2].length > 0 && (n2 = c2(a2.globals.seriesZ[e2][i2], a2)), o2 = "function" == typeof a2.config.xaxis.tooltip.formatter ? a2.globals.xaxisTooltipFormatter(d2, h2) : r2, { val: Array.isArray(l2) ? l2.join(" ") : l2, xVal: Array.isArray(r2) ? r2.join(" ") : r2, xAxisTTVal: Array.isArray(o2) ? o2.join(" ") : o2, zVal: n2 };
        } }, { key: "handleCustomTooltip", value: function(t3) {
          var e2 = t3.i, i2 = t3.j, a2 = t3.y1, s2 = t3.y2, r2 = t3.w, o2 = this.ttCtx.getElTooltip(), n2 = r2.config.tooltip.custom;
          Array.isArray(n2) && n2[e2] && (n2 = n2[e2]), o2.innerHTML = n2({ ctx: this.ctx, series: r2.globals.series, seriesIndex: e2, dataPointIndex: i2, y1: a2, y2: s2, w: r2 });
        } }]), t2;
      }();
      var ut = function() {
        function t2(e2) {
          a(this, t2), this.ttCtx = e2, this.ctx = e2.ctx, this.w = e2.w;
        }
        return r(t2, [{ key: "moveXCrosshairs", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.ttCtx, a2 = this.w, s2 = i2.getElXCrosshairs(), r2 = t3 - i2.xcrosshairsWidth / 2, o2 = a2.globals.labels.slice().length;
          if (null !== e2 && (r2 = a2.globals.gridWidth / o2 * e2), null === s2 || a2.globals.isBarHorizontal || (s2.setAttribute("x", r2), s2.setAttribute("x1", r2), s2.setAttribute("x2", r2), s2.setAttribute("y2", a2.globals.gridHeight), s2.classList.add("apexcharts-active")), r2 < 0 && (r2 = 0), r2 > a2.globals.gridWidth && (r2 = a2.globals.gridWidth), i2.isXAxisTooltipEnabled) {
            var n2 = r2;
            "tickWidth" !== a2.config.xaxis.crosshairs.width && "barWidth" !== a2.config.xaxis.crosshairs.width || (n2 = r2 + i2.xcrosshairsWidth / 2), this.moveXAxisTooltip(n2);
          }
        } }, { key: "moveYCrosshairs", value: function(t3) {
          var e2 = this.ttCtx;
          null !== e2.ycrosshairs && m2.setAttrs(e2.ycrosshairs, { y1: t3, y2: t3 }), null !== e2.ycrosshairsHidden && m2.setAttrs(e2.ycrosshairsHidden, { y1: t3, y2: t3 });
        } }, { key: "moveXAxisTooltip", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          if (null !== i2.xaxisTooltip && 0 !== i2.xcrosshairsWidth) {
            i2.xaxisTooltip.classList.add("apexcharts-active");
            var a2 = i2.xaxisOffY + e2.config.xaxis.tooltip.offsetY + e2.globals.translateY + 1 + e2.config.xaxis.offsetY;
            if (t3 -= i2.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t3)) {
              t3 += e2.globals.translateX;
              var s2;
              s2 = new m2(this.ctx).getTextRects(i2.xaxisTooltipText.innerHTML), i2.xaxisTooltipText.style.minWidth = s2.width + "px", i2.xaxisTooltip.style.left = t3 + "px", i2.xaxisTooltip.style.top = a2 + "px";
            }
          }
        } }, { key: "moveYAxisTooltip", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          null === i2.yaxisTTEls && (i2.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
          var a2 = parseInt(i2.ycrosshairsHidden.getAttribute("y1"), 10), s2 = e2.globals.translateY + a2, r2 = i2.yaxisTTEls[t3].getBoundingClientRect().height, o2 = e2.globals.translateYAxisX[t3] - 2;
          e2.config.yaxis[t3].opposite && (o2 -= 26), s2 -= r2 / 2, -1 === e2.globals.ignoreYAxisIndexes.indexOf(t3) ? (i2.yaxisTTEls[t3].classList.add("apexcharts-active"), i2.yaxisTTEls[t3].style.top = s2 + "px", i2.yaxisTTEls[t3].style.left = o2 + e2.config.yaxis[t3].tooltip.offsetX + "px") : i2.yaxisTTEls[t3].classList.remove("apexcharts-active");
        } }, { key: "moveTooltip", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = this.w, s2 = this.ttCtx, r2 = s2.getElTooltip(), o2 = s2.tooltipRect, n2 = null !== i2 ? parseFloat(i2) : 1, l2 = parseFloat(t3) + n2 + 5, h2 = parseFloat(e2) + n2 / 2;
          if (l2 > a2.globals.gridWidth / 2 && (l2 = l2 - o2.ttWidth - n2 - 10), l2 > a2.globals.gridWidth - o2.ttWidth - 10 && (l2 = a2.globals.gridWidth - o2.ttWidth), l2 < -20 && (l2 = -20), a2.config.tooltip.followCursor) {
            var c2 = s2.getElGrid().getBoundingClientRect();
            (l2 = s2.e.clientX - c2.left) > a2.globals.gridWidth / 2 && (l2 -= s2.tooltipRect.ttWidth), (h2 = s2.e.clientY + a2.globals.translateY - c2.top) > a2.globals.gridHeight / 2 && (h2 -= s2.tooltipRect.ttHeight);
          } else
            a2.globals.isBarHorizontal || o2.ttHeight / 2 + h2 > a2.globals.gridHeight && (h2 = a2.globals.gridHeight - o2.ttHeight + a2.globals.translateY);
          isNaN(l2) || (l2 += a2.globals.translateX, r2.style.left = l2 + "px", r2.style.top = h2 + "px");
        } }, { key: "moveMarkers", value: function(t3, e2) {
          var i2 = this.w, a2 = this.ttCtx;
          if (i2.globals.markers.size[t3] > 0)
            for (var s2 = i2.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t3, "'] .apexcharts-marker")), r2 = 0; r2 < s2.length; r2++)
              parseInt(s2[r2].getAttribute("rel"), 10) === e2 && (a2.marker.resetPointsSize(), a2.marker.enlargeCurrentPoint(e2, s2[r2]));
          else
            a2.marker.resetPointsSize(), this.moveDynamicPointOnHover(e2, t3);
        } }, { key: "moveDynamicPointOnHover", value: function(t3, e2) {
          var i2, a2, s2 = this.w, r2 = this.ttCtx, o2 = s2.globals.pointsArray, n2 = r2.tooltipUtil.getHoverMarkerSize(e2), l2 = s2.config.series[e2].type;
          if (!l2 || "column" !== l2 && "candlestick" !== l2 && "boxPlot" !== l2) {
            i2 = o2[e2][t3][0], a2 = o2[e2][t3][1] ? o2[e2][t3][1] : 0;
            var h2 = s2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e2, "'] .apexcharts-series-markers circle"));
            h2 && a2 < s2.globals.gridHeight && a2 > 0 && (h2.setAttribute("r", n2), h2.setAttribute("cx", i2), h2.setAttribute("cy", a2)), this.moveXCrosshairs(i2), r2.fixedTooltip || this.moveTooltip(i2, a2, n2);
          }
        } }, { key: "moveDynamicPointsOnHover", value: function(t3) {
          var e2, i2 = this.ttCtx, a2 = i2.w, s2 = 0, r2 = 0, o2 = a2.globals.pointsArray;
          e2 = new W(this.ctx).getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
          var n2 = i2.tooltipUtil.getHoverMarkerSize(e2);
          o2[e2] && (s2 = o2[e2][t3][0], r2 = o2[e2][t3][1]);
          var l2 = i2.tooltipUtil.getAllMarkers();
          if (null !== l2)
            for (var h2 = 0; h2 < a2.globals.series.length; h2++) {
              var c2 = o2[h2];
              if (a2.globals.comboCharts && void 0 === c2 && l2.splice(h2, 0, null), c2 && c2.length) {
                var d2 = o2[h2][t3][1], g2 = void 0;
                if (l2[h2].setAttribute("cx", s2), "rangeArea" === a2.config.chart.type && !a2.globals.comboCharts) {
                  var u2 = t3 + a2.globals.series[h2].length;
                  g2 = o2[h2][u2][1], d2 -= Math.abs(d2 - g2) / 2;
                }
                null !== d2 && !isNaN(d2) && d2 < a2.globals.gridHeight + n2 && d2 + n2 > 0 ? (l2[h2] && l2[h2].setAttribute("r", n2), l2[h2] && l2[h2].setAttribute("cy", d2)) : l2[h2] && l2[h2].setAttribute("r", 0);
              }
            }
          this.moveXCrosshairs(s2), i2.fixedTooltip || this.moveTooltip(s2, r2 || a2.globals.gridHeight, n2);
        } }, { key: "moveStickyTooltipOverBars", value: function(t3, e2) {
          var i2 = this.w, a2 = this.ttCtx, s2 = i2.globals.columnSeries ? i2.globals.columnSeries.length : i2.globals.series.length, r2 = s2 >= 2 && s2 % 2 == 0 ? Math.floor(s2 / 2) : Math.floor(s2 / 2) + 1;
          i2.globals.isBarHorizontal && (r2 = new W(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
          var o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "']"));
          o2 || "number" != typeof e2 || (o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[data\\:realIndex='".concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "']")));
          var n2 = o2 ? parseFloat(o2.getAttribute("cx")) : 0, l2 = o2 ? parseFloat(o2.getAttribute("cy")) : 0, h2 = o2 ? parseFloat(o2.getAttribute("barWidth")) : 0, c2 = a2.getElGrid().getBoundingClientRect(), d2 = o2 && (o2.classList.contains("apexcharts-candlestick-area") || o2.classList.contains("apexcharts-boxPlot-area"));
          i2.globals.isXNumeric ? (o2 && !d2 && (n2 -= s2 % 2 != 0 ? h2 / 2 : 0), o2 && d2 && i2.globals.comboCharts && (n2 -= h2 / 2)) : i2.globals.isBarHorizontal || (n2 = a2.xAxisTicksPositions[t3 - 1] + a2.dataPointsDividedWidth / 2, isNaN(n2) && (n2 = a2.xAxisTicksPositions[t3] - a2.dataPointsDividedWidth / 2)), i2.globals.isBarHorizontal ? l2 -= a2.tooltipRect.ttHeight : i2.config.tooltip.followCursor ? l2 = a2.e.clientY - c2.top - a2.tooltipRect.ttHeight / 2 : l2 + a2.tooltipRect.ttHeight + 15 > i2.globals.gridHeight && (l2 = i2.globals.gridHeight), i2.globals.isBarHorizontal || this.moveXCrosshairs(n2), a2.fixedTooltip || this.moveTooltip(n2, l2 || i2.globals.gridHeight);
        } }]), t2;
      }();
      var pt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx, this.tooltipPosition = new ut(e2);
        }
        return r(t2, [{ key: "drawDynamicPoints", value: function() {
          var t3 = this.w, e2 = new m2(this.ctx), i2 = new D(this.ctx), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          a2 = u(a2), t3.config.chart.stacked && a2.sort(function(t4, e3) {
            return parseFloat(t4.getAttribute("data:realIndex")) - parseFloat(e3.getAttribute("data:realIndex"));
          });
          for (var s2 = 0; s2 < a2.length; s2++) {
            var r2 = a2[s2].querySelector(".apexcharts-series-markers-wrap");
            if (null !== r2) {
              var o2 = void 0, n2 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
              "line" !== t3.config.chart.type && "area" !== t3.config.chart.type || t3.globals.comboCharts || t3.config.tooltip.intersect || (n2 += " no-pointer-events");
              var l2 = i2.getMarkerConfig({ cssClass: n2, seriesIndex: Number(r2.getAttribute("data:realIndex")) });
              (o2 = e2.drawMarker(0, 0, l2)).node.setAttribute("default-marker-size", 0);
              var h2 = document.createElementNS(t3.globals.SVGNS, "g");
              h2.classList.add("apexcharts-series-markers"), h2.appendChild(o2.node), r2.appendChild(h2);
            }
          }
        } }, { key: "enlargeCurrentPoint", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w;
          "bubble" !== s2.config.chart.type && this.newPointSize(t3, e2);
          var r2 = e2.getAttribute("cx"), o2 = e2.getAttribute("cy");
          if (null !== i2 && null !== a2 && (r2 = i2, o2 = a2), this.tooltipPosition.moveXCrosshairs(r2), !this.fixedTooltip) {
            if ("radar" === s2.config.chart.type) {
              var n2 = this.ttCtx.getElGrid().getBoundingClientRect();
              r2 = this.ttCtx.e.clientX - n2.left;
            }
            this.tooltipPosition.moveTooltip(r2, o2, s2.config.markers.hover.size);
          }
        } }, { key: "enlargePoints", value: function(t3) {
          for (var e2 = this.w, i2 = this, a2 = this.ttCtx, s2 = t3, r2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o2 = e2.config.markers.hover.size, n2 = 0; n2 < r2.length; n2++) {
            var l2 = r2[n2].getAttribute("rel"), h2 = r2[n2].getAttribute("index");
            if (void 0 === o2 && (o2 = e2.globals.markers.size[h2] + e2.config.markers.hover.sizeOffset), s2 === parseInt(l2, 10)) {
              i2.newPointSize(s2, r2[n2]);
              var c2 = r2[n2].getAttribute("cx"), d2 = r2[n2].getAttribute("cy");
              i2.tooltipPosition.moveXCrosshairs(c2), a2.fixedTooltip || i2.tooltipPosition.moveTooltip(c2, d2, o2);
            } else
              i2.oldPointSize(r2[n2]);
          }
        } }, { key: "newPointSize", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config.markers.hover.size, s2 = 0 === t3 ? e2.parentNode.firstChild : e2.parentNode.lastChild;
          if ("0" !== s2.getAttribute("default-marker-size")) {
            var r2 = parseInt(s2.getAttribute("index"), 10);
            void 0 === a2 && (a2 = i2.globals.markers.size[r2] + i2.config.markers.hover.sizeOffset), a2 < 0 && (a2 = 0), s2.setAttribute("r", a2);
          }
        } }, { key: "oldPointSize", value: function(t3) {
          var e2 = parseFloat(t3.getAttribute("default-marker-size"));
          t3.setAttribute("r", e2);
        } }, { key: "resetPointsSize", value: function() {
          for (var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e2 = 0; e2 < t3.length; e2++) {
            var i2 = parseFloat(t3[e2].getAttribute("default-marker-size"));
            x.isNumber(i2) && i2 >= 0 ? t3[e2].setAttribute("r", i2) : t3[e2].setAttribute("r", 0);
          }
        } }]), t2;
      }();
      var ft = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w;
          var i2 = this.w;
          this.ttCtx = e2, this.isVerticalGroupedRangeBar = !i2.globals.isBarHorizontal && "rangeBar" === i2.config.chart.type && i2.config.plotOptions.bar.rangeBarGroupRows;
        }
        return r(t2, [{ key: "getAttr", value: function(t3, e2) {
          return parseFloat(t3.target.getAttribute(e2));
        } }, { key: "handleHeatTreeTooltip", value: function(t3) {
          var e2 = t3.e, i2 = t3.opt, a2 = t3.x, s2 = t3.y, r2 = t3.type, o2 = this.ttCtx, n2 = this.w;
          if (e2.target.classList.contains("apexcharts-".concat(r2, "-rect"))) {
            var l2 = this.getAttr(e2, "i"), h2 = this.getAttr(e2, "j"), c2 = this.getAttr(e2, "cx"), d2 = this.getAttr(e2, "cy"), g2 = this.getAttr(e2, "width"), u2 = this.getAttr(e2, "height");
            if (o2.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: l2, j: h2, shared: false, e: e2 }), n2.globals.capturedSeriesIndex = l2, n2.globals.capturedDataPointIndex = h2, a2 = c2 + o2.tooltipRect.ttWidth / 2 + g2, s2 = d2 + o2.tooltipRect.ttHeight / 2 - u2 / 2, o2.tooltipPosition.moveXCrosshairs(c2 + g2 / 2), a2 > n2.globals.gridWidth / 2 && (a2 = c2 - o2.tooltipRect.ttWidth / 2 + g2), o2.w.config.tooltip.followCursor) {
              var p2 = n2.globals.dom.elWrap.getBoundingClientRect();
              a2 = n2.globals.clientX - p2.left - (a2 > n2.globals.gridWidth / 2 ? o2.tooltipRect.ttWidth : 0), s2 = n2.globals.clientY - p2.top - (s2 > n2.globals.gridHeight / 2 ? o2.tooltipRect.ttHeight : 0);
            }
          }
          return { x: a2, y: s2 };
        } }, { key: "handleMarkerTooltip", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = t3.x, o2 = t3.y, n2 = this.w, l2 = this.ttCtx;
          if (a2.target.classList.contains("apexcharts-marker")) {
            var h2 = parseInt(s2.paths.getAttribute("cx"), 10), c2 = parseInt(s2.paths.getAttribute("cy"), 10), d2 = parseFloat(s2.paths.getAttribute("val"));
            if (i2 = parseInt(s2.paths.getAttribute("rel"), 10), e2 = parseInt(s2.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l2.intersect) {
              var g2 = x.findAncestor(s2.paths, "apexcharts-series");
              g2 && (e2 = parseInt(g2.getAttribute("data:realIndex"), 10));
            }
            if (l2.tooltipLabels.drawSeriesTexts({ ttItems: s2.ttItems, i: e2, j: i2, shared: !l2.showOnIntersect && n2.config.tooltip.shared, e: a2 }), "mouseup" === a2.type && l2.markerClick(a2, e2, i2), n2.globals.capturedSeriesIndex = e2, n2.globals.capturedDataPointIndex = i2, r2 = h2, o2 = c2 + n2.globals.translateY - 1.4 * l2.tooltipRect.ttHeight, l2.w.config.tooltip.followCursor) {
              var u2 = l2.getElGrid().getBoundingClientRect();
              o2 = l2.e.clientY + n2.globals.translateY - u2.top;
            }
            d2 < 0 && (o2 = c2), l2.marker.enlargeCurrentPoint(i2, s2.paths, r2, o2);
          }
          return { x: r2, y: o2 };
        } }, { key: "handleBarTooltip", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = this.w, o2 = this.ttCtx, n2 = o2.getElTooltip(), l2 = 0, h2 = 0, c2 = 0, d2 = this.getBarTooltipXY({ e: a2, opt: s2 });
          e2 = d2.i;
          var g2 = d2.barHeight, u2 = d2.j;
          r2.globals.capturedSeriesIndex = e2, r2.globals.capturedDataPointIndex = u2, r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars() || !r2.config.tooltip.shared ? (h2 = d2.x, c2 = d2.y, i2 = Array.isArray(r2.config.stroke.width) ? r2.config.stroke.width[e2] : r2.config.stroke.width, l2 = h2) : r2.globals.comboCharts || r2.config.tooltip.shared || (l2 /= 2), isNaN(c2) && (c2 = r2.globals.svgHeight - o2.tooltipRect.ttHeight);
          var p2 = parseInt(s2.paths.parentNode.getAttribute("data:realIndex"), 10), f2 = r2.globals.isMultipleYAxis ? r2.config.yaxis[p2] && r2.config.yaxis[p2].reversed : r2.config.yaxis[0].reversed;
          if (h2 + o2.tooltipRect.ttWidth > r2.globals.gridWidth && !f2 ? h2 -= o2.tooltipRect.ttWidth : h2 < 0 && (h2 = 0), o2.w.config.tooltip.followCursor) {
            var x2 = o2.getElGrid().getBoundingClientRect();
            c2 = o2.e.clientY - x2.top;
          }
          null === o2.tooltip && (o2.tooltip = r2.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r2.config.tooltip.shared || (r2.globals.comboBarCount > 0 ? o2.tooltipPosition.moveXCrosshairs(l2 + i2 / 2) : o2.tooltipPosition.moveXCrosshairs(l2)), !o2.fixedTooltip && (!r2.config.tooltip.shared || r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars()) && (f2 && (h2 -= o2.tooltipRect.ttWidth) < 0 && (h2 = 0), !f2 || r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars() || (c2 = c2 + g2 - 2 * (r2.globals.series[e2][u2] < 0 ? g2 : 0)), c2 = c2 + r2.globals.translateY - o2.tooltipRect.ttHeight / 2, n2.style.left = h2 + r2.globals.translateX + "px", n2.style.top = c2 + "px");
        } }, { key: "getBarTooltipXY", value: function(t3) {
          var e2 = this, i2 = t3.e, a2 = t3.opt, s2 = this.w, r2 = null, o2 = this.ttCtx, n2 = 0, l2 = 0, h2 = 0, c2 = 0, d2 = 0, g2 = i2.target.classList;
          if (g2.contains("apexcharts-bar-area") || g2.contains("apexcharts-candlestick-area") || g2.contains("apexcharts-boxPlot-area") || g2.contains("apexcharts-rangebar-area")) {
            var u2 = i2.target, p2 = u2.getBoundingClientRect(), f2 = a2.elGrid.getBoundingClientRect(), x2 = p2.height;
            d2 = p2.height;
            var b2 = p2.width, v2 = parseInt(u2.getAttribute("cx"), 10), m3 = parseInt(u2.getAttribute("cy"), 10);
            c2 = parseFloat(u2.getAttribute("barWidth"));
            var y2 = "touchmove" === i2.type ? i2.touches[0].clientX : i2.clientX;
            r2 = parseInt(u2.getAttribute("j"), 10), n2 = parseInt(u2.parentNode.getAttribute("rel"), 10) - 1;
            var w2 = u2.getAttribute("data-range-y1"), k2 = u2.getAttribute("data-range-y2");
            s2.globals.comboCharts && (n2 = parseInt(u2.parentNode.getAttribute("data:realIndex"), 10));
            var A2 = function(t4) {
              return s2.globals.isXNumeric ? v2 - b2 / 2 : e2.isVerticalGroupedRangeBar ? v2 + b2 / 2 : v2 - o2.dataPointsDividedWidth + b2 / 2;
            }, S2 = function() {
              return m3 - o2.dataPointsDividedHeight + x2 / 2 - o2.tooltipRect.ttHeight / 2;
            };
            o2.tooltipLabels.drawSeriesTexts({ ttItems: a2.ttItems, i: n2, j: r2, y1: w2 ? parseInt(w2, 10) : null, y2: k2 ? parseInt(k2, 10) : null, shared: !o2.showOnIntersect && s2.config.tooltip.shared, e: i2 }), s2.config.tooltip.followCursor ? s2.globals.isBarHorizontal ? (l2 = y2 - f2.left + 15, h2 = S2()) : (l2 = A2(), h2 = i2.clientY - f2.top - o2.tooltipRect.ttHeight / 2 - 15) : s2.globals.isBarHorizontal ? ((l2 = v2) < o2.xyRatios.baseLineInvertedY && (l2 = v2 - o2.tooltipRect.ttWidth), h2 = S2()) : (l2 = A2(), h2 = m3);
          }
          return { x: l2, y: h2, barHeight: d2, barWidth: c2, i: n2, j: r2 };
        } }]), t2;
      }();
      var xt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2;
        }
        return r(t2, [{ key: "drawXaxisTooltip", value: function() {
          var t3 = this.w, e2 = this.ttCtx, i2 = "bottom" === t3.config.xaxis.position;
          e2.xaxisOffY = i2 ? t3.globals.gridHeight + 1 : -t3.globals.xAxisHeight - t3.config.xaxis.axisTicks.height + 3;
          var a2 = i2 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s2 = t3.globals.dom.elWrap;
          e2.isXAxisTooltipEnabled && (null === t3.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e2.xaxisTooltip = document.createElement("div"), e2.xaxisTooltip.setAttribute("class", a2 + " apexcharts-theme-" + t3.config.tooltip.theme), s2.appendChild(e2.xaxisTooltip), e2.xaxisTooltipText = document.createElement("div"), e2.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e2.xaxisTooltipText.style.fontFamily = t3.config.xaxis.tooltip.style.fontFamily || t3.config.chart.fontFamily, e2.xaxisTooltipText.style.fontSize = t3.config.xaxis.tooltip.style.fontSize, e2.xaxisTooltip.appendChild(e2.xaxisTooltipText)));
        } }, { key: "drawYaxisTooltip", value: function() {
          for (var t3 = this.w, e2 = this.ttCtx, i2 = 0; i2 < t3.config.yaxis.length; i2++) {
            var a2 = t3.config.yaxis[i2].opposite || t3.config.yaxis[i2].crosshairs.opposite;
            e2.yaxisOffX = a2 ? t3.globals.gridWidth + 1 : 1;
            var s2 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2, a2 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left"), r2 = t3.globals.dom.elWrap;
            null === t3.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2)) && (e2.yaxisTooltip = document.createElement("div"), e2.yaxisTooltip.setAttribute("class", s2 + " apexcharts-theme-" + t3.config.tooltip.theme), r2.appendChild(e2.yaxisTooltip), 0 === i2 && (e2.yaxisTooltipText = []), e2.yaxisTooltipText[i2] = document.createElement("div"), e2.yaxisTooltipText[i2].classList.add("apexcharts-yaxistooltip-text"), e2.yaxisTooltip.appendChild(e2.yaxisTooltipText[i2]));
          }
        } }, { key: "setXCrosshairWidth", value: function() {
          var t3 = this.w, e2 = this.ttCtx, i2 = e2.getElXCrosshairs();
          if (e2.xcrosshairsWidth = parseInt(t3.config.xaxis.crosshairs.width, 10), t3.globals.comboCharts) {
            var a2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== a2 && "barWidth" === t3.config.xaxis.crosshairs.width) {
              var s2 = parseFloat(a2.getAttribute("barWidth"));
              e2.xcrosshairsWidth = s2;
            } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
              var r2 = t3.globals.labels.length;
              e2.xcrosshairsWidth = t3.globals.gridWidth / r2;
            }
          } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
            var o2 = t3.globals.labels.length;
            e2.xcrosshairsWidth = t3.globals.gridWidth / o2;
          } else if ("barWidth" === t3.config.xaxis.crosshairs.width) {
            var n2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== n2) {
              var l2 = parseFloat(n2.getAttribute("barWidth"));
              e2.xcrosshairsWidth = l2;
            } else
              e2.xcrosshairsWidth = 1;
          }
          t3.globals.isBarHorizontal && (e2.xcrosshairsWidth = 0), null !== i2 && e2.xcrosshairsWidth > 0 && i2.setAttribute("width", e2.xcrosshairsWidth);
        } }, { key: "handleYCrosshair", value: function() {
          var t3 = this.w, e2 = this.ttCtx;
          e2.ycrosshairs = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e2.ycrosshairsHidden = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
        } }, { key: "drawYaxisTooltipText", value: function(t3, e2, i2) {
          var a2 = this.ttCtx, s2 = this.w, r2 = s2.globals, o2 = r2.seriesYAxisMap[t3];
          if (a2.yaxisTooltips[t3] && o2.length > 0) {
            var n2 = r2.yLabelFormatters[t3], l2 = a2.getElGrid().getBoundingClientRect(), h2 = o2[0];
            i2.yRatio.length > 1 && function(t4) {
              throw new TypeError('"' + t4 + '" is read-only');
            }("translationsIndex");
            var c2 = (e2 - l2.top) * i2.yRatio[0], d2 = r2.maxYArr[h2] - r2.minYArr[h2], g2 = r2.minYArr[h2] + (d2 - c2);
            s2.config.yaxis[t3].reversed && (g2 = r2.maxYArr[h2] - (d2 - c2)), a2.tooltipPosition.moveYCrosshairs(e2 - l2.top), a2.yaxisTooltipText[t3].innerHTML = n2(g2), a2.tooltipPosition.moveYAxisTooltip(t3);
          }
        } }]), t2;
      }();
      var bt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.tConfig = i2.config.tooltip, this.tooltipUtil = new dt(this), this.tooltipLabels = new gt(this), this.tooltipPosition = new ut(this), this.marker = new pt(this), this.intersect = new ft(this), this.axesTooltip = new xt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i2.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
        }
        return r(t2, [{ key: "getElTooltip", value: function(t3) {
          return t3 || (t3 = this), t3.w.globals.dom.baseEl ? t3.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
        } }, { key: "getElXCrosshairs", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
        } }, { key: "getElGrid", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
        } }, { key: "drawTooltip", value: function(t3) {
          var e2 = this.w;
          this.xyRatios = t3, this.isXAxisTooltipEnabled = e2.config.xaxis.tooltip.enabled && e2.globals.axisCharts, this.yaxisTooltips = e2.config.yaxis.map(function(t4, i3) {
            return !!(t4.show && t4.tooltip.enabled && e2.globals.axisCharts);
          }), this.allTooltipSeriesGroups = [], e2.globals.axisCharts || (this.showTooltipTitle = false);
          var i2 = document.createElement("div");
          if (i2.classList.add("apexcharts-tooltip"), e2.config.tooltip.cssClass && i2.classList.add(e2.config.tooltip.cssClass), i2.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e2.globals.dom.elWrap.appendChild(i2), e2.globals.axisCharts) {
            this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
            var a2 = new V(this.ctx);
            this.xAxisTicksPositions = a2.getXAxisTicksPositions();
          }
          if (!e2.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e2.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e2.config.markers.size && 0 !== e2.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e2.globals.collapsedSeries.length !== e2.globals.series.length) {
            this.dataPointsDividedHeight = e2.globals.gridHeight / e2.globals.dataPoints, this.dataPointsDividedWidth = e2.globals.gridWidth / e2.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e2.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i2.appendChild(this.tooltipTitle));
            var s2 = e2.globals.series.length;
            (e2.globals.xyCharts || e2.globals.comboCharts) && this.tConfig.shared && (s2 = this.showOnIntersect ? 1 : e2.globals.series.length), this.legendLabels = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s2), this.addSVGEvents();
          }
        } }, { key: "createTTElements", value: function(t3) {
          for (var e2 = this, i2 = this.w, a2 = [], s2 = this.getElTooltip(), r2 = function(r3) {
            var o3 = document.createElement("div");
            o3.classList.add("apexcharts-tooltip-series-group"), o3.style.order = i2.config.tooltip.inverseOrder ? t3 - r3 : r3 + 1, e2.tConfig.shared && e2.tConfig.enabledOnSeries && Array.isArray(e2.tConfig.enabledOnSeries) && e2.tConfig.enabledOnSeries.indexOf(r3) < 0 && o3.classList.add("apexcharts-tooltip-series-group-hidden");
            var n2 = document.createElement("span");
            n2.classList.add("apexcharts-tooltip-marker"), n2.style.backgroundColor = i2.globals.colors[r3], o3.appendChild(n2);
            var l2 = document.createElement("div");
            l2.classList.add("apexcharts-tooltip-text"), l2.style.fontFamily = e2.tConfig.style.fontFamily || i2.config.chart.fontFamily, l2.style.fontSize = e2.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t4) {
              var e3 = document.createElement("div");
              e3.classList.add("apexcharts-tooltip-".concat(t4, "-group"));
              var i3 = document.createElement("span");
              i3.classList.add("apexcharts-tooltip-text-".concat(t4, "-label")), e3.appendChild(i3);
              var a3 = document.createElement("span");
              a3.classList.add("apexcharts-tooltip-text-".concat(t4, "-value")), e3.appendChild(a3), l2.appendChild(e3);
            }), o3.appendChild(l2), s2.appendChild(o3), a2.push(o3);
          }, o2 = 0; o2 < t3; o2++)
            r2(o2);
          return a2;
        } }, { key: "addSVGEvents", value: function() {
          var t3 = this.w, e2 = t3.config.chart.type, i2 = this.getElTooltip(), a2 = !("bar" !== e2 && "candlestick" !== e2 && "boxPlot" !== e2 && "rangeBar" !== e2), s2 = "area" === e2 || "line" === e2 || "scatter" === e2 || "bubble" === e2 || "radar" === e2, r2 = t3.globals.dom.Paper.node, o2 = this.getElGrid();
          o2 && (this.seriesBound = o2.getBoundingClientRect());
          var n2, l2 = [], h2 = [], c2 = { hoverArea: r2, elGrid: o2, tooltipEl: i2, tooltipY: l2, tooltipX: h2, ttItems: this.ttItems };
          if (t3.globals.axisCharts && (s2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e2 && "treemap" !== e2 || (n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n2 && n2.length))
            for (var d2 = 0; d2 < n2.length; d2++)
              l2.push(n2[d2].getAttribute("cy")), h2.push(n2[d2].getAttribute("cx"));
          if (t3.globals.xyCharts && !this.showOnIntersect || t3.globals.comboCharts && !this.showOnIntersect || a2 && this.tooltipUtil.hasBars() && this.tConfig.shared)
            this.addPathsEventListeners([r2], c2);
          else if (a2 && !t3.globals.comboCharts || s2 && this.showOnIntersect)
            this.addDatapointEventsListeners(c2);
          else if (!t3.globals.axisCharts || "heatmap" === e2 || "treemap" === e2) {
            var g2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
            this.addPathsEventListeners(g2, c2);
          }
          if (this.showOnIntersect) {
            var u2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
            u2.length > 0 && this.addPathsEventListeners(u2, c2), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c2);
          }
        } }, { key: "drawFixedTooltipRect", value: function() {
          var t3 = this.w, e2 = this.getElTooltip(), i2 = e2.getBoundingClientRect(), a2 = i2.width + 10, s2 = i2.height + 10, r2 = this.tConfig.fixed.offsetX, o2 = this.tConfig.fixed.offsetY, n2 = this.tConfig.fixed.position.toLowerCase();
          return n2.indexOf("right") > -1 && (r2 = r2 + t3.globals.svgWidth - a2 + 10), n2.indexOf("bottom") > -1 && (o2 = o2 + t3.globals.svgHeight - s2 - 10), e2.style.left = r2 + "px", e2.style.top = o2 + "px", { x: r2, y: o2, ttWidth: a2, ttHeight: s2 };
        } }, { key: "addDatapointEventsListeners", value: function(t3) {
          var e2 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
          this.addPathsEventListeners(e2, t3);
        } }, { key: "addPathsEventListeners", value: function(t3, e2) {
          for (var i2 = this, a2 = function(a3) {
            var s3 = { paths: t3[a3], tooltipEl: e2.tooltipEl, tooltipY: e2.tooltipY, tooltipX: e2.tooltipX, elGrid: e2.elGrid, hoverArea: e2.hoverArea, ttItems: e2.ttItems };
            ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e3) {
              return t3[a3].addEventListener(e3, i2.onSeriesHover.bind(i2, s3), { capture: false, passive: true });
            });
          }, s2 = 0; s2 < t3.length; s2++)
            a2(s2);
        } }, { key: "onSeriesHover", value: function(t3, e2) {
          var i2 = this, a2 = Date.now() - this.lastHoverTime;
          a2 >= 100 ? this.seriesHover(t3, e2) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
            i2.seriesHover(t3, e2);
          }, 100 - a2));
        } }, { key: "seriesHover", value: function(t3, e2) {
          var i2 = this;
          this.lastHoverTime = Date.now();
          var a2 = [], s2 = this.w;
          s2.config.chart.group && (a2 = this.ctx.getGroupedCharts()), s2.globals.axisCharts && (s2.globals.minX === -1 / 0 && s2.globals.maxX === 1 / 0 || 0 === s2.globals.dataPoints) || (a2.length ? a2.forEach(function(a3) {
            var s3 = i2.getElTooltip(a3), r2 = { paths: t3.paths, tooltipEl: s3, tooltipY: t3.tooltipY, tooltipX: t3.tooltipX, elGrid: t3.elGrid, hoverArea: t3.hoverArea, ttItems: a3.w.globals.tooltip.ttItems };
            a3.w.globals.minX === i2.w.globals.minX && a3.w.globals.maxX === i2.w.globals.maxX && a3.w.globals.tooltip.seriesHoverByContext({ chartCtx: a3, ttCtx: a3.w.globals.tooltip, opt: r2, e: e2 });
          }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t3, e: e2 }));
        } }, { key: "seriesHoverByContext", value: function(t3) {
          var e2 = t3.chartCtx, i2 = t3.ttCtx, a2 = t3.opt, s2 = t3.e, r2 = e2.w, o2 = this.getElTooltip();
          if (o2) {
            if (i2.tooltipRect = { x: 0, y: 0, ttWidth: o2.getBoundingClientRect().width, ttHeight: o2.getBoundingClientRect().height }, i2.e = s2, i2.tooltipUtil.hasBars() && !r2.globals.comboCharts && !i2.isBarShared) {
              if (this.tConfig.onDatasetHover.highlightDataSeries)
                new W(e2).toggleSeriesOnHover(s2, s2.target.parentNode);
            }
            i2.fixedTooltip && i2.drawFixedTooltipRect(), r2.globals.axisCharts ? i2.axisChartsTooltips({ e: s2, opt: a2, tooltipRect: i2.tooltipRect }) : i2.nonAxisChartsTooltips({ e: s2, opt: a2, tooltipRect: i2.tooltipRect });
          }
        } }, { key: "axisChartsTooltips", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = this.w, o2 = s2.elGrid.getBoundingClientRect(), n2 = "touchmove" === a2.type ? a2.touches[0].clientX : a2.clientX, l2 = "touchmove" === a2.type ? a2.touches[0].clientY : a2.clientY;
          if (this.clientY = l2, this.clientX = n2, r2.globals.capturedSeriesIndex = -1, r2.globals.capturedDataPointIndex = -1, l2 < o2.top || l2 > o2.top + o2.height)
            this.handleMouseOut(s2);
          else {
            if (Array.isArray(this.tConfig.enabledOnSeries) && !r2.config.tooltip.shared) {
              var h2 = parseInt(s2.paths.getAttribute("index"), 10);
              if (this.tConfig.enabledOnSeries.indexOf(h2) < 0)
                return void this.handleMouseOut(s2);
            }
            var c2 = this.getElTooltip(), d2 = this.getElXCrosshairs(), g2 = r2.globals.xyCharts || "bar" === r2.config.chart.type && !r2.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r2.globals.comboCharts && this.tooltipUtil.hasBars();
            if ("mousemove" === a2.type || "touchmove" === a2.type || "mouseup" === a2.type) {
              if (r2.globals.collapsedSeries.length + r2.globals.ancillaryCollapsedSeries.length === r2.globals.series.length)
                return;
              null !== d2 && d2.classList.add("apexcharts-active");
              var u2 = this.yaxisTooltips.filter(function(t4) {
                return true === t4;
              });
              if (null !== this.ycrosshairs && u2.length && this.ycrosshairs.classList.add("apexcharts-active"), g2 && !this.showOnIntersect)
                this.handleStickyTooltip(a2, n2, l2, s2);
              else if ("heatmap" === r2.config.chart.type || "treemap" === r2.config.chart.type) {
                var p2 = this.intersect.handleHeatTreeTooltip({ e: a2, opt: s2, x: e2, y: i2, type: r2.config.chart.type });
                e2 = p2.x, i2 = p2.y, c2.style.left = e2 + "px", c2.style.top = i2 + "px";
              } else
                this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a2, opt: s2 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a2, opt: s2, x: e2, y: i2 });
              if (this.yaxisTooltips.length)
                for (var f2 = 0; f2 < r2.config.yaxis.length; f2++)
                  this.axesTooltip.drawYaxisTooltipText(f2, l2, this.xyRatios);
              s2.tooltipEl.classList.add("apexcharts-active");
            } else
              "mouseout" !== a2.type && "touchend" !== a2.type || this.handleMouseOut(s2);
          }
        } }, { key: "nonAxisChartsTooltips", value: function(t3) {
          var e2 = t3.e, i2 = t3.opt, a2 = t3.tooltipRect, s2 = this.w, r2 = i2.paths.getAttribute("rel"), o2 = this.getElTooltip(), n2 = s2.globals.dom.elWrap.getBoundingClientRect();
          if ("mousemove" === e2.type || "touchmove" === e2.type) {
            o2.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: parseInt(r2, 10) - 1, shared: false });
            var l2 = s2.globals.clientX - n2.left - a2.ttWidth / 2, h2 = s2.globals.clientY - n2.top - a2.ttHeight - 10;
            if (o2.style.left = l2 + "px", o2.style.top = h2 + "px", s2.config.legend.tooltipHoverFormatter) {
              var c2 = r2 - 1, d2 = (0, s2.config.legend.tooltipHoverFormatter)(this.legendLabels[c2].getAttribute("data:default-text"), { seriesIndex: c2, dataPointIndex: c2, w: s2 });
              this.legendLabels[c2].innerHTML = d2;
            }
          } else
            "mouseout" !== e2.type && "touchend" !== e2.type || (o2.classList.remove("apexcharts-active"), s2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t4) {
              var e3 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e3);
            }));
        } }, { key: "handleStickyTooltip", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a2.hoverArea, elGrid: a2.elGrid, clientX: e2, clientY: i2 }), o2 = r2.j, n2 = r2.capturedSeries;
          s2.globals.collapsedSeriesIndices.includes(n2) && (n2 = null);
          var l2 = a2.elGrid.getBoundingClientRect();
          if (r2.hoverX < 0 || r2.hoverX > l2.width)
            this.handleMouseOut(a2);
          else if (null !== n2)
            this.handleStickyCapturedSeries(t3, n2, a2, o2);
          else if (this.tooltipUtil.isXoverlap(o2) || s2.globals.isBarHorizontal) {
            var h2 = s2.globals.series.findIndex(function(t4, e3) {
              return !s2.globals.collapsedSeriesIndices.includes(e3);
            });
            this.create(t3, this, h2, o2, a2.ttItems);
          }
        } }, { key: "handleStickyCapturedSeries", value: function(t3, e2, i2, a2) {
          var s2 = this.w;
          if (!this.tConfig.shared && null === s2.globals.series[e2][a2])
            return void this.handleMouseOut(i2);
          if (void 0 !== s2.globals.series[e2][a2])
            this.tConfig.shared && this.tooltipUtil.isXoverlap(a2) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t3, this, e2, a2, i2.ttItems) : this.create(t3, this, e2, a2, i2.ttItems, false);
          else if (this.tooltipUtil.isXoverlap(a2)) {
            var r2 = s2.globals.series.findIndex(function(t4, e3) {
              return !s2.globals.collapsedSeriesIndices.includes(e3);
            });
            this.create(t3, this, r2, a2, i2.ttItems);
          }
        } }, { key: "deactivateHoverFilter", value: function() {
          for (var t3 = this.w, e2 = new m2(this.ctx), i2 = t3.globals.dom.Paper.select(".apexcharts-bar-area"), a2 = 0; a2 < i2.length; a2++)
            e2.pathMouseLeave(i2[a2]);
        } }, { key: "handleMouseOut", value: function(t3) {
          var e2 = this.w, i2 = this.getElXCrosshairs();
          if (t3.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e2.config.chart.type && this.marker.resetPointsSize(), null !== i2 && i2.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
            null === this.yaxisTTEls && (this.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
            for (var a2 = 0; a2 < this.yaxisTTEls.length; a2++)
              this.yaxisTTEls[a2].classList.remove("apexcharts-active");
          }
          e2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t4) {
            var e3 = t4.getAttribute("data:default-text");
            t4.innerHTML = decodeURIComponent(e3);
          });
        } }, { key: "markerClick", value: function(t3, e2, i2) {
          var a2 = this.w;
          "function" == typeof a2.config.chart.events.markerClick && a2.config.chart.events.markerClick(t3, this.ctx, { seriesIndex: e2, dataPointIndex: i2, w: a2 }), this.ctx.events.fireEvent("markerClick", [t3, this.ctx, { seriesIndex: e2, dataPointIndex: i2, w: a2 }]);
        } }, { key: "create", value: function(t3, i2, a2, s2, r2) {
          var o2, n2, l2, h2, c2, d2, g2, u2, p2, f2, x2, b2, v2, y2, w2, k2, A2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, S2 = this.w, C2 = i2;
          "mouseup" === t3.type && this.markerClick(t3, a2, s2), null === A2 && (A2 = this.tConfig.shared);
          var L2 = this.tooltipUtil.hasMarkers(a2), P2 = this.tooltipUtil.getElBars();
          if (S2.config.legend.tooltipHoverFormatter) {
            var M2 = S2.config.legend.tooltipHoverFormatter, I2 = Array.from(this.legendLabels);
            I2.forEach(function(t4) {
              var e2 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e2);
            });
            for (var T2 = 0; T2 < I2.length; T2++) {
              var z2 = I2[T2], X2 = parseInt(z2.getAttribute("i"), 10), E2 = decodeURIComponent(z2.getAttribute("data:default-text")), Y2 = M2(E2, { seriesIndex: A2 ? X2 : a2, dataPointIndex: s2, w: S2 });
              if (A2)
                z2.innerHTML = S2.globals.collapsedSeriesIndices.indexOf(X2) < 0 ? Y2 : E2;
              else if (z2.innerHTML = X2 === a2 ? Y2 : E2, a2 === X2)
                break;
            }
          }
          var F2 = e(e({ ttItems: r2, i: a2, j: s2 }, void 0 !== (null === (o2 = S2.globals.seriesRange) || void 0 === o2 || null === (n2 = o2[a2]) || void 0 === n2 || null === (l2 = n2[s2]) || void 0 === l2 || null === (h2 = l2.y[0]) || void 0 === h2 ? void 0 : h2.y1) && { y1: null === (c2 = S2.globals.seriesRange) || void 0 === c2 || null === (d2 = c2[a2]) || void 0 === d2 || null === (g2 = d2[s2]) || void 0 === g2 || null === (u2 = g2.y[0]) || void 0 === u2 ? void 0 : u2.y1 }), void 0 !== (null === (p2 = S2.globals.seriesRange) || void 0 === p2 || null === (f2 = p2[a2]) || void 0 === f2 || null === (x2 = f2[s2]) || void 0 === x2 || null === (b2 = x2.y[0]) || void 0 === b2 ? void 0 : b2.y2) && { y2: null === (v2 = S2.globals.seriesRange) || void 0 === v2 || null === (y2 = v2[a2]) || void 0 === y2 || null === (w2 = y2[s2]) || void 0 === w2 || null === (k2 = w2.y[0]) || void 0 === k2 ? void 0 : k2.y2 });
          if (A2) {
            if (C2.tooltipLabels.drawSeriesTexts(e(e({}, F2), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), L2)
              S2.globals.markers.largestSize > 0 ? C2.marker.enlargePoints(s2) : C2.tooltipPosition.moveDynamicPointsOnHover(s2);
            else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P2), this.barSeriesHeight > 0)) {
              var R2 = new m2(this.ctx), H2 = S2.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(s2, "']"));
              this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s2, a2);
              for (var D2 = 0; D2 < H2.length; D2++)
                R2.pathMouseEnter(H2[D2]);
            }
          } else
            C2.tooltipLabels.drawSeriesTexts(e({ shared: false }, F2)), this.tooltipUtil.hasBars() && C2.tooltipPosition.moveStickyTooltipOverBars(s2, a2), L2 && C2.tooltipPosition.moveMarkers(a2, s2);
        } }]), t2;
      }();
      var vt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.barCtx = e2, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
        }
        return r(t2, [{ key: "handleBarDataLabels", value: function(t3) {
          var e2, i2, a2 = t3.x, s2 = t3.y, r2 = t3.y1, o2 = t3.y2, n2 = t3.i, l2 = t3.j, h2 = t3.realIndex, c2 = t3.columnGroupIndex, d2 = t3.series, g2 = t3.barHeight, u2 = t3.barWidth, p2 = t3.barXPosition, f2 = t3.barYPosition, x2 = t3.visibleSeries, b2 = t3.renderedPath, v2 = this.w, y2 = new m2(this.barCtx.ctx), w2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h2] : this.barCtx.strokeWidth;
          v2.globals.isXNumeric && !v2.globals.isBarHorizontal ? (e2 = a2 + parseFloat(u2 * (x2 + 1)), i2 = s2 + parseFloat(g2 * (x2 + 1)) - w2) : (e2 = a2 + parseFloat(u2 * x2), i2 = s2 + parseFloat(g2 * x2));
          var k2, A2 = null, S2 = a2, C2 = s2, L2 = {}, P2 = v2.config.dataLabels, M2 = this.barCtx.barOptions.dataLabels, I2 = this.barCtx.barOptions.dataLabels.total;
          void 0 !== f2 && this.barCtx.isRangeBar && (i2 = f2, C2 = f2), void 0 !== p2 && this.barCtx.isVerticalGroupedRangeBar && (e2 = p2, S2 = p2);
          var T2 = P2.offsetX, z2 = P2.offsetY, X2 = { width: 0, height: 0 };
          if (v2.config.dataLabels.enabled) {
            var E2 = this.barCtx.series[n2][l2];
            X2 = y2.getTextRects(v2.globals.yLabelFormatters[0](E2), parseFloat(P2.style.fontSize));
          }
          var Y2 = { x: a2, y: s2, i: n2, j: l2, realIndex: h2, columnGroupIndex: c2, renderedPath: b2, bcx: e2, bcy: i2, barHeight: g2, barWidth: u2, textRects: X2, strokeWidth: w2, dataLabelsX: S2, dataLabelsY: C2, dataLabelsConfig: P2, barDataLabelsConfig: M2, barTotalDataLabelsConfig: I2, offX: T2, offY: z2 };
          return L2 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(Y2) : this.calculateColumnsDataLabelsPosition(Y2), b2.attr({ cy: L2.bcy, cx: L2.bcx, j: l2, val: d2[n2][l2], barHeight: g2, barWidth: u2 }), k2 = this.drawCalculatedDataLabels({ x: L2.dataLabelsX, y: L2.dataLabelsY, val: this.barCtx.isRangeBar ? [r2, o2] : d2[n2][l2], i: h2, j: l2, barWidth: u2, barHeight: g2, textRects: X2, dataLabelsConfig: P2 }), v2.config.chart.stacked && I2.enabled && (A2 = this.drawTotalDataLabels({ x: L2.totalDataLabelsX, y: L2.totalDataLabelsY, barWidth: u2, barHeight: g2, realIndex: h2, textAnchor: L2.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: h2, j: l2 }), dataLabelsConfig: P2, barTotalDataLabelsConfig: I2 })), { dataLabels: k2, totalDataLabels: A2 };
        } }, { key: "getStackedTotalDataLabel", value: function(t3) {
          var i2 = t3.realIndex, a2 = t3.j, s2 = this.w, r2 = this.barCtx.stackedSeriesTotals[a2];
          return this.totalFormatter && (r2 = this.totalFormatter(r2, e(e({}, s2), {}, { seriesIndex: i2, dataPointIndex: a2, w: s2 }))), r2;
        } }, { key: "calculateColumnsDataLabelsPosition", value: function(t3) {
          var e2, i2, a2 = this.w, s2 = t3.i, r2 = t3.j, o2 = t3.realIndex, n2 = t3.columnGroupIndex, l2 = t3.y, h2 = t3.bcx, c2 = t3.barWidth, d2 = t3.barHeight, g2 = t3.textRects, u2 = t3.dataLabelsX, p2 = t3.dataLabelsY, f2 = t3.dataLabelsConfig, x2 = t3.barDataLabelsConfig, b2 = t3.barTotalDataLabelsConfig, v2 = t3.strokeWidth, y2 = t3.offX, w2 = t3.offY, k2 = h2;
          d2 = Math.abs(d2);
          var A2 = "vertical" === a2.config.plotOptions.bar.dataLabels.orientation, S2 = this.barCtx.barHelpers.getZeroValueEncounters({ i: s2, j: r2 }).zeroEncounters;
          h2 = h2 - v2 / 2 + n2 * c2;
          var C2 = a2.globals.gridWidth / a2.globals.dataPoints;
          if (this.barCtx.isVerticalGroupedRangeBar ? u2 += c2 / 2 : (u2 = a2.globals.isXNumeric ? h2 - c2 / 2 + y2 : h2 - C2 + c2 / 2 + y2, S2 > 0 && a2.config.plotOptions.bar.hideZeroBarsWhenGrouped && (u2 -= c2 * S2)), A2) {
            u2 = u2 + g2.height / 2 - v2 / 2 - 2;
          }
          var L2 = this.barCtx.series[s2][r2] < 0, P2 = l2;
          switch (this.barCtx.isReversed && (P2 = l2 + (L2 ? d2 : -d2), l2 -= d2), x2.position) {
            case "center":
              p2 = A2 ? L2 ? P2 - d2 / 2 + w2 : P2 + d2 / 2 - w2 : L2 ? P2 - d2 / 2 + g2.height / 2 + w2 : P2 + d2 / 2 + g2.height / 2 - w2;
              break;
            case "bottom":
              p2 = A2 ? L2 ? P2 - d2 + w2 : P2 + d2 - w2 : L2 ? P2 - d2 + g2.height + v2 + w2 : P2 + d2 - g2.height / 2 + v2 - w2;
              break;
            case "top":
              p2 = A2 ? L2 ? P2 + w2 : P2 - w2 : L2 ? P2 - g2.height / 2 - w2 : P2 + g2.height + w2;
          }
          if (this.barCtx.lastActiveBarSerieIndex === o2 && b2.enabled) {
            var M2 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: o2, j: r2 }), f2.fontSize);
            e2 = L2 ? P2 - M2.height / 2 - w2 - b2.offsetY + 18 : P2 + M2.height + w2 + b2.offsetY - 18, i2 = k2 + (a2.globals.isXNumeric ? c2 * (a2.globals.barGroups.length - 1) - c2 / 2 : -(c2 * a2.globals.barGroups.length - c2 / 2 - 2 * v2)) + b2.offsetX;
          }
          return a2.config.chart.stacked || (p2 < 0 ? p2 = 0 + v2 : p2 + g2.height / 3 > a2.globals.gridHeight && (p2 = a2.globals.gridHeight - v2)), { bcx: h2, bcy: l2, dataLabelsX: u2, dataLabelsY: p2, totalDataLabelsX: i2, totalDataLabelsY: e2, totalDataLabelsAnchor: "middle" };
        } }, { key: "calculateBarsDataLabelsPosition", value: function(t3) {
          var e2 = this.w, i2 = t3.x, a2 = t3.i, s2 = t3.j, r2 = t3.realIndex, o2 = t3.columnGroupIndex, n2 = t3.bcy, l2 = t3.barHeight, h2 = t3.barWidth, c2 = t3.textRects, d2 = t3.dataLabelsX, g2 = t3.strokeWidth, u2 = t3.dataLabelsConfig, p2 = t3.barDataLabelsConfig, f2 = t3.barTotalDataLabelsConfig, x2 = t3.offX, b2 = t3.offY, v2 = e2.globals.gridHeight / e2.globals.dataPoints;
          h2 = Math.abs(h2);
          var y2, w2, k2 = (n2 += o2 * l2) - (this.barCtx.isRangeBar ? 0 : v2) + l2 / 2 + c2.height / 2 + b2 - 3, A2 = "start", S2 = this.barCtx.series[a2][s2] < 0, C2 = i2;
          switch (this.barCtx.isReversed && (C2 = i2 + (S2 ? -h2 : h2), i2 = e2.globals.gridWidth - h2, A2 = S2 ? "start" : "end"), p2.position) {
            case "center":
              d2 = S2 ? C2 + h2 / 2 - x2 : Math.max(c2.width / 2, C2 - h2 / 2) + x2;
              break;
            case "bottom":
              d2 = S2 ? C2 + h2 - g2 - Math.round(c2.width / 2) - x2 : C2 - h2 + g2 + Math.round(c2.width / 2) + x2;
              break;
            case "top":
              d2 = S2 ? C2 - g2 + Math.round(c2.width / 2) - x2 : C2 - g2 - Math.round(c2.width / 2) + x2;
          }
          if (this.barCtx.lastActiveBarSerieIndex === r2 && f2.enabled) {
            var L2 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r2, j: s2 }), u2.fontSize);
            S2 ? (y2 = C2 - g2 - x2 - f2.offsetX, A2 = "end") : y2 = C2 + x2 + f2.offsetX + (this.barCtx.isReversed ? -(h2 + g2) : g2), w2 = k2 - c2.height / 2 + L2.height / 2 + f2.offsetY + g2;
          }
          return e2.config.chart.stacked || (d2 < 0 ? d2 = d2 + c2.width + g2 : d2 + c2.width / 2 > e2.globals.gridWidth && (d2 = e2.globals.gridWidth - c2.width - g2)), { bcx: i2, bcy: n2, dataLabelsX: d2, dataLabelsY: k2, totalDataLabelsX: y2, totalDataLabelsY: w2, totalDataLabelsAnchor: A2 };
        } }, { key: "drawCalculatedDataLabels", value: function(t3) {
          var i2 = t3.x, a2 = t3.y, s2 = t3.val, r2 = t3.i, o2 = t3.j, n2 = t3.textRects, l2 = t3.barHeight, h2 = t3.barWidth, c2 = t3.dataLabelsConfig, d2 = this.w, g2 = "rotate(0)";
          "vertical" === d2.config.plotOptions.bar.dataLabels.orientation && (g2 = "rotate(-90, ".concat(i2, ", ").concat(a2, ")"));
          var u2 = new N(this.barCtx.ctx), p2 = new m2(this.barCtx.ctx), f2 = c2.formatter, x2 = null, b2 = d2.globals.collapsedSeriesIndices.indexOf(r2) > -1;
          if (c2.enabled && !b2) {
            x2 = p2.group({ class: "apexcharts-data-labels", transform: g2 });
            var v2 = "";
            void 0 !== s2 && (v2 = f2(s2, e(e({}, d2), {}, { seriesIndex: r2, dataPointIndex: o2, w: d2 }))), !s2 && d2.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v2 = "");
            var y2 = d2.globals.series[r2][o2] < 0, w2 = d2.config.plotOptions.bar.dataLabels.position;
            if ("vertical" === d2.config.plotOptions.bar.dataLabels.orientation && ("top" === w2 && (c2.textAnchor = y2 ? "end" : "start"), "center" === w2 && (c2.textAnchor = "middle"), "bottom" === w2 && (c2.textAnchor = y2 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels)
              h2 < p2.getTextRects(v2, parseFloat(c2.style.fontSize)).width && (v2 = "");
            d2.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n2.width / 1.6 > Math.abs(h2) && (v2 = "") : n2.height / 1.6 > Math.abs(l2) && (v2 = ""));
            var k2 = e({}, c2);
            this.barCtx.isHorizontal && s2 < 0 && ("start" === c2.textAnchor ? k2.textAnchor = "end" : "end" === c2.textAnchor && (k2.textAnchor = "start")), u2.plotDataLabelsText({ x: i2, y: a2, text: v2, i: r2, j: o2, parent: x2, dataLabelsConfig: k2, alwaysDrawDataLabel: true, offsetCorrection: true });
          }
          return x2;
        } }, { key: "drawTotalDataLabels", value: function(t3) {
          var e2, i2 = t3.x, a2 = t3.y, s2 = t3.val, r2 = t3.barWidth, o2 = t3.barHeight, n2 = t3.realIndex, l2 = t3.textAnchor, h2 = t3.barTotalDataLabelsConfig, c2 = this.w, d2 = new m2(this.barCtx.ctx);
          return h2.enabled && void 0 !== i2 && void 0 !== a2 && this.barCtx.lastActiveBarSerieIndex === n2 && (e2 = d2.drawText({ x: i2 - (!c2.globals.isBarHorizontal && c2.globals.barGroups.length ? r2 * (c2.globals.barGroups.length - 1) / 2 : 0), y: a2 - (c2.globals.isBarHorizontal && c2.globals.barGroups.length ? o2 * (c2.globals.barGroups.length - 1) / 2 : 0), foreColor: h2.style.color, text: s2, textAnchor: l2, fontFamily: h2.style.fontFamily, fontSize: h2.style.fontSize, fontWeight: h2.style.fontWeight })), e2;
        } }]), t2;
      }();
      var mt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.barCtx = e2;
        }
        return r(t2, [{ key: "initVariables", value: function(t3) {
          var e2 = this.w;
          this.barCtx.series = t3, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
          for (var i2 = 0; i2 < t3.length; i2++)
            if (t3[i2].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t3[i2].length), e2.globals.isXNumeric)
              for (var a2 = 0; a2 < t3[i2].length; a2++)
                e2.globals.seriesX[i2][a2] > e2.globals.minX && e2.globals.seriesX[i2][a2] < e2.globals.maxX && this.barCtx.visibleItems++;
            else
              this.barCtx.visibleItems = e2.globals.dataPoints;
          0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e2.globals.comboCharts || this.checkZeroSeries({ series: t3 });
        } }, { key: "initialPositions", value: function() {
          var t3, e2, i2, a2, s2, r2, o2, n2, l2 = this.w, h2 = l2.globals.dataPoints;
          this.barCtx.isRangeBar && (h2 = l2.globals.labels.length);
          var c2 = this.barCtx.seriesLen;
          if (l2.config.plotOptions.bar.rangeBarGroupRows && (c2 = 1), this.barCtx.isHorizontal)
            s2 = (i2 = l2.globals.gridHeight / h2) / c2, l2.globals.isXNumeric && (s2 = (i2 = l2.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s2 = s2 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (s2 = parseInt(this.barCtx.barOptions.barHeight, 10)), n2 = this.barCtx.baseLineInvertedY + l2.globals.padHorizontal + (this.barCtx.isReversed ? l2.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n2 = l2.globals.gridWidth / 2), e2 = (i2 - s2 * this.barCtx.seriesLen) / 2;
          else {
            if (a2 = l2.globals.gridWidth / this.barCtx.visibleItems, l2.config.xaxis.convertedCatToNumeric && (a2 = l2.globals.gridWidth / l2.globals.dataPoints), r2 = a2 / c2 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l2.globals.isXNumeric) {
              var d2 = this.barCtx.xRatio;
              l2.globals.minXDiff && 0.5 !== l2.globals.minXDiff && l2.globals.minXDiff / d2 > 0 && (a2 = l2.globals.minXDiff / d2), (r2 = a2 / c2 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r2 = 1);
            }
            -1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (r2 = parseInt(this.barCtx.barOptions.columnWidth, 10)), o2 = l2.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? l2.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), t3 = l2.globals.padHorizontal + (a2 - r2 * this.barCtx.seriesLen) / 2;
          }
          return l2.globals.barHeight = s2, l2.globals.barWidth = r2, { x: t3, y: e2, yDivision: i2, xDivision: a2, barHeight: s2, barWidth: r2, zeroH: o2, zeroW: n2 };
        } }, { key: "initializeStackedPrevVars", value: function(t3) {
          t3.w.globals.seriesGroups.forEach(function(e2) {
            t3[e2] || (t3[e2] = {}), t3[e2].prevY = [], t3[e2].prevX = [], t3[e2].prevYF = [], t3[e2].prevXF = [], t3[e2].prevYVal = [], t3[e2].prevXVal = [];
          });
        } }, { key: "initializeStackedXYVars", value: function(t3) {
          t3.w.globals.seriesGroups.forEach(function(e2) {
            t3[e2] || (t3[e2] = {}), t3[e2].xArrj = [], t3[e2].xArrjF = [], t3[e2].xArrjVal = [], t3[e2].yArrj = [], t3[e2].yArrjF = [], t3[e2].yArrjVal = [];
          });
        } }, { key: "getPathFillColor", value: function(t3, e2, i2, a2) {
          var s2, r2, o2, n2, l2 = this.w, h2 = new H(this.barCtx.ctx), c2 = null, d2 = this.barCtx.barOptions.distributed ? i2 : e2;
          this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a3) {
            t3[e2][i2] >= a3.from && t3[e2][i2] <= a3.to && (c2 = a3.color);
          });
          return l2.config.series[e2].data[i2] && l2.config.series[e2].data[i2].fillColor && (c2 = l2.config.series[e2].data[i2].fillColor), h2.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? d2 : a2, dataPointIndex: i2, color: c2, value: t3[e2][i2], fillConfig: null === (s2 = l2.config.series[e2].data[i2]) || void 0 === s2 ? void 0 : s2.fill, fillType: null !== (r2 = l2.config.series[e2].data[i2]) && void 0 !== r2 && null !== (o2 = r2.fill) && void 0 !== o2 && o2.type ? null === (n2 = l2.config.series[e2].data[i2]) || void 0 === n2 ? void 0 : n2.fill.type : Array.isArray(l2.config.fill.type) ? l2.config.fill.type[e2] : l2.config.fill.type });
        } }, { key: "getStrokeWidth", value: function(t3, e2, i2) {
          var a2 = 0, s2 = this.w;
          return void 0 === this.barCtx.series[t3][e2] || null === this.barCtx.series[t3][e2] ? this.barCtx.isNullValue = true : this.barCtx.isNullValue = false, s2.config.stroke.show && (this.barCtx.isNullValue || (a2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i2] : this.barCtx.strokeWidth)), a2;
        } }, { key: "shouldApplyRadius", value: function(t3) {
          var e2 = this.w, i2 = false;
          return e2.config.plotOptions.bar.borderRadius > 0 && (e2.config.chart.stacked && "last" === e2.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t3 && (i2 = true) : i2 = true), i2;
        } }, { key: "barBackground", value: function(t3) {
          var e2 = t3.j, i2 = t3.i, a2 = t3.x1, s2 = t3.x2, r2 = t3.y1, o2 = t3.y2, n2 = t3.elSeries, l2 = this.w, h2 = new m2(this.barCtx.ctx), c2 = new W(this.barCtx.ctx).getActiveConfigSeriesIndex();
          if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c2 === i2) {
            e2 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e2 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
            var d2 = this.barCtx.barOptions.colors.backgroundBarColors[e2], g2 = h2.drawRect(void 0 !== a2 ? a2 : 0, void 0 !== r2 ? r2 : 0, void 0 !== s2 ? s2 : l2.globals.gridWidth, void 0 !== o2 ? o2 : l2.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d2, this.barCtx.barOptions.colors.backgroundBarOpacity);
            n2.add(g2), g2.node.classList.add("apexcharts-backgroundBar");
          }
        } }, { key: "getColumnPaths", value: function(t3) {
          var e2, i2 = t3.barWidth, a2 = t3.barXPosition, s2 = t3.y1, r2 = t3.y2, o2 = t3.strokeWidth, n2 = t3.seriesGroup, l2 = t3.realIndex, h2 = t3.i, c2 = t3.j, d2 = t3.w, g2 = new m2(this.barCtx.ctx);
          (o2 = Array.isArray(o2) ? o2[l2] : o2) || (o2 = 0);
          var u2 = i2, p2 = a2;
          null !== (e2 = d2.config.series[l2].data[c2]) && void 0 !== e2 && e2.columnWidthOffset && (p2 = a2 - d2.config.series[l2].data[c2].columnWidthOffset / 2, u2 = i2 + d2.config.series[l2].data[c2].columnWidthOffset);
          var f2 = o2 / 2, x2 = p2 + f2, b2 = p2 + u2 - f2;
          s2 += 1e-3 - f2, r2 += 1e-3 + f2;
          var v2 = g2.move(x2, s2), y2 = g2.move(x2, s2), w2 = g2.line(b2, s2);
          if (d2.globals.previousPaths.length > 0 && (y2 = this.barCtx.getPreviousPath(l2, c2, false)), v2 = v2 + g2.line(x2, r2) + g2.line(b2, r2) + g2.line(b2, s2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), y2 = y2 + g2.line(x2, s2) + w2 + w2 + w2 + w2 + w2 + g2.line(x2, s2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l2) && (v2 = g2.roundPathCorners(v2, d2.config.plotOptions.bar.borderRadius)), d2.config.chart.stacked) {
            var k2 = this.barCtx;
            (k2 = this.barCtx[n2]).yArrj.push(r2 - f2), k2.yArrjF.push(Math.abs(s2 - r2 + o2)), k2.yArrjVal.push(this.barCtx.series[h2][c2]);
          }
          return { pathTo: v2, pathFrom: y2 };
        } }, { key: "getBarpaths", value: function(t3) {
          var e2, i2 = t3.barYPosition, a2 = t3.barHeight, s2 = t3.x1, r2 = t3.x2, o2 = t3.strokeWidth, n2 = t3.seriesGroup, l2 = t3.realIndex, h2 = t3.i, c2 = t3.j, d2 = t3.w, g2 = new m2(this.barCtx.ctx);
          (o2 = Array.isArray(o2) ? o2[l2] : o2) || (o2 = 0);
          var u2 = i2, p2 = a2;
          null !== (e2 = d2.config.series[l2].data[c2]) && void 0 !== e2 && e2.barHeightOffset && (u2 = i2 - d2.config.series[l2].data[c2].barHeightOffset / 2, p2 = a2 + d2.config.series[l2].data[c2].barHeightOffset);
          var f2 = o2 / 2, x2 = u2 + f2, b2 = u2 + p2 - f2;
          s2 += 1e-3 - f2, r2 += 1e-3 + f2;
          var v2 = g2.move(s2, x2), y2 = g2.move(s2, x2);
          d2.globals.previousPaths.length > 0 && (y2 = this.barCtx.getPreviousPath(l2, c2, false));
          var w2 = g2.line(s2, b2);
          if (v2 = v2 + g2.line(r2, x2) + g2.line(r2, b2) + w2 + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), y2 = y2 + g2.line(s2, x2) + w2 + w2 + w2 + w2 + w2 + g2.line(s2, x2) + ("around" === d2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l2) && (v2 = g2.roundPathCorners(v2, d2.config.plotOptions.bar.borderRadius)), d2.config.chart.stacked) {
            var k2 = this.barCtx;
            (k2 = this.barCtx[n2]).xArrj.push(r2 + f2), k2.xArrjF.push(Math.abs(s2 - r2)), k2.xArrjVal.push(this.barCtx.series[h2][c2]);
          }
          return { pathTo: v2, pathFrom: y2 };
        } }, { key: "checkZeroSeries", value: function(t3) {
          for (var e2 = t3.series, i2 = this.w, a2 = 0; a2 < e2.length; a2++) {
            for (var s2 = 0, r2 = 0; r2 < e2[i2.globals.maxValsInArrayIndex].length; r2++)
              s2 += e2[a2][r2];
            0 === s2 && this.barCtx.zeroSerieses.push(a2);
          }
        } }, { key: "getXForValue", value: function(t3, e2) {
          var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e2 : null;
          return null != t3 && (i2 = e2 + t3 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t3 / this.barCtx.invertedYRatio : 0)), i2;
        } }, { key: "getYForValue", value: function(t3, e2, i2) {
          var a2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e2 : null;
          return null != t3 && (a2 = e2 - t3 / this.barCtx.yRatio[i2] + 2 * (this.barCtx.isReversed ? t3 / this.barCtx.yRatio[i2] : 0)), a2;
        } }, { key: "getGoalValues", value: function(t3, i2, a2, s2, r2, n2) {
          var l2 = this, h2 = this.w, c2 = [], d2 = function(e2, s3) {
            var r3;
            c2.push((o(r3 = {}, t3, "x" === t3 ? l2.getXForValue(e2, i2, false) : l2.getYForValue(e2, a2, n2, false)), o(r3, "attrs", s3), r3));
          };
          if (h2.globals.seriesGoals[s2] && h2.globals.seriesGoals[s2][r2] && Array.isArray(h2.globals.seriesGoals[s2][r2]) && h2.globals.seriesGoals[s2][r2].forEach(function(t4) {
            d2(t4.value, t4);
          }), this.barCtx.barOptions.isDumbbell && h2.globals.seriesRange.length) {
            var g2 = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : h2.globals.colors, u2 = { strokeHeight: "x" === t3 ? 0 : h2.globals.markers.size[s2], strokeWidth: "x" === t3 ? h2.globals.markers.size[s2] : 0, strokeDashArray: 0, strokeLineCap: "round", strokeColor: Array.isArray(g2[s2]) ? g2[s2][0] : g2[s2] };
            d2(h2.globals.seriesRangeStart[s2][r2], u2), d2(h2.globals.seriesRangeEnd[s2][r2], e(e({}, u2), {}, { strokeColor: Array.isArray(g2[s2]) ? g2[s2][1] : g2[s2] }));
          }
          return c2;
        } }, { key: "drawGoalLine", value: function(t3) {
          var e2 = t3.barXPosition, i2 = t3.barYPosition, a2 = t3.goalX, s2 = t3.goalY, r2 = t3.barWidth, o2 = t3.barHeight, n2 = new m2(this.barCtx.ctx), l2 = n2.group({ className: "apexcharts-bar-goals-groups" });
          l2.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({ el: l2.node }), l2.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
          var h2 = null;
          return this.barCtx.isHorizontal ? Array.isArray(a2) && a2.forEach(function(t4) {
            if (t4.x >= -1 && t4.x <= n2.w.globals.gridWidth + 1) {
              var e3 = void 0 !== t4.attrs.strokeHeight ? t4.attrs.strokeHeight : o2 / 2, a3 = i2 + e3 + o2 / 2;
              h2 = n2.drawLine(t4.x, a3 - 2 * e3, t4.x, a3, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeWidth ? t4.attrs.strokeWidth : 2, t4.attrs.strokeLineCap), l2.add(h2);
            }
          }) : Array.isArray(s2) && s2.forEach(function(t4) {
            if (t4.y >= -1 && t4.y <= n2.w.globals.gridHeight + 1) {
              var i3 = void 0 !== t4.attrs.strokeWidth ? t4.attrs.strokeWidth : r2 / 2, a3 = e2 + i3 + r2 / 2;
              h2 = n2.drawLine(a3 - 2 * i3, t4.y, a3, t4.y, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeHeight ? t4.attrs.strokeHeight : 2, t4.attrs.strokeLineCap), l2.add(h2);
            }
          }), l2;
        } }, { key: "drawBarShadow", value: function(t3) {
          var e2 = t3.prevPaths, i2 = t3.currPaths, a2 = t3.color, s2 = this.w, r2 = e2.x, o2 = e2.x1, n2 = e2.barYPosition, l2 = i2.x, h2 = i2.x1, c2 = i2.barYPosition, d2 = n2 + i2.barHeight, g2 = new m2(this.barCtx.ctx), u2 = new x(), p2 = g2.move(o2, d2) + g2.line(r2, d2) + g2.line(l2, c2) + g2.line(h2, c2) + g2.line(o2, d2) + ("around" === s2.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z");
          return g2.drawPath({ d: p2, fill: u2.shadeColor(0.5, x.rgb2hex(a2)), stroke: "none", strokeWidth: 0, fillOpacity: 1, classes: "apexcharts-bar-shadows" });
        } }, { key: "getZeroValueEncounters", value: function(t3) {
          var e2, i2 = t3.i, a2 = t3.j, s2 = this.w, r2 = 0, o2 = 0;
          return (s2.config.plotOptions.bar.horizontal ? s2.globals.series.map(function(t4, e3) {
            return e3;
          }) : (null === (e2 = s2.globals.columnSeries) || void 0 === e2 ? void 0 : e2.i.map(function(t4) {
            return t4;
          })) || []).forEach(function(t4) {
            var e3 = s2.globals.seriesPercent[t4][a2];
            e3 && r2++, t4 < i2 && 0 === e3 && o2++;
          }), { nonZeroColumns: r2, zeroEncounters: o2 };
        } }, { key: "getGroupIndex", value: function(t3) {
          var e2 = this.w, i2 = e2.globals.seriesGroups.findIndex(function(i3) {
            return i3.indexOf(e2.globals.seriesNames[t3]) > -1;
          }), a2 = this.barCtx.columnGroupIndices, s2 = a2.indexOf(i2);
          return s2 < 0 && (a2.push(i2), s2 = a2.length - 1), { groupIndex: i2, columnGroupIndex: s2 };
        } }]), t2;
      }();
      var yt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var s2 = this.w;
          this.barOptions = s2.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s2.config.stroke.width, this.isNullValue = false, this.isRangeBar = s2.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s2.globals.isBarHorizontal && s2.globals.seriesRange.length && s2.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = i2, null !== this.xyRatios && (this.xRatio = i2.xRatio, this.yRatio = i2.yRatio, this.invertedXRatio = i2.invertedXRatio, this.invertedYRatio = i2.invertedYRatio, this.baseLineY = i2.baseLineY, this.baseLineInvertedY = i2.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];
          var r2 = new W(this.ctx);
          this.lastActiveBarSerieIndex = r2.getActiveConfigSeriesIndex("desc", ["bar", "column"]), this.columnGroupIndices = [];
          var o2 = r2.getBarSeriesIndices(), n2 = new y(this.ctx);
          this.stackedSeriesTotals = n2.getStackedSeriesTotals(this.w.config.series.map(function(t3, e3) {
            return -1 === o2.indexOf(e3) ? e3 : -1;
          }).filter(function(t3) {
            return -1 !== t3;
          })), this.barHelpers = new mt(this);
        }
        return r(t2, [{ key: "draw", value: function(t3, i2) {
          var a2 = this.w, s2 = new m2(this.ctx), r2 = new y(this.ctx, a2);
          t3 = r2.getLogSeries(t3), this.series = t3, this.yRatio = r2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
          var o2 = s2.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
          a2.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts");
          for (var n2 = 0, l2 = 0; n2 < t3.length; n2++, l2++) {
            var h2, c2, d2, g2, u2 = void 0, p2 = void 0, f2 = [], b2 = [], v2 = a2.globals.comboCharts ? i2[n2] : n2, w2 = this.barHelpers.getGroupIndex(v2).columnGroupIndex, k2 = s2.group({ class: "apexcharts-series", rel: n2 + 1, seriesName: x.escapeString(a2.globals.seriesNames[v2]), "data:realIndex": v2 });
            this.ctx.series.addCollapsedClassToSeries(k2, v2), t3[n2].length > 0 && (this.visibleI = this.visibleI + 1);
            var A2 = 0, S2 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = a2.globals.seriesYAxisReverseMap[v2], this.translationsIndex = v2);
            var C2 = this.translationsIndex;
            this.isReversed = a2.config.yaxis[this.yaxisIndex] && a2.config.yaxis[this.yaxisIndex].reversed;
            var L2 = this.barHelpers.initialPositions();
            p2 = L2.y, A2 = L2.barHeight, c2 = L2.yDivision, g2 = L2.zeroW, u2 = L2.x, S2 = L2.barWidth, h2 = L2.xDivision, d2 = L2.zeroH, this.horizontal || b2.push(u2 + S2 / 2);
            var P2 = s2.group({ class: "apexcharts-datalabels", "data:realIndex": v2 });
            a2.globals.delayedElements.push({ el: P2.node }), P2.node.classList.add("apexcharts-element-hidden");
            var M2 = s2.group({ class: "apexcharts-bar-goals-markers" }), I2 = s2.group({ class: "apexcharts-bar-shadows" });
            a2.globals.delayedElements.push({ el: I2.node }), I2.node.classList.add("apexcharts-element-hidden");
            for (var T2 = 0; T2 < t3[n2].length; T2++) {
              var z2 = this.barHelpers.getStrokeWidth(n2, T2, v2), X2 = null, E2 = { indexes: { i: n2, j: T2, realIndex: v2, translationsIndex: C2, bc: l2 }, x: u2, y: p2, strokeWidth: z2, elSeries: k2 };
              this.isHorizontal ? (X2 = this.drawBarPaths(e(e({}, E2), {}, { barHeight: A2, zeroW: g2, yDivision: c2 })), S2 = this.series[n2][T2] / this.invertedYRatio) : (X2 = this.drawColumnPaths(e(e({}, E2), {}, { xDivision: h2, barWidth: S2, zeroH: d2 })), A2 = this.series[n2][T2] / this.yRatio[C2]);
              var Y2 = this.barHelpers.getPathFillColor(t3, n2, T2, v2);
              if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && T2 > 0) {
                var F2 = this.barHelpers.drawBarShadow({ color: "string" == typeof Y2 && -1 === (null == Y2 ? void 0 : Y2.indexOf("url")) ? Y2 : x.hexToRgba(a2.globals.colors[n2]), prevPaths: this.pathArr[this.pathArr.length - 1], currPaths: X2 });
                F2 && I2.add(F2);
              }
              this.pathArr.push(X2);
              var R2 = this.barHelpers.drawGoalLine({ barXPosition: X2.barXPosition, barYPosition: X2.barYPosition, goalX: X2.goalX, goalY: X2.goalY, barHeight: A2, barWidth: S2 });
              R2 && M2.add(R2), p2 = X2.y, u2 = X2.x, T2 > 0 && b2.push(u2 + S2 / 2), f2.push(p2), this.renderSeries({ realIndex: v2, pathFill: Y2, j: T2, i: n2, columnGroupIndex: w2, pathFrom: X2.pathFrom, pathTo: X2.pathTo, strokeWidth: z2, elSeries: k2, x: u2, y: p2, series: t3, barHeight: X2.barHeight ? X2.barHeight : A2, barWidth: X2.barWidth ? X2.barWidth : S2, elDataLabelsWrap: P2, elGoalsMarkers: M2, elBarShadows: I2, visibleSeries: this.visibleI, type: "bar" });
            }
            a2.globals.seriesXvalues[v2] = b2, a2.globals.seriesYvalues[v2] = f2, o2.add(k2);
          }
          return o2;
        } }, { key: "renderSeries", value: function(t3) {
          var e2 = t3.realIndex, i2 = t3.pathFill, a2 = t3.lineFill, s2 = t3.j, r2 = t3.i, o2 = t3.columnGroupIndex, n2 = t3.pathFrom, l2 = t3.pathTo, h2 = t3.strokeWidth, c2 = t3.elSeries, d2 = t3.x, g2 = t3.y, u2 = t3.y1, p2 = t3.y2, f2 = t3.series, x2 = t3.barHeight, b2 = t3.barWidth, y2 = t3.barXPosition, w2 = t3.barYPosition, k2 = t3.elDataLabelsWrap, A2 = t3.elGoalsMarkers, S2 = t3.elBarShadows, C2 = t3.visibleSeries, L2 = t3.type, P2 = this.w, M2 = new m2(this.ctx);
          if (!a2) {
            var I2 = "function" == typeof P2.globals.stroke.colors[e2] ? function(t4) {
              var e3, i3 = P2.config.stroke.colors;
              return Array.isArray(i3) && i3.length > 0 && ((e3 = i3[t4]) || (e3 = ""), "function" == typeof e3) ? e3({ value: P2.globals.series[t4][s2], dataPointIndex: s2, w: P2 }) : e3;
            }(e2) : P2.globals.stroke.colors[e2];
            a2 = this.barOptions.distributed ? P2.globals.stroke.colors[s2] : I2;
          }
          P2.config.series[r2].data[s2] && P2.config.series[r2].data[s2].strokeColor && (a2 = P2.config.series[r2].data[s2].strokeColor), this.isNullValue && (i2 = "none");
          var T2 = s2 / P2.config.chart.animations.animateGradually.delay * (P2.config.chart.animations.speed / P2.globals.dataPoints) / 2.4, z2 = M2.renderPaths({ i: r2, j: s2, realIndex: e2, pathFrom: n2, pathTo: l2, stroke: a2, strokeWidth: h2, strokeLineCap: P2.config.stroke.lineCap, fill: i2, animationDelay: T2, initialSpeed: P2.config.chart.animations.speed, dataChangeSpeed: P2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(L2, "-area") });
          z2.attr("clip-path", "url(#gridRectMask".concat(P2.globals.cuid, ")"));
          var X2 = P2.config.forecastDataPoints;
          X2.count > 0 && s2 >= P2.globals.dataPoints - X2.count && (z2.node.setAttribute("stroke-dasharray", X2.dashArray), z2.node.setAttribute("stroke-width", X2.strokeWidth), z2.node.setAttribute("fill-opacity", X2.fillOpacity)), void 0 !== u2 && void 0 !== p2 && (z2.attr("data-range-y1", u2), z2.attr("data-range-y2", p2)), new v(this.ctx).setSelectionFilter(z2, e2, s2), c2.add(z2);
          var E2 = new vt(this).handleBarDataLabels({ x: d2, y: g2, y1: u2, y2: p2, i: r2, j: s2, series: f2, realIndex: e2, columnGroupIndex: o2, barHeight: x2, barWidth: b2, barXPosition: y2, barYPosition: w2, renderedPath: z2, visibleSeries: C2 });
          return null !== E2.dataLabels && k2.add(E2.dataLabels), E2.totalDataLabels && k2.add(E2.totalDataLabels), c2.add(k2), A2 && c2.add(A2), S2 && c2.add(S2), c2;
        } }, { key: "drawBarPaths", value: function(t3) {
          var e2, i2 = t3.indexes, a2 = t3.barHeight, s2 = t3.strokeWidth, r2 = t3.zeroW, o2 = t3.x, n2 = t3.y, l2 = t3.yDivision, h2 = t3.elSeries, c2 = this.w, d2 = i2.i, g2 = i2.j;
          if (c2.globals.isXNumeric)
            e2 = (n2 = (c2.globals.seriesX[d2][g2] - c2.globals.minX) / this.invertedXRatio - a2) + a2 * this.visibleI;
          else if (c2.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
            var u2 = 0, p2 = 0;
            c2.globals.seriesPercent.forEach(function(t4, e3) {
              t4[g2] && u2++, e3 < d2 && 0 === t4[g2] && p2++;
            }), u2 > 0 && (a2 = this.seriesLen * a2 / u2), e2 = n2 + a2 * this.visibleI, e2 -= a2 * p2;
          } else
            e2 = n2 + a2 * this.visibleI;
          this.isFunnel && (r2 -= (this.barHelpers.getXForValue(this.series[d2][g2], r2) - r2) / 2), o2 = this.barHelpers.getXForValue(this.series[d2][g2], r2);
          var f2 = this.barHelpers.getBarpaths({ barYPosition: e2, barHeight: a2, x1: r2, x2: o2, strokeWidth: s2, series: this.series, realIndex: i2.realIndex, i: d2, j: g2, w: c2 });
          return c2.globals.isXNumeric || (n2 += l2), this.barHelpers.barBackground({ j: g2, i: d2, y1: e2 - a2 * this.visibleI, y2: a2 * this.seriesLen, elSeries: h2 }), { pathTo: f2.pathTo, pathFrom: f2.pathFrom, x1: r2, x: o2, y: n2, goalX: this.barHelpers.getGoalValues("x", r2, null, d2, g2), barYPosition: e2, barHeight: a2 };
        } }, { key: "drawColumnPaths", value: function(t3) {
          var e2, i2 = t3.indexes, a2 = t3.x, s2 = t3.y, r2 = t3.xDivision, o2 = t3.barWidth, n2 = t3.zeroH, l2 = t3.strokeWidth, h2 = t3.elSeries, c2 = this.w, d2 = i2.realIndex, g2 = i2.translationsIndex, u2 = i2.i, p2 = i2.j, f2 = i2.bc;
          if (c2.globals.isXNumeric) {
            var x2 = this.getBarXForNumericXAxis({ x: a2, j: p2, realIndex: d2, barWidth: o2 });
            a2 = x2.x, e2 = x2.barXPosition;
          } else if (c2.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
            var b2 = this.barHelpers.getZeroValueEncounters({ i: u2, j: p2 }), v2 = b2.nonZeroColumns, m3 = b2.zeroEncounters;
            v2 > 0 && (o2 = this.seriesLen * o2 / v2), e2 = a2 + o2 * this.visibleI, e2 -= o2 * m3;
          } else
            e2 = a2 + o2 * this.visibleI;
          s2 = this.barHelpers.getYForValue(this.series[u2][p2], n2, g2);
          var y2 = this.barHelpers.getColumnPaths({ barXPosition: e2, barWidth: o2, y1: n2, y2: s2, strokeWidth: l2, series: this.series, realIndex: d2, i: u2, j: p2, w: c2 });
          return c2.globals.isXNumeric || (a2 += r2), this.barHelpers.barBackground({ bc: f2, j: p2, i: u2, x1: e2 - l2 / 2 - o2 * this.visibleI, x2: o2 * this.seriesLen + l2 / 2, elSeries: h2 }), { pathTo: y2.pathTo, pathFrom: y2.pathFrom, x: a2, y: s2, goalY: this.barHelpers.getGoalValues("y", null, n2, u2, p2, g2), barXPosition: e2, barWidth: o2 };
        } }, { key: "getBarXForNumericXAxis", value: function(t3) {
          var e2 = t3.x, i2 = t3.barWidth, a2 = t3.realIndex, s2 = t3.j, r2 = this.w, o2 = a2;
          return r2.globals.seriesX[a2].length || (o2 = r2.globals.maxValsInArrayIndex), r2.globals.seriesX[o2][s2] && (e2 = (r2.globals.seriesX[o2][s2] - r2.globals.minX) / this.xRatio - i2 * this.seriesLen / 2), { barXPosition: e2 + i2 * this.visibleI, x: e2 };
        } }, { key: "getPreviousPath", value: function(t3, e2) {
          for (var i2, a2 = this.w, s2 = 0; s2 < a2.globals.previousPaths.length; s2++) {
            var r2 = a2.globals.previousPaths[s2];
            r2.paths && r2.paths.length > 0 && parseInt(r2.realIndex, 10) === parseInt(t3, 10) && void 0 !== a2.globals.previousPaths[s2].paths[e2] && (i2 = a2.globals.previousPaths[s2].paths[e2].d);
          }
          return i2;
        } }]), t2;
      }();
      var wt = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3) {
          var a2 = this, s3 = this.w;
          this.graphics = new m2(this.ctx), this.bar = new yt(this.ctx, this.xyRatios);
          var r2 = new y(this.ctx, s3);
          t3 = r2.getLogSeries(t3), this.yRatio = r2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3), "100%" === s3.config.chart.stackType && (t3 = s3.globals.comboCharts ? i3.map(function(t4) {
            return s3.globals.seriesPercent[t4];
          }) : s3.globals.seriesPercent.slice()), this.series = t3, this.barHelpers.initializeStackedPrevVars(this);
          for (var o2 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), n2 = 0, l2 = 0, h2 = function(r3, h3) {
            var c3 = void 0, d3 = void 0, g2 = void 0, u2 = void 0, p2 = s3.globals.comboCharts ? i3[r3] : r3, f2 = a2.barHelpers.getGroupIndex(p2), b2 = f2.groupIndex, v2 = f2.columnGroupIndex;
            a2.groupCtx = a2[s3.globals.seriesGroups[b2]];
            var m3 = [], y2 = [], w2 = 0;
            a2.yRatio.length > 1 && (a2.yaxisIndex = s3.globals.seriesYAxisReverseMap[p2][0], w2 = p2), a2.isReversed = s3.config.yaxis[a2.yaxisIndex] && s3.config.yaxis[a2.yaxisIndex].reversed;
            var k2 = a2.graphics.group({ class: "apexcharts-series", seriesName: x.escapeString(s3.globals.seriesNames[p2]), rel: r3 + 1, "data:realIndex": p2 });
            a2.ctx.series.addCollapsedClassToSeries(k2, p2);
            var A2 = a2.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": p2 }), S2 = a2.graphics.group({ class: "apexcharts-bar-goals-markers" }), C2 = 0, L2 = 0, P2 = a2.initialPositions(n2, l2, c3, d3, g2, u2, w2);
            l2 = P2.y, C2 = P2.barHeight, d3 = P2.yDivision, u2 = P2.zeroW, n2 = P2.x, L2 = P2.barWidth, c3 = P2.xDivision, g2 = P2.zeroH, s3.globals.barHeight = C2, s3.globals.barWidth = L2, a2.barHelpers.initializeStackedXYVars(a2), 1 === a2.groupCtx.prevY.length && a2.groupCtx.prevY[0].every(function(t4) {
              return isNaN(t4);
            }) && (a2.groupCtx.prevY[0] = a2.groupCtx.prevY[0].map(function() {
              return g2;
            }), a2.groupCtx.prevYF[0] = a2.groupCtx.prevYF[0].map(function() {
              return 0;
            }));
            for (var M2 = 0; M2 < s3.globals.dataPoints; M2++) {
              var I2 = a2.barHelpers.getStrokeWidth(r3, M2, p2), T2 = { indexes: { i: r3, j: M2, realIndex: p2, translationsIndex: w2, bc: h3 }, strokeWidth: I2, x: n2, y: l2, elSeries: k2, columnGroupIndex: v2, seriesGroup: s3.globals.seriesGroups[b2] }, z2 = null;
              a2.isHorizontal ? (z2 = a2.drawStackedBarPaths(e(e({}, T2), {}, { zeroW: u2, barHeight: C2, yDivision: d3 })), L2 = a2.series[r3][M2] / a2.invertedYRatio) : (z2 = a2.drawStackedColumnPaths(e(e({}, T2), {}, { xDivision: c3, barWidth: L2, zeroH: g2 })), C2 = a2.series[r3][M2] / a2.yRatio[w2]);
              var X2 = a2.barHelpers.drawGoalLine({ barXPosition: z2.barXPosition, barYPosition: z2.barYPosition, goalX: z2.goalX, goalY: z2.goalY, barHeight: C2, barWidth: L2 });
              X2 && S2.add(X2), l2 = z2.y, n2 = z2.x, m3.push(n2), y2.push(l2);
              var E2 = a2.barHelpers.getPathFillColor(t3, r3, M2, p2);
              k2 = a2.renderSeries({ realIndex: p2, pathFill: E2, j: M2, i: r3, columnGroupIndex: v2, pathFrom: z2.pathFrom, pathTo: z2.pathTo, strokeWidth: I2, elSeries: k2, x: n2, y: l2, series: t3, barHeight: C2, barWidth: L2, elDataLabelsWrap: A2, elGoalsMarkers: S2, type: "bar", visibleSeries: 0 });
            }
            s3.globals.seriesXvalues[p2] = m3, s3.globals.seriesYvalues[p2] = y2, a2.groupCtx.prevY.push(a2.groupCtx.yArrj), a2.groupCtx.prevYF.push(a2.groupCtx.yArrjF), a2.groupCtx.prevYVal.push(a2.groupCtx.yArrjVal), a2.groupCtx.prevX.push(a2.groupCtx.xArrj), a2.groupCtx.prevXF.push(a2.groupCtx.xArrjF), a2.groupCtx.prevXVal.push(a2.groupCtx.xArrjVal), o2.add(k2);
          }, c2 = 0, d2 = 0; c2 < t3.length; c2++, d2++)
            h2(c2, d2);
          return o2;
        } }, { key: "initialPositions", value: function(t3, e2, i3, a2, s3, r2, o2) {
          var n2, l2, h2 = this.w;
          if (this.isHorizontal) {
            a2 = h2.globals.gridHeight / h2.globals.dataPoints;
            var c2 = h2.config.plotOptions.bar.barHeight;
            n2 = -1 === String(c2).indexOf("%") ? parseInt(c2, 10) : a2 * parseInt(c2, 10) / 100, r2 = h2.globals.padHorizontal + (this.isReversed ? h2.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e2 = (a2 - n2) / 2;
          } else {
            l2 = i3 = h2.globals.gridWidth / h2.globals.dataPoints;
            var d2 = h2.config.plotOptions.bar.columnWidth;
            h2.globals.isXNumeric && h2.globals.dataPoints > 1 ? l2 = (i3 = h2.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d2).indexOf("%") ? l2 = parseInt(d2, 10) : l2 *= parseInt(d2, 10) / 100, s3 = h2.globals.gridHeight - this.baseLineY[o2] - (this.isReversed ? h2.globals.gridHeight : 0), t3 = h2.globals.padHorizontal + (i3 - l2) / 2;
          }
          var g2 = h2.globals.barGroups.length || 1;
          return { x: t3, y: e2, yDivision: a2, xDivision: i3, barHeight: n2 / g2, barWidth: l2 / g2, zeroH: s3, zeroW: r2 };
        } }, { key: "drawStackedBarPaths", value: function(t3) {
          for (var e2, i3 = t3.indexes, a2 = t3.barHeight, s3 = t3.strokeWidth, r2 = t3.zeroW, o2 = t3.x, n2 = t3.y, l2 = t3.columnGroupIndex, h2 = t3.seriesGroup, c2 = t3.yDivision, d2 = t3.elSeries, g2 = this.w, u2 = n2 + l2 * a2, p2 = i3.i, f2 = i3.j, x2 = i3.realIndex, b2 = i3.translationsIndex, v2 = 0, m3 = 0; m3 < this.groupCtx.prevXF.length; m3++)
            v2 += this.groupCtx.prevXF[m3][f2];
          var y2;
          if ((y2 = h2.indexOf(g2.config.series[x2].name)) > 0) {
            var w2 = r2;
            this.groupCtx.prevXVal[y2 - 1][f2] < 0 ? w2 = this.series[p2][f2] >= 0 ? this.groupCtx.prevX[y2 - 1][f2] + v2 - 2 * (this.isReversed ? v2 : 0) : this.groupCtx.prevX[y2 - 1][f2] : this.groupCtx.prevXVal[y2 - 1][f2] >= 0 && (w2 = this.series[p2][f2] >= 0 ? this.groupCtx.prevX[y2 - 1][f2] : this.groupCtx.prevX[y2 - 1][f2] - v2 + 2 * (this.isReversed ? v2 : 0)), e2 = w2;
          } else
            e2 = r2;
          o2 = null === this.series[p2][f2] ? e2 : e2 + this.series[p2][f2] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p2][f2] / this.invertedYRatio : 0);
          var k2 = this.barHelpers.getBarpaths({ barYPosition: u2, barHeight: a2, x1: e2, x2: o2, strokeWidth: s3, series: this.series, realIndex: i3.realIndex, seriesGroup: h2, i: p2, j: f2, w: g2 });
          return this.barHelpers.barBackground({ j: f2, i: p2, y1: u2, y2: a2, elSeries: d2 }), n2 += c2, { pathTo: k2.pathTo, pathFrom: k2.pathFrom, goalX: this.barHelpers.getGoalValues("x", r2, null, p2, f2, b2), barXPosition: e2, barYPosition: u2, x: o2, y: n2 };
        } }, { key: "drawStackedColumnPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x, a2 = t3.y, s3 = t3.xDivision, r2 = t3.barWidth, o2 = t3.zeroH, n2 = t3.columnGroupIndex, l2 = t3.seriesGroup, h2 = t3.elSeries, c2 = this.w, d2 = e2.i, g2 = e2.j, u2 = e2.bc, p2 = e2.realIndex, f2 = e2.translationsIndex;
          if (c2.globals.isXNumeric) {
            var x2 = c2.globals.seriesX[p2][g2];
            x2 || (x2 = 0), i3 = (x2 - c2.globals.minX) / this.xRatio - r2 / 2 * c2.globals.barGroups.length;
          }
          for (var b2, v2 = i3 + n2 * r2, m3 = 0, y2 = 0; y2 < this.groupCtx.prevYF.length; y2++)
            m3 += isNaN(this.groupCtx.prevYF[y2][g2]) ? 0 : this.groupCtx.prevYF[y2][g2];
          var w2 = d2;
          if (l2 && (w2 = l2.indexOf(c2.globals.seriesNames[p2])), w2 > 0 && !c2.globals.isXNumeric || w2 > 0 && c2.globals.isXNumeric && c2.globals.seriesX[p2 - 1][g2] === c2.globals.seriesX[p2][g2]) {
            var k2, A2, S2, C2 = Math.min(this.yRatio.length + 1, p2 + 1);
            if (void 0 !== this.groupCtx.prevY[w2 - 1] && this.groupCtx.prevY[w2 - 1].length)
              for (var L2 = 1; L2 < C2; L2++) {
                var P2;
                if (!isNaN(null === (P2 = this.groupCtx.prevY[w2 - L2]) || void 0 === P2 ? void 0 : P2[g2])) {
                  S2 = this.groupCtx.prevY[w2 - L2][g2];
                  break;
                }
              }
            for (var M2 = 1; M2 < C2; M2++) {
              var I2, T2;
              if ((null === (I2 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === I2 ? void 0 : I2[g2]) < 0) {
                A2 = this.series[d2][g2] >= 0 ? S2 - m3 + 2 * (this.isReversed ? m3 : 0) : S2;
                break;
              }
              if ((null === (T2 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === T2 ? void 0 : T2[g2]) >= 0) {
                A2 = this.series[d2][g2] >= 0 ? S2 : S2 + m3 - 2 * (this.isReversed ? m3 : 0);
                break;
              }
            }
            void 0 === A2 && (A2 = c2.globals.gridHeight), b2 = null !== (k2 = this.groupCtx.prevYF[0]) && void 0 !== k2 && k2.every(function(t4) {
              return 0 === t4;
            }) && this.groupCtx.prevYF.slice(1, w2).every(function(t4) {
              return t4.every(function(t5) {
                return isNaN(t5);
              });
            }) ? o2 : A2;
          } else
            b2 = o2;
          a2 = this.series[d2][g2] ? b2 - this.series[d2][g2] / this.yRatio[f2] + 2 * (this.isReversed ? this.series[d2][g2] / this.yRatio[f2] : 0) : b2;
          var z2 = this.barHelpers.getColumnPaths({ barXPosition: v2, barWidth: r2, y1: b2, y2: a2, yRatio: this.yRatio[f2], strokeWidth: this.strokeWidth, series: this.series, seriesGroup: l2, realIndex: e2.realIndex, i: d2, j: g2, w: c2 });
          return this.barHelpers.barBackground({ bc: u2, j: g2, i: d2, x1: v2, x2: r2, elSeries: h2 }), i3 += s3, { pathTo: z2.pathTo, pathFrom: z2.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, o2, d2, g2), barXPosition: v2, x: c2.globals.isXNumeric ? i3 - s3 : i3, y: a2 };
        } }]), s2;
      }();
      var kt = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3, a2) {
          var s3 = this, r2 = this.w, o2 = new m2(this.ctx), n2 = r2.globals.comboCharts ? i3 : r2.config.chart.type, l2 = new H(this.ctx);
          this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = r2.config.plotOptions.bar.horizontal;
          var h2 = new y(this.ctx, r2);
          t3 = h2.getLogSeries(t3), this.series = t3, this.yRatio = h2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
          for (var c2 = o2.group({ class: "apexcharts-".concat(n2, "-series apexcharts-plot-series") }), d2 = function(i4) {
            s3.isBoxPlot = "boxPlot" === r2.config.chart.type || "boxPlot" === r2.config.series[i4].type;
            var n3, h3, d3, g3, u2 = void 0, p2 = void 0, f2 = [], b2 = [], v2 = r2.globals.comboCharts ? a2[i4] : i4, m3 = s3.barHelpers.getGroupIndex(v2).columnGroupIndex, y2 = o2.group({ class: "apexcharts-series", seriesName: x.escapeString(r2.globals.seriesNames[v2]), rel: i4 + 1, "data:realIndex": v2 });
            s3.ctx.series.addCollapsedClassToSeries(y2, v2), t3[i4].length > 0 && (s3.visibleI = s3.visibleI + 1);
            var w2, k2, A2 = 0;
            s3.yRatio.length > 1 && (s3.yaxisIndex = r2.globals.seriesYAxisReverseMap[v2][0], A2 = v2);
            var S2 = s3.barHelpers.initialPositions();
            p2 = S2.y, w2 = S2.barHeight, h3 = S2.yDivision, g3 = S2.zeroW, u2 = S2.x, k2 = S2.barWidth, n3 = S2.xDivision, d3 = S2.zeroH, b2.push(u2 + k2 / 2);
            for (var C2 = o2.group({ class: "apexcharts-datalabels", "data:realIndex": v2 }), L2 = function(a3) {
              var o3 = s3.barHelpers.getStrokeWidth(i4, a3, v2), c3 = null, x2 = { indexes: { i: i4, j: a3, realIndex: v2, translationsIndex: A2 }, x: u2, y: p2, strokeWidth: o3, elSeries: y2 };
              c3 = s3.isHorizontal ? s3.drawHorizontalBoxPaths(e(e({}, x2), {}, { yDivision: h3, barHeight: w2, zeroW: g3 })) : s3.drawVerticalBoxPaths(e(e({}, x2), {}, { xDivision: n3, barWidth: k2, zeroH: d3 })), p2 = c3.y, u2 = c3.x, a3 > 0 && b2.push(u2 + k2 / 2), f2.push(p2), c3.pathTo.forEach(function(e2, n4) {
                var h4 = !s3.isBoxPlot && s3.candlestickOptions.wick.useFillColor ? c3.color[n4] : r2.globals.stroke.colors[i4], d4 = l2.fillPath({ seriesNumber: v2, dataPointIndex: a3, color: c3.color[n4], value: t3[i4][a3] });
                s3.renderSeries({ realIndex: v2, pathFill: d4, lineFill: h4, j: a3, i: i4, pathFrom: c3.pathFrom, pathTo: e2, strokeWidth: o3, elSeries: y2, x: u2, y: p2, series: t3, columnGroupIndex: m3, barHeight: w2, barWidth: k2, elDataLabelsWrap: C2, visibleSeries: s3.visibleI, type: r2.config.chart.type });
              });
            }, P2 = 0; P2 < r2.globals.dataPoints; P2++)
              L2(P2);
            r2.globals.seriesXvalues[v2] = b2, r2.globals.seriesYvalues[v2] = f2, c2.add(y2);
          }, g2 = 0; g2 < t3.length; g2++)
            d2(g2);
          return c2;
        } }, { key: "drawVerticalBoxPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x;
          t3.y;
          var a2 = t3.xDivision, s3 = t3.barWidth, r2 = t3.zeroH, o2 = t3.strokeWidth, n2 = this.w, l2 = new m2(this.ctx), h2 = e2.i, c2 = e2.j, d2 = true, g2 = n2.config.plotOptions.candlestick.colors.upward, u2 = n2.config.plotOptions.candlestick.colors.downward, p2 = "";
          this.isBoxPlot && (p2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var f2 = this.yRatio[e2.translationsIndex], x2 = e2.realIndex, b2 = this.getOHLCValue(x2, c2), v2 = r2, y2 = r2;
          b2.o > b2.c && (d2 = false);
          var w2 = Math.min(b2.o, b2.c), k2 = Math.max(b2.o, b2.c), A2 = b2.m;
          n2.globals.isXNumeric && (i3 = (n2.globals.seriesX[x2][c2] - n2.globals.minX) / this.xRatio - s3 / 2);
          var S2 = i3 + s3 * this.visibleI;
          void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (w2 = r2, k2 = r2) : (w2 = r2 - w2 / f2, k2 = r2 - k2 / f2, v2 = r2 - b2.h / f2, y2 = r2 - b2.l / f2, A2 = r2 - b2.m / f2);
          var C2 = l2.move(S2, r2), L2 = l2.move(S2 + s3 / 2, w2);
          return n2.globals.previousPaths.length > 0 && (L2 = this.getPreviousPath(x2, c2, true)), C2 = this.isBoxPlot ? [l2.move(S2, w2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 4, v2) + l2.line(S2 + s3 - s3 / 4, v2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3, w2) + l2.line(S2 + s3, A2) + l2.line(S2, A2) + l2.line(S2, w2 + o2 / 2), l2.move(S2, A2) + l2.line(S2 + s3, A2) + l2.line(S2 + s3, k2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 - s3 / 4, y2) + l2.line(S2 + s3 / 4, y2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2, k2) + l2.line(S2, A2) + "z"] : [l2.move(S2, k2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3, k2) + l2.line(S2 + s3, w2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2, w2) + l2.line(S2, k2 - o2 / 2)], L2 += l2.move(S2, w2), n2.globals.isXNumeric || (i3 += a2), { pathTo: C2, pathFrom: L2, x: i3, y: k2, barXPosition: S2, color: this.isBoxPlot ? p2 : d2 ? [g2] : [u2] };
        } }, { key: "drawHorizontalBoxPaths", value: function(t3) {
          var e2 = t3.indexes;
          t3.x;
          var i3 = t3.y, a2 = t3.yDivision, s3 = t3.barHeight, r2 = t3.zeroW, o2 = t3.strokeWidth, n2 = this.w, l2 = new m2(this.ctx), h2 = e2.i, c2 = e2.j, d2 = this.boxOptions.colors.lower;
          this.isBoxPlot && (d2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var g2 = this.invertedYRatio, u2 = e2.realIndex, p2 = this.getOHLCValue(u2, c2), f2 = r2, x2 = r2, b2 = Math.min(p2.o, p2.c), v2 = Math.max(p2.o, p2.c), y2 = p2.m;
          n2.globals.isXNumeric && (i3 = (n2.globals.seriesX[u2][c2] - n2.globals.minX) / this.invertedXRatio - s3 / 2);
          var w2 = i3 + s3 * this.visibleI;
          void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (b2 = r2, v2 = r2) : (b2 = r2 + b2 / g2, v2 = r2 + v2 / g2, f2 = r2 + p2.h / g2, x2 = r2 + p2.l / g2, y2 = r2 + p2.m / g2);
          var k2 = l2.move(r2, w2), A2 = l2.move(b2, w2 + s3 / 2);
          return n2.globals.previousPaths.length > 0 && (A2 = this.getPreviousPath(u2, c2, true)), k2 = [l2.move(b2, w2) + l2.line(b2, w2 + s3 / 2) + l2.line(f2, w2 + s3 / 2) + l2.line(f2, w2 + s3 / 2 - s3 / 4) + l2.line(f2, w2 + s3 / 2 + s3 / 4) + l2.line(f2, w2 + s3 / 2) + l2.line(b2, w2 + s3 / 2) + l2.line(b2, w2 + s3) + l2.line(y2, w2 + s3) + l2.line(y2, w2) + l2.line(b2 + o2 / 2, w2), l2.move(y2, w2) + l2.line(y2, w2 + s3) + l2.line(v2, w2 + s3) + l2.line(v2, w2 + s3 / 2) + l2.line(x2, w2 + s3 / 2) + l2.line(x2, w2 + s3 - s3 / 4) + l2.line(x2, w2 + s3 / 4) + l2.line(x2, w2 + s3 / 2) + l2.line(v2, w2 + s3 / 2) + l2.line(v2, w2) + l2.line(y2, w2) + "z"], A2 += l2.move(b2, w2), n2.globals.isXNumeric || (i3 += a2), { pathTo: k2, pathFrom: A2, x: v2, y: i3, barYPosition: w2, color: d2 };
        } }, { key: "getOHLCValue", value: function(t3, e2) {
          var i3 = this.w;
          return { o: this.isBoxPlot ? i3.globals.seriesCandleH[t3][e2] : i3.globals.seriesCandleO[t3][e2], h: this.isBoxPlot ? i3.globals.seriesCandleO[t3][e2] : i3.globals.seriesCandleH[t3][e2], m: i3.globals.seriesCandleM[t3][e2], l: this.isBoxPlot ? i3.globals.seriesCandleC[t3][e2] : i3.globals.seriesCandleL[t3][e2], c: this.isBoxPlot ? i3.globals.seriesCandleL[t3][e2] : i3.globals.seriesCandleC[t3][e2] };
        } }]), s2;
      }();
      var At = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "checkColorRange", value: function() {
          var t3 = this.w, e2 = false, i2 = t3.config.plotOptions[t3.config.chart.type];
          return i2.colorScale.ranges.length > 0 && i2.colorScale.ranges.map(function(t4, i3) {
            t4.from <= 0 && (e2 = true);
          }), e2;
        } }, { key: "getShadeColor", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 1, o2 = s2.config.plotOptions[t3].shadeIntensity, n2 = this.determineColor(t3, e2, i2);
          s2.globals.hasNegs || a2 ? r2 = s2.config.plotOptions[t3].reverseNegativeShade ? n2.percent < 0 ? n2.percent / 100 * (1.25 * o2) : (1 - n2.percent / 100) * (1.25 * o2) : n2.percent <= 0 ? 1 - (1 + n2.percent / 100) * o2 : (1 - n2.percent / 100) * o2 : (r2 = 1 - n2.percent / 100, "treemap" === t3 && (r2 = (1 - n2.percent / 100) * (1.25 * o2)));
          var l2 = n2.color, h2 = new x();
          return s2.config.plotOptions[t3].enableShades && (l2 = "dark" === this.w.config.theme.mode ? x.hexToRgba(h2.shadeColor(-1 * r2, n2.color), s2.config.fill.opacity) : x.hexToRgba(h2.shadeColor(r2, n2.color), s2.config.fill.opacity)), { color: l2, colorProps: n2 };
        } }, { key: "determineColor", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.globals.series[e2][i2], r2 = a2.config.plotOptions[t3], o2 = r2.colorScale.inverse ? i2 : e2;
          r2.distributed && "treemap" === a2.config.chart.type && (o2 = i2);
          var n2 = a2.globals.colors[o2], l2 = null, h2 = Math.min.apply(Math, u(a2.globals.series[e2])), c2 = Math.max.apply(Math, u(a2.globals.series[e2]));
          r2.distributed || "heatmap" !== t3 || (h2 = a2.globals.minY, c2 = a2.globals.maxY), void 0 !== r2.colorScale.min && (h2 = r2.colorScale.min < a2.globals.minY ? r2.colorScale.min : a2.globals.minY, c2 = r2.colorScale.max > a2.globals.maxY ? r2.colorScale.max : a2.globals.maxY);
          var d2 = Math.abs(c2) + Math.abs(h2), g2 = 100 * s2 / (0 === d2 ? d2 - 1e-6 : d2);
          r2.colorScale.ranges.length > 0 && r2.colorScale.ranges.map(function(t4, e3) {
            if (s2 >= t4.from && s2 <= t4.to) {
              n2 = t4.color, l2 = t4.foreColor ? t4.foreColor : null, h2 = t4.from, c2 = t4.to;
              var i3 = Math.abs(c2) + Math.abs(h2);
              g2 = 100 * s2 / (0 === i3 ? i3 - 1e-6 : i3);
            }
          });
          return { color: n2, foreColor: l2, percent: g2 };
        } }, { key: "calculateDataLabels", value: function(t3) {
          var e2 = t3.text, i2 = t3.x, a2 = t3.y, s2 = t3.i, r2 = t3.j, o2 = t3.colorProps, n2 = t3.fontSize, l2 = this.w.config.dataLabels, h2 = new m2(this.ctx), c2 = new N(this.ctx), d2 = null;
          if (l2.enabled) {
            d2 = h2.group({ class: "apexcharts-data-labels" });
            var g2 = l2.offsetX, u2 = l2.offsetY, p2 = i2 + g2, f2 = a2 + parseFloat(l2.style.fontSize) / 3 + u2;
            c2.plotDataLabelsText({ x: p2, y: f2, text: e2, i: s2, j: r2, color: o2.foreColor, parent: d2, fontSize: n2, dataLabelsConfig: l2 });
          }
          return d2;
        } }, { key: "addListeners", value: function(t3) {
          var e2 = new m2(this.ctx);
          t3.node.addEventListener("mouseenter", e2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", e2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mousedown", e2.pathMouseDown.bind(this, t3));
        } }]), t2;
      }();
      var St = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.xRatio = i2.xRatio, this.yRatio = i2.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new At(e2), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this.w, i2 = new m2(this.ctx), a2 = i2.group({ class: "apexcharts-heatmap" });
          a2.attr("clip-path", "url(#gridRectMask".concat(e2.globals.cuid, ")"));
          var s2 = e2.globals.gridWidth / e2.globals.dataPoints, r2 = e2.globals.gridHeight / e2.globals.series.length, o2 = 0, n2 = false;
          this.negRange = this.helpers.checkColorRange();
          var l2 = t3.slice();
          e2.config.yaxis[0].reversed && (n2 = true, l2.reverse());
          for (var h2 = n2 ? 0 : l2.length - 1; n2 ? h2 < l2.length : h2 >= 0; n2 ? h2++ : h2--) {
            var c2 = i2.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: x.escapeString(e2.globals.seriesNames[h2]), rel: h2 + 1, "data:realIndex": h2 });
            if (this.ctx.series.addCollapsedClassToSeries(c2, h2), e2.config.chart.dropShadow.enabled) {
              var d2 = e2.config.chart.dropShadow;
              new v(this.ctx).dropShadow(c2, d2, h2);
            }
            for (var g2 = 0, u2 = e2.config.plotOptions.heatmap.shadeIntensity, p2 = 0; p2 < l2[h2].length; p2++) {
              var f2 = this.helpers.getShadeColor(e2.config.chart.type, h2, p2, this.negRange), b2 = f2.color, y2 = f2.colorProps;
              if ("image" === e2.config.fill.type)
                b2 = new H(this.ctx).fillPath({ seriesNumber: h2, dataPointIndex: p2, opacity: e2.globals.hasNegs ? y2.percent < 0 ? 1 - (1 + y2.percent / 100) : u2 + y2.percent / 100 : y2.percent / 100, patternID: x.randomId(), width: e2.config.fill.image.width ? e2.config.fill.image.width : s2, height: e2.config.fill.image.height ? e2.config.fill.image.height : r2 });
              var w2 = this.rectRadius, k2 = i2.drawRect(g2, o2, s2, r2, w2);
              if (k2.attr({ cx: g2, cy: o2 }), k2.node.classList.add("apexcharts-heatmap-rect"), c2.add(k2), k2.attr({ fill: b2, i: h2, index: h2, j: p2, val: t3[h2][p2], "stroke-width": this.strokeWidth, stroke: e2.config.plotOptions.heatmap.useFillColorAsStroke ? b2 : e2.globals.stroke.colors[0], color: b2 }), this.helpers.addListeners(k2), e2.config.chart.animations.enabled && !e2.globals.dataChanged) {
                var A2 = 1;
                e2.globals.resized || (A2 = e2.config.chart.animations.speed), this.animateHeatMap(k2, g2, o2, s2, r2, A2);
              }
              if (e2.globals.dataChanged) {
                var S2 = 1;
                if (this.dynamicAnim.enabled && e2.globals.shouldAnimate) {
                  S2 = this.dynamicAnim.speed;
                  var C2 = e2.globals.previousPaths[h2] && e2.globals.previousPaths[h2][p2] && e2.globals.previousPaths[h2][p2].color;
                  C2 || (C2 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k2, x.isColorHex(C2) ? C2 : x.rgb2hex(C2), x.isColorHex(b2) ? b2 : x.rgb2hex(b2), S2);
                }
              }
              var L2 = (0, e2.config.dataLabels.formatter)(e2.globals.series[h2][p2], { value: e2.globals.series[h2][p2], seriesIndex: h2, dataPointIndex: p2, w: e2 }), P2 = this.helpers.calculateDataLabels({ text: L2, x: g2 + s2 / 2, y: o2 + r2 / 2, i: h2, j: p2, colorProps: y2, series: l2 });
              null !== P2 && c2.add(P2), g2 += s2;
            }
            o2 += r2, a2.add(c2);
          }
          var M2 = e2.globals.yAxisScale[0].result.slice();
          return e2.config.yaxis[0].reversed ? M2.unshift("") : M2.push(""), e2.globals.yAxisScale[0].result = M2, a2;
        } }, { key: "animateHeatMap", value: function(t3, e2, i2, a2, s2, r2) {
          var o2 = new b(this.ctx);
          o2.animateRect(t3, { x: e2 + a2 / 2, y: i2 + s2 / 2, width: 0, height: 0 }, { x: e2, y: i2, width: a2, height: s2 }, r2, function() {
            o2.animationCompleted(t3);
          });
        } }, { key: "animateHeatColor", value: function(t3, e2, i2, a2) {
          t3.attr({ fill: e2 }).animate(a2).attr({ fill: i2 });
        } }]), t2;
      }();
      var Ct = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawYAxisTexts", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = s2.config.yaxis[0], o2 = s2.globals.yLabelFormatters[0];
          return new m2(this.ctx).drawText({ x: t3 + r2.labels.offsetX, y: e2 + r2.labels.offsetY, text: o2(a2, i2), textAnchor: "middle", fontSize: r2.labels.style.fontSize, fontFamily: r2.labels.style.fontFamily, foreColor: Array.isArray(r2.labels.style.colors) ? r2.labels.style.colors[i2] : r2.labels.style.colors });
        } }]), t2;
      }();
      var Lt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i2.globals.stroke.colors ? i2.globals.stroke.colors : i2.globals.colors, this.defaultSize = Math.min(i2.globals.gridWidth, i2.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i2.globals.gridWidth / 2, "radialBar" === i2.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i2.config.plotOptions.pie.endAngle - i2.config.plotOptions.pie.startAngle), this.initialAngle = i2.config.plotOptions.pie.startAngle % this.fullAngle, i2.globals.radialSize = this.defaultSize / 2.05 - i2.config.stroke.width - (i2.config.chart.sparkline.enabled ? 0 : i2.config.chart.dropShadow.blur), this.donutSize = i2.globals.radialSize * parseInt(i2.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m2(this.ctx);
          if (this.ret = a2.group({ class: "apexcharts-pie" }), i2.globals.noData)
            return this.ret;
          for (var s2 = 0, r2 = 0; r2 < t3.length; r2++)
            s2 += x.negToZero(t3[r2]);
          var o2 = [], n2 = a2.group();
          0 === s2 && (s2 = 1e-5), t3.forEach(function(t4) {
            e2.maxY = Math.max(e2.maxY, t4);
          }), i2.config.yaxis[0].max && (this.maxY = i2.config.yaxis[0].max), "back" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
          for (var l2 = 0; l2 < t3.length; l2++) {
            var h2 = this.fullAngle * x.negToZero(t3[l2]) / s2;
            o2.push(h2), "polarArea" === this.chartType ? (o2[l2] = this.fullAngle / t3.length, this.sliceSizes.push(i2.globals.radialSize * t3[l2] / this.maxY)) : this.sliceSizes.push(i2.globals.radialSize);
          }
          if (i2.globals.dataChanged) {
            for (var c2, d2 = 0, g2 = 0; g2 < i2.globals.previousPaths.length; g2++)
              d2 += x.negToZero(i2.globals.previousPaths[g2]);
            for (var u2 = 0; u2 < i2.globals.previousPaths.length; u2++)
              c2 = this.fullAngle * x.negToZero(i2.globals.previousPaths[u2]) / d2, this.prevSectorAngleArr.push(c2);
          }
          this.donutSize < 0 && (this.donutSize = 0);
          var p2 = i2.config.plotOptions.pie.customScale, f2 = i2.globals.gridWidth / 2, b2 = i2.globals.gridHeight / 2, v2 = f2 - i2.globals.gridWidth / 2 * p2, y2 = b2 - i2.globals.gridHeight / 2 * p2;
          if ("donut" === this.chartType) {
            var w2 = a2.drawCircle(this.donutSize);
            w2.attr({ cx: this.centerX, cy: this.centerY, fill: i2.config.plotOptions.pie.donut.background ? i2.config.plotOptions.pie.donut.background : "transparent" }), n2.add(w2);
          }
          var k2 = this.drawArcs(o2, t3);
          if (this.sliceLabels.forEach(function(t4) {
            k2.add(t4);
          }), n2.attr({ transform: "translate(".concat(v2, ", ").concat(y2, ") scale(").concat(p2, ")") }), n2.add(k2), this.ret.add(n2), this.donutDataLabels.show) {
            var A2 = this.renderInnerDataLabels(this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show, translateX: v2, translateY: y2 });
            this.ret.add(A2);
          }
          return "front" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
        } }, { key: "drawArcs", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = new m2(this.ctx), r2 = new H(this.ctx), o2 = s2.group({ class: "apexcharts-slices" }), n2 = this.initialAngle, l2 = this.initialAngle, h2 = this.initialAngle, c2 = this.initialAngle;
          this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0;
          for (var d2 = 0; d2 < t3.length; d2++) {
            var g2 = s2.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: x.escapeString(i2.globals.seriesNames[d2]), rel: d2 + 1, "data:realIndex": d2 });
            o2.add(g2), l2 = c2, h2 = (n2 = h2) + t3[d2], c2 = l2 + this.prevSectorAngleArr[d2];
            var u2 = h2 < n2 ? this.fullAngle + h2 - n2 : h2 - n2, p2 = r2.fillPath({ seriesNumber: d2, size: this.sliceSizes[d2], value: e2[d2] }), f2 = this.getChangedPath(l2, c2), b2 = s2.drawPath({ d: f2, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d2] : this.lineColorArr, strokeWidth: 0, fill: p2, fillOpacity: i2.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d2) });
            if (b2.attr({ index: 0, j: d2 }), a2.setSelectionFilter(b2, 0, d2), i2.config.chart.dropShadow.enabled) {
              var y2 = i2.config.chart.dropShadow;
              a2.dropShadow(b2, y2, d2);
            }
            this.addListeners(b2, this.donutDataLabels), m2.setAttrs(b2.node, { "data:angle": u2, "data:startAngle": n2, "data:strokeWidth": this.strokeWidth, "data:value": e2[d2] });
            var w2 = { x: 0, y: 0 };
            "pie" === this.chartType || "polarArea" === this.chartType ? w2 = x.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize / 1.25 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle) : "donut" === this.chartType && (w2 = x.polarToCartesian(this.centerX, this.centerY, (i2.globals.radialSize + this.donutSize) / 2 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle)), g2.add(b2);
            var k2 = 0;
            if (!this.initialAnim || i2.globals.resized || i2.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k2 = u2 / this.fullAngle * i2.config.chart.animations.speed) && (k2 = 1), this.animDur = k2 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i2.globals.dataChanged ? this.animatePaths(b2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, prevStartAngle: l2, prevEndAngle: c2, animateStartingPos: true, i: d2, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i2.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(b2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, i: d2, totalItems: t3.length - 1, animBeginArr: this.animBeginArr, dur: k2 }), i2.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && b2.node.addEventListener("mouseup", this.pieClicked.bind(this, d2)), void 0 !== i2.globals.selectedDataPoints[0] && i2.globals.selectedDataPoints[0].indexOf(d2) > -1 && this.pieClicked(d2), i2.config.dataLabels.enabled) {
              var A2 = w2.x, S2 = w2.y, C2 = 100 * u2 / this.fullAngle + "%";
              if (0 !== u2 && i2.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t3[d2]) {
                var L2 = i2.config.dataLabels.formatter;
                void 0 !== L2 && (C2 = L2(i2.globals.seriesPercent[d2][0], { seriesIndex: d2, w: i2 }));
                var P2 = i2.globals.dataLabels.style.colors[d2], M2 = s2.group({ class: "apexcharts-datalabels" }), I2 = s2.drawText({ x: A2, y: S2, text: C2, textAnchor: "middle", fontSize: i2.config.dataLabels.style.fontSize, fontFamily: i2.config.dataLabels.style.fontFamily, fontWeight: i2.config.dataLabels.style.fontWeight, foreColor: P2 });
                if (M2.add(I2), i2.config.dataLabels.dropShadow.enabled) {
                  var T2 = i2.config.dataLabels.dropShadow;
                  a2.dropShadow(I2, T2);
                }
                I2.node.classList.add("apexcharts-pie-label"), i2.config.chart.animations.animate && false === i2.globals.resized && (I2.node.classList.add("apexcharts-pie-label-delay"), I2.node.style.animationDelay = i2.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(M2);
              }
            }
          }
          return o2;
        } }, { key: "addListeners", value: function(t3, e2) {
          var i2 = new m2(this.ctx);
          t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this, t3)), this.donutDataLabels.total.showAlways || (t3.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t3.node, e2)));
        } }, { key: "animatePaths", value: function(t3, e2) {
          var i2 = this.w, a2 = e2.endAngle < e2.startAngle ? this.fullAngle + e2.endAngle - e2.startAngle : e2.endAngle - e2.startAngle, s2 = a2, r2 = e2.startAngle, o2 = e2.startAngle;
          void 0 !== e2.prevStartAngle && void 0 !== e2.prevEndAngle && (r2 = e2.prevEndAngle, s2 = e2.prevEndAngle < e2.prevStartAngle ? this.fullAngle + e2.prevEndAngle - e2.prevStartAngle : e2.prevEndAngle - e2.prevStartAngle), e2.i === i2.config.series.length - 1 && (a2 + o2 > this.fullAngle ? e2.endAngle = e2.endAngle - (a2 + o2) : a2 + o2 < this.fullAngle && (e2.endAngle = e2.endAngle + (this.fullAngle - (a2 + o2)))), a2 === this.fullAngle && (a2 = this.fullAngle - 0.01), this.animateArc(t3, r2, o2, a2, s2, e2);
        } }, { key: "animateArc", value: function(t3, e2, i2, a2, s2, r2) {
          var o2, n2 = this, l2 = this.w, h2 = new b(this.ctx), c2 = r2.size;
          (isNaN(e2) || isNaN(s2)) && (e2 = i2, s2 = a2, r2.dur = 0);
          var d2 = a2, g2 = i2, u2 = e2 < i2 ? this.fullAngle + e2 - i2 : e2 - i2;
          l2.globals.dataChanged && r2.shouldSetPrevPaths && r2.prevEndAngle && (o2 = n2.getPiePath({ me: n2, startAngle: r2.prevStartAngle, angle: r2.prevEndAngle < r2.prevStartAngle ? this.fullAngle + r2.prevEndAngle - r2.prevStartAngle : r2.prevEndAngle - r2.prevStartAngle, size: c2 }), t3.attr({ d: o2 })), 0 !== r2.dur ? t3.animate(r2.dur, l2.globals.easing, r2.animBeginArr[r2.i]).afterAll(function() {
            "pie" !== n2.chartType && "donut" !== n2.chartType && "polarArea" !== n2.chartType || this.animate(l2.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": n2.strokeWidth }), r2.i === l2.config.series.length - 1 && h2.animationCompleted(t3);
          }).during(function(l3) {
            d2 = u2 + (a2 - u2) * l3, r2.animateStartingPos && (d2 = s2 + (a2 - s2) * l3, g2 = e2 - s2 + (i2 - (e2 - s2)) * l3), o2 = n2.getPiePath({ me: n2, startAngle: g2, angle: d2, size: c2 }), t3.node.setAttribute("data:pathOrig", o2), t3.attr({ d: o2 });
          }) : (o2 = n2.getPiePath({ me: n2, startAngle: g2, angle: a2, size: c2 }), r2.isTrack || (l2.globals.animationEnded = true), t3.node.setAttribute("data:pathOrig", o2), t3.attr({ d: o2, "stroke-width": n2.strokeWidth }));
        } }, { key: "pieClicked", value: function(t3) {
          var e2, i2 = this.w, a2 = this, s2 = a2.sliceSizes[t3] + (i2.config.plotOptions.pie.expandOnClick ? 4 : 0), r2 = i2.globals.dom.Paper.select(".apexcharts-".concat(a2.chartType.toLowerCase(), "-slice-").concat(t3)).members[0];
          if ("true" !== r2.attr("data:pieClicked")) {
            var o2 = i2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
            Array.prototype.forEach.call(o2, function(t4) {
              t4.setAttribute("data:pieClicked", "false");
              var e3 = t4.getAttribute("data:pathOrig");
              e3 && t4.setAttribute("d", e3);
            }), i2.globals.capturedDataPointIndex = t3, r2.attr("data:pieClicked", "true");
            var n2 = parseInt(r2.attr("data:startAngle"), 10), l2 = parseInt(r2.attr("data:angle"), 10);
            e2 = a2.getPiePath({ me: a2, startAngle: n2, angle: l2, size: s2 }), 360 !== l2 && r2.plot(e2);
          } else {
            r2.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r2.node, this.donutDataLabels);
            var h2 = r2.attr("data:pathOrig");
            r2.attr({ d: h2 });
          }
        } }, { key: "getChangedPath", value: function(t3, e2) {
          var i2 = "";
          return this.dynamicAnim && this.w.globals.dataChanged && (i2 = this.getPiePath({ me: this, startAngle: t3, angle: e2 - t3, size: this.size })), i2;
        } }, { key: "getPiePath", value: function(t3) {
          var e2, i2 = t3.me, a2 = t3.startAngle, s2 = t3.angle, r2 = t3.size, o2 = new m2(this.ctx), n2 = a2, l2 = Math.PI * (n2 - 90) / 180, h2 = s2 + a2;
          Math.ceil(h2) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h2 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(h2) > this.fullAngle && (h2 -= this.fullAngle);
          var c2 = Math.PI * (h2 - 90) / 180, d2 = i2.centerX + r2 * Math.cos(l2), g2 = i2.centerY + r2 * Math.sin(l2), u2 = i2.centerX + r2 * Math.cos(c2), p2 = i2.centerY + r2 * Math.sin(c2), f2 = x.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, h2), b2 = x.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, n2), v2 = s2 > 180 ? 1 : 0, y2 = ["M", d2, g2, "A", r2, r2, 0, v2, 1, u2, p2];
          return e2 = "donut" === i2.chartType ? [].concat(y2, ["L", f2.x, f2.y, "A", i2.donutSize, i2.donutSize, 0, v2, 0, b2.x, b2.y, "L", d2, g2, "z"]).join(" ") : "pie" === i2.chartType || "polarArea" === i2.chartType ? [].concat(y2, ["L", i2.centerX, i2.centerY, "L", d2, g2]).join(" ") : [].concat(y2).join(" "), o2.roundPathCorners(e2, 2 * this.strokeWidth);
        } }, { key: "drawPolarElements", value: function(t3) {
          var e2 = this.w, i2 = new _(this.ctx), a2 = new m2(this.ctx), s2 = new Ct(this.ctx), r2 = a2.group(), o2 = a2.group(), n2 = i2.niceScale(0, Math.ceil(this.maxY), 0), l2 = n2.result.reverse(), h2 = n2.result.length;
          this.maxY = n2.niceMax;
          for (var c2 = e2.globals.radialSize, d2 = c2 / (h2 - 1), g2 = 0; g2 < h2 - 1; g2++) {
            var u2 = a2.drawCircle(c2);
            if (u2.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e2.config.plotOptions.polarArea.rings.strokeWidth, stroke: e2.config.plotOptions.polarArea.rings.strokeColor }), e2.config.yaxis[0].show) {
              var p2 = s2.drawYAxisTexts(this.centerX, this.centerY - c2 + parseInt(e2.config.yaxis[0].labels.style.fontSize, 10) / 2, g2, l2[g2]);
              o2.add(p2);
            }
            r2.add(u2), c2 -= d2;
          }
          this.drawSpokes(t3), t3.add(r2), t3.add(o2);
        } }, { key: "renderInnerDataLabels", value: function(t3, e2) {
          var i2 = this.w, a2 = new m2(this.ctx), s2 = a2.group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(e2.translateX ? e2.translateX : 0, ", ").concat(e2.translateY ? e2.translateY : 0, ") scale(").concat(i2.config.plotOptions.pie.customScale, ")") }), r2 = t3.total.show;
          s2.node.style.opacity = e2.opacity;
          var o2, n2, l2 = e2.centerX, h2 = e2.centerY;
          o2 = void 0 === t3.name.color ? i2.globals.colors[0] : t3.name.color;
          var c2 = t3.name.fontSize, d2 = t3.name.fontFamily, g2 = t3.name.fontWeight;
          n2 = void 0 === t3.value.color ? i2.config.chart.foreColor : t3.value.color;
          var u2 = t3.value.formatter, p2 = "", f2 = "";
          if (r2 ? (o2 = t3.total.color, c2 = t3.total.fontSize, d2 = t3.total.fontFamily, g2 = t3.total.fontWeight, f2 = t3.total.label, p2 = t3.total.formatter(i2)) : 1 === i2.globals.series.length && (p2 = u2(i2.globals.series[0], i2), f2 = i2.globals.seriesNames[0]), f2 && (f2 = t3.name.formatter(f2, t3.total.show, i2)), t3.name.show) {
            var x2 = a2.drawText({ x: l2, y: h2 + parseFloat(t3.name.offsetY), text: f2, textAnchor: "middle", foreColor: o2, fontSize: c2, fontWeight: g2, fontFamily: d2 });
            x2.node.classList.add("apexcharts-datalabel-label"), s2.add(x2);
          }
          if (t3.value.show) {
            var b2 = t3.name.show ? parseFloat(t3.value.offsetY) + 16 : t3.value.offsetY, v2 = a2.drawText({ x: l2, y: h2 + b2, text: p2, textAnchor: "middle", foreColor: n2, fontWeight: t3.value.fontWeight, fontSize: t3.value.fontSize, fontFamily: t3.value.fontFamily });
            v2.node.classList.add("apexcharts-datalabel-value"), s2.add(v2);
          }
          return s2;
        } }, { key: "printInnerLabels", value: function(t3, e2, i2, a2) {
          var s2, r2 = this.w;
          a2 ? s2 = void 0 === t3.name.color ? r2.globals.colors[parseInt(a2.parentNode.getAttribute("rel"), 10) - 1] : t3.name.color : r2.globals.series.length > 1 && t3.total.show && (s2 = t3.total.color);
          var o2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
          i2 = (0, t3.value.formatter)(i2, r2), a2 || "function" != typeof t3.total.formatter || (i2 = t3.total.formatter(r2));
          var l2 = e2 === t3.total.label;
          e2 = t3.name.formatter(e2, l2, r2), null !== o2 && (o2.textContent = e2), null !== n2 && (n2.textContent = i2), null !== o2 && (o2.style.fill = s2);
        } }, { key: "printDataLabelsInner", value: function(t3, e2) {
          var i2 = this.w, a2 = t3.getAttribute("data:value"), s2 = i2.globals.seriesNames[parseInt(t3.parentNode.getAttribute("rel"), 10) - 1];
          i2.globals.series.length > 1 && this.printInnerLabels(e2, s2, a2, t3);
          var r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
          null !== r2 && (r2.style.opacity = 1);
        } }, { key: "drawSpokes", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m2(this.ctx), s2 = i2.config.plotOptions.polarArea.spokes;
          if (0 !== s2.strokeWidth) {
            for (var r2 = [], o2 = 360 / i2.globals.series.length, n2 = 0; n2 < i2.globals.series.length; n2++)
              r2.push(x.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize, i2.config.plotOptions.pie.startAngle + o2 * n2));
            r2.forEach(function(i3, r3) {
              var o3 = a2.drawLine(i3.x, i3.y, e2.centerX, e2.centerY, Array.isArray(s2.connectorColors) ? s2.connectorColors[r3] : s2.connectorColors);
              t3.add(o3);
            });
          }
        } }, { key: "revertDataLabelsInner", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = s2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o2 = false, n2 = s2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l2 = function(t4) {
            var i3 = t4.makeSliceOut, s3 = t4.printLabel;
            Array.prototype.forEach.call(n2, function(t5) {
              "true" === t5.getAttribute("data:pieClicked") && (i3 && (o2 = true), s3 && a2.printDataLabelsInner(t5, e2));
            });
          };
          if (l2({ makeSliceOut: true, printLabel: false }), e2.total.show && s2.globals.series.length > 1)
            o2 && !e2.total.showAlways ? l2({ makeSliceOut: false, printLabel: true }) : this.printInnerLabels(e2, e2.total.label, e2.total.formatter(s2));
          else if (l2({ makeSliceOut: false, printLabel: true }), !o2)
            if (s2.globals.selectedDataPoints.length && s2.globals.series.length > 1)
              if (s2.globals.selectedDataPoints[0].length > 0) {
                var h2 = s2.globals.selectedDataPoints[0], c2 = s2.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h2));
                this.printDataLabelsInner(c2, e2);
              } else
                r2 && s2.globals.selectedDataPoints.length && 0 === s2.globals.selectedDataPoints[0].length && (r2.style.opacity = 0);
            else
              r2 && s2.globals.series.length > 1 && (r2.style.opacity = 0);
        } }]), t2;
      }();
      var Pt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
          var i2 = this.w;
          this.graphics = new m2(this.ctx), this.lineColorArr = void 0 !== i2.globals.stroke.colors ? i2.globals.stroke.colors : i2.globals.colors, this.defaultSize = i2.globals.svgHeight < i2.globals.svgWidth ? i2.globals.gridHeight + 1.5 * i2.globals.goldenPadding : i2.globals.gridWidth, this.isLog = i2.config.yaxis[0].logarithmic, this.logBase = i2.config.yaxis[0].logBase, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, i2.globals.maxY, 0) : i2.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : i2.globals.minY, this.polygons = i2.config.plotOptions.radar.polygons, this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i2.config.chart.dropShadow.blur, i2.config.xaxis.labels.show && (this.size = this.size - i2.globals.xAxisLabelsWidth / 1.75), void 0 !== i2.config.plotOptions.radar.size && (this.size = i2.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var i2 = this, a2 = this.w, s2 = new H(this.ctx), r2 = [], o2 = new N(this.ctx);
          t3.length && (this.dataPointsLen = t3[a2.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
          var n2 = a2.globals.gridWidth / 2, l2 = a2.globals.gridHeight / 2, h2 = n2 + a2.config.plotOptions.radar.offsetX, c2 = l2 + a2.config.plotOptions.radar.offsetY, d2 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(h2 || 0, ", ").concat(c2 || 0, ")") }), g2 = [], u2 = null, p2 = null;
          if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t3.forEach(function(t4, n3) {
            var l3 = t4.length === a2.globals.dataPoints, h3 = i2.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": l3, seriesName: x.escapeString(a2.globals.seriesNames[n3]), rel: n3 + 1, "data:realIndex": n3 });
            i2.dataRadiusOfPercent[n3] = [], i2.dataRadius[n3] = [], i2.angleArr[n3] = [], t4.forEach(function(t5, e2) {
              var a3 = Math.abs(i2.maxValue - i2.minValue);
              t5 -= i2.minValue, i2.isLog && (t5 = i2.coreUtils.getLogVal(i2.logBase, t5, 0)), i2.dataRadiusOfPercent[n3][e2] = t5 / a3, i2.dataRadius[n3][e2] = i2.dataRadiusOfPercent[n3][e2] * i2.size, i2.angleArr[n3][e2] = e2 * i2.disAngle;
            }), g2 = i2.getDataPointsPos(i2.dataRadius[n3], i2.angleArr[n3]);
            var c3 = i2.createPaths(g2, { x: 0, y: 0 });
            u2 = i2.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), p2 = i2.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": n3 }), a2.globals.delayedElements.push({ el: u2.node, index: n3 });
            var d3 = { i: n3, realIndex: n3, animationDelay: n3, initialSpeed: a2.config.chart.animations.speed, dataChangeSpeed: a2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: a2.globals.stroke.colors[n3], strokeLineCap: a2.config.stroke.lineCap }, f3 = null;
            a2.globals.previousPaths.length > 0 && (f3 = i2.getPreviousPath(n3));
            for (var b2 = 0; b2 < c3.linePathsTo.length; b2++) {
              var m3 = i2.graphics.renderPaths(e(e({}, d3), {}, { pathFrom: null === f3 ? c3.linePathsFrom[b2] : f3, pathTo: c3.linePathsTo[b2], strokeWidth: Array.isArray(i2.strokeWidth) ? i2.strokeWidth[n3] : i2.strokeWidth, fill: "none", drawShadow: false }));
              h3.add(m3);
              var y2 = s2.fillPath({ seriesNumber: n3 }), w2 = i2.graphics.renderPaths(e(e({}, d3), {}, { pathFrom: null === f3 ? c3.areaPathsFrom[b2] : f3, pathTo: c3.areaPathsTo[b2], strokeWidth: 0, fill: y2, drawShadow: false }));
              if (a2.config.chart.dropShadow.enabled) {
                var k2 = new v(i2.ctx), A2 = a2.config.chart.dropShadow;
                k2.dropShadow(w2, Object.assign({}, A2, { noUserSpaceOnUse: true }), n3);
              }
              h3.add(w2);
            }
            t4.forEach(function(t5, s3) {
              var r3 = new D(i2.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n3, dataPointIndex: s3 }), l4 = i2.graphics.drawMarker(g2[s3].x, g2[s3].y, r3);
              l4.attr("rel", s3), l4.attr("j", s3), l4.attr("index", n3), l4.node.setAttribute("default-marker-size", r3.pSize);
              var c4 = i2.graphics.group({ class: "apexcharts-series-markers" });
              c4 && c4.add(l4), u2.add(c4), h3.add(u2);
              var d4 = a2.config.dataLabels;
              if (d4.enabled) {
                var f4 = d4.formatter(a2.globals.series[n3][s3], { seriesIndex: n3, dataPointIndex: s3, w: a2 });
                o2.plotDataLabelsText({ x: g2[s3].x, y: g2[s3].y, text: f4, textAnchor: "middle", i: n3, j: n3, parent: p2, offsetCorrection: false, dataLabelsConfig: e({}, d4) });
              }
              h3.add(p2);
            }), r2.push(h3);
          }), this.drawPolygons({ parent: d2 }), a2.config.xaxis.labels.show) {
            var f2 = this.drawXAxisTexts();
            d2.add(f2);
          }
          return r2.forEach(function(t4) {
            d2.add(t4);
          }), d2.add(this.yaxisLabels), d2;
        } }, { key: "drawPolygons", value: function(t3) {
          for (var e2 = this, i2 = this.w, a2 = t3.parent, s2 = new Ct(this.ctx), r2 = i2.globals.yAxisScale[0].result.reverse(), o2 = r2.length, n2 = [], l2 = this.size / (o2 - 1), h2 = 0; h2 < o2; h2++)
            n2[h2] = l2 * h2;
          n2.reverse();
          var c2 = [], d2 = [];
          n2.forEach(function(t4, i3) {
            var a3 = x.getPolygonPos(t4, e2.dataPointsLen), s3 = "";
            a3.forEach(function(t5, a4) {
              if (0 === i3) {
                var r3 = e2.graphics.drawLine(t5.x, t5.y, 0, 0, Array.isArray(e2.polygons.connectorColors) ? e2.polygons.connectorColors[a4] : e2.polygons.connectorColors);
                d2.push(r3);
              }
              0 === a4 && e2.yaxisLabelsTextsPos.push({ x: t5.x, y: t5.y }), s3 += t5.x + "," + t5.y + " ";
            }), c2.push(s3);
          }), c2.forEach(function(t4, s3) {
            var r3 = e2.polygons.strokeColors, o3 = e2.polygons.strokeWidth, n3 = e2.graphics.drawPolygon(t4, Array.isArray(r3) ? r3[s3] : r3, Array.isArray(o3) ? o3[s3] : o3, i2.globals.radarPolygons.fill.colors[s3]);
            a2.add(n3);
          }), d2.forEach(function(t4) {
            a2.add(t4);
          }), i2.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t4, i3) {
            var a3 = s2.drawYAxisTexts(t4.x, t4.y, i3, r2[i3]);
            e2.yaxisLabels.add(a3);
          });
        } }, { key: "drawXAxisTexts", value: function() {
          var t3 = this, i2 = this.w, a2 = i2.config.xaxis.labels, s2 = this.graphics.group({ class: "apexcharts-xaxis" }), r2 = x.getPolygonPos(this.size, this.dataPointsLen);
          return i2.globals.labels.forEach(function(o2, n2) {
            var l2 = i2.config.xaxis.labels.formatter, h2 = new N(t3.ctx);
            if (r2[n2]) {
              var c2 = t3.getTextPos(r2[n2], t3.size), d2 = l2(o2, { seriesIndex: -1, dataPointIndex: n2, w: i2 });
              h2.plotDataLabelsText({ x: c2.newX, y: c2.newY, text: d2, textAnchor: c2.textAnchor, i: n2, j: n2, parent: s2, color: Array.isArray(a2.style.colors) && a2.style.colors[n2] ? a2.style.colors[n2] : "#a8a8a8", dataLabelsConfig: e({ textAnchor: c2.textAnchor, dropShadow: { enabled: false } }, a2), offsetCorrection: false });
            }
          }), s2;
        } }, { key: "createPaths", value: function(t3, e2) {
          var i2 = this, a2 = [], s2 = [], r2 = [], o2 = [];
          if (t3.length) {
            s2 = [this.graphics.move(e2.x, e2.y)], o2 = [this.graphics.move(e2.x, e2.y)];
            var n2 = this.graphics.move(t3[0].x, t3[0].y), l2 = this.graphics.move(t3[0].x, t3[0].y);
            t3.forEach(function(e3, a3) {
              n2 += i2.graphics.line(e3.x, e3.y), l2 += i2.graphics.line(e3.x, e3.y), a3 === t3.length - 1 && (n2 += "Z", l2 += "Z");
            }), a2.push(n2), r2.push(l2);
          }
          return { linePathsFrom: s2, linePathsTo: a2, areaPathsFrom: o2, areaPathsTo: r2 };
        } }, { key: "getTextPos", value: function(t3, e2) {
          var i2 = "middle", a2 = t3.x, s2 = t3.y;
          return Math.abs(t3.x) >= 10 ? t3.x > 0 ? (i2 = "start", a2 += 10) : t3.x < 0 && (i2 = "end", a2 -= 10) : i2 = "middle", Math.abs(t3.y) >= e2 - 10 && (t3.y < 0 ? s2 -= 10 : t3.y > 0 && (s2 += 10)), { textAnchor: i2, newX: a2, newY: s2 };
        } }, { key: "getPreviousPath", value: function(t3) {
          for (var e2 = this.w, i2 = null, a2 = 0; a2 < e2.globals.previousPaths.length; a2++) {
            var s2 = e2.globals.previousPaths[a2];
            s2.paths.length > 0 && parseInt(s2.realIndex, 10) === parseInt(t3, 10) && void 0 !== e2.globals.previousPaths[a2].paths[0] && (i2 = e2.globals.previousPaths[a2].paths[0].d);
          }
          return i2;
        } }, { key: "getDataPointsPos", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
          t3 = t3 || [], e2 = e2 || [];
          for (var a2 = [], s2 = 0; s2 < i2; s2++) {
            var r2 = {};
            r2.x = t3[s2] * Math.sin(e2[s2]), r2.y = -t3[s2] * Math.cos(e2[s2]), a2.push(r2);
          }
          return a2;
        } }]), t2;
      }();
      var Mt = function(t2) {
        n(i2, Lt);
        var e2 = d(i2);
        function i2(t3) {
          var s2;
          a(this, i2), (s2 = e2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.animBeginArr = [0], s2.animDur = 0;
          var r2 = s2.w;
          return s2.startAngle = r2.config.plotOptions.radialBar.startAngle, s2.endAngle = r2.config.plotOptions.radialBar.endAngle, s2.totalAngle = Math.abs(r2.config.plotOptions.radialBar.endAngle - r2.config.plotOptions.radialBar.startAngle), s2.trackStartAngle = r2.config.plotOptions.radialBar.track.startAngle, s2.trackEndAngle = r2.config.plotOptions.radialBar.track.endAngle, s2.barLabels = s2.w.config.plotOptions.radialBar.barLabels, s2.donutDataLabels = s2.w.config.plotOptions.radialBar.dataLabels, s2.radialDataLabels = s2.donutDataLabels, s2.trackStartAngle || (s2.trackStartAngle = s2.startAngle), s2.trackEndAngle || (s2.trackEndAngle = s2.endAngle), 360 === s2.endAngle && (s2.endAngle = 359.99), s2.margin = parseInt(r2.config.plotOptions.radialBar.track.margin, 10), s2.onBarLabelClick = s2.onBarLabelClick.bind(c(s2)), s2;
        }
        return r(i2, [{ key: "draw", value: function(t3) {
          var e3 = this.w, i3 = new m2(this.ctx), a2 = i3.group({ class: "apexcharts-radialbar" });
          if (e3.globals.noData)
            return a2;
          var s2 = i3.group(), r2 = this.defaultSize / 2, o2 = e3.globals.gridWidth / 2, n2 = this.defaultSize / 2.05;
          e3.config.chart.sparkline.enabled || (n2 = n2 - e3.config.stroke.width - e3.config.chart.dropShadow.blur);
          var l2 = e3.globals.fill.colors;
          if (e3.config.plotOptions.radialBar.track.show) {
            var h2 = this.drawTracks({ size: n2, centerX: o2, centerY: r2, colorArr: l2, series: t3 });
            s2.add(h2);
          }
          var c2 = this.drawArcs({ size: n2, centerX: o2, centerY: r2, colorArr: l2, series: t3 }), d2 = 360;
          e3.config.plotOptions.radialBar.startAngle < 0 && (d2 = this.totalAngle);
          var g2 = (360 - d2) / 360;
          if (e3.globals.radialSize = n2 - n2 * g2, this.radialDataLabels.value.show) {
            var u2 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
            e3.globals.radialSize += u2 * g2;
          }
          return s2.add(c2.g), "front" === e3.config.plotOptions.radialBar.hollow.position && (c2.g.add(c2.elHollow), c2.dataLabels && c2.g.add(c2.dataLabels)), a2.add(s2), a2;
        } }, { key: "drawTracks", value: function(t3) {
          var e3 = this.w, i3 = new m2(this.ctx), a2 = i3.group({ class: "apexcharts-tracks" }), s2 = new v(this.ctx), r2 = new H(this.ctx), o2 = this.getStrokeWidth(t3);
          t3.size = t3.size - o2 / 2;
          for (var n2 = 0; n2 < t3.series.length; n2++) {
            var l2 = i3.group({ class: "apexcharts-radialbar-track apexcharts-track" });
            a2.add(l2), l2.attr({ rel: n2 + 1 }), t3.size = t3.size - o2 - this.margin;
            var h2 = e3.config.plotOptions.radialBar.track, c2 = r2.fillPath({ seriesNumber: 0, size: t3.size, fillColors: Array.isArray(h2.background) ? h2.background[n2] : h2.background, solid: true }), d2 = this.trackStartAngle, g2 = this.trackEndAngle;
            Math.abs(g2) + Math.abs(d2) >= 360 && (g2 = 360 - Math.abs(this.startAngle) - 0.1);
            var u2 = i3.drawPath({ d: "", stroke: c2, strokeWidth: o2 * parseInt(h2.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h2.opacity, classes: "apexcharts-radialbar-area" });
            if (h2.dropShadow.enabled) {
              var p2 = h2.dropShadow;
              s2.dropShadow(u2, p2);
            }
            l2.add(u2), u2.attr("id", "apexcharts-radialbarTrack-" + n2), this.animatePaths(u2, { centerX: t3.centerX, centerY: t3.centerY, endAngle: g2, startAngle: d2, size: t3.size, i: n2, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true, easing: e3.globals.easing });
          }
          return a2;
        } }, { key: "drawArcs", value: function(t3) {
          var e3 = this.w, i3 = new m2(this.ctx), a2 = new H(this.ctx), s2 = new v(this.ctx), r2 = i3.group(), o2 = this.getStrokeWidth(t3);
          t3.size = t3.size - o2 / 2;
          var n2 = e3.config.plotOptions.radialBar.hollow.background, l2 = t3.size - o2 * t3.series.length - this.margin * t3.series.length - o2 * parseInt(e3.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h2 = l2 - e3.config.plotOptions.radialBar.hollow.margin;
          void 0 !== e3.config.plotOptions.radialBar.hollow.image && (n2 = this.drawHollowImage(t3, r2, l2, n2));
          var c2 = this.drawHollow({ size: h2, centerX: t3.centerX, centerY: t3.centerY, fill: n2 || "transparent" });
          if (e3.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
            var d2 = e3.config.plotOptions.radialBar.hollow.dropShadow;
            s2.dropShadow(c2, d2);
          }
          var g2 = 1;
          !this.radialDataLabels.total.show && e3.globals.series.length > 1 && (g2 = 0);
          var u2 = null;
          this.radialDataLabels.show && (u2 = this.renderInnerDataLabels(this.radialDataLabels, { hollowSize: l2, centerX: t3.centerX, centerY: t3.centerY, opacity: g2 })), "back" === e3.config.plotOptions.radialBar.hollow.position && (r2.add(c2), u2 && r2.add(u2));
          var p2 = false;
          e3.config.plotOptions.radialBar.inverseOrder && (p2 = true);
          for (var f2 = p2 ? t3.series.length - 1 : 0; p2 ? f2 >= 0 : f2 < t3.series.length; p2 ? f2-- : f2++) {
            var b2 = i3.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: x.escapeString(e3.globals.seriesNames[f2]) });
            r2.add(b2), b2.attr({ rel: f2 + 1, "data:realIndex": f2 }), this.ctx.series.addCollapsedClassToSeries(b2, f2), t3.size = t3.size - o2 - this.margin;
            var y2 = a2.fillPath({ seriesNumber: f2, size: t3.size, value: t3.series[f2] }), w2 = this.startAngle, k2 = void 0, A2 = x.negToZero(t3.series[f2] > 100 ? 100 : t3.series[f2]) / 100, S2 = Math.round(this.totalAngle * A2) + this.startAngle, C2 = void 0;
            e3.globals.dataChanged && (k2 = this.startAngle, C2 = Math.round(this.totalAngle * x.negToZero(e3.globals.previousPaths[f2]) / 100) + k2), Math.abs(S2) + Math.abs(w2) >= 360 && (S2 -= 0.01), Math.abs(C2) + Math.abs(k2) >= 360 && (C2 -= 0.01);
            var L2 = S2 - w2, P2 = Array.isArray(e3.config.stroke.dashArray) ? e3.config.stroke.dashArray[f2] : e3.config.stroke.dashArray, M2 = i3.drawPath({ d: "", stroke: y2, strokeWidth: o2, fill: "none", fillOpacity: e3.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + f2, strokeDashArray: P2 });
            if (m2.setAttrs(M2.node, { "data:angle": L2, "data:value": t3.series[f2] }), e3.config.chart.dropShadow.enabled) {
              var I2 = e3.config.chart.dropShadow;
              s2.dropShadow(M2, I2, f2);
            }
            if (s2.setSelectionFilter(M2, 0, f2), this.addListeners(M2, this.radialDataLabels), b2.add(M2), M2.attr({ index: 0, j: f2 }), this.barLabels.enabled) {
              var T2 = x.polarToCartesian(t3.centerX, t3.centerY, t3.size, w2), z2 = this.barLabels.formatter(e3.globals.seriesNames[f2], { seriesIndex: f2, w: e3 }), X2 = ["apexcharts-radialbar-label"];
              this.barLabels.onClick || X2.push("apexcharts-no-click");
              var E2 = this.barLabels.useSeriesColors ? e3.globals.colors[f2] : e3.config.chart.foreColor;
              E2 || (E2 = e3.config.chart.foreColor);
              var Y2 = T2.x - this.barLabels.margin, F2 = T2.y, R2 = i3.drawText({ x: Y2, y: F2, text: z2, textAnchor: "end", dominantBaseline: "middle", fontFamily: this.barLabels.fontFamily, fontWeight: this.barLabels.fontWeight, fontSize: this.barLabels.fontSize, foreColor: E2, cssClass: X2.join(" ") });
              R2.on("click", this.onBarLabelClick), R2.attr({ rel: f2 + 1 }), 0 !== w2 && R2.attr({ "transform-origin": "".concat(Y2, " ").concat(F2), transform: "rotate(".concat(w2, " 0 0)") }), b2.add(R2);
            }
            var D2 = 0;
            !this.initialAnim || e3.globals.resized || e3.globals.dataChanged || (D2 = e3.config.chart.animations.speed), e3.globals.dataChanged && (D2 = e3.config.chart.animations.dynamicAnimation.speed), this.animDur = D2 / (1.2 * t3.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(M2, { centerX: t3.centerX, centerY: t3.centerY, endAngle: S2, startAngle: w2, prevEndAngle: C2, prevStartAngle: k2, size: t3.size, i: f2, totalItems: 2, animBeginArr: this.animBeginArr, dur: D2, shouldSetPrevPaths: true, easing: e3.globals.easing });
          }
          return { g: r2, elHollow: c2, dataLabels: u2 };
        } }, { key: "drawHollow", value: function(t3) {
          var e3 = new m2(this.ctx).drawCircle(2 * t3.size);
          return e3.attr({ class: "apexcharts-radialbar-hollow", cx: t3.centerX, cy: t3.centerY, r: t3.size, fill: t3.fill }), e3;
        } }, { key: "drawHollowImage", value: function(t3, e3, i3, a2) {
          var s2 = this.w, r2 = new H(this.ctx), o2 = x.randomId(), n2 = s2.config.plotOptions.radialBar.hollow.image;
          if (s2.config.plotOptions.radialBar.hollow.imageClipped)
            r2.clippedImgArea({ width: i3, height: i3, image: n2, patternID: "pattern".concat(s2.globals.cuid).concat(o2) }), a2 = "url(#pattern".concat(s2.globals.cuid).concat(o2, ")");
          else {
            var l2 = s2.config.plotOptions.radialBar.hollow.imageWidth, h2 = s2.config.plotOptions.radialBar.hollow.imageHeight;
            if (void 0 === l2 && void 0 === h2) {
              var c2 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
                this.move(t3.centerX - e4.width / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - e4.height / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY);
              });
              e3.add(c2);
            } else {
              var d2 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
                this.move(t3.centerX - l2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - h2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l2, h2);
              });
              e3.add(d2);
            }
          }
          return a2;
        } }, { key: "getStrokeWidth", value: function(t3) {
          var e3 = this.w;
          return t3.size * (100 - parseInt(e3.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t3.series.length + 1) - this.margin;
        } }, { key: "onBarLabelClick", value: function(t3) {
          var e3 = parseInt(t3.target.getAttribute("rel"), 10) - 1, i3 = this.barLabels.onClick, a2 = this.w;
          i3 && i3(a2.globals.seriesNames[e3], { w: a2, seriesIndex: e3 });
        } }]), i2;
      }();
      var It = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3) {
          var a2 = this.w, s3 = new m2(this.ctx);
          this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t3, this.seriesRangeStart = a2.globals.seriesRangeStart, this.seriesRangeEnd = a2.globals.seriesRangeEnd, this.barHelpers.initVariables(t3);
          for (var r2 = s3.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), n2 = 0; n2 < t3.length; n2++) {
            var l2, h2, c2, d2, g2 = void 0, u2 = void 0, p2 = a2.globals.comboCharts ? i3[n2] : n2, f2 = this.barHelpers.getGroupIndex(p2).columnGroupIndex, b2 = s3.group({ class: "apexcharts-series", seriesName: x.escapeString(a2.globals.seriesNames[p2]), rel: n2 + 1, "data:realIndex": p2 });
            this.ctx.series.addCollapsedClassToSeries(b2, p2), t3[n2].length > 0 && (this.visibleI = this.visibleI + 1);
            var v2 = 0, y2 = 0, w2 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = a2.globals.seriesYAxisReverseMap[p2][0], w2 = p2);
            var k2 = this.barHelpers.initialPositions();
            u2 = k2.y, d2 = k2.zeroW, g2 = k2.x, y2 = k2.barWidth, v2 = k2.barHeight, l2 = k2.xDivision, h2 = k2.yDivision, c2 = k2.zeroH;
            for (var A2 = s3.group({ class: "apexcharts-datalabels", "data:realIndex": p2 }), S2 = s3.group({ class: "apexcharts-rangebar-goals-markers" }), C2 = 0; C2 < a2.globals.dataPoints; C2++) {
              var L2, P2 = this.barHelpers.getStrokeWidth(n2, C2, p2), M2 = this.seriesRangeStart[n2][C2], I2 = this.seriesRangeEnd[n2][C2], T2 = null, z2 = null, X2 = null, E2 = { x: g2, y: u2, strokeWidth: P2, elSeries: b2 }, Y2 = this.seriesLen;
              if (a2.config.plotOptions.bar.rangeBarGroupRows && (Y2 = 1), void 0 === a2.config.series[n2].data[C2])
                break;
              if (this.isHorizontal) {
                X2 = u2 + v2 * this.visibleI;
                var F2 = (h2 - v2 * Y2) / 2;
                if (a2.config.series[n2].data[C2].x) {
                  var R2 = this.detectOverlappingBars({ i: n2, j: C2, barYPosition: X2, srty: F2, barHeight: v2, yDivision: h2, initPositions: k2 });
                  v2 = R2.barHeight, X2 = R2.barYPosition;
                }
                y2 = (T2 = this.drawRangeBarPaths(e({ indexes: { i: n2, j: C2, realIndex: p2 }, barHeight: v2, barYPosition: X2, zeroW: d2, yDivision: h2, y1: M2, y2: I2 }, E2))).barWidth;
              } else {
                a2.globals.isXNumeric && (g2 = (a2.globals.seriesX[n2][C2] - a2.globals.minX) / this.xRatio - y2 / 2), z2 = g2 + y2 * this.visibleI;
                var H2 = (l2 - y2 * Y2) / 2;
                if (a2.config.series[n2].data[C2].x) {
                  var D2 = this.detectOverlappingBars({ i: n2, j: C2, barXPosition: z2, srtx: H2, barWidth: y2, xDivision: l2, initPositions: k2 });
                  y2 = D2.barWidth, z2 = D2.barXPosition;
                }
                v2 = (T2 = this.drawRangeColumnPaths(e({ indexes: { i: n2, j: C2, realIndex: p2, translationsIndex: w2 }, barWidth: y2, barXPosition: z2, zeroH: c2, xDivision: l2 }, E2))).barHeight;
              }
              var O2 = this.barHelpers.drawGoalLine({ barXPosition: T2.barXPosition, barYPosition: X2, goalX: T2.goalX, goalY: T2.goalY, barHeight: v2, barWidth: y2 });
              O2 && S2.add(O2), u2 = T2.y, g2 = T2.x;
              var N2 = this.barHelpers.getPathFillColor(t3, n2, C2, p2), W2 = a2.globals.stroke.colors[p2];
              this.renderSeries((o(L2 = { realIndex: p2, pathFill: N2, lineFill: W2, j: C2, i: n2, x: g2, y: u2, y1: M2, y2: I2, pathFrom: T2.pathFrom, pathTo: T2.pathTo, strokeWidth: P2, elSeries: b2, series: t3, barHeight: v2, barWidth: y2, barXPosition: z2, barYPosition: X2 }, "barWidth", y2), o(L2, "columnGroupIndex", f2), o(L2, "elDataLabelsWrap", A2), o(L2, "elGoalsMarkers", S2), o(L2, "visibleSeries", this.visibleI), o(L2, "type", "rangebar"), L2));
            }
            r2.add(b2);
          }
          return r2;
        } }, { key: "detectOverlappingBars", value: function(t3) {
          var e2 = t3.i, i3 = t3.j, a2 = t3.barYPosition, s3 = t3.barXPosition, r2 = t3.srty, o2 = t3.srtx, n2 = t3.barHeight, l2 = t3.barWidth, h2 = t3.yDivision, c2 = t3.xDivision, d2 = t3.initPositions, g2 = this.w, u2 = [], p2 = g2.config.series[e2].data[i3].rangeName, f2 = g2.config.series[e2].data[i3].x, x2 = Array.isArray(f2) ? f2.join(" ") : f2, b2 = g2.globals.labels.map(function(t4) {
            return Array.isArray(t4) ? t4.join(" ") : t4;
          }).indexOf(x2), v2 = g2.globals.seriesRange[e2].findIndex(function(t4) {
            return t4.x === x2 && t4.overlaps.length > 0;
          });
          return this.isHorizontal ? (a2 = g2.config.plotOptions.bar.rangeBarGroupRows ? r2 + h2 * b2 : r2 + n2 * this.visibleI + h2 * b2, v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e2][v2].overlaps).indexOf(p2) > -1 && (a2 = (n2 = d2.barHeight / u2.length) * this.visibleI + h2 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n2 * (this.visibleI + u2.indexOf(p2)) + h2 * b2)) : (b2 > -1 && !g2.globals.timescaleLabels.length && (s3 = g2.config.plotOptions.bar.rangeBarGroupRows ? o2 + c2 * b2 : o2 + l2 * this.visibleI + c2 * b2), v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e2][v2].overlaps).indexOf(p2) > -1 && (s3 = (l2 = d2.barWidth / u2.length) * this.visibleI + c2 * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l2 * (this.visibleI + u2.indexOf(p2)) + c2 * b2)), { barYPosition: a2, barXPosition: s3, barHeight: n2, barWidth: l2 };
        } }, { key: "drawRangeColumnPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x, a2 = t3.xDivision, s3 = t3.barWidth, r2 = t3.barXPosition, o2 = t3.zeroH, n2 = this.w, l2 = e2.i, h2 = e2.j, c2 = e2.realIndex, d2 = e2.translationsIndex, g2 = this.yRatio[d2], u2 = this.getRangeValue(c2, h2), p2 = Math.min(u2.start, u2.end), f2 = Math.max(u2.start, u2.end);
          void 0 === this.series[l2][h2] || null === this.series[l2][h2] ? p2 = o2 : (p2 = o2 - p2 / g2, f2 = o2 - f2 / g2);
          var x2 = Math.abs(f2 - p2), b2 = this.barHelpers.getColumnPaths({ barXPosition: r2, barWidth: s3, y1: p2, y2: f2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: c2, i: c2, j: h2, w: n2 });
          if (n2.globals.isXNumeric) {
            var v2 = this.getBarXForNumericXAxis({ x: i3, j: h2, realIndex: c2, barWidth: s3 });
            i3 = v2.x, r2 = v2.barXPosition;
          } else
            i3 += a2;
          return { pathTo: b2.pathTo, pathFrom: b2.pathFrom, barHeight: x2, x: i3, y: u2.start < 0 && u2.end < 0 ? p2 : f2, goalY: this.barHelpers.getGoalValues("y", null, o2, l2, h2, d2), barXPosition: r2 };
        } }, { key: "drawRangeBarPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.y, a2 = t3.y1, s3 = t3.y2, r2 = t3.yDivision, o2 = t3.barHeight, n2 = t3.barYPosition, l2 = t3.zeroW, h2 = this.w, c2 = e2.realIndex, d2 = e2.j, g2 = l2 + a2 / this.invertedYRatio, u2 = l2 + s3 / this.invertedYRatio, p2 = this.getRangeValue(c2, d2), f2 = Math.abs(u2 - g2), x2 = this.barHelpers.getBarpaths({ barYPosition: n2, barHeight: o2, x1: g2, x2: u2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: c2, realIndex: c2, j: d2, w: h2 });
          return h2.globals.isXNumeric || (i3 += r2), { pathTo: x2.pathTo, pathFrom: x2.pathFrom, barWidth: f2, x: p2.start < 0 && p2.end < 0 ? g2 : u2, goalX: this.barHelpers.getGoalValues("x", l2, null, c2, d2), y: i3 };
        } }, { key: "getRangeValue", value: function(t3, e2) {
          var i3 = this.w;
          return { start: i3.globals.seriesRangeStart[t3][e2], end: i3.globals.seriesRangeEnd[t3][e2] };
        } }]), s2;
      }();
      var Tt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.lineCtx = e2;
        }
        return r(t2, [{ key: "sameValueSeriesFix", value: function(t3, e2) {
          var i2 = this.w;
          if (("gradient" === i2.config.fill.type || "gradient" === i2.config.fill.type[t3]) && new y(this.lineCtx.ctx, i2).seriesHaveSameValues(t3)) {
            var a2 = e2[t3].slice();
            a2[a2.length - 1] = a2[a2.length - 1] + 1e-6, e2[t3] = a2;
          }
          return e2;
        } }, { key: "calculatePoints", value: function(t3) {
          var e2 = t3.series, i2 = t3.realIndex, a2 = t3.x, s2 = t3.y, r2 = t3.i, o2 = t3.j, n2 = t3.prevY, l2 = this.w, h2 = [], c2 = [];
          if (0 === o2) {
            var d2 = this.lineCtx.categoryAxisCorrection + l2.config.markers.offsetX;
            l2.globals.isXNumeric && (d2 = (l2.globals.seriesX[i2][0] - l2.globals.minX) / this.lineCtx.xRatio + l2.config.markers.offsetX), h2.push(d2), c2.push(x.isNumber(e2[r2][0]) ? n2 + l2.config.markers.offsetY : null), h2.push(a2 + l2.config.markers.offsetX), c2.push(x.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
          } else
            h2.push(a2 + l2.config.markers.offsetX), c2.push(x.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
          return { x: h2, y: c2 };
        } }, { key: "checkPreviousPaths", value: function(t3) {
          for (var e2 = t3.pathFromLine, i2 = t3.pathFromArea, a2 = t3.realIndex, s2 = this.w, r2 = 0; r2 < s2.globals.previousPaths.length; r2++) {
            var o2 = s2.globals.previousPaths[r2];
            ("line" === o2.type || "area" === o2.type) && o2.paths.length > 0 && parseInt(o2.realIndex, 10) === parseInt(a2, 10) && ("line" === o2.type ? (this.lineCtx.appendPathFrom = false, e2 = s2.globals.previousPaths[r2].paths[0].d) : "area" === o2.type && (this.lineCtx.appendPathFrom = false, i2 = s2.globals.previousPaths[r2].paths[0].d, s2.config.stroke.show && s2.globals.previousPaths[r2].paths[1] && (e2 = s2.globals.previousPaths[r2].paths[1].d)));
          }
          return { pathFromLine: e2, pathFromArea: i2 };
        } }, { key: "determineFirstPrevY", value: function(t3) {
          var e2, i2, a2, s2 = t3.i, r2 = t3.realIndex, o2 = t3.series, n2 = t3.prevY, l2 = t3.lineYPosition, h2 = t3.translationsIndex, c2 = this.w, d2 = c2.config.chart.stacked && !c2.globals.comboCharts || c2.config.chart.stacked && c2.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e2 = this.w.config.series[r2]) || void 0 === e2 ? void 0 : e2.type) || "column" === (null === (i2 = this.w.config.series[r2]) || void 0 === i2 ? void 0 : i2.type));
          if (void 0 !== (null === (a2 = o2[s2]) || void 0 === a2 ? void 0 : a2[0]))
            n2 = (l2 = d2 && s2 > 0 ? this.lineCtx.prevSeriesY[s2 - 1][0] : this.lineCtx.zeroY) - o2[s2][0] / this.lineCtx.yRatio[h2] + 2 * (this.lineCtx.isReversed ? o2[s2][0] / this.lineCtx.yRatio[h2] : 0);
          else if (d2 && s2 > 0 && void 0 === o2[s2][0]) {
            for (var g2 = s2 - 1; g2 >= 0; g2--)
              if (null !== o2[g2][0] && void 0 !== o2[g2][0]) {
                n2 = l2 = this.lineCtx.prevSeriesY[g2][0];
                break;
              }
          }
          return { prevY: n2, lineYPosition: l2 };
        } }]), t2;
      }();
      var zt = function(t2) {
        for (var e2, i2, a2, s2, r2 = function(t3) {
          for (var e3 = [], i3 = t3[0], a3 = t3[1], s3 = e3[0] = Yt(i3, a3), r3 = 1, o3 = t3.length - 1; r3 < o3; r3++)
            i3 = a3, a3 = t3[r3 + 1], e3[r3] = 0.5 * (s3 + (s3 = Yt(i3, a3)));
          return e3[r3] = s3, e3;
        }(t2), o2 = t2.length - 1, n2 = [], l2 = 0; l2 < o2; l2++)
          a2 = Yt(t2[l2], t2[l2 + 1]), Math.abs(a2) < 1e-6 ? r2[l2] = r2[l2 + 1] = 0 : (s2 = (e2 = r2[l2] / a2) * e2 + (i2 = r2[l2 + 1] / a2) * i2) > 9 && (s2 = 3 * a2 / Math.sqrt(s2), r2[l2] = s2 * e2, r2[l2 + 1] = s2 * i2);
        for (var h2 = 0; h2 <= o2; h2++)
          s2 = (t2[Math.min(o2, h2 + 1)][0] - t2[Math.max(0, h2 - 1)][0]) / (6 * (1 + r2[h2] * r2[h2])), n2.push([s2 || 0, r2[h2] * s2 || 0]);
        return n2;
      };
      var Xt = function(t2) {
        var e2 = zt(t2), i2 = t2[1], a2 = t2[0], s2 = [], r2 = e2[1], o2 = e2[0];
        s2.push(a2, [a2[0] + o2[0], a2[1] + o2[1], i2[0] - r2[0], i2[1] - r2[1], i2[0], i2[1]]);
        for (var n2 = 2, l2 = e2.length; n2 < l2; n2++) {
          var h2 = t2[n2], c2 = e2[n2];
          s2.push([h2[0] - c2[0], h2[1] - c2[1], h2[0], h2[1]]);
        }
        return s2;
      };
      var Et = function(t2, e2, i2) {
        var a2 = t2.slice(e2, i2);
        if (e2) {
          if (i2 - e2 > 1 && a2[1].length < 6) {
            var s2 = a2[0].length;
            a2[1] = [2 * a2[0][s2 - 2] - a2[0][s2 - 4], 2 * a2[0][s2 - 1] - a2[0][s2 - 3]].concat(a2[1]);
          }
          a2[0] = a2[0].slice(-2);
        }
        return a2;
      };
      function Yt(t2, e2) {
        return (e2[1] - t2[1]) / (e2[0] - t2[0]);
      }
      var Ft = function() {
        function t2(e2, i2, s2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.xyRatios = i2, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s2, this.scatter = new O(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Tt(this), this.markers = new D(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
        }
        return r(t2, [{ key: "draw", value: function(t3, i2, a2, s2) {
          var r2, o2 = this.w, n2 = new m2(this.ctx), l2 = o2.globals.comboCharts ? i2 : o2.config.chart.type, h2 = n2.group({ class: "apexcharts-".concat(l2, "-series apexcharts-plot-series") }), c2 = new y(this.ctx, o2);
          this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t3 = c2.getLogSeries(t3), this.yRatio = c2.getLogYRatios(this.yRatio), this.prevSeriesY = [];
          for (var d2 = [], g2 = 0; g2 < t3.length; g2++) {
            t3 = this.lineHelpers.sameValueSeriesFix(g2, t3);
            var u2 = o2.globals.comboCharts ? a2[g2] : g2, p2 = this.yRatio.length > 1 ? u2 : 0;
            this._initSerieVariables(t3, g2, u2);
            var f2 = [], x2 = [], b2 = [], v2 = o2.globals.padHorizontal + this.categoryAxisCorrection;
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, u2), o2.globals.isXNumeric && o2.globals.seriesX.length > 0 && (v2 = (o2.globals.seriesX[u2][0] - o2.globals.minX) / this.xRatio), b2.push(v2);
            var w2, k2 = v2, A2 = void 0, S2 = k2, C2 = this.zeroY, L2 = this.zeroY;
            C2 = this.lineHelpers.determineFirstPrevY({ i: g2, realIndex: u2, series: t3, prevY: C2, lineYPosition: 0, translationsIndex: p2 }).prevY, "monotoneCubic" === o2.config.stroke.curve && null === t3[g2][0] ? f2.push(null) : f2.push(C2), w2 = C2;
            "rangeArea" === l2 && (A2 = L2 = this.lineHelpers.determineFirstPrevY({ i: g2, realIndex: u2, series: s2, prevY: L2, lineYPosition: 0, translationsIndex: p2 }).prevY, x2.push(null !== f2[0] ? L2 : null));
            var P2 = this._calculatePathsFrom({ type: l2, series: t3, i: g2, realIndex: u2, translationsIndex: p2, prevX: S2, prevY: C2, prevY2: L2 }), M2 = [f2[0]], I2 = [x2[0]], T2 = { type: l2, series: t3, realIndex: u2, translationsIndex: p2, i: g2, x: v2, y: 1, pX: k2, pY: w2, pathsFrom: P2, linePaths: [], areaPaths: [], seriesIndex: a2, lineYPosition: 0, xArrj: b2, yArrj: f2, y2Arrj: x2, seriesRangeEnd: s2 }, z2 = this._iterateOverDataPoints(e(e({}, T2), {}, { iterations: "rangeArea" === l2 ? t3[g2].length - 1 : void 0, isRangeStart: true }));
            if ("rangeArea" === l2) {
              for (var X2 = this._calculatePathsFrom({ series: s2, i: g2, realIndex: u2, prevX: S2, prevY: L2 }), E2 = this._iterateOverDataPoints(e(e({}, T2), {}, { series: s2, xArrj: [v2], yArrj: M2, y2Arrj: I2, pY: A2, areaPaths: z2.areaPaths, pathsFrom: X2, iterations: s2[g2].length - 1, isRangeStart: false })), Y2 = z2.linePaths.length / 2, F2 = 0; F2 < Y2; F2++)
                z2.linePaths[F2] = E2.linePaths[F2 + Y2] + z2.linePaths[F2];
              z2.linePaths.splice(Y2), z2.pathFromLine = E2.pathFromLine + z2.pathFromLine;
            } else
              z2.pathFromArea += n2.line(0, this.zeroY);
            this._handlePaths({ type: l2, realIndex: u2, i: g2, paths: z2 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), d2.push(this.elSeries);
          }
          if (void 0 !== (null === (r2 = o2.config.series[0]) || void 0 === r2 ? void 0 : r2.zIndex) && d2.sort(function(t4, e2) {
            return Number(t4.node.getAttribute("zIndex")) - Number(e2.node.getAttribute("zIndex"));
          }), o2.config.chart.stacked)
            for (var R2 = d2.length - 1; R2 >= 0; R2--)
              h2.add(d2[R2]);
          else
            for (var H2 = 0; H2 < d2.length; H2++)
              h2.add(d2[H2]);
          return h2;
        } }, { key: "_initSerieVariables", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = new m2(this.ctx);
          this.xDivision = a2.globals.gridWidth / (a2.globals.dataPoints - ("on" === a2.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a2.config.stroke.width) ? a2.config.stroke.width[i2] : a2.config.stroke.width;
          var r2 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = a2.globals.seriesYAxisReverseMap[i2], r2 = i2), this.isReversed = a2.config.yaxis[this.yaxisIndex] && a2.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a2.globals.gridHeight - this.baseLineY[r2] - (this.isReversed ? a2.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r2] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a2.globals.gridHeight || "end" === a2.config.plotOptions.area.fillTo) && (this.areaBottomY = a2.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s2.group({ class: "apexcharts-series", zIndex: void 0 !== a2.config.series[i2].zIndex ? a2.config.series[i2].zIndex : i2, seriesName: x.escapeString(a2.globals.seriesNames[i2]) }), this.elPointsMain = s2.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i2 }), this.elDataLabelsWrap = s2.group({ class: "apexcharts-datalabels", "data:realIndex": i2 });
          var o2 = t3[e2].length === a2.globals.dataPoints;
          this.elSeries.attr({ "data:longestSeries": o2, rel: e2 + 1, "data:realIndex": i2 }), this.appendPathFrom = true;
        } }, { key: "_calculatePathsFrom", value: function(t3) {
          var e2, i2, a2, s2, r2 = t3.type, o2 = t3.series, n2 = t3.i, l2 = t3.realIndex, h2 = t3.translationsIndex, c2 = t3.prevX, d2 = t3.prevY, g2 = t3.prevY2, u2 = this.w, p2 = new m2(this.ctx);
          if (null === o2[n2][0]) {
            for (var f2 = 0; f2 < o2[n2].length; f2++)
              if (null !== o2[n2][f2]) {
                c2 = this.xDivision * f2, d2 = this.zeroY - o2[n2][f2] / this.yRatio[h2], e2 = p2.move(c2, d2), i2 = p2.move(c2, this.areaBottomY);
                break;
              }
          } else
            e2 = p2.move(c2, d2), "rangeArea" === r2 && (e2 = p2.move(c2, g2) + p2.line(c2, d2)), i2 = p2.move(c2, this.areaBottomY) + p2.line(c2, d2);
          if (a2 = p2.move(0, this.zeroY) + p2.line(0, this.zeroY), s2 = p2.move(0, this.zeroY) + p2.line(0, this.zeroY), u2.globals.previousPaths.length > 0) {
            var x2 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a2, pathFromArea: s2, realIndex: l2 });
            a2 = x2.pathFromLine, s2 = x2.pathFromArea;
          }
          return { prevX: c2, prevY: d2, linePath: e2, areaPath: i2, pathFromLine: a2, pathFromArea: s2 };
        } }, { key: "_handlePaths", value: function(t3) {
          var i2 = t3.type, a2 = t3.realIndex, s2 = t3.i, r2 = t3.paths, o2 = this.w, n2 = new m2(this.ctx), l2 = new H(this.ctx);
          this.prevSeriesY.push(r2.yArrj), o2.globals.seriesXvalues[a2] = r2.xArrj, o2.globals.seriesYvalues[a2] = r2.yArrj;
          var h2 = o2.config.forecastDataPoints;
          if (h2.count > 0 && "rangeArea" !== i2) {
            var c2 = o2.globals.seriesXvalues[a2][o2.globals.seriesXvalues[a2].length - h2.count - 1], d2 = n2.drawRect(c2, 0, o2.globals.gridWidth, o2.globals.gridHeight, 0);
            o2.globals.dom.elForecastMask.appendChild(d2.node);
            var g2 = n2.drawRect(0, 0, c2, o2.globals.gridHeight, 0);
            o2.globals.dom.elNonForecastMask.appendChild(g2.node);
          }
          this.pointsChart || o2.globals.delayedElements.push({ el: this.elPointsMain.node, index: a2 });
          var u2 = { i: s2, realIndex: a2, animationDelay: s2, initialSpeed: o2.config.chart.animations.speed, dataChangeSpeed: o2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(i2) };
          if ("area" === i2)
            for (var p2 = l2.fillPath({ seriesNumber: a2 }), f2 = 0; f2 < r2.areaPaths.length; f2++) {
              var x2 = n2.renderPaths(e(e({}, u2), {}, { pathFrom: r2.pathFromArea, pathTo: r2.areaPaths[f2], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: p2 }));
              this.elSeries.add(x2);
            }
          if (o2.config.stroke.show && !this.pointsChart) {
            var b2 = null;
            if ("line" === i2)
              b2 = l2.fillPath({ seriesNumber: a2, i: s2 });
            else if ("solid" === o2.config.stroke.fill.type)
              b2 = o2.globals.stroke.colors[a2];
            else {
              var v2 = o2.config.fill;
              o2.config.fill = o2.config.stroke.fill, b2 = l2.fillPath({ seriesNumber: a2, i: s2 }), o2.config.fill = v2;
            }
            for (var y2 = 0; y2 < r2.linePaths.length; y2++) {
              var w2 = b2;
              "rangeArea" === i2 && (w2 = l2.fillPath({ seriesNumber: a2 }));
              var k2 = e(e({}, u2), {}, { pathFrom: r2.pathFromLine, pathTo: r2.linePaths[y2], stroke: b2, strokeWidth: this.strokeWidth, strokeLineCap: o2.config.stroke.lineCap, fill: "rangeArea" === i2 ? w2 : "none" }), A2 = n2.renderPaths(k2);
              if (this.elSeries.add(A2), A2.attr("fill-rule", "evenodd"), h2.count > 0 && "rangeArea" !== i2) {
                var S2 = n2.renderPaths(k2);
                S2.node.setAttribute("stroke-dasharray", h2.dashArray), h2.strokeWidth && S2.node.setAttribute("stroke-width", h2.strokeWidth), this.elSeries.add(S2), S2.attr("clip-path", "url(#forecastMask".concat(o2.globals.cuid, ")")), A2.attr("clip-path", "url(#nonForecastMask".concat(o2.globals.cuid, ")"));
              }
            }
          }
        } }, { key: "_iterateOverDataPoints", value: function(t3) {
          var e2, i2, a2 = this, s2 = t3.type, r2 = t3.series, o2 = t3.iterations, n2 = t3.realIndex, l2 = t3.translationsIndex, h2 = t3.i, c2 = t3.x, d2 = t3.y, g2 = t3.pX, u2 = t3.pY, p2 = t3.pathsFrom, f2 = t3.linePaths, b2 = t3.areaPaths, v2 = t3.seriesIndex, y2 = t3.lineYPosition, w2 = t3.xArrj, k2 = t3.yArrj, A2 = t3.y2Arrj, S2 = t3.isRangeStart, C2 = t3.seriesRangeEnd, L2 = this.w, P2 = new m2(this.ctx), M2 = this.yRatio, I2 = p2.prevY, T2 = p2.linePath, z2 = p2.areaPath, X2 = p2.pathFromLine, E2 = p2.pathFromArea, Y2 = x.isNumber(L2.globals.minYArr[n2]) ? L2.globals.minYArr[n2] : L2.globals.minY;
          o2 || (o2 = L2.globals.dataPoints > 1 ? L2.globals.dataPoints - 1 : L2.globals.dataPoints);
          var F2 = function(t4, e3) {
            return e3 - t4 / M2[l2] + 2 * (a2.isReversed ? t4 / M2[l2] : 0);
          }, R2 = d2, H2 = L2.config.chart.stacked && !L2.globals.comboCharts || L2.config.chart.stacked && L2.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e2 = this.w.config.series[n2]) || void 0 === e2 ? void 0 : e2.type) || "column" === (null === (i2 = this.w.config.series[n2]) || void 0 === i2 ? void 0 : i2.type)), D2 = L2.config.stroke.curve;
          Array.isArray(D2) && (D2 = Array.isArray(v2) ? D2[v2[h2]] : D2[h2]);
          for (var O2, N2 = 0, W2 = 0; W2 < o2; W2++) {
            var B2 = void 0 === r2[h2][W2 + 1] || null === r2[h2][W2 + 1];
            if (L2.globals.isXNumeric) {
              var G2 = L2.globals.seriesX[n2][W2 + 1];
              void 0 === L2.globals.seriesX[n2][W2 + 1] && (G2 = L2.globals.seriesX[n2][o2 - 1]), c2 = (G2 - L2.globals.minX) / this.xRatio;
            } else
              c2 += this.xDivision;
            if (H2)
              if (h2 > 0 && L2.globals.collapsedSeries.length < L2.config.series.length - 1) {
                y2 = this.prevSeriesY[function(t4) {
                  for (var e3 = t4; e3 > 0; e3--) {
                    if (!(L2.globals.collapsedSeriesIndices.indexOf((null == v2 ? void 0 : v2[e3]) || e3) > -1))
                      return e3;
                    e3--;
                  }
                  return 0;
                }(h2 - 1)][W2 + 1];
              } else
                y2 = this.zeroY;
            else
              y2 = this.zeroY;
            B2 ? d2 = F2(Y2, y2) : (d2 = F2(r2[h2][W2 + 1], y2), "rangeArea" === s2 && (R2 = F2(C2[h2][W2 + 1], y2))), w2.push(c2), !B2 || "smooth" !== L2.config.stroke.curve && "monotoneCubic" !== L2.config.stroke.curve ? (k2.push(d2), A2.push(R2)) : (k2.push(null), A2.push(null));
            var V2 = this.lineHelpers.calculatePoints({ series: r2, x: c2, y: d2, realIndex: n2, i: h2, j: W2, prevY: I2 }), j2 = this._createPaths({ type: s2, series: r2, i: h2, realIndex: n2, j: W2, x: c2, y: d2, y2: R2, xArrj: w2, yArrj: k2, y2Arrj: A2, pX: g2, pY: u2, pathState: N2, segmentStartX: O2, linePath: T2, areaPath: z2, linePaths: f2, areaPaths: b2, curve: D2, isRangeStart: S2 });
            b2 = j2.areaPaths, f2 = j2.linePaths, g2 = j2.pX, u2 = j2.pY, N2 = j2.pathState, O2 = j2.segmentStartX, z2 = j2.areaPath, T2 = j2.linePath, !this.appendPathFrom || "monotoneCubic" === D2 && "rangeArea" === s2 || (X2 += P2.line(c2, this.zeroY), E2 += P2.line(c2, this.zeroY)), this.handleNullDataPoints(r2, V2, h2, W2, n2), this._handleMarkersAndLabels({ type: s2, pointsPos: V2, i: h2, j: W2, realIndex: n2, isRangeStart: S2 });
          }
          return { yArrj: k2, xArrj: w2, pathFromArea: E2, areaPaths: b2, pathFromLine: X2, linePaths: f2, linePath: T2, areaPath: z2 };
        } }, { key: "_handleMarkersAndLabels", value: function(t3) {
          var e2 = t3.type, i2 = t3.pointsPos, a2 = t3.isRangeStart, s2 = t3.i, r2 = t3.j, o2 = t3.realIndex, n2 = this.w, l2 = new N(this.ctx);
          if (this.pointsChart)
            this.scatter.draw(this.elSeries, r2, { realIndex: o2, pointsPos: i2, zRatio: this.zRatio, elParent: this.elPointsMain });
          else {
            n2.globals.series[s2].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
            var h2 = this.markers.plotChartMarkers(i2, o2, r2 + 1);
            null !== h2 && this.elPointsMain.add(h2);
          }
          var c2 = l2.drawDataLabel({ type: e2, isRangeStart: a2, pos: i2, i: o2, j: r2 + 1 });
          null !== c2 && this.elDataLabelsWrap.add(c2);
        } }, { key: "_createPaths", value: function(t3) {
          var e2 = t3.type, i2 = t3.series, a2 = t3.i;
          t3.realIndex;
          var s2 = t3.j, r2 = t3.x, o2 = t3.y, n2 = t3.xArrj, l2 = t3.yArrj, h2 = t3.y2, c2 = t3.y2Arrj, d2 = t3.pX, g2 = t3.pY, u2 = t3.pathState, p2 = t3.segmentStartX, f2 = t3.linePath, x2 = t3.areaPath, b2 = t3.linePaths, v2 = t3.areaPaths, y2 = t3.curve, w2 = t3.isRangeStart;
          this.w;
          var k2, A2 = new m2(this.ctx), S2 = this.areaBottomY, C2 = "rangeArea" === e2, L2 = "rangeArea" === e2 && w2;
          switch (y2) {
            case "monotoneCubic":
              var P2 = w2 ? l2 : c2;
              switch (u2) {
                case 0:
                  if (null === P2[s2 + 1])
                    break;
                  u2 = 1;
                case 1:
                  if (!(C2 ? n2.length === i2[a2].length : s2 === i2[a2].length - 2))
                    break;
                case 2:
                  var M2 = w2 ? n2 : n2.slice().reverse(), I2 = w2 ? P2 : P2.slice().reverse(), T2 = (k2 = I2, M2.map(function(t4, e3) {
                    return [t4, k2[e3]];
                  }).filter(function(t4) {
                    return null !== t4[1];
                  })), z2 = T2.length > 1 ? Xt(T2) : T2, X2 = [];
                  C2 && (L2 ? v2 = T2 : X2 = v2.reverse());
                  var E2 = 0, Y2 = 0;
                  if (function(t4, e3) {
                    for (var i3 = function(t5) {
                      var e4 = [], i4 = 0;
                      return t5.forEach(function(t6) {
                        null !== t6 ? i4++ : i4 > 0 && (e4.push(i4), i4 = 0);
                      }), i4 > 0 && e4.push(i4), e4;
                    }(t4), a3 = [], s3 = 0, r3 = 0; s3 < i3.length; r3 += i3[s3++])
                      a3[s3] = Et(e3, r3, r3 + i3[s3]);
                    return a3;
                  }(I2, z2).forEach(function(t4) {
                    E2++;
                    var e3 = function(t5) {
                      for (var e4 = "", i4 = 0; i4 < t5.length; i4++) {
                        var a4 = t5[i4], s3 = a4.length;
                        s3 > 4 ? (e4 += "C".concat(a4[0], ", ").concat(a4[1]), e4 += ", ".concat(a4[2], ", ").concat(a4[3]), e4 += ", ".concat(a4[4], ", ").concat(a4[5])) : s3 > 2 && (e4 += "S".concat(a4[0], ", ").concat(a4[1]), e4 += ", ".concat(a4[2], ", ").concat(a4[3]));
                      }
                      return e4;
                    }(t4), i3 = Y2, a3 = (Y2 += t4.length) - 1;
                    L2 ? f2 = A2.move(T2[i3][0], T2[i3][1]) + e3 : C2 ? f2 = A2.move(X2[i3][0], X2[i3][1]) + A2.line(T2[i3][0], T2[i3][1]) + e3 + A2.line(X2[a3][0], X2[a3][1]) : (f2 = A2.move(T2[i3][0], T2[i3][1]) + e3, x2 = f2 + A2.line(T2[a3][0], S2) + A2.line(T2[i3][0], S2) + "z", v2.push(x2)), b2.push(f2);
                  }), C2 && E2 > 1 && !L2) {
                    var F2 = b2.slice(E2).reverse();
                    b2.splice(E2), F2.forEach(function(t4) {
                      return b2.push(t4);
                    });
                  }
                  u2 = 0;
              }
              break;
            case "smooth":
              var R2 = 0.35 * (r2 - d2);
              if (null === i2[a2][s2])
                u2 = 0;
              else
                switch (u2) {
                  case 0:
                    if (p2 = d2, f2 = L2 ? A2.move(d2, c2[s2]) + A2.line(d2, g2) : A2.move(d2, g2), x2 = A2.move(d2, g2), u2 = 1, s2 < i2[a2].length - 2) {
                      var H2 = A2.curve(d2 + R2, g2, r2 - R2, o2, r2, o2);
                      f2 += H2, x2 += H2;
                      break;
                    }
                  case 1:
                    if (null === i2[a2][s2 + 1])
                      f2 += L2 ? A2.line(d2, h2) : A2.move(d2, g2), x2 += A2.line(d2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2);
                    else {
                      var D2 = A2.curve(d2 + R2, g2, r2 - R2, o2, r2, o2);
                      f2 += D2, x2 += D2, s2 >= i2[a2].length - 2 && (L2 && (f2 += A2.curve(r2, o2, r2, o2, r2, h2) + A2.move(r2, h2)), x2 += A2.curve(r2, o2, r2, o2, r2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2));
                    }
                }
              d2 = r2, g2 = o2;
              break;
            default:
              var O2 = function(t4, e3, i3) {
                var a3 = [];
                switch (t4) {
                  case "stepline":
                    a3 = A2.line(e3, null, "H") + A2.line(null, i3, "V");
                    break;
                  case "linestep":
                    a3 = A2.line(null, i3, "V") + A2.line(e3, null, "H");
                    break;
                  case "straight":
                    a3 = A2.line(e3, i3);
                }
                return a3;
              };
              if (null === i2[a2][s2])
                u2 = 0;
              else
                switch (u2) {
                  case 0:
                    if (p2 = d2, f2 = L2 ? A2.move(d2, c2[s2]) + A2.line(d2, g2) : A2.move(d2, g2), x2 = A2.move(d2, g2), u2 = 1, s2 < i2[a2].length - 2) {
                      var N2 = O2(y2, r2, o2);
                      f2 += N2, x2 += N2;
                      break;
                    }
                  case 1:
                    if (null === i2[a2][s2 + 1])
                      f2 += L2 ? A2.line(d2, h2) : A2.move(d2, g2), x2 += A2.line(d2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2);
                    else {
                      var W2 = O2(y2, r2, o2);
                      f2 += W2, x2 += W2, s2 >= i2[a2].length - 2 && (L2 && (f2 += A2.line(r2, h2)), x2 += A2.line(r2, S2) + A2.line(p2, S2) + "z", b2.push(f2), v2.push(x2));
                    }
                }
              d2 = r2, g2 = o2;
          }
          return { linePaths: b2, areaPaths: v2, pX: d2, pY: g2, pathState: u2, segmentStartX: p2, linePath: f2, areaPath: x2 };
        } }, { key: "handleNullDataPoints", value: function(t3, e2, i2, a2, s2) {
          var r2 = this.w;
          if (null === t3[i2][a2] && r2.config.markers.showNullDataPoints || 1 === t3[i2].length) {
            var o2 = this.strokeWidth - r2.config.markers.strokeWidth / 2;
            o2 > 0 || (o2 = 0);
            var n2 = this.markers.plotChartMarkers(e2, s2, a2 + 1, o2, true);
            null !== n2 && this.elPointsMain.add(n2);
          }
        } }]), t2;
      }();
      window.TreemapSquared = {}, window.TreemapSquared.generate = /* @__PURE__ */ function() {
        function t2(e3, i3, a3, s3) {
          this.xoffset = e3, this.yoffset = i3, this.height = s3, this.width = a3, this.shortestEdge = function() {
            return Math.min(this.height, this.width);
          }, this.getCoordinates = function(t3) {
            var e4, i4 = [], a4 = this.xoffset, s4 = this.yoffset, o3 = r2(t3) / this.height, n2 = r2(t3) / this.width;
            if (this.width >= this.height)
              for (e4 = 0; e4 < t3.length; e4++)
                i4.push([a4, s4, a4 + o3, s4 + t3[e4] / o3]), s4 += t3[e4] / o3;
            else
              for (e4 = 0; e4 < t3.length; e4++)
                i4.push([a4, s4, a4 + t3[e4] / n2, s4 + n2]), a4 += t3[e4] / n2;
            return i4;
          }, this.cutArea = function(e4) {
            var i4;
            if (this.width >= this.height) {
              var a4 = e4 / this.height, s4 = this.width - a4;
              i4 = new t2(this.xoffset + a4, this.yoffset, s4, this.height);
            } else {
              var r3 = e4 / this.width, o3 = this.height - r3;
              i4 = new t2(this.xoffset, this.yoffset + r3, this.width, o3);
            }
            return i4;
          };
        }
        function e2(e3, a3, s3, o3, n2) {
          o3 = void 0 === o3 ? 0 : o3, n2 = void 0 === n2 ? 0 : n2;
          var l2 = i2(function(t3, e4) {
            var i3, a4 = [], s4 = e4 / r2(t3);
            for (i3 = 0; i3 < t3.length; i3++)
              a4[i3] = t3[i3] * s4;
            return a4;
          }(e3, a3 * s3), [], new t2(o3, n2, a3, s3), []);
          return function(t3) {
            var e4, i3, a4 = [];
            for (e4 = 0; e4 < t3.length; e4++)
              for (i3 = 0; i3 < t3[e4].length; i3++)
                a4.push(t3[e4][i3]);
            return a4;
          }(l2);
        }
        function i2(t3, e3, s3, o3) {
          var n2, l2, h2;
          if (0 !== t3.length)
            return n2 = s3.shortestEdge(), function(t4, e4, i3) {
              var s4;
              if (0 === t4.length)
                return true;
              (s4 = t4.slice()).push(e4);
              var r3 = a2(t4, i3), o4 = a2(s4, i3);
              return r3 >= o4;
            }(e3, l2 = t3[0], n2) ? (e3.push(l2), i2(t3.slice(1), e3, s3, o3)) : (h2 = s3.cutArea(r2(e3), o3), o3.push(s3.getCoordinates(e3)), i2(t3, [], h2, o3)), o3;
          o3.push(s3.getCoordinates(e3));
        }
        function a2(t3, e3) {
          var i3 = Math.min.apply(Math, t3), a3 = Math.max.apply(Math, t3), s3 = r2(t3);
          return Math.max(Math.pow(e3, 2) * a3 / Math.pow(s3, 2), Math.pow(s3, 2) / (Math.pow(e3, 2) * i3));
        }
        function s2(t3) {
          return t3 && t3.constructor === Array;
        }
        function r2(t3) {
          var e3, i3 = 0;
          for (e3 = 0; e3 < t3.length; e3++)
            i3 += t3[e3];
          return i3;
        }
        function o2(t3) {
          var e3, i3 = 0;
          if (s2(t3[0]))
            for (e3 = 0; e3 < t3.length; e3++)
              i3 += o2(t3[e3]);
          else
            i3 = r2(t3);
          return i3;
        }
        return function t3(i3, a3, r3, n2, l2) {
          n2 = void 0 === n2 ? 0 : n2, l2 = void 0 === l2 ? 0 : l2;
          var h2, c2, d2 = [], g2 = [];
          if (s2(i3[0])) {
            for (c2 = 0; c2 < i3.length; c2++)
              d2[c2] = o2(i3[c2]);
            for (h2 = e2(d2, a3, r3, n2, l2), c2 = 0; c2 < i3.length; c2++)
              g2.push(t3(i3[c2], h2[c2][2] - h2[c2][0], h2[c2][3] - h2[c2][1], h2[c2][0], h2[c2][1]));
          } else
            g2 = e2(i3, a3, r3, n2, l2);
          return g2;
        };
      }();
      var Rt;
      var Ht;
      var Dt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new At(e2), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m2(this.ctx), s2 = new H(this.ctx), r2 = a2.group({ class: "apexcharts-treemap" });
          if (i2.globals.noData)
            return r2;
          var o2 = [];
          return t3.forEach(function(t4) {
            var e3 = t4.map(function(t5) {
              return Math.abs(t5);
            });
            o2.push(e3);
          }), this.negRange = this.helpers.checkColorRange(), i2.config.series.forEach(function(t4, i3) {
            t4.data.forEach(function(t5) {
              Array.isArray(e2.labels[i3]) || (e2.labels[i3] = []), e2.labels[i3].push(t5.x);
            });
          }), window.TreemapSquared.generate(o2, i2.globals.gridWidth, i2.globals.gridHeight).forEach(function(o3, n2) {
            var l2 = a2.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: x.escapeString(i2.globals.seriesNames[n2]), rel: n2 + 1, "data:realIndex": n2 });
            if (i2.config.chart.dropShadow.enabled) {
              var h2 = i2.config.chart.dropShadow;
              new v(e2.ctx).dropShadow(r2, h2, n2);
            }
            var c2 = a2.group({ class: "apexcharts-data-labels" });
            o3.forEach(function(r3, o4) {
              var h3 = r3[0], c3 = r3[1], d2 = r3[2], g2 = r3[3], u2 = a2.drawRect(h3, c3, d2 - h3, g2 - c3, i2.config.plotOptions.treemap.borderRadius, "#fff", 1, e2.strokeWidth, i2.config.plotOptions.treemap.useFillColorAsStroke ? f2 : i2.globals.stroke.colors[n2]);
              u2.attr({ cx: h3, cy: c3, index: n2, i: n2, j: o4, width: d2 - h3, height: g2 - c3 });
              var p2 = e2.helpers.getShadeColor(i2.config.chart.type, n2, o4, e2.negRange), f2 = p2.color;
              void 0 !== i2.config.series[n2].data[o4] && i2.config.series[n2].data[o4].fillColor && (f2 = i2.config.series[n2].data[o4].fillColor);
              var x2 = s2.fillPath({ color: f2, seriesNumber: n2, dataPointIndex: o4 });
              u2.node.classList.add("apexcharts-treemap-rect"), u2.attr({ fill: x2 }), e2.helpers.addListeners(u2);
              var b2 = { x: h3 + (d2 - h3) / 2, y: c3 + (g2 - c3) / 2, width: 0, height: 0 }, v2 = { x: h3, y: c3, width: d2 - h3, height: g2 - c3 };
              if (i2.config.chart.animations.enabled && !i2.globals.dataChanged) {
                var m3 = 1;
                i2.globals.resized || (m3 = i2.config.chart.animations.speed), e2.animateTreemap(u2, b2, v2, m3);
              }
              if (i2.globals.dataChanged) {
                var y2 = 1;
                e2.dynamicAnim.enabled && i2.globals.shouldAnimate && (y2 = e2.dynamicAnim.speed, i2.globals.previousPaths[n2] && i2.globals.previousPaths[n2][o4] && i2.globals.previousPaths[n2][o4].rect && (b2 = i2.globals.previousPaths[n2][o4].rect), e2.animateTreemap(u2, b2, v2, y2));
              }
              var w2 = e2.getFontSize(r3), k2 = i2.config.dataLabels.formatter(e2.labels[n2][o4], { value: i2.globals.series[n2][o4], seriesIndex: n2, dataPointIndex: o4, w: i2 });
              "truncate" === i2.config.plotOptions.treemap.dataLabels.format && (w2 = parseInt(i2.config.dataLabels.style.fontSize, 10), k2 = e2.truncateLabels(k2, w2, h3, c3, d2, g2));
              var A2 = e2.helpers.calculateDataLabels({ text: k2, x: (h3 + d2) / 2, y: (c3 + g2) / 2 + e2.strokeWidth / 2 + w2 / 3, i: n2, j: o4, colorProps: p2, fontSize: w2, series: t3 });
              i2.config.dataLabels.enabled && A2 && e2.rotateToFitLabel(A2, w2, k2, h3, c3, d2, g2), l2.add(u2), null !== A2 && l2.add(A2);
            }), l2.add(c2), r2.add(l2);
          }), r2;
        } }, { key: "getFontSize", value: function(t3) {
          var e2 = this.w;
          var i2, a2, s2, r2, o2 = function t4(e3) {
            var i3, a3 = 0;
            if (Array.isArray(e3[0]))
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += t4(e3[i3]);
            else
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += e3[i3].length;
            return a3;
          }(this.labels) / function t4(e3) {
            var i3, a3 = 0;
            if (Array.isArray(e3[0]))
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += t4(e3[i3]);
            else
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += 1;
            return a3;
          }(this.labels);
          return i2 = t3[2] - t3[0], a2 = t3[3] - t3[1], s2 = i2 * a2, r2 = Math.pow(s2, 0.5), Math.min(r2 / o2, parseInt(e2.config.dataLabels.style.fontSize, 10));
        } }, { key: "rotateToFitLabel", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = new m2(this.ctx), l2 = n2.getTextRects(i2, e2);
          if (l2.width + this.w.config.stroke.width + 5 > r2 - a2 && l2.width <= o2 - s2) {
            var h2 = n2.rotateAroundCenter(t3.node);
            t3.node.setAttribute("transform", "rotate(-90 ".concat(h2.x, " ").concat(h2.y, ") translate(").concat(l2.height / 3, ")"));
          }
        } }, { key: "truncateLabels", value: function(t3, e2, i2, a2, s2, r2) {
          var o2 = new m2(this.ctx), n2 = o2.getTextRects(t3, e2).width + this.w.config.stroke.width + 5 > s2 - i2 && r2 - a2 > s2 - i2 ? r2 - a2 : s2 - i2, l2 = o2.getTextBasedOnMaxWidth({ text: t3, maxWidth: n2, fontSize: e2 });
          return t3.length !== l2.length && n2 / e2 < 5 ? "" : l2;
        } }, { key: "animateTreemap", value: function(t3, e2, i2, a2) {
          var s2 = new b(this.ctx);
          s2.animateRect(t3, { x: e2.x, y: e2.y, width: e2.width, height: e2.height }, { x: i2.x, y: i2.y, width: i2.width, height: i2.height }, a2, function() {
            s2.animationCompleted(t3);
          });
        } }]), t2;
      }();
      var Ot = 86400;
      var Nt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
        }
        return r(t2, [{ key: "calculateTimeScaleTicks", value: function(t3, i2) {
          var a2 = this, s2 = this.w;
          if (s2.globals.allSeriesCollapsed)
            return s2.globals.labels = [], s2.globals.timescaleLabels = [], [];
          var r2 = new A(this.ctx), o2 = (i2 - t3) / 864e5;
          this.determineInterval(o2), s2.globals.disableZoomIn = false, s2.globals.disableZoomOut = false, o2 < 11574074074074075e-20 ? s2.globals.disableZoomIn = true : o2 > 5e4 && (s2.globals.disableZoomOut = true);
          var n2 = r2.getTimeUnitsfromTimestamp(t3, i2, this.utc), l2 = s2.globals.gridWidth / o2, h2 = l2 / 24, c2 = h2 / 60, d2 = c2 / 60, g2 = Math.floor(24 * o2), u2 = Math.floor(1440 * o2), p2 = Math.floor(o2 * Ot), f2 = Math.floor(o2), x2 = Math.floor(o2 / 30), b2 = Math.floor(o2 / 365), v2 = { minMillisecond: n2.minMillisecond, minSecond: n2.minSecond, minMinute: n2.minMinute, minHour: n2.minHour, minDate: n2.minDate, minMonth: n2.minMonth, minYear: n2.minYear }, m3 = { firstVal: v2, currentMillisecond: v2.minMillisecond, currentSecond: v2.minSecond, currentMinute: v2.minMinute, currentHour: v2.minHour, currentMonthDate: v2.minDate, currentDate: v2.minDate, currentMonth: v2.minMonth, currentYear: v2.minYear, daysWidthOnXAxis: l2, hoursWidthOnXAxis: h2, minutesWidthOnXAxis: c2, secondsWidthOnXAxis: d2, numberOfSeconds: p2, numberOfMinutes: u2, numberOfHours: g2, numberOfDays: f2, numberOfMonths: x2, numberOfYears: b2 };
          switch (this.tickInterval) {
            case "years":
              this.generateYearScale(m3);
              break;
            case "months":
            case "half_year":
              this.generateMonthScale(m3);
              break;
            case "months_days":
            case "months_fortnight":
            case "days":
            case "week_days":
              this.generateDayScale(m3);
              break;
            case "hours":
              this.generateHourScale(m3);
              break;
            case "minutes_fives":
            case "minutes":
              this.generateMinuteScale(m3);
              break;
            case "seconds_tens":
            case "seconds_fives":
            case "seconds":
              this.generateSecondScale(m3);
          }
          var y2 = this.timeScaleArray.map(function(t4) {
            var i3 = { position: t4.position, unit: t4.unit, year: t4.year, day: t4.day ? t4.day : 1, hour: t4.hour ? t4.hour : 0, month: t4.month + 1 };
            return "month" === t4.unit ? e(e({}, i3), {}, { day: 1, value: t4.value + 1 }) : "day" === t4.unit || "hour" === t4.unit ? e(e({}, i3), {}, { value: t4.value }) : "minute" === t4.unit ? e(e({}, i3), {}, { value: t4.value, minute: t4.value }) : "second" === t4.unit ? e(e({}, i3), {}, { value: t4.value, minute: t4.minute, second: t4.second }) : t4;
          });
          return y2.filter(function(t4) {
            var e2 = 1, i3 = Math.ceil(s2.globals.gridWidth / 120), r3 = t4.value;
            void 0 !== s2.config.xaxis.tickAmount && (i3 = s2.config.xaxis.tickAmount), y2.length > i3 && (e2 = Math.floor(y2.length / i3));
            var o3 = false, n3 = false;
            switch (a2.tickInterval) {
              case "years":
                "year" === t4.unit && (o3 = true);
                break;
              case "half_year":
                e2 = 7, "year" === t4.unit && (o3 = true);
                break;
              case "months":
                e2 = 1, "year" === t4.unit && (o3 = true);
                break;
              case "months_fortnight":
                e2 = 15, "year" !== t4.unit && "month" !== t4.unit || (o3 = true), 30 === r3 && (n3 = true);
                break;
              case "months_days":
                e2 = 10, "month" === t4.unit && (o3 = true), 30 === r3 && (n3 = true);
                break;
              case "week_days":
                e2 = 8, "month" === t4.unit && (o3 = true);
                break;
              case "days":
                e2 = 1, "month" === t4.unit && (o3 = true);
                break;
              case "hours":
                "day" === t4.unit && (o3 = true);
                break;
              case "minutes_fives":
              case "seconds_fives":
                r3 % 5 != 0 && (n3 = true);
                break;
              case "seconds_tens":
                r3 % 10 != 0 && (n3 = true);
            }
            if ("hours" === a2.tickInterval || "minutes_fives" === a2.tickInterval || "seconds_tens" === a2.tickInterval || "seconds_fives" === a2.tickInterval) {
              if (!n3)
                return true;
            } else if ((r3 % e2 == 0 || o3) && !n3)
              return true;
          });
        } }, { key: "recalcDimensionsBasedOnFormat", value: function(t3, e2) {
          var i2 = this.w, a2 = this.formatDates(t3), s2 = this.removeOverlappingTS(a2);
          i2.globals.timescaleLabels = s2.slice(), new ot(this.ctx).plotCoords();
        } }, { key: "determineInterval", value: function(t3) {
          var e2 = 24 * t3, i2 = 60 * e2;
          switch (true) {
            case t3 / 365 > 5:
              this.tickInterval = "years";
              break;
            case t3 > 800:
              this.tickInterval = "half_year";
              break;
            case t3 > 180:
              this.tickInterval = "months";
              break;
            case t3 > 90:
              this.tickInterval = "months_fortnight";
              break;
            case t3 > 60:
              this.tickInterval = "months_days";
              break;
            case t3 > 30:
              this.tickInterval = "week_days";
              break;
            case t3 > 2:
              this.tickInterval = "days";
              break;
            case e2 > 2.4:
              this.tickInterval = "hours";
              break;
            case i2 > 15:
              this.tickInterval = "minutes_fives";
              break;
            case i2 > 5:
              this.tickInterval = "minutes";
              break;
            case i2 > 1:
              this.tickInterval = "seconds_tens";
              break;
            case 60 * i2 > 20:
              this.tickInterval = "seconds_fives";
              break;
            default:
              this.tickInterval = "seconds";
          }
        } }, { key: "generateYearScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonth, a2 = t3.currentYear, s2 = t3.daysWidthOnXAxis, r2 = t3.numberOfYears, o2 = e2.minYear, n2 = 0, l2 = new A(this.ctx), h2 = "year";
          if (e2.minDate > 1 || e2.minMonth > 0) {
            var c2 = l2.determineRemainingDaysOfYear(e2.minYear, e2.minMonth, e2.minDate);
            n2 = (l2.determineDaysOfYear(e2.minYear) - c2 + 1) * s2, o2 = e2.minYear + 1, this.timeScaleArray.push({ position: n2, value: o2, unit: h2, year: o2, month: x.monthMod(i2 + 1) });
          } else
            1 === e2.minDate && 0 === e2.minMonth && this.timeScaleArray.push({ position: n2, value: o2, unit: h2, year: a2, month: x.monthMod(i2 + 1) });
          for (var d2 = o2, g2 = n2, u2 = 0; u2 < r2; u2++)
            d2++, g2 = l2.determineDaysOfYear(d2 - 1) * s2 + g2, this.timeScaleArray.push({ position: g2, value: d2, unit: h2, year: d2, month: 1 });
        } }, { key: "generateMonthScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonthDate, a2 = t3.currentMonth, s2 = t3.currentYear, r2 = t3.daysWidthOnXAxis, o2 = t3.numberOfMonths, n2 = a2, l2 = 0, h2 = new A(this.ctx), c2 = "month", d2 = 0;
          if (e2.minDate > 1) {
            l2 = (h2.determineDaysOfMonths(a2 + 1, e2.minYear) - i2 + 1) * r2, n2 = x.monthMod(a2 + 1);
            var g2 = s2 + d2, u2 = x.monthMod(n2), p2 = n2;
            0 === n2 && (c2 = "year", p2 = g2, u2 = 1, g2 += d2 += 1), this.timeScaleArray.push({ position: l2, value: p2, unit: c2, year: g2, month: u2 });
          } else
            this.timeScaleArray.push({ position: l2, value: n2, unit: c2, year: s2, month: x.monthMod(a2) });
          for (var f2 = n2 + 1, b2 = l2, v2 = 0, m3 = 1; v2 < o2; v2++, m3++) {
            0 === (f2 = x.monthMod(f2)) ? (c2 = "year", d2 += 1) : c2 = "month";
            var y2 = this._getYear(s2, f2, d2);
            b2 = h2.determineDaysOfMonths(f2, y2) * r2 + b2;
            var w2 = 0 === f2 ? y2 : f2;
            this.timeScaleArray.push({ position: b2, value: w2, unit: c2, year: y2, month: 0 === f2 ? 1 : f2 }), f2++;
          }
        } }, { key: "generateDayScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonth, a2 = t3.currentYear, s2 = t3.hoursWidthOnXAxis, r2 = t3.numberOfDays, o2 = new A(this.ctx), n2 = "day", l2 = e2.minDate + 1, h2 = l2, c2 = function(t4, e3, i3) {
            return t4 > o2.determineDaysOfMonths(e3 + 1, i3) ? (h2 = 1, n2 = "month", g2 = e3 += 1, e3) : e3;
          }, d2 = (24 - e2.minHour) * s2, g2 = l2, u2 = c2(h2, i2, a2);
          0 === e2.minHour && 1 === e2.minDate ? (d2 = 0, g2 = x.monthMod(e2.minMonth), n2 = "month", h2 = e2.minDate) : 1 !== e2.minDate && 0 === e2.minHour && 0 === e2.minMinute && (d2 = 0, l2 = e2.minDate, g2 = l2, u2 = c2(h2 = l2, i2, a2)), this.timeScaleArray.push({ position: d2, value: g2, unit: n2, year: this._getYear(a2, u2, 0), month: x.monthMod(u2), day: h2 });
          for (var p2 = d2, f2 = 0; f2 < r2; f2++) {
            n2 = "day", u2 = c2(h2 += 1, u2, this._getYear(a2, u2, 0));
            var b2 = this._getYear(a2, u2, 0);
            p2 = 24 * s2 + p2;
            var v2 = 1 === h2 ? x.monthMod(u2) : h2;
            this.timeScaleArray.push({ position: p2, value: v2, unit: n2, year: b2, month: x.monthMod(u2), day: v2 });
          }
        } }, { key: "generateHourScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentDate, a2 = t3.currentMonth, s2 = t3.currentYear, r2 = t3.minutesWidthOnXAxis, o2 = t3.numberOfHours, n2 = new A(this.ctx), l2 = "hour", h2 = function(t4, e3) {
            return t4 > n2.determineDaysOfMonths(e3 + 1, s2) && (f2 = 1, e3 += 1), { month: e3, date: f2 };
          }, c2 = function(t4, e3) {
            return t4 > n2.determineDaysOfMonths(e3 + 1, s2) ? e3 += 1 : e3;
          }, d2 = 60 - (e2.minMinute + e2.minSecond / 60), g2 = d2 * r2, u2 = e2.minHour + 1, p2 = u2;
          60 === d2 && (g2 = 0, p2 = u2 = e2.minHour);
          var f2 = i2;
          p2 >= 24 && (p2 = 0, f2 += 1, l2 = "day");
          var b2 = h2(f2, a2).month;
          b2 = c2(f2, b2), this.timeScaleArray.push({ position: g2, value: u2, unit: l2, day: f2, hour: p2, year: s2, month: x.monthMod(b2) }), p2++;
          for (var v2 = g2, m3 = 0; m3 < o2; m3++) {
            if (l2 = "hour", p2 >= 24)
              p2 = 0, l2 = "day", b2 = h2(f2 += 1, b2).month, b2 = c2(f2, b2);
            var y2 = this._getYear(s2, b2, 0);
            v2 = 60 * r2 + v2;
            var w2 = 0 === p2 ? f2 : p2;
            this.timeScaleArray.push({ position: v2, value: w2, unit: l2, hour: p2, day: f2, year: y2, month: x.monthMod(b2) }), p2++;
          }
        } }, { key: "generateMinuteScale", value: function(t3) {
          for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.minutesWidthOnXAxis, h2 = t3.secondsWidthOnXAxis, c2 = t3.numberOfMinutes, d2 = a2 + 1, g2 = r2, u2 = o2, p2 = n2, f2 = s2, b2 = (60 - i2 - e2 / 1e3) * h2, v2 = 0; v2 < c2; v2++)
            d2 >= 60 && (d2 = 0, 24 === (f2 += 1) && (f2 = 0)), this.timeScaleArray.push({ position: b2, value: d2, unit: "minute", hour: f2, minute: d2, day: g2, year: this._getYear(p2, u2, 0), month: x.monthMod(u2) }), b2 += l2, d2++;
        } }, { key: "generateSecondScale", value: function(t3) {
          for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.secondsWidthOnXAxis, h2 = t3.numberOfSeconds, c2 = i2 + 1, d2 = a2, g2 = r2, u2 = o2, p2 = n2, f2 = s2, b2 = (1e3 - e2) / 1e3 * l2, v2 = 0; v2 < h2; v2++)
            c2 >= 60 && (c2 = 0, ++d2 >= 60 && (d2 = 0, 24 === ++f2 && (f2 = 0))), this.timeScaleArray.push({ position: b2, value: c2, unit: "second", hour: f2, minute: d2, second: c2, day: g2, year: this._getYear(p2, u2, 0), month: x.monthMod(u2) }), b2 += l2, c2++;
        } }, { key: "createRawDateString", value: function(t3, e2) {
          var i2 = t3.year;
          return 0 === t3.month && (t3.month = 1), i2 += "-" + ("0" + t3.month.toString()).slice(-2), "day" === t3.unit ? i2 += "day" === t3.unit ? "-" + ("0" + e2).slice(-2) : "-01" : i2 += "-" + ("0" + (t3.day ? t3.day : "1")).slice(-2), "hour" === t3.unit ? i2 += "hour" === t3.unit ? "T" + ("0" + e2).slice(-2) : "T00" : i2 += "T" + ("0" + (t3.hour ? t3.hour : "0")).slice(-2), "minute" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":" + (t3.minute ? ("0" + t3.minute).slice(-2) : "00"), "second" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":00", this.utc && (i2 += ".000Z"), i2;
        } }, { key: "formatDates", value: function(t3) {
          var e2 = this, i2 = this.w;
          return t3.map(function(t4) {
            var a2 = t4.value.toString(), s2 = new A(e2.ctx), r2 = e2.createRawDateString(t4, a2), o2 = s2.getDate(s2.parseDate(r2));
            if (e2.utc || (o2 = s2.getDate(s2.parseDateWithTimezone(r2))), void 0 === i2.config.xaxis.labels.format) {
              var n2 = "dd MMM", l2 = i2.config.xaxis.labels.datetimeFormatter;
              "year" === t4.unit && (n2 = l2.year), "month" === t4.unit && (n2 = l2.month), "day" === t4.unit && (n2 = l2.day), "hour" === t4.unit && (n2 = l2.hour), "minute" === t4.unit && (n2 = l2.minute), "second" === t4.unit && (n2 = l2.second), a2 = s2.formatDate(o2, n2);
            } else
              a2 = s2.formatDate(o2, i2.config.xaxis.labels.format);
            return { dateString: r2, position: t4.position, value: a2, unit: t4.unit, year: t4.year, month: t4.month };
          });
        } }, { key: "removeOverlappingTS", value: function(t3) {
          var e2, i2 = this, a2 = new m2(this.ctx), s2 = false;
          t3.length > 0 && t3[0].value && t3.every(function(e3) {
            return e3.value.length === t3[0].value.length;
          }) && (s2 = true, e2 = a2.getTextRects(t3[0].value).width);
          var r2 = 0, o2 = t3.map(function(o3, n2) {
            if (n2 > 0 && i2.w.config.xaxis.labels.hideOverlappingLabels) {
              var l2 = s2 ? e2 : a2.getTextRects(t3[r2].value).width, h2 = t3[r2].position;
              return o3.position > h2 + l2 + 10 ? (r2 = n2, o3) : null;
            }
            return o3;
          });
          return o2 = o2.filter(function(t4) {
            return null !== t4;
          });
        } }, { key: "_getYear", value: function(t3, e2, i2) {
          return t3 + Math.floor(e2 / 12) + i2;
        } }]), t2;
      }();
      var Wt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = i2, this.w = i2.w, this.el = e2;
        }
        return r(t2, [{ key: "setupElements", value: function() {
          var t3 = this.w.globals, e2 = this.w.config, i2 = e2.chart.type;
          t3.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i2) > -1, t3.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i2) > -1, t3.isBarHorizontal = ("bar" === e2.chart.type || "rangeBar" === e2.chart.type || "boxPlot" === e2.chart.type) && e2.plotOptions.bar.horizontal, t3.chartClass = ".apexcharts" + t3.chartID, t3.dom.baseEl = this.el, t3.dom.elWrap = document.createElement("div"), m2.setAttrs(t3.dom.elWrap, { id: t3.chartClass.substring(1), class: "apexcharts-canvas " + t3.chartClass.substring(1) }), this.el.appendChild(t3.dom.elWrap), t3.dom.Paper = new window.SVG.Doc(t3.dom.elWrap), t3.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e2.chart.offsetX, ", ").concat(e2.chart.offsetY, ")") }), t3.dom.Paper.node.style.background = "dark" !== e2.theme.mode || e2.chart.background ? e2.chart.background : "rgba(0, 0, 0, 0.8)", this.setSVGDimensions(), t3.dom.elLegendForeign = document.createElementNS(t3.SVGNS, "foreignObject"), m2.setAttrs(t3.dom.elLegendForeign, { x: 0, y: 0, width: t3.svgWidth, height: t3.svgHeight }), t3.dom.elLegendWrap = document.createElement("div"), t3.dom.elLegendWrap.classList.add("apexcharts-legend"), t3.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), t3.dom.elLegendForeign.appendChild(t3.dom.elLegendWrap), t3.dom.Paper.node.appendChild(t3.dom.elLegendForeign), t3.dom.elGraphical = t3.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), t3.dom.elDefs = t3.dom.Paper.defs(), t3.dom.Paper.add(t3.dom.elGraphical), t3.dom.elGraphical.add(t3.dom.elDefs);
        } }, { key: "plotChartType", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config, s2 = i2.globals, r2 = { series: [], i: [] }, o2 = { series: [], i: [] }, n2 = { series: [], i: [] }, l2 = { series: [], i: [] }, h2 = { series: [], i: [] }, c2 = { series: [], i: [] }, d2 = { series: [], i: [] }, g2 = { series: [], i: [] }, p2 = { series: [], seriesRangeEnd: [], i: [] }, f2 = void 0 !== a2.chart.type ? a2.chart.type : "line", x2 = null, b2 = 0;
          s2.series.forEach(function(e3, a3) {
            var u2 = t3[a3].type || f2;
            switch (u2) {
              case "column":
              case "bar":
                h2.series.push(e3), h2.i.push(a3), i2.globals.columnSeries = h2;
                break;
              case "area":
                o2.series.push(e3), o2.i.push(a3);
                break;
              case "line":
                r2.series.push(e3), r2.i.push(a3);
                break;
              case "scatter":
                n2.series.push(e3), n2.i.push(a3);
                break;
              case "bubble":
                l2.series.push(e3), l2.i.push(a3);
                break;
              case "candlestick":
                c2.series.push(e3), c2.i.push(a3);
                break;
              case "boxPlot":
                d2.series.push(e3), d2.i.push(a3);
                break;
              case "rangeBar":
                g2.series.push(e3), g2.i.push(a3);
                break;
              case "rangeArea":
                p2.series.push(s2.seriesRangeStart[a3]), p2.seriesRangeEnd.push(s2.seriesRangeEnd[a3]), p2.i.push(a3);
                break;
              case "heatmap":
              case "treemap":
              case "pie":
              case "donut":
              case "polarArea":
              case "radialBar":
              case "radar":
                x2 = u2;
                break;
              default:
                console.warn("You have specified an unrecognized series type (", u2, ").");
            }
            f2 !== u2 && "scatter" !== u2 && b2++;
          }), b2 > 0 && (null !== x2 && console.warn("Chart or series type ", x2, " can not appear with other chart or series types."), h2.series.length > 0 && a2.plotOptions.bar.horizontal && (b2 -= h2.length, h2 = { series: [], i: [] }, i2.globals.columnSeries = { series: [], i: [] }, console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"))), s2.comboCharts || (s2.comboCharts = b2 > 0);
          var v2 = new Ft(this.ctx, e2), m3 = new kt(this.ctx, e2);
          this.ctx.pie = new Lt(this.ctx);
          var w2 = new Mt(this.ctx);
          this.ctx.rangeBar = new It(this.ctx, e2);
          var k2 = new Pt(this.ctx), A2 = [];
          if (s2.comboCharts) {
            var S2, C2, L2 = new y(this.ctx);
            if (o2.series.length > 0)
              (S2 = A2).push.apply(S2, u(L2.drawSeriesByGroup(o2, s2.areaGroups, "area", v2)));
            if (h2.series.length > 0)
              if (i2.config.chart.stacked) {
                var P2 = new wt(this.ctx, e2);
                A2.push(P2.draw(h2.series, h2.i));
              } else
                this.ctx.bar = new yt(this.ctx, e2), A2.push(this.ctx.bar.draw(h2.series, h2.i));
            if (p2.series.length > 0 && A2.push(v2.draw(p2.series, "rangeArea", p2.i, p2.seriesRangeEnd)), r2.series.length > 0)
              (C2 = A2).push.apply(C2, u(L2.drawSeriesByGroup(r2, s2.lineGroups, "line", v2)));
            if (c2.series.length > 0 && A2.push(m3.draw(c2.series, "candlestick", c2.i)), d2.series.length > 0 && A2.push(m3.draw(d2.series, "boxPlot", d2.i)), g2.series.length > 0 && A2.push(this.ctx.rangeBar.draw(g2.series, g2.i)), n2.series.length > 0) {
              var M2 = new Ft(this.ctx, e2, true);
              A2.push(M2.draw(n2.series, "scatter", n2.i));
            }
            if (l2.series.length > 0) {
              var I2 = new Ft(this.ctx, e2, true);
              A2.push(I2.draw(l2.series, "bubble", l2.i));
            }
          } else
            switch (a2.chart.type) {
              case "line":
                A2 = v2.draw(s2.series, "line");
                break;
              case "area":
                A2 = v2.draw(s2.series, "area");
                break;
              case "bar":
                if (a2.chart.stacked)
                  A2 = new wt(this.ctx, e2).draw(s2.series);
                else
                  this.ctx.bar = new yt(this.ctx, e2), A2 = this.ctx.bar.draw(s2.series);
                break;
              case "candlestick":
                A2 = new kt(this.ctx, e2).draw(s2.series, "candlestick");
                break;
              case "boxPlot":
                A2 = new kt(this.ctx, e2).draw(s2.series, a2.chart.type);
                break;
              case "rangeBar":
                A2 = this.ctx.rangeBar.draw(s2.series);
                break;
              case "rangeArea":
                A2 = v2.draw(s2.seriesRangeStart, "rangeArea", void 0, s2.seriesRangeEnd);
                break;
              case "heatmap":
                A2 = new St(this.ctx, e2).draw(s2.series);
                break;
              case "treemap":
                A2 = new Dt(this.ctx, e2).draw(s2.series);
                break;
              case "pie":
              case "donut":
              case "polarArea":
                A2 = this.ctx.pie.draw(s2.series);
                break;
              case "radialBar":
                A2 = w2.draw(s2.series);
                break;
              case "radar":
                A2 = k2.draw(s2.series);
                break;
              default:
                A2 = v2.draw(s2.series);
            }
          return A2;
        } }, { key: "setSVGDimensions", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          t3.svgWidth = e2.chart.width, t3.svgHeight = e2.chart.height;
          var i2 = x.getDimensions(this.el), a2 = e2.chart.width.toString().split(/[0-9]+/g).pop();
          "%" === a2 ? x.isNumber(i2[0]) && (0 === i2[0].width && (i2 = x.getDimensions(this.el.parentNode)), t3.svgWidth = i2[0] * parseInt(e2.chart.width, 10) / 100) : "px" !== a2 && "" !== a2 || (t3.svgWidth = parseInt(e2.chart.width, 10));
          var s2 = e2.chart.height.toString().split(/[0-9]+/g).pop();
          if ("auto" !== t3.svgHeight && "" !== t3.svgHeight)
            if ("%" === s2) {
              var r2 = x.getDimensions(this.el.parentNode);
              t3.svgHeight = r2[1] * parseInt(e2.chart.height, 10) / 100;
            } else
              t3.svgHeight = parseInt(e2.chart.height, 10);
          else
            t3.axisCharts ? t3.svgHeight = t3.svgWidth / 1.61 : t3.svgHeight = t3.svgWidth / 1.2;
          if (t3.svgWidth < 0 && (t3.svgWidth = 0), t3.svgHeight < 0 && (t3.svgHeight = 0), m2.setAttrs(t3.dom.Paper.node, { width: t3.svgWidth, height: t3.svgHeight }), "%" !== s2) {
            var o2 = e2.chart.sparkline.enabled ? 0 : t3.axisCharts ? e2.chart.parentHeightOffset : 0;
            t3.dom.Paper.node.parentNode.parentNode.style.minHeight = t3.svgHeight + o2 + "px";
          }
          t3.dom.elWrap.style.width = t3.svgWidth + "px", t3.dom.elWrap.style.height = t3.svgHeight + "px";
        } }, { key: "shiftGraphPosition", value: function() {
          var t3 = this.w.globals, e2 = t3.translateY, i2 = { transform: "translate(" + t3.translateX + ", " + e2 + ")" };
          m2.setAttrs(t3.dom.elGraphical.node, i2);
        } }, { key: "resizeNonAxisCharts", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = 0, a2 = t3.config.chart.sparkline.enabled ? 1 : 15;
          a2 += t3.config.grid.padding.bottom, "top" !== t3.config.legend.position && "bottom" !== t3.config.legend.position || !t3.config.legend.show || t3.config.legend.floating || (i2 = new lt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
          var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r2 = 2.05 * t3.globals.radialSize;
          if (s2 && !t3.config.chart.sparkline.enabled && 0 !== t3.config.plotOptions.radialBar.startAngle) {
            var o2 = x.getBoundingClientRect(s2);
            r2 = o2.bottom;
            var n2 = o2.bottom - o2.top;
            r2 = Math.max(2.05 * t3.globals.radialSize, n2);
          }
          var l2 = r2 + e2.translateY + i2 + a2;
          e2.dom.elLegendForeign && e2.dom.elLegendForeign.setAttribute("height", l2), t3.config.chart.height && String(t3.config.chart.height).indexOf("%") > 0 || (e2.dom.elWrap.style.height = l2 + "px", m2.setAttrs(e2.dom.Paper.node, { height: l2 }), e2.dom.Paper.node.parentNode.parentNode.style.minHeight = l2 + "px");
        } }, { key: "coreCalculations", value: function() {
          new U(this.ctx).init();
        } }, { key: "resetGlobals", value: function() {
          var t3 = this, e2 = function() {
            return t3.w.config.series.map(function(t4) {
              return [];
            });
          }, i2 = new F(), a2 = this.w.globals;
          i2.initGlobalVars(a2), a2.seriesXvalues = e2(), a2.seriesYvalues = e2();
        } }, { key: "isMultipleY", value: function() {
          if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1)
            return this.w.globals.isMultipleYAxis = true, true;
        } }, { key: "xySettings", value: function() {
          var t3 = null, e2 = this.w;
          if (e2.globals.axisCharts) {
            if ("back" === e2.config.xaxis.crosshairs.position)
              new Q(this.ctx).drawXCrosshairs();
            if ("back" === e2.config.yaxis[0].crosshairs.position)
              new Q(this.ctx).drawYCrosshairs();
            if ("datetime" === e2.config.xaxis.type && void 0 === e2.config.xaxis.labels.formatter) {
              this.ctx.timeScale = new Nt(this.ctx);
              var i2 = [];
              isFinite(e2.globals.minX) && isFinite(e2.globals.maxX) && !e2.globals.isBarHorizontal ? i2 = this.ctx.timeScale.calculateTimeScaleTicks(e2.globals.minX, e2.globals.maxX) : e2.globals.isBarHorizontal && (i2 = this.ctx.timeScale.calculateTimeScaleTicks(e2.globals.minY, e2.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i2);
            }
            t3 = new y(this.ctx).getCalculatedRatios();
          }
          return t3;
        } }, { key: "updateSourceChart", value: function(t3) {
          this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t3.w.globals.minX, max: t3.w.globals.maxX } } } }, false, false);
        } }, { key: "setupBrushHandler", value: function() {
          var t3 = this, e2 = this.w;
          if (e2.config.chart.brush.enabled && "function" != typeof e2.config.chart.events.selection) {
            var i2 = Array.isArray(e2.config.chart.brush.targets) ? e2.config.chart.brush.targets : [e2.config.chart.brush.target];
            i2.forEach(function(e3) {
              var i3 = ApexCharts.getChartByID(e3);
              i3.w.globals.brushSource = t3.ctx, "function" != typeof i3.w.config.chart.events.zoomed && (i3.w.config.chart.events.zoomed = function() {
                t3.updateSourceChart(i3);
              }), "function" != typeof i3.w.config.chart.events.scrolled && (i3.w.config.chart.events.scrolled = function() {
                t3.updateSourceChart(i3);
              });
            }), e2.config.chart.events.selection = function(t4, e3) {
              i2.forEach(function(t5) {
                ApexCharts.getChartByID(t5).ctx.updateHelpers._updateOptions({ xaxis: { min: e3.xaxis.min, max: e3.xaxis.max } }, false, false, false, false);
              });
            };
          }
        } }]), t2;
      }();
      var Bt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "_updateOptions", value: function(t3) {
          var e2 = this, a2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
          return new Promise(function(n2) {
            var l2 = [e2.ctx];
            r2 && (l2 = e2.ctx.getSyncedCharts()), e2.ctx.w.globals.isExecCalled && (l2 = [e2.ctx], e2.ctx.w.globals.isExecCalled = false), l2.forEach(function(r3, h2) {
              var c2 = r3.w;
              if (c2.globals.shouldAnimate = s2, a2 || (c2.globals.resized = true, c2.globals.dataChanged = true, s2 && r3.series.getPreviousPaths()), t3 && "object" === i(t3) && (r3.config = new Y(t3), t3 = y.extendArrayProps(r3.config, t3, c2), r3.w.globals.chartID !== e2.ctx.w.globals.chartID && delete t3.series, c2.config = x.extend(c2.config, t3), o2 && (c2.globals.lastXAxis = t3.xaxis ? x.clone(t3.xaxis) : [], c2.globals.lastYAxis = t3.yaxis ? x.clone(t3.yaxis) : [], c2.globals.initialConfig = x.extend({}, c2.config), c2.globals.initialSeries = x.clone(c2.config.series), t3.series))) {
                for (var d2 = 0; d2 < c2.globals.collapsedSeriesIndices.length; d2++) {
                  var g2 = c2.config.series[c2.globals.collapsedSeriesIndices[d2]];
                  c2.globals.collapsedSeries[d2].data = c2.globals.axisCharts ? g2.data.slice() : g2;
                }
                for (var u2 = 0; u2 < c2.globals.ancillaryCollapsedSeriesIndices.length; u2++) {
                  var p2 = c2.config.series[c2.globals.ancillaryCollapsedSeriesIndices[u2]];
                  c2.globals.ancillaryCollapsedSeries[u2].data = c2.globals.axisCharts ? p2.data.slice() : p2;
                }
                r3.series.emptyCollapsedSeries(c2.config.series);
              }
              return r3.update(t3).then(function() {
                h2 === l2.length - 1 && n2(r3);
              });
            });
          });
        } }, { key: "_updateSeries", value: function(t3, e2) {
          var i2 = this, a2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return new Promise(function(s2) {
            var r2, o2 = i2.w;
            return o2.globals.shouldAnimate = e2, o2.globals.dataChanged = true, e2 && i2.ctx.series.getPreviousPaths(), o2.globals.axisCharts ? (0 === (r2 = t3.map(function(t4, e3) {
              return i2._extendSeries(t4, e3);
            })).length && (r2 = [{ data: [] }]), o2.config.series = r2) : o2.config.series = t3.slice(), a2 && (o2.globals.initialConfig.series = x.clone(o2.config.series), o2.globals.initialSeries = x.clone(o2.config.series)), i2.ctx.update().then(function() {
              s2(i2.ctx);
            });
          });
        } }, { key: "_extendSeries", value: function(t3, i2) {
          var a2 = this.w, s2 = a2.config.series[i2];
          return e(e({}, a2.config.series[i2]), {}, { name: t3.name ? t3.name : null == s2 ? void 0 : s2.name, color: t3.color ? t3.color : null == s2 ? void 0 : s2.color, type: t3.type ? t3.type : null == s2 ? void 0 : s2.type, group: t3.group ? t3.group : null == s2 ? void 0 : s2.group, data: t3.data ? t3.data : null == s2 ? void 0 : s2.data, zIndex: void 0 !== t3.zIndex ? t3.zIndex : i2 });
        } }, { key: "toggleDataPointSelection", value: function(t3, e2) {
          var i2 = this.w, a2 = null, s2 = ".apexcharts-series[data\\:realIndex='".concat(t3, "']");
          return i2.globals.axisCharts ? a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(e2, "'], ").concat(s2, " circle[j='").concat(e2, "'], ").concat(s2, " rect[j='").concat(e2, "']")).members[0] : void 0 === e2 && (a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(t3, "']")).members[0], "pie" !== i2.config.chart.type && "polarArea" !== i2.config.chart.type && "donut" !== i2.config.chart.type || this.ctx.pie.pieClicked(t3)), a2 ? (new m2(this.ctx).pathMouseDown(a2, null), a2.node ? a2.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
        } }, { key: "forceXAxisUpdate", value: function(t3) {
          var e2 = this.w;
          if (["min", "max"].forEach(function(i3) {
            void 0 !== t3.xaxis[i3] && (e2.config.xaxis[i3] = t3.xaxis[i3], e2.globals.lastXAxis[i3] = t3.xaxis[i3]);
          }), t3.xaxis.categories && t3.xaxis.categories.length && (e2.config.xaxis.categories = t3.xaxis.categories), e2.config.xaxis.convertedCatToNumeric) {
            var i2 = new E(t3);
            t3 = i2.convertCatToNumericXaxis(t3, this.ctx);
          }
          return t3;
        } }, { key: "forceYAxisUpdate", value: function(t3) {
          return t3.chart && t3.chart.stacked && "100%" === t3.chart.stackType && (Array.isArray(t3.yaxis) ? t3.yaxis.forEach(function(e2, i2) {
            t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
          }) : (t3.yaxis.min = 0, t3.yaxis.max = 100)), t3;
        } }, { key: "revertDefaultAxisMinMax", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.globals.lastXAxis, s2 = i2.globals.lastYAxis;
          t3 && t3.xaxis && (a2 = t3.xaxis), t3 && t3.yaxis && (s2 = t3.yaxis), i2.config.xaxis.min = a2.min, i2.config.xaxis.max = a2.max;
          var r2 = function(t4) {
            void 0 !== s2[t4] && (i2.config.yaxis[t4].min = s2[t4].min, i2.config.yaxis[t4].max = s2[t4].max);
          };
          i2.config.yaxis.map(function(t4, a3) {
            i2.globals.zoomed || void 0 !== s2[a3] ? r2(a3) : void 0 !== e2.ctx.opts.yaxis[a3] && (t4.min = e2.ctx.opts.yaxis[a3].min, t4.max = e2.ctx.opts.yaxis[a3].max);
          });
        } }]), t2;
      }();
      Rt = "undefined" != typeof window ? window : void 0, Ht = function(t2, e2) {
        var a2 = (void 0 !== this ? this : t2).SVG = function(t3) {
          if (a2.supported)
            return t3 = new a2.Doc(t3), a2.parser.draw || a2.prepare(), t3;
        };
        if (a2.ns = "http://www.w3.org/2000/svg", a2.xmlns = "http://www.w3.org/2000/xmlns/", a2.xlink = "http://www.w3.org/1999/xlink", a2.svgjs = "http://svgjs.dev", a2.supported = true, !a2.supported)
          return false;
        a2.did = 1e3, a2.eid = function(t3) {
          return "Svgjs" + d2(t3) + a2.did++;
        }, a2.create = function(t3) {
          var i2 = e2.createElementNS(this.ns, t3);
          return i2.setAttribute("id", this.eid(t3)), i2;
        }, a2.extend = function() {
          var t3, e3;
          e3 = (t3 = [].slice.call(arguments)).pop();
          for (var i2 = t3.length - 1; i2 >= 0; i2--)
            if (t3[i2])
              for (var s3 in e3)
                t3[i2].prototype[s3] = e3[s3];
          a2.Set && a2.Set.inherit && a2.Set.inherit();
        }, a2.invent = function(t3) {
          var e3 = "function" == typeof t3.create ? t3.create : function() {
            this.constructor.call(this, a2.create(t3.create));
          };
          return t3.inherit && (e3.prototype = new t3.inherit()), t3.extend && a2.extend(e3, t3.extend), t3.construct && a2.extend(t3.parent || a2.Container, t3.construct), e3;
        }, a2.adopt = function(e3) {
          return e3 ? e3.instance ? e3.instance : ((i2 = "svg" == e3.nodeName ? e3.parentNode instanceof t2.SVGElement ? new a2.Nested() : new a2.Doc() : "linearGradient" == e3.nodeName ? new a2.Gradient("linear") : "radialGradient" == e3.nodeName ? new a2.Gradient("radial") : a2[d2(e3.nodeName)] ? new a2[d2(e3.nodeName)]() : new a2.Element(e3)).type = e3.nodeName, i2.node = e3, e3.instance = i2, i2 instanceof a2.Doc && i2.namespace().defs(), i2.setData(JSON.parse(e3.getAttribute("svgjs:data")) || {}), i2) : null;
          var i2;
        }, a2.prepare = function() {
          var t3 = e2.getElementsByTagName("body")[0], i2 = (t3 ? new a2.Doc(t3) : a2.adopt(e2.documentElement).nested()).size(2, 0);
          a2.parser = { body: t3 || e2.documentElement, draw: i2.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: i2.polyline().node, path: i2.path().node, native: a2.create("svg") };
        }, a2.parser = { native: a2.create("svg") }, e2.addEventListener("DOMContentLoaded", function() {
          a2.parser.draw || a2.prepare();
        }, false), a2.regex = { numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i, hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgb: /rgb\((\d+),(\d+),(\d+)\)/, reference: /#([a-z0-9\-_]+)/i, transforms: /\)\s*,?\s*/, whitespace: /\s/g, isHex: /^#[a-f0-9]{3,6}$/i, isRgb: /^rgb\(/, isCss: /[^:]+:[^;]+;?/, isBlank: /^(\s+)?$/, isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, isPercent: /^-?[\d\.]+%$/, isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i, delimiter: /[\s,]+/, hyphen: /([^e])\-/gi, pathLetters: /[MLHVCSQTAZ]/gi, isPathLetter: /[MLHVCSQTAZ]/i, numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi, dots: /\./g }, a2.utils = { map: function(t3, e3) {
          for (var i2 = t3.length, a3 = [], s3 = 0; s3 < i2; s3++)
            a3.push(e3(t3[s3]));
          return a3;
        }, filter: function(t3, e3) {
          for (var i2 = t3.length, a3 = [], s3 = 0; s3 < i2; s3++)
            e3(t3[s3]) && a3.push(t3[s3]);
          return a3;
        }, filterSVGElements: function(e3) {
          return this.filter(e3, function(e4) {
            return e4 instanceof t2.SVGElement;
          });
        } }, a2.defaults = { attrs: { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "font-size": 16, "font-family": "Helvetica, Arial, sans-serif", "text-anchor": "start" } }, a2.Color = function(t3) {
          var e3, s3;
          this.r = 0, this.g = 0, this.b = 0, t3 && ("string" == typeof t3 ? a2.regex.isRgb.test(t3) ? (e3 = a2.regex.rgb.exec(t3.replace(a2.regex.whitespace, "")), this.r = parseInt(e3[1]), this.g = parseInt(e3[2]), this.b = parseInt(e3[3])) : a2.regex.isHex.test(t3) && (e3 = a2.regex.hex.exec(4 == (s3 = t3).length ? ["#", s3.substring(1, 2), s3.substring(1, 2), s3.substring(2, 3), s3.substring(2, 3), s3.substring(3, 4), s3.substring(3, 4)].join("") : s3), this.r = parseInt(e3[1], 16), this.g = parseInt(e3[2], 16), this.b = parseInt(e3[3], 16)) : "object" === i(t3) && (this.r = t3.r, this.g = t3.g, this.b = t3.b));
        }, a2.extend(a2.Color, { toString: function() {
          return this.toHex();
        }, toHex: function() {
          return "#" + g2(this.r) + g2(this.g) + g2(this.b);
        }, toRgb: function() {
          return "rgb(" + [this.r, this.g, this.b].join() + ")";
        }, brightness: function() {
          return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
        }, morph: function(t3) {
          return this.destination = new a2.Color(t3), this;
        }, at: function(t3) {
          return this.destination ? (t3 = t3 < 0 ? 0 : t3 > 1 ? 1 : t3, new a2.Color({ r: ~~(this.r + (this.destination.r - this.r) * t3), g: ~~(this.g + (this.destination.g - this.g) * t3), b: ~~(this.b + (this.destination.b - this.b) * t3) })) : this;
        } }), a2.Color.test = function(t3) {
          return t3 += "", a2.regex.isHex.test(t3) || a2.regex.isRgb.test(t3);
        }, a2.Color.isRgb = function(t3) {
          return t3 && "number" == typeof t3.r && "number" == typeof t3.g && "number" == typeof t3.b;
        }, a2.Color.isColor = function(t3) {
          return a2.Color.isRgb(t3) || a2.Color.test(t3);
        }, a2.Array = function(t3, e3) {
          0 == (t3 = (t3 || []).valueOf()).length && e3 && (t3 = e3.valueOf()), this.value = this.parse(t3);
        }, a2.extend(a2.Array, { toString: function() {
          return this.value.join(" ");
        }, valueOf: function() {
          return this.value;
        }, parse: function(t3) {
          return t3 = t3.valueOf(), Array.isArray(t3) ? t3 : this.split(t3);
        } }), a2.PointArray = function(t3, e3) {
          a2.Array.call(this, t3, e3 || [[0, 0]]);
        }, a2.PointArray.prototype = new a2.Array(), a2.PointArray.prototype.constructor = a2.PointArray;
        for (var s2 = { M: function(t3, e3, i2) {
          return e3.x = i2.x = t3[0], e3.y = i2.y = t3[1], ["M", e3.x, e3.y];
        }, L: function(t3, e3) {
          return e3.x = t3[0], e3.y = t3[1], ["L", t3[0], t3[1]];
        }, H: function(t3, e3) {
          return e3.x = t3[0], ["H", t3[0]];
        }, V: function(t3, e3) {
          return e3.y = t3[0], ["V", t3[0]];
        }, C: function(t3, e3) {
          return e3.x = t3[4], e3.y = t3[5], ["C", t3[0], t3[1], t3[2], t3[3], t3[4], t3[5]];
        }, Q: function(t3, e3) {
          return e3.x = t3[2], e3.y = t3[3], ["Q", t3[0], t3[1], t3[2], t3[3]];
        }, S: function(t3, e3) {
          return e3.x = t3[2], e3.y = t3[3], ["S", t3[0], t3[1], t3[2], t3[3]];
        }, Z: function(t3, e3, i2) {
          return e3.x = i2.x, e3.y = i2.y, ["Z"];
        } }, r2 = "mlhvqtcsaz".split(""), o2 = 0, n2 = r2.length; o2 < n2; ++o2)
          s2[r2[o2]] = /* @__PURE__ */ function(t3) {
            return function(e3, i2, a3) {
              if ("H" == t3)
                e3[0] = e3[0] + i2.x;
              else if ("V" == t3)
                e3[0] = e3[0] + i2.y;
              else if ("A" == t3)
                e3[5] = e3[5] + i2.x, e3[6] = e3[6] + i2.y;
              else
                for (var r3 = 0, o3 = e3.length; r3 < o3; ++r3)
                  e3[r3] = e3[r3] + (r3 % 2 ? i2.y : i2.x);
              if (s2 && "function" == typeof s2[t3])
                return s2[t3](e3, i2, a3);
            };
          }(r2[o2].toUpperCase());
        a2.PathArray = function(t3, e3) {
          a2.Array.call(this, t3, e3 || [["M", 0, 0]]);
        }, a2.PathArray.prototype = new a2.Array(), a2.PathArray.prototype.constructor = a2.PathArray, a2.extend(a2.PathArray, { toString: function() {
          return function(t3) {
            for (var e3 = 0, i2 = t3.length, a3 = ""; e3 < i2; e3++)
              a3 += t3[e3][0], null != t3[e3][1] && (a3 += t3[e3][1], null != t3[e3][2] && (a3 += " ", a3 += t3[e3][2], null != t3[e3][3] && (a3 += " ", a3 += t3[e3][3], a3 += " ", a3 += t3[e3][4], null != t3[e3][5] && (a3 += " ", a3 += t3[e3][5], a3 += " ", a3 += t3[e3][6], null != t3[e3][7] && (a3 += " ", a3 += t3[e3][7])))));
            return a3 + " ";
          }(this.value);
        }, move: function(t3, e3) {
          var i2 = this.bbox();
          return i2.x, i2.y, this;
        }, at: function(t3) {
          if (!this.destination)
            return this;
          for (var e3 = this.value, i2 = this.destination.value, s3 = [], r3 = new a2.PathArray(), o3 = 0, n3 = e3.length; o3 < n3; o3++) {
            s3[o3] = [e3[o3][0]];
            for (var l3 = 1, h3 = e3[o3].length; l3 < h3; l3++)
              s3[o3][l3] = e3[o3][l3] + (i2[o3][l3] - e3[o3][l3]) * t3;
            "A" === s3[o3][0] && (s3[o3][4] = +(0 != s3[o3][4]), s3[o3][5] = +(0 != s3[o3][5]));
          }
          return r3.value = s3, r3;
        }, parse: function(t3) {
          if (t3 instanceof a2.PathArray)
            return t3.valueOf();
          var e3, i2 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
          t3 = "string" == typeof t3 ? t3.replace(a2.regex.numbersWithDots, h2).replace(a2.regex.pathLetters, " $& ").replace(a2.regex.hyphen, "$1 -").trim().split(a2.regex.delimiter) : t3.reduce(function(t4, e4) {
            return [].concat.call(t4, e4);
          }, []);
          var r3 = [], o3 = new a2.Point(), n3 = new a2.Point(), l3 = 0, c3 = t3.length;
          do {
            a2.regex.isPathLetter.test(t3[l3]) ? (e3 = t3[l3], ++l3) : "M" == e3 ? e3 = "L" : "m" == e3 && (e3 = "l"), r3.push(s2[e3].call(null, t3.slice(l3, l3 += i2[e3.toUpperCase()]).map(parseFloat), o3, n3));
          } while (c3 > l3);
          return r3;
        }, bbox: function() {
          return a2.parser.draw || a2.prepare(), a2.parser.path.setAttribute("d", this.toString()), a2.parser.path.getBBox();
        } }), a2.Number = a2.invent({ create: function(t3, e3) {
          this.value = 0, this.unit = e3 || "", "number" == typeof t3 ? this.value = isNaN(t3) ? 0 : isFinite(t3) ? t3 : t3 < 0 ? -34e37 : 34e37 : "string" == typeof t3 ? (e3 = t3.match(a2.regex.numberAndUnit)) && (this.value = parseFloat(e3[1]), "%" == e3[5] ? this.value /= 100 : "s" == e3[5] && (this.value *= 1e3), this.unit = e3[5]) : t3 instanceof a2.Number && (this.value = t3.valueOf(), this.unit = t3.unit);
        }, extend: { toString: function() {
          return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
        }, toJSON: function() {
          return this.toString();
        }, valueOf: function() {
          return this.value;
        }, plus: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this + t3, this.unit || t3.unit);
        }, minus: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this - t3, this.unit || t3.unit);
        }, times: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this * t3, this.unit || t3.unit);
        }, divide: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this / t3, this.unit || t3.unit);
        }, to: function(t3) {
          var e3 = new a2.Number(this);
          return "string" == typeof t3 && (e3.unit = t3), e3;
        }, morph: function(t3) {
          return this.destination = new a2.Number(t3), t3.relative && (this.destination.value += this.value), this;
        }, at: function(t3) {
          return this.destination ? new a2.Number(this.destination).minus(this).times(t3).plus(this) : this;
        } } }), a2.Element = a2.invent({ create: function(t3) {
          this._stroke = a2.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t3) && (this.type = t3.nodeName, this.node.instance = this, this._stroke = t3.getAttribute("stroke") || this._stroke);
        }, extend: { x: function(t3) {
          return this.attr("x", t3);
        }, y: function(t3) {
          return this.attr("y", t3);
        }, cx: function(t3) {
          return null == t3 ? this.x() + this.width() / 2 : this.x(t3 - this.width() / 2);
        }, cy: function(t3) {
          return null == t3 ? this.y() + this.height() / 2 : this.y(t3 - this.height() / 2);
        }, move: function(t3, e3) {
          return this.x(t3).y(e3);
        }, center: function(t3, e3) {
          return this.cx(t3).cy(e3);
        }, width: function(t3) {
          return this.attr("width", t3);
        }, height: function(t3) {
          return this.attr("height", t3);
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.width(new a2.Number(i2.width)).height(new a2.Number(i2.height));
        }, clone: function(t3) {
          this.writeDataToDom();
          var e3 = x2(this.node.cloneNode(true));
          return t3 ? t3.add(e3) : this.after(e3), e3;
        }, remove: function() {
          return this.parent() && this.parent().removeElement(this), this;
        }, replace: function(t3) {
          return this.after(t3).remove(), t3;
        }, addTo: function(t3) {
          return t3.put(this);
        }, putIn: function(t3) {
          return t3.add(this);
        }, id: function(t3) {
          return this.attr("id", t3);
        }, show: function() {
          return this.style("display", "");
        }, hide: function() {
          return this.style("display", "none");
        }, visible: function() {
          return "none" != this.style("display");
        }, toString: function() {
          return this.attr("id");
        }, classes: function() {
          var t3 = this.attr("class");
          return null == t3 ? [] : t3.trim().split(a2.regex.delimiter);
        }, hasClass: function(t3) {
          return -1 != this.classes().indexOf(t3);
        }, addClass: function(t3) {
          if (!this.hasClass(t3)) {
            var e3 = this.classes();
            e3.push(t3), this.attr("class", e3.join(" "));
          }
          return this;
        }, removeClass: function(t3) {
          return this.hasClass(t3) && this.attr("class", this.classes().filter(function(e3) {
            return e3 != t3;
          }).join(" ")), this;
        }, toggleClass: function(t3) {
          return this.hasClass(t3) ? this.removeClass(t3) : this.addClass(t3);
        }, reference: function(t3) {
          return a2.get(this.attr(t3));
        }, parent: function(e3) {
          var i2 = this;
          if (!i2.node.parentNode)
            return null;
          if (i2 = a2.adopt(i2.node.parentNode), !e3)
            return i2;
          for (; i2 && i2.node instanceof t2.SVGElement; ) {
            if ("string" == typeof e3 ? i2.matches(e3) : i2 instanceof e3)
              return i2;
            if (!i2.node.parentNode || "#document" == i2.node.parentNode.nodeName)
              return null;
            i2 = a2.adopt(i2.node.parentNode);
          }
        }, doc: function() {
          return this instanceof a2.Doc ? this : this.parent(a2.Doc);
        }, parents: function(t3) {
          var e3 = [], i2 = this;
          do {
            if (!(i2 = i2.parent(t3)) || !i2.node)
              break;
            e3.push(i2);
          } while (i2.parent);
          return e3;
        }, matches: function(t3) {
          return function(t4, e3) {
            return (t4.matches || t4.matchesSelector || t4.msMatchesSelector || t4.mozMatchesSelector || t4.webkitMatchesSelector || t4.oMatchesSelector).call(t4, e3);
          }(this.node, t3);
        }, native: function() {
          return this.node;
        }, svg: function(t3) {
          var i2 = e2.createElementNS("http://www.w3.org/2000/svg", "svg");
          if (!(t3 && this instanceof a2.Parent))
            return i2.appendChild(t3 = e2.createElementNS("http://www.w3.org/2000/svg", "svg")), this.writeDataToDom(), t3.appendChild(this.node.cloneNode(true)), i2.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
          i2.innerHTML = "<svg>" + t3.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
          for (var s3 = 0, r3 = i2.firstChild.childNodes.length; s3 < r3; s3++)
            this.node.appendChild(i2.firstChild.firstChild);
          return this;
        }, writeDataToDom: function() {
          return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
            this.writeDataToDom();
          }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
        }, setData: function(t3) {
          return this.dom = t3, this;
        }, is: function(t3) {
          return function(t4, e3) {
            return t4 instanceof e3;
          }(this, t3);
        } } }), a2.easing = { "-": function(t3) {
          return t3;
        }, "<>": function(t3) {
          return -Math.cos(t3 * Math.PI) / 2 + 0.5;
        }, ">": function(t3) {
          return Math.sin(t3 * Math.PI / 2);
        }, "<": function(t3) {
          return 1 - Math.cos(t3 * Math.PI / 2);
        } }, a2.morph = function(t3) {
          return function(e3, i2) {
            return new a2.MorphObj(e3, i2).at(t3);
          };
        }, a2.Situation = a2.invent({ create: function(t3) {
          this.init = false, this.reversed = false, this.reversing = false, this.duration = new a2.Number(t3.duration).valueOf(), this.delay = new a2.Number(t3.delay).valueOf(), this.start = +/* @__PURE__ */ new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t3.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
        } }), a2.FX = a2.invent({ create: function(t3) {
          this._target = t3, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
        }, extend: { animate: function(t3, e3, s3) {
          "object" === i(t3) && (e3 = t3.ease, s3 = t3.delay, t3 = t3.duration);
          var r3 = new a2.Situation({ duration: t3 || 1e3, delay: s3 || 0, ease: a2.easing[e3 || "-"] || e3 });
          return this.queue(r3), this;
        }, target: function(t3) {
          return t3 && t3 instanceof a2.Element ? (this._target = t3, this) : this._target;
        }, timeToAbsPos: function(t3) {
          return (t3 - this.situation.start) / (this.situation.duration / this._speed);
        }, absPosToTime: function(t3) {
          return this.situation.duration / this._speed * t3 + this.situation.start;
        }, startAnimFrame: function() {
          this.stopAnimFrame(), this.animationFrame = t2.requestAnimationFrame(function() {
            this.step();
          }.bind(this));
        }, stopAnimFrame: function() {
          t2.cancelAnimationFrame(this.animationFrame);
        }, start: function() {
          return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
        }, startCurrent: function() {
          return this.situation.start = +/* @__PURE__ */ new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
        }, queue: function(t3) {
          return ("function" == typeof t3 || t3 instanceof a2.Situation) && this.situations.push(t3), this.situation || (this.situation = this.situations.shift()), this;
        }, dequeue: function() {
          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a2.Situation ? this.start() : this.situation.call(this)), this;
        }, initAnimations: function() {
          var t3, e3 = this.situation;
          if (e3.init)
            return this;
          for (var i2 in e3.animations) {
            t3 = this.target()[i2](), Array.isArray(t3) || (t3 = [t3]), Array.isArray(e3.animations[i2]) || (e3.animations[i2] = [e3.animations[i2]]);
            for (var s3 = t3.length; s3--; )
              e3.animations[i2][s3] instanceof a2.Number && (t3[s3] = new a2.Number(t3[s3])), e3.animations[i2][s3] = t3[s3].morph(e3.animations[i2][s3]);
          }
          for (var i2 in e3.attrs)
            e3.attrs[i2] = new a2.MorphObj(this.target().attr(i2), e3.attrs[i2]);
          for (var i2 in e3.styles)
            e3.styles[i2] = new a2.MorphObj(this.target().style(i2), e3.styles[i2]);
          return e3.initialTransformation = this.target().matrixify(), e3.init = true, this;
        }, clearQueue: function() {
          return this.situations = [], this;
        }, clearCurrent: function() {
          return this.situation = null, this;
        }, stop: function(t3, e3) {
          var i2 = this.active;
          return this.active = false, e3 && this.clearQueue(), t3 && this.situation && (!i2 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
        }, after: function(t3) {
          var e3 = this.last();
          return this.target().on("finished.fx", function i2(a3) {
            a3.detail.situation == e3 && (t3.call(this, e3), this.off("finished.fx", i2));
          }), this._callStart();
        }, during: function(t3) {
          var e3 = this.last(), i2 = function(i3) {
            i3.detail.situation == e3 && t3.call(this, i3.detail.pos, a2.morph(i3.detail.pos), i3.detail.eased, e3);
          };
          return this.target().off("during.fx", i2).on("during.fx", i2), this.after(function() {
            this.off("during.fx", i2);
          }), this._callStart();
        }, afterAll: function(t3) {
          var e3 = function e4(i2) {
            t3.call(this), this.off("allfinished.fx", e4);
          };
          return this.target().off("allfinished.fx", e3).on("allfinished.fx", e3), this._callStart();
        }, last: function() {
          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
        }, add: function(t3, e3, i2) {
          return this.last()[i2 || "animations"][t3] = e3, this._callStart();
        }, step: function(t3) {
          var e3, i2, a3;
          t3 || (this.absPos = this.timeToAbsPos(+/* @__PURE__ */ new Date())), false !== this.situation.loops ? (e3 = Math.max(this.absPos, 0), i2 = Math.floor(e3), true === this.situation.loops || i2 < this.situation.loops ? (this.pos = e3 - i2, a3 = this.situation.loop, this.situation.loop = i2) : (this.absPos = this.situation.loops, this.pos = 1, a3 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a3) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
          var s3 = this.situation.ease(this.pos);
          for (var r3 in this.situation.once)
            r3 > this.lastPos && r3 <= s3 && (this.situation.once[r3].call(this.target(), this.pos, s3), delete this.situation.once[r3]);
          return this.active && this.target().fire("during", { pos: this.pos, eased: s3, fx: this, situation: this.situation }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", { fx: this, situation: this.situation }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s3, this) : this;
        }, eachAt: function() {
          var t3, e3 = this, i2 = this.target(), s3 = this.situation;
          for (var r3 in s3.animations)
            t3 = [].concat(s3.animations[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2[r3].apply(i2, t3);
          for (var r3 in s3.attrs)
            t3 = [r3].concat(s3.attrs[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2.attr.apply(i2, t3);
          for (var r3 in s3.styles)
            t3 = [r3].concat(s3.styles[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2.style.apply(i2, t3);
          if (s3.transforms.length) {
            t3 = s3.initialTransformation, r3 = 0;
            for (var o3 = s3.transforms.length; r3 < o3; r3++) {
              var n3 = s3.transforms[r3];
              n3 instanceof a2.Matrix ? t3 = n3.relative ? t3.multiply(new a2.Matrix().morph(n3).at(s3.ease(this.pos))) : t3.morph(n3).at(s3.ease(this.pos)) : (n3.relative || n3.undo(t3.extract()), t3 = t3.multiply(n3.at(s3.ease(this.pos))));
            }
            i2.matrix(t3);
          }
          return this;
        }, once: function(t3, e3, i2) {
          var a3 = this.last();
          return i2 || (t3 = a3.ease(t3)), a3.once[t3] = e3, this;
        }, _callStart: function() {
          return setTimeout(function() {
            this.start();
          }.bind(this), 0), this;
        } }, parent: a2.Element, construct: { animate: function(t3, e3, i2) {
          return (this.fx || (this.fx = new a2.FX(this))).animate(t3, e3, i2);
        }, delay: function(t3) {
          return (this.fx || (this.fx = new a2.FX(this))).delay(t3);
        }, stop: function(t3, e3) {
          return this.fx && this.fx.stop(t3, e3), this;
        }, finish: function() {
          return this.fx && this.fx.finish(), this;
        } } }), a2.MorphObj = a2.invent({ create: function(t3, e3) {
          return a2.Color.isColor(e3) ? new a2.Color(t3).morph(e3) : a2.regex.delimiter.test(t3) ? a2.regex.pathLetters.test(t3) ? new a2.PathArray(t3).morph(e3) : new a2.Array(t3).morph(e3) : a2.regex.numberAndUnit.test(e3) ? new a2.Number(t3).morph(e3) : (this.value = t3, void (this.destination = e3));
        }, extend: { at: function(t3, e3) {
          return e3 < 1 ? this.value : this.destination;
        }, valueOf: function() {
          return this.value;
        } } }), a2.extend(a2.FX, { attr: function(t3, e3, a3) {
          if ("object" === i(t3))
            for (var s3 in t3)
              this.attr(s3, t3[s3]);
          else
            this.add(t3, e3, "attrs");
          return this;
        }, plot: function(t3, e3, i2, a3) {
          return 4 == arguments.length ? this.plot([t3, e3, i2, a3]) : this.add("plot", new (this.target()).morphArray(t3));
        } }), a2.Box = a2.invent({ create: function(t3, e3, s3, r3) {
          if (!("object" !== i(t3) || t3 instanceof a2.Element))
            return a2.Box.call(this, null != t3.left ? t3.left : t3.x, null != t3.top ? t3.top : t3.y, t3.width, t3.height);
          var o3;
          4 == arguments.length && (this.x = t3, this.y = e3, this.width = s3, this.height = r3), null == (o3 = this).x && (o3.x = 0, o3.y = 0, o3.width = 0, o3.height = 0), o3.w = o3.width, o3.h = o3.height, o3.x2 = o3.x + o3.width, o3.y2 = o3.y + o3.height, o3.cx = o3.x + o3.width / 2, o3.cy = o3.y + o3.height / 2;
        } }), a2.BBox = a2.invent({ create: function(t3) {
          if (a2.Box.apply(this, [].slice.call(arguments)), t3 instanceof a2.Element) {
            var i2;
            try {
              if (!e2.documentElement.contains) {
                for (var s3 = t3.node; s3.parentNode; )
                  s3 = s3.parentNode;
                if (s3 != e2)
                  throw new Error("Element not in the dom");
              }
              i2 = t3.node.getBBox();
            } catch (e3) {
              if (t3 instanceof a2.Shape) {
                a2.parser.draw || a2.prepare();
                var r3 = t3.clone(a2.parser.draw.instance).show();
                r3 && r3.node && "function" == typeof r3.node.getBBox && (i2 = r3.node.getBBox()), r3 && "function" == typeof r3.remove && r3.remove();
              } else
                i2 = { x: t3.node.clientLeft, y: t3.node.clientTop, width: t3.node.clientWidth, height: t3.node.clientHeight };
            }
            a2.Box.call(this, i2);
          }
        }, inherit: a2.Box, parent: a2.Element, construct: { bbox: function() {
          return new a2.BBox(this);
        } } }), a2.BBox.prototype.constructor = a2.BBox, a2.Matrix = a2.invent({ create: function(t3) {
          var e3 = f2([1, 0, 0, 1, 0, 0]);
          t3 = null === t3 ? e3 : t3 instanceof a2.Element ? t3.matrixify() : "string" == typeof t3 ? f2(t3.split(a2.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f2([].slice.call(arguments)) : Array.isArray(t3) ? f2(t3) : t3 && "object" === i(t3) ? t3 : e3;
          for (var s3 = v2.length - 1; s3 >= 0; --s3)
            this[v2[s3]] = null != t3[v2[s3]] ? t3[v2[s3]] : e3[v2[s3]];
        }, extend: { extract: function() {
          var t3 = p2(this, 0, 1);
          p2(this, 1, 0);
          var e3 = 180 / Math.PI * Math.atan2(t3.y, t3.x) - 90;
          return { x: this.e, y: this.f, transformedX: (this.e * Math.cos(e3 * Math.PI / 180) + this.f * Math.sin(e3 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b), transformedY: (this.f * Math.cos(e3 * Math.PI / 180) + this.e * Math.sin(-e3 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d), rotation: e3, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, matrix: new a2.Matrix(this) };
        }, clone: function() {
          return new a2.Matrix(this);
        }, morph: function(t3) {
          return this.destination = new a2.Matrix(t3), this;
        }, multiply: function(t3) {
          return new a2.Matrix(this.native().multiply(function(t4) {
            return t4 instanceof a2.Matrix || (t4 = new a2.Matrix(t4)), t4;
          }(t3).native()));
        }, inverse: function() {
          return new a2.Matrix(this.native().inverse());
        }, translate: function(t3, e3) {
          return new a2.Matrix(this.native().translate(t3 || 0, e3 || 0));
        }, native: function() {
          for (var t3 = a2.parser.native.createSVGMatrix(), e3 = v2.length - 1; e3 >= 0; e3--)
            t3[v2[e3]] = this[v2[e3]];
          return t3;
        }, toString: function() {
          return "matrix(" + b2(this.a) + "," + b2(this.b) + "," + b2(this.c) + "," + b2(this.d) + "," + b2(this.e) + "," + b2(this.f) + ")";
        } }, parent: a2.Element, construct: { ctm: function() {
          return new a2.Matrix(this.node.getCTM());
        }, screenCTM: function() {
          if (this instanceof a2.Nested) {
            var t3 = this.rect(1, 1), e3 = t3.node.getScreenCTM();
            return t3.remove(), new a2.Matrix(e3);
          }
          return new a2.Matrix(this.node.getScreenCTM());
        } } }), a2.Point = a2.invent({ create: function(t3, e3) {
          var a3;
          a3 = Array.isArray(t3) ? { x: t3[0], y: t3[1] } : "object" === i(t3) ? { x: t3.x, y: t3.y } : null != t3 ? { x: t3, y: null != e3 ? e3 : t3 } : { x: 0, y: 0 }, this.x = a3.x, this.y = a3.y;
        }, extend: { clone: function() {
          return new a2.Point(this);
        }, morph: function(t3, e3) {
          return this.destination = new a2.Point(t3, e3), this;
        } } }), a2.extend(a2.Element, { point: function(t3, e3) {
          return new a2.Point(t3, e3).transform(this.screenCTM().inverse());
        } }), a2.extend(a2.Element, { attr: function(t3, e3, s3) {
          if (null == t3) {
            for (t3 = {}, s3 = (e3 = this.node.attributes).length - 1; s3 >= 0; s3--)
              t3[e3[s3].nodeName] = a2.regex.isNumber.test(e3[s3].nodeValue) ? parseFloat(e3[s3].nodeValue) : e3[s3].nodeValue;
            return t3;
          }
          if ("object" === i(t3))
            for (var r3 in t3)
              this.attr(r3, t3[r3]);
          else if (null === e3)
            this.node.removeAttribute(t3);
          else {
            if (null == e3)
              return null == (e3 = this.node.getAttribute(t3)) ? a2.defaults.attrs[t3] : a2.regex.isNumber.test(e3) ? parseFloat(e3) : e3;
            "stroke-width" == t3 ? this.attr("stroke", parseFloat(e3) > 0 ? this._stroke : null) : "stroke" == t3 && (this._stroke = e3), "fill" != t3 && "stroke" != t3 || (a2.regex.isImage.test(e3) && (e3 = this.doc().defs().image(e3, 0, 0)), e3 instanceof a2.Image && (e3 = this.doc().defs().pattern(0, 0, function() {
              this.add(e3);
            }))), "number" == typeof e3 ? e3 = new a2.Number(e3) : a2.Color.isColor(e3) ? e3 = new a2.Color(e3) : Array.isArray(e3) && (e3 = new a2.Array(e3)), "leading" == t3 ? this.leading && this.leading(e3) : "string" == typeof s3 ? this.node.setAttributeNS(s3, t3, e3.toString()) : this.node.setAttribute(t3, e3.toString()), !this.rebuild || "font-size" != t3 && "x" != t3 || this.rebuild(t3, e3);
          }
          return this;
        } }), a2.extend(a2.Element, { transform: function(t3, e3) {
          var s3;
          return "object" !== i(t3) ? (s3 = new a2.Matrix(this).extract(), "string" == typeof t3 ? s3[t3] : s3) : (s3 = new a2.Matrix(this), e3 = !!e3 || !!t3.relative, null != t3.a && (s3 = e3 ? s3.multiply(new a2.Matrix(t3)) : new a2.Matrix(t3)), this.attr("transform", s3));
        } }), a2.extend(a2.Element, { untransform: function() {
          return this.attr("transform", null);
        }, matrixify: function() {
          return (this.attr("transform") || "").split(a2.regex.transforms).slice(0, -1).map(function(t3) {
            var e3 = t3.trim().split("(");
            return [e3[0], e3[1].split(a2.regex.delimiter).map(function(t4) {
              return parseFloat(t4);
            })];
          }).reduce(function(t3, e3) {
            return "matrix" == e3[0] ? t3.multiply(f2(e3[1])) : t3[e3[0]].apply(t3, e3[1]);
          }, new a2.Matrix());
        }, toParent: function(t3) {
          if (this == t3)
            return this;
          var e3 = this.screenCTM(), i2 = t3.screenCTM().inverse();
          return this.addTo(t3).untransform().transform(i2.multiply(e3)), this;
        }, toDoc: function() {
          return this.toParent(this.doc());
        } }), a2.Transformation = a2.invent({ create: function(t3, e3) {
          if (arguments.length > 1 && "boolean" != typeof e3)
            return this.constructor.call(this, [].slice.call(arguments));
          if (Array.isArray(t3))
            for (var a3 = 0, s3 = this.arguments.length; a3 < s3; ++a3)
              this[this.arguments[a3]] = t3[a3];
          else if (t3 && "object" === i(t3))
            for (a3 = 0, s3 = this.arguments.length; a3 < s3; ++a3)
              this[this.arguments[a3]] = t3[this.arguments[a3]];
          this.inversed = false, true === e3 && (this.inversed = true);
        } }), a2.Translate = a2.invent({ parent: a2.Matrix, inherit: a2.Transformation, create: function(t3, e3) {
          this.constructor.apply(this, [].slice.call(arguments));
        }, extend: { arguments: ["transformedX", "transformedY"], method: "translate" } }), a2.extend(a2.Element, { style: function(t3, e3) {
          if (0 == arguments.length)
            return this.node.style.cssText || "";
          if (arguments.length < 2)
            if ("object" === i(t3))
              for (var s3 in t3)
                this.style(s3, t3[s3]);
            else {
              if (!a2.regex.isCss.test(t3))
                return this.node.style[c2(t3)];
              for (t3 = t3.split(/\s*;\s*/).filter(function(t4) {
                return !!t4;
              }).map(function(t4) {
                return t4.split(/\s*:\s*/);
              }); e3 = t3.pop(); )
                this.style(e3[0], e3[1]);
            }
          else
            this.node.style[c2(t3)] = null === e3 || a2.regex.isBlank.test(e3) ? "" : e3;
          return this;
        } }), a2.Parent = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Element, extend: { children: function() {
          return a2.utils.map(a2.utils.filterSVGElements(this.node.childNodes), function(t3) {
            return a2.adopt(t3);
          });
        }, add: function(t3, e3) {
          return null == e3 ? this.node.appendChild(t3.node) : t3.node != this.node.childNodes[e3] && this.node.insertBefore(t3.node, this.node.childNodes[e3]), this;
        }, put: function(t3, e3) {
          return this.add(t3, e3), t3;
        }, has: function(t3) {
          return this.index(t3) >= 0;
        }, index: function(t3) {
          return [].slice.call(this.node.childNodes).indexOf(t3.node);
        }, get: function(t3) {
          return a2.adopt(this.node.childNodes[t3]);
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.node.childNodes.length - 1);
        }, each: function(t3, e3) {
          for (var i2 = this.children(), s3 = 0, r3 = i2.length; s3 < r3; s3++)
            i2[s3] instanceof a2.Element && t3.apply(i2[s3], [s3, i2]), e3 && i2[s3] instanceof a2.Container && i2[s3].each(t3, e3);
          return this;
        }, removeElement: function(t3) {
          return this.node.removeChild(t3.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, this;
        }, defs: function() {
          return this.doc().defs();
        } } }), a2.extend(a2.Parent, { ungroup: function(t3, e3) {
          return 0 === e3 || this instanceof a2.Defs || this.node == a2.parser.draw || (t3 = t3 || (this instanceof a2.Doc ? this : this.parent(a2.Parent)), e3 = e3 || 1 / 0, this.each(function() {
            return this instanceof a2.Defs ? this : this instanceof a2.Parent ? this.ungroup(t3, e3 - 1) : this.toParent(t3);
          }), this.node.firstChild || this.remove()), this;
        }, flatten: function(t3, e3) {
          return this.ungroup(t3, e3);
        } }), a2.Container = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Parent }), a2.ViewBox = a2.invent({ parent: a2.Container, construct: {} }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function(t3) {
          a2.Element.prototype[t3] = function(e3) {
            return a2.on(this.node, t3, e3), this;
          };
        }), a2.listeners = [], a2.handlerMap = [], a2.listenerId = 0, a2.on = function(t3, e3, i2, s3, r3) {
          var o3 = i2.bind(s3 || t3.instance || t3), n3 = (a2.handlerMap.indexOf(t3) + 1 || a2.handlerMap.push(t3)) - 1, l3 = e3.split(".")[0], h3 = e3.split(".")[1] || "*";
          a2.listeners[n3] = a2.listeners[n3] || {}, a2.listeners[n3][l3] = a2.listeners[n3][l3] || {}, a2.listeners[n3][l3][h3] = a2.listeners[n3][l3][h3] || {}, i2._svgjsListenerId || (i2._svgjsListenerId = ++a2.listenerId), a2.listeners[n3][l3][h3][i2._svgjsListenerId] = o3, t3.addEventListener(l3, o3, r3 || { passive: false });
        }, a2.off = function(t3, e3, i2) {
          var s3 = a2.handlerMap.indexOf(t3), r3 = e3 && e3.split(".")[0], o3 = e3 && e3.split(".")[1], n3 = "";
          if (-1 != s3)
            if (i2) {
              if ("function" == typeof i2 && (i2 = i2._svgjsListenerId), !i2)
                return;
              a2.listeners[s3][r3] && a2.listeners[s3][r3][o3 || "*"] && (t3.removeEventListener(r3, a2.listeners[s3][r3][o3 || "*"][i2], false), delete a2.listeners[s3][r3][o3 || "*"][i2]);
            } else if (o3 && r3) {
              if (a2.listeners[s3][r3] && a2.listeners[s3][r3][o3]) {
                for (var l3 in a2.listeners[s3][r3][o3])
                  a2.off(t3, [r3, o3].join("."), l3);
                delete a2.listeners[s3][r3][o3];
              }
            } else if (o3)
              for (var h3 in a2.listeners[s3])
                for (var n3 in a2.listeners[s3][h3])
                  o3 === n3 && a2.off(t3, [h3, o3].join("."));
            else if (r3) {
              if (a2.listeners[s3][r3]) {
                for (var n3 in a2.listeners[s3][r3])
                  a2.off(t3, [r3, n3].join("."));
                delete a2.listeners[s3][r3];
              }
            } else {
              for (var h3 in a2.listeners[s3])
                a2.off(t3, h3);
              delete a2.listeners[s3], delete a2.handlerMap[s3];
            }
        }, a2.extend(a2.Element, { on: function(t3, e3, i2, s3) {
          return a2.on(this.node, t3, e3, i2, s3), this;
        }, off: function(t3, e3) {
          return a2.off(this.node, t3, e3), this;
        }, fire: function(e3, i2) {
          return e3 instanceof t2.Event ? this.node.dispatchEvent(e3) : this.node.dispatchEvent(e3 = new a2.CustomEvent(e3, { detail: i2, cancelable: true })), this._event = e3, this;
        }, event: function() {
          return this._event;
        } }), a2.Defs = a2.invent({ create: "defs", inherit: a2.Container }), a2.G = a2.invent({ create: "g", inherit: a2.Container, extend: { x: function(t3) {
          return null == t3 ? this.transform("x") : this.transform({ x: t3 - this.x() }, true);
        } }, construct: { group: function() {
          return this.put(new a2.G());
        } } }), a2.Doc = a2.invent({ create: function(t3) {
          t3 && ("svg" == (t3 = "string" == typeof t3 ? e2.getElementById(t3) : t3).nodeName ? this.constructor.call(this, t3) : (this.constructor.call(this, a2.create("svg")), t3.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
        }, inherit: a2.Container, extend: { namespace: function() {
          return this.attr({ xmlns: a2.ns, version: "1.1" }).attr("xmlns:xlink", a2.xlink, a2.xmlns).attr("xmlns:svgjs", a2.svgjs, a2.xmlns);
        }, defs: function() {
          var t3;
          return this._defs || ((t3 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a2.adopt(t3) : this._defs = new a2.Defs(), this.node.appendChild(this._defs.node)), this._defs;
        }, parent: function() {
          return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
        }, remove: function() {
          return this.parent() && this.parent().removeChild(this.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, a2.parser.draw && !a2.parser.draw.parentNode && this.node.appendChild(a2.parser.draw), this;
        }, clone: function(t3) {
          this.writeDataToDom();
          var e3 = this.node, i2 = x2(e3.cloneNode(true));
          return t3 ? (t3.node || t3).appendChild(i2.node) : e3.parentNode.insertBefore(i2.node, e3.nextSibling), i2;
        } } }), a2.extend(a2.Element, {}), a2.Gradient = a2.invent({ create: function(t3) {
          this.constructor.call(this, a2.create(t3 + "Gradient")), this.type = t3;
        }, inherit: a2.Container, extend: { at: function(t3, e3, i2) {
          return this.put(new a2.Stop()).update(t3, e3, i2);
        }, update: function(t3) {
          return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
        }, fill: function() {
          return "url(#" + this.id() + ")";
        }, toString: function() {
          return this.fill();
        }, attr: function(t3, e3, i2) {
          return "transform" == t3 && (t3 = "gradientTransform"), a2.Container.prototype.attr.call(this, t3, e3, i2);
        } }, construct: { gradient: function(t3, e3) {
          return this.defs().gradient(t3, e3);
        } } }), a2.extend(a2.Gradient, a2.FX, { from: function(t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({ fx: new a2.Number(t3), fy: new a2.Number(e3) }) : this.attr({ x1: new a2.Number(t3), y1: new a2.Number(e3) });
        }, to: function(t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({ cx: new a2.Number(t3), cy: new a2.Number(e3) }) : this.attr({ x2: new a2.Number(t3), y2: new a2.Number(e3) });
        } }), a2.extend(a2.Defs, { gradient: function(t3, e3) {
          return this.put(new a2.Gradient(t3)).update(e3);
        } }), a2.Stop = a2.invent({ create: "stop", inherit: a2.Element, extend: { update: function(t3) {
          return ("number" == typeof t3 || t3 instanceof a2.Number) && (t3 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t3.opacity && this.attr("stop-opacity", t3.opacity), null != t3.color && this.attr("stop-color", t3.color), null != t3.offset && this.attr("offset", new a2.Number(t3.offset)), this;
        } } }), a2.Pattern = a2.invent({ create: "pattern", inherit: a2.Container, extend: { fill: function() {
          return "url(#" + this.id() + ")";
        }, update: function(t3) {
          return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
        }, toString: function() {
          return this.fill();
        }, attr: function(t3, e3, i2) {
          return "transform" == t3 && (t3 = "patternTransform"), a2.Container.prototype.attr.call(this, t3, e3, i2);
        } }, construct: { pattern: function(t3, e3, i2) {
          return this.defs().pattern(t3, e3, i2);
        } } }), a2.extend(a2.Defs, { pattern: function(t3, e3, i2) {
          return this.put(new a2.Pattern()).update(i2).attr({ x: 0, y: 0, width: t3, height: e3, patternUnits: "userSpaceOnUse" });
        } }), a2.Shape = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Element }), a2.Symbol = a2.invent({ create: "symbol", inherit: a2.Container, construct: { symbol: function() {
          return this.put(new a2.Symbol());
        } } }), a2.Use = a2.invent({ create: "use", inherit: a2.Shape, extend: { element: function(t3, e3) {
          return this.attr("href", (e3 || "") + "#" + t3, a2.xlink);
        } }, construct: { use: function(t3, e3) {
          return this.put(new a2.Use()).element(t3, e3);
        } } }), a2.Rect = a2.invent({ create: "rect", inherit: a2.Shape, construct: { rect: function(t3, e3) {
          return this.put(new a2.Rect()).size(t3, e3);
        } } }), a2.Circle = a2.invent({ create: "circle", inherit: a2.Shape, construct: { circle: function(t3) {
          return this.put(new a2.Circle()).rx(new a2.Number(t3).divide(2)).move(0, 0);
        } } }), a2.extend(a2.Circle, a2.FX, { rx: function(t3) {
          return this.attr("r", t3);
        }, ry: function(t3) {
          return this.rx(t3);
        } }), a2.Ellipse = a2.invent({ create: "ellipse", inherit: a2.Shape, construct: { ellipse: function(t3, e3) {
          return this.put(new a2.Ellipse()).size(t3, e3).move(0, 0);
        } } }), a2.extend(a2.Ellipse, a2.Rect, a2.FX, { rx: function(t3) {
          return this.attr("rx", t3);
        }, ry: function(t3) {
          return this.attr("ry", t3);
        } }), a2.extend(a2.Circle, a2.Ellipse, { x: function(t3) {
          return null == t3 ? this.cx() - this.rx() : this.cx(t3 + this.rx());
        }, y: function(t3) {
          return null == t3 ? this.cy() - this.ry() : this.cy(t3 + this.ry());
        }, cx: function(t3) {
          return null == t3 ? this.attr("cx") : this.attr("cx", t3);
        }, cy: function(t3) {
          return null == t3 ? this.attr("cy") : this.attr("cy", t3);
        }, width: function(t3) {
          return null == t3 ? 2 * this.rx() : this.rx(new a2.Number(t3).divide(2));
        }, height: function(t3) {
          return null == t3 ? 2 * this.ry() : this.ry(new a2.Number(t3).divide(2));
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.rx(new a2.Number(i2.width).divide(2)).ry(new a2.Number(i2.height).divide(2));
        } }), a2.Line = a2.invent({ create: "line", inherit: a2.Shape, extend: { array: function() {
          return new a2.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
        }, plot: function(t3, e3, i2, s3) {
          return null == t3 ? this.array() : (t3 = void 0 !== e3 ? { x1: t3, y1: e3, x2: i2, y2: s3 } : new a2.PointArray(t3).toLine(), this.attr(t3));
        }, move: function(t3, e3) {
          return this.attr(this.array().move(t3, e3).toLine());
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.attr(this.array().size(i2.width, i2.height).toLine());
        } }, construct: { line: function(t3, e3, i2, s3) {
          return a2.Line.prototype.plot.apply(this.put(new a2.Line()), null != t3 ? [t3, e3, i2, s3] : [0, 0, 0, 0]);
        } } }), a2.Polyline = a2.invent({ create: "polyline", inherit: a2.Shape, construct: { polyline: function(t3) {
          return this.put(new a2.Polyline()).plot(t3 || new a2.PointArray());
        } } }), a2.Polygon = a2.invent({ create: "polygon", inherit: a2.Shape, construct: { polygon: function(t3) {
          return this.put(new a2.Polygon()).plot(t3 || new a2.PointArray());
        } } }), a2.extend(a2.Polyline, a2.Polygon, { array: function() {
          return this._array || (this._array = new a2.PointArray(this.attr("points")));
        }, plot: function(t3) {
          return null == t3 ? this.array() : this.clear().attr("points", "string" == typeof t3 ? t3 : this._array = new a2.PointArray(t3));
        }, clear: function() {
          return delete this._array, this;
        }, move: function(t3, e3) {
          return this.attr("points", this.array().move(t3, e3));
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.attr("points", this.array().size(i2.width, i2.height));
        } }), a2.extend(a2.Line, a2.Polyline, a2.Polygon, { morphArray: a2.PointArray, x: function(t3) {
          return null == t3 ? this.bbox().x : this.move(t3, this.bbox().y);
        }, y: function(t3) {
          return null == t3 ? this.bbox().y : this.move(this.bbox().x, t3);
        }, width: function(t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.width : this.size(t3, e3.height);
        }, height: function(t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.height : this.size(e3.width, t3);
        } }), a2.Path = a2.invent({ create: "path", inherit: a2.Shape, extend: { morphArray: a2.PathArray, array: function() {
          return this._array || (this._array = new a2.PathArray(this.attr("d")));
        }, plot: function(t3) {
          return null == t3 ? this.array() : this.clear().attr("d", "string" == typeof t3 ? t3 : this._array = new a2.PathArray(t3));
        }, clear: function() {
          return delete this._array, this;
        } }, construct: { path: function(t3) {
          return this.put(new a2.Path()).plot(t3 || new a2.PathArray());
        } } }), a2.Image = a2.invent({ create: "image", inherit: a2.Shape, extend: { load: function(e3) {
          if (!e3)
            return this;
          var i2 = this, s3 = new t2.Image();
          return a2.on(s3, "load", function() {
            a2.off(s3);
            var t3 = i2.parent(a2.Pattern);
            null !== t3 && (0 == i2.width() && 0 == i2.height() && i2.size(s3.width, s3.height), t3 && 0 == t3.width() && 0 == t3.height() && t3.size(i2.width(), i2.height()), "function" == typeof i2._loaded && i2._loaded.call(i2, { width: s3.width, height: s3.height, ratio: s3.width / s3.height, url: e3 }));
          }), a2.on(s3, "error", function(t3) {
            a2.off(s3), "function" == typeof i2._error && i2._error.call(i2, t3);
          }), this.attr("href", s3.src = this.src = e3, a2.xlink);
        }, loaded: function(t3) {
          return this._loaded = t3, this;
        }, error: function(t3) {
          return this._error = t3, this;
        } }, construct: { image: function(t3, e3, i2) {
          return this.put(new a2.Image()).load(t3).size(e3 || 0, i2 || e3 || 0);
        } } }), a2.Text = a2.invent({ create: function() {
          this.constructor.call(this, a2.create("text")), this.dom.leading = new a2.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", a2.defaults.attrs["font-family"]);
        }, inherit: a2.Shape, extend: { x: function(t3) {
          return null == t3 ? this.attr("x") : this.attr("x", t3);
        }, text: function(t3) {
          if (void 0 === t3) {
            t3 = "";
            for (var e3 = this.node.childNodes, i2 = 0, s3 = e3.length; i2 < s3; ++i2)
              0 != i2 && 3 != e3[i2].nodeType && 1 == a2.adopt(e3[i2]).dom.newLined && (t3 += "\n"), t3 += e3[i2].textContent;
            return t3;
          }
          if (this.clear().build(true), "function" == typeof t3)
            t3.call(this, this);
          else {
            i2 = 0;
            for (var r3 = (t3 = t3.split("\n")).length; i2 < r3; i2++)
              this.tspan(t3[i2]).newLine();
          }
          return this.build(false).rebuild();
        }, size: function(t3) {
          return this.attr("font-size", t3).rebuild();
        }, leading: function(t3) {
          return null == t3 ? this.dom.leading : (this.dom.leading = new a2.Number(t3), this.rebuild());
        }, lines: function() {
          var t3 = (this.textPath && this.textPath() || this).node, e3 = a2.utils.map(a2.utils.filterSVGElements(t3.childNodes), function(t4) {
            return a2.adopt(t4);
          });
          return new a2.Set(e3);
        }, rebuild: function(t3) {
          if ("boolean" == typeof t3 && (this._rebuild = t3), this._rebuild) {
            var e3 = this, i2 = 0, s3 = this.dom.leading * new a2.Number(this.attr("font-size"));
            this.lines().each(function() {
              this.dom.newLined && (e3.textPath() || this.attr("x", e3.attr("x")), "\n" == this.text() ? i2 += s3 : (this.attr("dy", s3 + i2), i2 = 0));
            }), this.fire("rebuild");
          }
          return this;
        }, build: function(t3) {
          return this._build = !!t3, this;
        }, setData: function(t3) {
          return this.dom = t3, this.dom.leading = new a2.Number(t3.leading || 1.3), this;
        } }, construct: { text: function(t3) {
          return this.put(new a2.Text()).text(t3);
        }, plain: function(t3) {
          return this.put(new a2.Text()).plain(t3);
        } } }), a2.Tspan = a2.invent({ create: "tspan", inherit: a2.Shape, extend: { text: function(t3) {
          return null == t3 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t3 ? t3.call(this, this) : this.plain(t3), this);
        }, dx: function(t3) {
          return this.attr("dx", t3);
        }, dy: function(t3) {
          return this.attr("dy", t3);
        }, newLine: function() {
          var t3 = this.parent(a2.Text);
          return this.dom.newLined = true, this.dy(t3.dom.leading * t3.attr("font-size")).attr("x", t3.x());
        } } }), a2.extend(a2.Text, a2.Tspan, { plain: function(t3) {
          return false === this._build && this.clear(), this.node.appendChild(e2.createTextNode(t3)), this;
        }, tspan: function(t3) {
          var e3 = (this.textPath && this.textPath() || this).node, i2 = new a2.Tspan();
          return false === this._build && this.clear(), e3.appendChild(i2.node), i2.text(t3);
        }, clear: function() {
          for (var t3 = (this.textPath && this.textPath() || this).node; t3.hasChildNodes(); )
            t3.removeChild(t3.lastChild);
          return this;
        }, length: function() {
          return this.node.getComputedTextLength();
        } }), a2.TextPath = a2.invent({ create: "textPath", inherit: a2.Parent, parent: a2.Text, construct: { morphArray: a2.PathArray, array: function() {
          var t3 = this.track();
          return t3 ? t3.array() : null;
        }, plot: function(t3) {
          var e3 = this.track(), i2 = null;
          return e3 && (i2 = e3.plot(t3)), null == t3 ? i2 : this;
        }, track: function() {
          var t3 = this.textPath();
          if (t3)
            return t3.reference("href");
        }, textPath: function() {
          if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName)
            return a2.adopt(this.node.firstChild);
        } } }), a2.Nested = a2.invent({ create: function() {
          this.constructor.call(this, a2.create("svg")), this.style("overflow", "visible");
        }, inherit: a2.Container, construct: { nested: function() {
          return this.put(new a2.Nested());
        } } });
        var l2 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t3, e3) {
          return "color" == e3 ? t3 : t3 + "-" + e3;
        } };
        function h2(t3, e3, i2, s3) {
          return i2 + s3.replace(a2.regex.dots, " .");
        }
        function c2(t3) {
          return t3.toLowerCase().replace(/-(.)/g, function(t4, e3) {
            return e3.toUpperCase();
          });
        }
        function d2(t3) {
          return t3.charAt(0).toUpperCase() + t3.slice(1);
        }
        function g2(t3) {
          var e3 = t3.toString(16);
          return 1 == e3.length ? "0" + e3 : e3;
        }
        function u2(t3, e3, i2) {
          if (null == e3 || null == i2) {
            var a3 = t3.bbox();
            null == e3 ? e3 = a3.width / a3.height * i2 : null == i2 && (i2 = a3.height / a3.width * e3);
          }
          return { width: e3, height: i2 };
        }
        function p2(t3, e3, i2) {
          return { x: e3 * t3.a + i2 * t3.c + 0, y: e3 * t3.b + i2 * t3.d + 0 };
        }
        function f2(t3) {
          return { a: t3[0], b: t3[1], c: t3[2], d: t3[3], e: t3[4], f: t3[5] };
        }
        function x2(e3) {
          for (var i2 = e3.childNodes.length - 1; i2 >= 0; i2--)
            e3.childNodes[i2] instanceof t2.SVGElement && x2(e3.childNodes[i2]);
          return a2.adopt(e3).id(a2.eid(e3.nodeName));
        }
        function b2(t3) {
          return Math.abs(t3) > 1e-37 ? t3 : 0;
        }
        ["fill", "stroke"].forEach(function(t3) {
          var e3 = {};
          e3[t3] = function(e4) {
            if (void 0 === e4)
              return this;
            if ("string" == typeof e4 || a2.Color.isRgb(e4) || e4 && "function" == typeof e4.fill)
              this.attr(t3, e4);
            else
              for (var i2 = l2[t3].length - 1; i2 >= 0; i2--)
                null != e4[l2[t3][i2]] && this.attr(l2.prefix(t3, l2[t3][i2]), e4[l2[t3][i2]]);
            return this;
          }, a2.extend(a2.Element, a2.FX, e3);
        }), a2.extend(a2.Element, a2.FX, { translate: function(t3, e3) {
          return this.transform({ x: t3, y: e3 });
        }, matrix: function(t3) {
          return this.attr("transform", new a2.Matrix(6 == arguments.length ? [].slice.call(arguments) : t3));
        }, opacity: function(t3) {
          return this.attr("opacity", t3);
        }, dx: function(t3) {
          return this.x(new a2.Number(t3).plus(this instanceof a2.FX ? 0 : this.x()), true);
        }, dy: function(t3) {
          return this.y(new a2.Number(t3).plus(this instanceof a2.FX ? 0 : this.y()), true);
        } }), a2.extend(a2.Path, { length: function() {
          return this.node.getTotalLength();
        }, pointAt: function(t3) {
          return this.node.getPointAtLength(t3);
        } }), a2.Set = a2.invent({ create: function(t3) {
          Array.isArray(t3) ? this.members = t3 : this.clear();
        }, extend: { add: function() {
          for (var t3 = [].slice.call(arguments), e3 = 0, i2 = t3.length; e3 < i2; e3++)
            this.members.push(t3[e3]);
          return this;
        }, remove: function(t3) {
          var e3 = this.index(t3);
          return e3 > -1 && this.members.splice(e3, 1), this;
        }, each: function(t3) {
          for (var e3 = 0, i2 = this.members.length; e3 < i2; e3++)
            t3.apply(this.members[e3], [e3, this.members]);
          return this;
        }, clear: function() {
          return this.members = [], this;
        }, length: function() {
          return this.members.length;
        }, has: function(t3) {
          return this.index(t3) >= 0;
        }, index: function(t3) {
          return this.members.indexOf(t3);
        }, get: function(t3) {
          return this.members[t3];
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.members.length - 1);
        }, valueOf: function() {
          return this.members;
        } }, construct: { set: function(t3) {
          return new a2.Set(t3);
        } } }), a2.FX.Set = a2.invent({ create: function(t3) {
          this.set = t3;
        } }), a2.Set.inherit = function() {
          var t3 = [];
          for (var e3 in a2.Shape.prototype)
            "function" == typeof a2.Shape.prototype[e3] && "function" != typeof a2.Set.prototype[e3] && t3.push(e3);
          for (var e3 in t3.forEach(function(t4) {
            a2.Set.prototype[t4] = function() {
              for (var e4 = 0, i2 = this.members.length; e4 < i2; e4++)
                this.members[e4] && "function" == typeof this.members[e4][t4] && this.members[e4][t4].apply(this.members[e4], arguments);
              return "animate" == t4 ? this.fx || (this.fx = new a2.FX.Set(this)) : this;
            };
          }), t3 = [], a2.FX.prototype)
            "function" == typeof a2.FX.prototype[e3] && "function" != typeof a2.FX.Set.prototype[e3] && t3.push(e3);
          t3.forEach(function(t4) {
            a2.FX.Set.prototype[t4] = function() {
              for (var e4 = 0, i2 = this.set.members.length; e4 < i2; e4++)
                this.set.members[e4].fx[t4].apply(this.set.members[e4].fx, arguments);
              return this;
            };
          });
        }, a2.extend(a2.Element, {}), a2.extend(a2.Element, { remember: function(t3, e3) {
          if ("object" === i(arguments[0]))
            for (var a3 in t3)
              this.remember(a3, t3[a3]);
          else {
            if (1 == arguments.length)
              return this.memory()[t3];
            this.memory()[t3] = e3;
          }
          return this;
        }, forget: function() {
          if (0 == arguments.length)
            this._memory = {};
          else
            for (var t3 = arguments.length - 1; t3 >= 0; t3--)
              delete this.memory()[arguments[t3]];
          return this;
        }, memory: function() {
          return this._memory || (this._memory = {});
        } }), a2.get = function(t3) {
          var i2 = e2.getElementById(function(t4) {
            var e3 = (t4 || "").toString().match(a2.regex.reference);
            if (e3)
              return e3[1];
          }(t3) || t3);
          return a2.adopt(i2);
        }, a2.select = function(t3, i2) {
          return new a2.Set(a2.utils.map((i2 || e2).querySelectorAll(t3), function(t4) {
            return a2.adopt(t4);
          }));
        }, a2.extend(a2.Parent, { select: function(t3) {
          return a2.select(t3, this.node);
        } });
        var v2 = "abcdef".split("");
        if ("function" != typeof t2.CustomEvent) {
          var m3 = function(t3, i2) {
            i2 = i2 || { bubbles: false, cancelable: false, detail: void 0 };
            var a3 = e2.createEvent("CustomEvent");
            return a3.initCustomEvent(t3, i2.bubbles, i2.cancelable, i2.detail), a3;
          };
          m3.prototype = t2.Event.prototype, a2.CustomEvent = m3;
        } else
          a2.CustomEvent = t2.CustomEvent;
        return a2;
      }, "function" == typeof define && define.amd ? define(function() {
        return Ht(Rt, Rt.document);
      }) : "object" === ("undefined" == typeof exports ? "undefined" : i(exports)) && "undefined" != typeof module ? module.exports = Rt.document ? Ht(Rt, Rt.document) : function(t2) {
        return Ht(t2, t2.document);
      } : Rt.SVG = Ht(Rt, Rt.document), /*! svg.filter.js - v2.0.2 - 2016-02-24
      * https://github.com/wout/svg.filter.js
      * Copyright (c) 2016 Wout Fierens; Licensed MIT */
      function() {
        SVG.Filter = SVG.invent({ create: "filter", inherit: SVG.Parent, extend: { source: "SourceGraphic", sourceAlpha: "SourceAlpha", background: "BackgroundImage", backgroundAlpha: "BackgroundAlpha", fill: "FillPaint", stroke: "StrokePaint", autoSetIn: true, put: function(t3, e3) {
          return this.add(t3, e3), !t3.attr("in") && this.autoSetIn && t3.attr("in", this.source), t3.attr("result") || t3.attr("result", t3), t3;
        }, blend: function(t3, e3, i3) {
          return this.put(new SVG.BlendEffect(t3, e3, i3));
        }, colorMatrix: function(t3, e3) {
          return this.put(new SVG.ColorMatrixEffect(t3, e3));
        }, convolveMatrix: function(t3) {
          return this.put(new SVG.ConvolveMatrixEffect(t3));
        }, componentTransfer: function(t3) {
          return this.put(new SVG.ComponentTransferEffect(t3));
        }, composite: function(t3, e3, i3) {
          return this.put(new SVG.CompositeEffect(t3, e3, i3));
        }, flood: function(t3, e3) {
          return this.put(new SVG.FloodEffect(t3, e3));
        }, offset: function(t3, e3) {
          return this.put(new SVG.OffsetEffect(t3, e3));
        }, image: function(t3) {
          return this.put(new SVG.ImageEffect(t3));
        }, merge: function() {
          var t3 = [void 0];
          for (var e3 in arguments)
            t3.push(arguments[e3]);
          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t3))());
        }, gaussianBlur: function(t3, e3) {
          return this.put(new SVG.GaussianBlurEffect(t3, e3));
        }, morphology: function(t3, e3) {
          return this.put(new SVG.MorphologyEffect(t3, e3));
        }, diffuseLighting: function(t3, e3, i3) {
          return this.put(new SVG.DiffuseLightingEffect(t3, e3, i3));
        }, displacementMap: function(t3, e3, i3, a3, s3) {
          return this.put(new SVG.DisplacementMapEffect(t3, e3, i3, a3, s3));
        }, specularLighting: function(t3, e3, i3, a3) {
          return this.put(new SVG.SpecularLightingEffect(t3, e3, i3, a3));
        }, tile: function() {
          return this.put(new SVG.TileEffect());
        }, turbulence: function(t3, e3, i3, a3, s3) {
          return this.put(new SVG.TurbulenceEffect(t3, e3, i3, a3, s3));
        }, toString: function() {
          return "url(#" + this.attr("id") + ")";
        } } }), SVG.extend(SVG.Defs, { filter: function(t3) {
          var e3 = this.put(new SVG.Filter());
          return "function" == typeof t3 && t3.call(e3, e3), e3;
        } }), SVG.extend(SVG.Container, { filter: function(t3) {
          return this.defs().filter(t3);
        } }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, { filter: function(t3) {
          return this.filterer = t3 instanceof SVG.Element ? t3 : this.doc().filter(t3), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
        }, unfilter: function(t3) {
          return this.filterer && true === t3 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
        } }), SVG.Effect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
        }, result: function(t3) {
          return null == t3 ? this.attr("result") : this.attr("result", t3);
        }, toString: function() {
          return this.result();
        } } }), SVG.ParentEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Parent, extend: { in: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
        }, result: function(t3) {
          return null == t3 ? this.attr("result") : this.attr("result", t3);
        }, toString: function() {
          return this.result();
        } } });
        var t2 = { blend: function(t3, e3) {
          return this.parent() && this.parent().blend(this, t3, e3);
        }, colorMatrix: function(t3, e3) {
          return this.parent() && this.parent().colorMatrix(t3, e3).in(this);
        }, convolveMatrix: function(t3) {
          return this.parent() && this.parent().convolveMatrix(t3).in(this);
        }, componentTransfer: function(t3) {
          return this.parent() && this.parent().componentTransfer(t3).in(this);
        }, composite: function(t3, e3) {
          return this.parent() && this.parent().composite(this, t3, e3);
        }, flood: function(t3, e3) {
          return this.parent() && this.parent().flood(t3, e3);
        }, offset: function(t3, e3) {
          return this.parent() && this.parent().offset(t3, e3).in(this);
        }, image: function(t3) {
          return this.parent() && this.parent().image(t3);
        }, merge: function() {
          return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
        }, gaussianBlur: function(t3, e3) {
          return this.parent() && this.parent().gaussianBlur(t3, e3).in(this);
        }, morphology: function(t3, e3) {
          return this.parent() && this.parent().morphology(t3, e3).in(this);
        }, diffuseLighting: function(t3, e3, i3) {
          return this.parent() && this.parent().diffuseLighting(t3, e3, i3).in(this);
        }, displacementMap: function(t3, e3, i3, a3) {
          return this.parent() && this.parent().displacementMap(this, t3, e3, i3, a3);
        }, specularLighting: function(t3, e3, i3, a3) {
          return this.parent() && this.parent().specularLighting(t3, e3, i3, a3).in(this);
        }, tile: function() {
          return this.parent() && this.parent().tile().in(this);
        }, turbulence: function(t3, e3, i3, a3, s3) {
          return this.parent() && this.parent().turbulence(t3, e3, i3, a3, s3).in(this);
        } };
        SVG.extend(SVG.Effect, t2), SVG.extend(SVG.ParentEffect, t2), SVG.ChildEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t3) {
          this.attr("in", t3);
        } } });
        var e2 = { blend: function(t3, e3, i3) {
          this.attr({ in: t3, in2: e3, mode: i3 || "normal" });
        }, colorMatrix: function(t3, e3) {
          "matrix" == t3 && (e3 = s2(e3)), this.attr({ type: t3, values: void 0 === e3 ? null : e3 });
        }, convolveMatrix: function(t3) {
          t3 = s2(t3), this.attr({ order: Math.sqrt(t3.split(" ").length), kernelMatrix: t3 });
        }, composite: function(t3, e3, i3) {
          this.attr({ in: t3, in2: e3, operator: i3 });
        }, flood: function(t3, e3) {
          this.attr("flood-color", t3), null != e3 && this.attr("flood-opacity", e3);
        }, offset: function(t3, e3) {
          this.attr({ dx: t3, dy: e3 });
        }, image: function(t3) {
          this.attr("href", t3, SVG.xlink);
        }, displacementMap: function(t3, e3, i3, a3, s3) {
          this.attr({ in: t3, in2: e3, scale: i3, xChannelSelector: a3, yChannelSelector: s3 });
        }, gaussianBlur: function(t3, e3) {
          null != t3 || null != e3 ? this.attr("stdDeviation", function(t4) {
            if (!Array.isArray(t4))
              return t4;
            for (var e4 = 0, i3 = t4.length, a3 = []; e4 < i3; e4++)
              a3.push(t4[e4]);
            return a3.join(" ");
          }(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
        }, morphology: function(t3, e3) {
          this.attr({ operator: t3, radius: e3 });
        }, tile: function() {
        }, turbulence: function(t3, e3, i3, a3, s3) {
          this.attr({ numOctaves: e3, seed: i3, stitchTiles: a3, baseFrequency: t3, type: s3 });
        } }, i2 = { merge: function() {
          var t3;
          if (arguments[0] instanceof SVG.Set) {
            var e3 = this;
            arguments[0].each(function(t4) {
              this instanceof SVG.MergeNode ? e3.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e3.put(new SVG.MergeNode(this));
            });
          } else {
            t3 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i3 = 0; i3 < t3.length; i3++)
              t3[i3] instanceof SVG.MergeNode ? this.put(t3[i3]) : this.put(new SVG.MergeNode(t3[i3]));
          }
        }, componentTransfer: function(t3) {
          if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function(t4) {
            this[t4] = new SVG["Func" + t4.toUpperCase()]("identity"), this.rgb.add(this[t4]), this.node.appendChild(this[t4].node);
          }.bind(this)), t3)
            for (var e3 in t3.rgb && (["r", "g", "b"].forEach(function(e4) {
              this[e4].attr(t3.rgb);
            }.bind(this)), delete t3.rgb), t3)
              this[e3].attr(t3[e3]);
        }, diffuseLighting: function(t3, e3, i3) {
          this.attr({ surfaceScale: t3, diffuseConstant: e3, kernelUnitLength: i3 });
        }, specularLighting: function(t3, e3, i3, a3) {
          this.attr({ surfaceScale: t3, diffuseConstant: e3, specularExponent: i3, kernelUnitLength: a3 });
        } }, a2 = { distantLight: function(t3, e3) {
          this.attr({ azimuth: t3, elevation: e3 });
        }, pointLight: function(t3, e3, i3) {
          this.attr({ x: t3, y: e3, z: i3 });
        }, spotLight: function(t3, e3, i3, a3, s3, r3) {
          this.attr({ x: t3, y: e3, z: i3, pointsAtX: a3, pointsAtY: s3, pointsAtZ: r3 });
        }, mergeNode: function(t3) {
          this.attr("in", t3);
        } };
        function s2(t3) {
          return Array.isArray(t3) && (t3 = new SVG.Array(t3)), t3.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
        }
        function r2() {
          var t3 = function() {
          };
          for (var e3 in "function" == typeof arguments[arguments.length - 1] && (t3 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)
            for (var i3 in arguments[e3])
              t3(arguments[e3][i3], i3, arguments[e3]);
        }
        ["r", "g", "b", "a"].forEach(function(t3) {
          a2["Func" + t3.toUpperCase()] = function(t4) {
            switch (this.attr("type", t4), t4) {
              case "table":
                this.attr("tableValues", arguments[1]);
                break;
              case "linear":
                this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                break;
              case "gamma":
                this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
            }
          };
        }), r2(e2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.Effect, extend: {} });
        }), r2(i2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.ParentEffect, extend: {} });
        }), r2(a2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments);
          }, inherit: SVG.ChildEffect, extend: {} });
        }), SVG.extend(SVG.MergeEffect, { in: function(t3) {
          return t3 instanceof SVG.MergeNode ? this.add(t3, 0) : this.add(new SVG.MergeNode(t3), 0), this;
        } }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, { in2: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t3);
        } }), SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
      }.call(void 0), function() {
        function t2(t3, s3, r2, o2, n2, l2, h2) {
          for (var c2 = t3.slice(s3, r2 || h2), d2 = o2.slice(n2, l2 || h2), g2 = 0, u2 = { pos: [0, 0], start: [0, 0] }, p2 = { pos: [0, 0], start: [0, 0] }; ; ) {
            if (c2[g2] = e2.call(u2, c2[g2]), d2[g2] = e2.call(p2, d2[g2]), c2[g2][0] != d2[g2][0] || "M" == c2[g2][0] || "A" == c2[g2][0] && (c2[g2][4] != d2[g2][4] || c2[g2][5] != d2[g2][5]) ? (Array.prototype.splice.apply(c2, [g2, 1].concat(a2.call(u2, c2[g2]))), Array.prototype.splice.apply(d2, [g2, 1].concat(a2.call(p2, d2[g2])))) : (c2[g2] = i2.call(u2, c2[g2]), d2[g2] = i2.call(p2, d2[g2])), ++g2 == c2.length && g2 == d2.length)
              break;
            g2 == c2.length && c2.push(["C", u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1]]), g2 == d2.length && d2.push(["C", p2.pos[0], p2.pos[1], p2.pos[0], p2.pos[1], p2.pos[0], p2.pos[1]]);
          }
          return { start: c2, dest: d2 };
        }
        function e2(t3) {
          switch (t3[0]) {
            case "z":
            case "Z":
              t3[0] = "L", t3[1] = this.start[0], t3[2] = this.start[1];
              break;
            case "H":
              t3[0] = "L", t3[2] = this.pos[1];
              break;
            case "V":
              t3[0] = "L", t3[2] = t3[1], t3[1] = this.pos[0];
              break;
            case "T":
              t3[0] = "Q", t3[3] = t3[1], t3[4] = t3[2], t3[1] = this.reflection[1], t3[2] = this.reflection[0];
              break;
            case "S":
              t3[0] = "C", t3[6] = t3[4], t3[5] = t3[3], t3[4] = t3[2], t3[3] = t3[1], t3[2] = this.reflection[1], t3[1] = this.reflection[0];
          }
          return t3;
        }
        function i2(t3) {
          var e3 = t3.length;
          return this.pos = [t3[e3 - 2], t3[e3 - 1]], -1 != "SCQT".indexOf(t3[0]) && (this.reflection = [2 * this.pos[0] - t3[e3 - 4], 2 * this.pos[1] - t3[e3 - 3]]), t3;
        }
        function a2(t3) {
          var e3 = [t3];
          switch (t3[0]) {
            case "M":
              return this.pos = this.start = [t3[1], t3[2]], e3;
            case "L":
              t3[5] = t3[3] = t3[1], t3[6] = t3[4] = t3[2], t3[1] = this.pos[0], t3[2] = this.pos[1];
              break;
            case "Q":
              t3[6] = t3[4], t3[5] = t3[3], t3[4] = 1 * t3[4] / 3 + 2 * t3[2] / 3, t3[3] = 1 * t3[3] / 3 + 2 * t3[1] / 3, t3[2] = 1 * this.pos[1] / 3 + 2 * t3[2] / 3, t3[1] = 1 * this.pos[0] / 3 + 2 * t3[1] / 3;
              break;
            case "A":
              e3 = function(t4, e4) {
                var i3, a3, s3, r2, o2, n2, l2, h2, c2, d2, g2, u2, p2, f2, x2, b2, v2, m3, y2, w2, k2, A2, S2, C2, L2, P2, M2 = Math.abs(e4[1]), I2 = Math.abs(e4[2]), T2 = e4[3] % 360, z2 = e4[4], X2 = e4[5], E2 = e4[6], Y2 = e4[7], F2 = new SVG.Point(t4), R2 = new SVG.Point(E2, Y2), H2 = [];
                if (0 === M2 || 0 === I2 || F2.x === R2.x && F2.y === R2.y)
                  return [["C", F2.x, F2.y, R2.x, R2.y, R2.x, R2.y]];
                i3 = new SVG.Point((F2.x - R2.x) / 2, (F2.y - R2.y) / 2).transform(new SVG.Matrix().rotate(T2)), (a3 = i3.x * i3.x / (M2 * M2) + i3.y * i3.y / (I2 * I2)) > 1 && (M2 *= a3 = Math.sqrt(a3), I2 *= a3);
                s3 = new SVG.Matrix().rotate(T2).scale(1 / M2, 1 / I2).rotate(-T2), F2 = F2.transform(s3), R2 = R2.transform(s3), r2 = [R2.x - F2.x, R2.y - F2.y], n2 = r2[0] * r2[0] + r2[1] * r2[1], o2 = Math.sqrt(n2), r2[0] /= o2, r2[1] /= o2, l2 = n2 < 4 ? Math.sqrt(1 - n2 / 4) : 0, z2 === X2 && (l2 *= -1);
                h2 = new SVG.Point((R2.x + F2.x) / 2 + l2 * -r2[1], (R2.y + F2.y) / 2 + l2 * r2[0]), c2 = new SVG.Point(F2.x - h2.x, F2.y - h2.y), d2 = new SVG.Point(R2.x - h2.x, R2.y - h2.y), g2 = Math.acos(c2.x / Math.sqrt(c2.x * c2.x + c2.y * c2.y)), c2.y < 0 && (g2 *= -1);
                u2 = Math.acos(d2.x / Math.sqrt(d2.x * d2.x + d2.y * d2.y)), d2.y < 0 && (u2 *= -1);
                X2 && g2 > u2 && (u2 += 2 * Math.PI);
                !X2 && g2 < u2 && (u2 -= 2 * Math.PI);
                for (f2 = Math.ceil(2 * Math.abs(g2 - u2) / Math.PI), b2 = [], v2 = g2, p2 = (u2 - g2) / f2, x2 = 4 * Math.tan(p2 / 4) / 3, k2 = 0; k2 <= f2; k2++)
                  y2 = Math.cos(v2), m3 = Math.sin(v2), w2 = new SVG.Point(h2.x + y2, h2.y + m3), b2[k2] = [new SVG.Point(w2.x + x2 * m3, w2.y - x2 * y2), w2, new SVG.Point(w2.x - x2 * m3, w2.y + x2 * y2)], v2 += p2;
                for (b2[0][0] = b2[0][1].clone(), b2[b2.length - 1][2] = b2[b2.length - 1][1].clone(), s3 = new SVG.Matrix().rotate(T2).scale(M2, I2).rotate(-T2), k2 = 0, A2 = b2.length; k2 < A2; k2++)
                  b2[k2][0] = b2[k2][0].transform(s3), b2[k2][1] = b2[k2][1].transform(s3), b2[k2][2] = b2[k2][2].transform(s3);
                for (k2 = 1, A2 = b2.length; k2 < A2; k2++)
                  S2 = (w2 = b2[k2 - 1][2]).x, C2 = w2.y, L2 = (w2 = b2[k2][0]).x, P2 = w2.y, E2 = (w2 = b2[k2][1]).x, Y2 = w2.y, H2.push(["C", S2, C2, L2, P2, E2, Y2]);
                return H2;
              }(this.pos, t3), t3 = e3[0];
          }
          return t3[0] = "C", this.pos = [t3[5], t3[6]], this.reflection = [2 * t3[5] - t3[3], 2 * t3[6] - t3[4]], e3;
        }
        function s2(t3, e3) {
          if (false === e3)
            return false;
          for (var i3 = e3, a3 = t3.length; i3 < a3; ++i3)
            if ("M" == t3[i3][0])
              return i3;
          return false;
        }
        SVG.extend(SVG.PathArray, { morph: function(e3) {
          for (var i3 = this.value, a3 = this.parse(e3), r2 = 0, o2 = 0, n2 = false, l2 = false; false !== r2 || false !== o2; ) {
            var h2;
            n2 = s2(i3, false !== r2 && r2 + 1), l2 = s2(a3, false !== o2 && o2 + 1), false === r2 && (r2 = 0 == (h2 = new SVG.PathArray(c2.start).bbox()).height || 0 == h2.width ? i3.push(i3[0]) - 1 : i3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1), false === o2 && (o2 = 0 == (h2 = new SVG.PathArray(c2.dest).bbox()).height || 0 == h2.width ? a3.push(a3[0]) - 1 : a3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1);
            var c2 = t2(i3, r2, n2, a3, o2, l2);
            i3 = i3.slice(0, r2).concat(c2.start, false === n2 ? [] : i3.slice(n2)), a3 = a3.slice(0, o2).concat(c2.dest, false === l2 ? [] : a3.slice(l2)), r2 = false !== n2 && r2 + c2.start.length, o2 = false !== l2 && o2 + c2.dest.length;
          }
          return this.value = i3, this.destination = new SVG.PathArray(), this.destination.value = a3, this;
        } });
      }(), /*! svg.draggable.js - v2.2.2 - 2019-01-08
      * https://github.com/svgdotjs/svg.draggable.js
      * Copyright (c) 2019 Wout Fierens; Licensed MIT */
      function() {
        function t2(t3) {
          t3.remember("_draggable", this), this.el = t3;
        }
        t2.prototype.init = function(t3, e2) {
          var i2 = this;
          this.constraint = t3, this.value = e2, this.el.on("mousedown.drag", function(t4) {
            i2.start(t4);
          }), this.el.on("touchstart.drag", function(t4) {
            i2.start(t4);
          });
        }, t2.prototype.transformPoint = function(t3, e2) {
          var i2 = (t3 = t3 || window.event).changedTouches && t3.changedTouches[0] || t3;
          return this.p.x = i2.clientX - (e2 || 0), this.p.y = i2.clientY, this.p.matrixTransform(this.m);
        }, t2.prototype.getBBox = function() {
          var t3 = this.el.bbox();
          return this.el instanceof SVG.Nested && (t3 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t3.x = this.el.x(), t3.y = this.el.y()), t3;
        }, t2.prototype.start = function(t3) {
          if ("click" != t3.type && "mousedown" != t3.type && "mousemove" != t3.type || 1 == (t3.which || t3.buttons)) {
            var e2 = this;
            if (this.el.fire("beforedrag", { event: t3, handler: this }), !this.el.event().defaultPrevented) {
              t3.preventDefault(), t3.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
              var i2, a2 = this.getBBox();
              if (this.el instanceof SVG.Text)
                switch (i2 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
                  case "middle":
                    i2 /= 2;
                    break;
                  case "start":
                    i2 = 0;
                }
              this.startPoints = { point: this.transformPoint(t3, i2), box: a2, transform: this.el.transform() }, SVG.on(window, "mousemove.drag", function(t4) {
                e2.drag(t4);
              }), SVG.on(window, "touchmove.drag", function(t4) {
                e2.drag(t4);
              }), SVG.on(window, "mouseup.drag", function(t4) {
                e2.end(t4);
              }), SVG.on(window, "touchend.drag", function(t4) {
                e2.end(t4);
              }), this.el.fire("dragstart", { event: t3, p: this.startPoints.point, m: this.m, handler: this });
            }
          }
        }, t2.prototype.drag = function(t3) {
          var e2 = this.getBBox(), i2 = this.transformPoint(t3), a2 = this.startPoints.box.x + i2.x - this.startPoints.point.x, s2 = this.startPoints.box.y + i2.y - this.startPoints.point.y, r2 = this.constraint, o2 = i2.x - this.startPoints.point.x, n2 = i2.y - this.startPoints.point.y;
          if (this.el.fire("dragmove", { event: t3, p: i2, m: this.m, handler: this }), this.el.event().defaultPrevented)
            return i2;
          if ("function" == typeof r2) {
            var l2 = r2.call(this.el, a2, s2, this.m);
            "boolean" == typeof l2 && (l2 = { x: l2, y: l2 }), true === l2.x ? this.el.x(a2) : false !== l2.x && this.el.x(l2.x), true === l2.y ? this.el.y(s2) : false !== l2.y && this.el.y(l2.y);
          } else
            "object" == typeof r2 && (null != r2.minX && a2 < r2.minX ? o2 = (a2 = r2.minX) - this.startPoints.box.x : null != r2.maxX && a2 > r2.maxX - e2.width && (o2 = (a2 = r2.maxX - e2.width) - this.startPoints.box.x), null != r2.minY && s2 < r2.minY ? n2 = (s2 = r2.minY) - this.startPoints.box.y : null != r2.maxY && s2 > r2.maxY - e2.height && (n2 = (s2 = r2.maxY - e2.height) - this.startPoints.box.y), null != r2.snapToGrid && (a2 -= a2 % r2.snapToGrid, s2 -= s2 % r2.snapToGrid, o2 -= o2 % r2.snapToGrid, n2 -= n2 % r2.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o2, y: n2 }, true) : this.el.move(a2, s2));
          return i2;
        }, t2.prototype.end = function(t3) {
          var e2 = this.drag(t3);
          this.el.fire("dragend", { event: t3, p: e2, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
        }, SVG.extend(SVG.Element, { draggable: function(e2, i2) {
          "function" != typeof e2 && "object" != typeof e2 || (i2 = e2, e2 = true);
          var a2 = this.remember("_draggable") || new t2(this);
          return (e2 = void 0 === e2 || e2) ? a2.init(i2 || {}, e2) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
        } });
      }.call(void 0), function() {
        function t2(t3) {
          this.el = t3, t3.remember("_selectHandler", this), this.pointSelection = { isSelected: false }, this.rectSelection = { isSelected: false }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }, this.pointCoord = function(t4, e2, i2) {
            var a2 = "string" != typeof t4 ? t4 : e2[t4];
            return i2 ? a2 / 2 : a2;
          }, this.pointCoords = function(t4, e2) {
            var i2 = this.pointsList[t4];
            return { x: this.pointCoord(i2[0], e2, "t" === t4 || "b" === t4), y: this.pointCoord(i2[1], e2, "r" === t4 || "l" === t4) };
          };
        }
        t2.prototype.init = function(t3, e2) {
          var i2 = this.el.bbox();
          this.options = {};
          var a2 = this.el.selectize.defaults.points;
          for (var s2 in this.el.selectize.defaults)
            this.options[s2] = this.el.selectize.defaults[s2], void 0 !== e2[s2] && (this.options[s2] = e2[s2]);
          var r2 = ["points", "pointsExclude"];
          for (var s2 in r2) {
            var o2 = this.options[r2[s2]];
            "string" == typeof o2 ? o2 = o2.length > 0 ? o2.split(/\s*,\s*/i) : [] : "boolean" == typeof o2 && "points" === r2[s2] && (o2 = o2 ? a2 : []), this.options[r2[s2]] = o2;
          }
          this.options.points = [a2, this.options.points].reduce(function(t4, e3) {
            return t4.filter(function(t5) {
              return e3.indexOf(t5) > -1;
            });
          }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function(t4, e3) {
            return t4.filter(function(t5) {
              return e3.indexOf(t5) < 0;
            });
          }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i2.x, i2.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t3) : this.selectRect(t3), this.observe(), this.cleanup();
        }, t2.prototype.selectPoints = function(t3) {
          return this.pointSelection.isSelected = t3, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
        }, t2.prototype.getPointArray = function() {
          var t3 = this.el.bbox();
          return this.el.array().valueOf().map(function(e2) {
            return [e2[0] - t3.x, e2[1] - t3.y];
          });
        }, t2.prototype.drawPoints = function() {
          for (var t3 = this, e2 = this.getPointArray(), i2 = 0, a2 = e2.length; i2 < a2; ++i2) {
            var s2 = /* @__PURE__ */ function(e3) {
              return function(i3) {
                (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
                var a3 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
                t3.el.fire("point", { x: a3, y: s3, i: e3, event: i3 });
              };
            }(i2), r2 = this.drawPoint(e2[i2][0], e2[i2][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s2).on("mousedown", s2);
            this.pointSelection.set.add(r2);
          }
        }, t2.prototype.drawPoint = function(t3, e2) {
          var i2 = this.options.pointType;
          switch (i2) {
            case "circle":
              return this.drawCircle(t3, e2);
            case "rect":
              return this.drawRect(t3, e2);
            default:
              if ("function" == typeof i2)
                return i2.call(this, t3, e2);
              throw new Error("Unknown " + i2 + " point type!");
          }
        }, t2.prototype.drawCircle = function(t3, e2) {
          return this.nested.circle(this.options.pointSize).center(t3, e2);
        }, t2.prototype.drawRect = function(t3, e2) {
          return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t3, e2);
        }, t2.prototype.updatePointSelection = function() {
          var t3 = this.getPointArray();
          this.pointSelection.set.each(function(e2) {
            this.cx() === t3[e2][0] && this.cy() === t3[e2][1] || this.center(t3[e2][0], t3[e2][1]);
          });
        }, t2.prototype.updateRectSelection = function() {
          var t3 = this, e2 = this.el.bbox();
          if (this.rectSelection.set.get(0).attr({ width: e2.width, height: e2.height }), this.options.points.length && this.options.points.map(function(i3, a2) {
            var s2 = t3.pointCoords(i3, e2);
            t3.rectSelection.set.get(a2 + 1).center(s2.x, s2.y);
          }), this.options.rotationPoint) {
            var i2 = this.rectSelection.set.length();
            this.rectSelection.set.get(i2 - 1).center(e2.width / 2, 20);
          }
        }, t2.prototype.selectRect = function(t3) {
          var e2 = this, i2 = this.el.bbox();
          function a2(t4) {
            return function(i3) {
              (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
              var a3 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
              e2.el.fire(t4, { x: a3, y: s3, event: i3 });
            };
          }
          if (this.rectSelection.isSelected = t3, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i2.width, i2.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
            this.options.points.map(function(t4, s3) {
              var r3 = e2.pointCoords(t4, i2), o2 = e2.drawPoint(r3.x, r3.y).attr("class", e2.options.classPoints + "_" + t4).on("mousedown", a2(t4)).on("touchstart", a2(t4));
              e2.rectSelection.set.add(o2);
            }), this.rectSelection.set.each(function() {
              this.addClass(e2.options.classPoints);
            });
          }
          if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
            var s2 = function(t4) {
              (t4 = t4 || window.event).preventDefault ? t4.preventDefault() : t4.returnValue = false, t4.stopPropagation();
              var i3 = t4.pageX || t4.touches[0].pageX, a3 = t4.pageY || t4.touches[0].pageY;
              e2.el.fire("rot", { x: i3, y: a3, event: t4 });
            }, r2 = this.drawPoint(i2.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s2).on("mousedown", s2);
            this.rectSelection.set.add(r2);
          }
        }, t2.prototype.handler = function() {
          var t3 = this.el.bbox();
          this.nested.matrix(new SVG.Matrix(this.el).translate(t3.x, t3.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
        }, t2.prototype.observe = function() {
          var t3 = this;
          if (MutationObserver)
            if (this.rectSelection.isSelected || this.pointSelection.isSelected)
              this.observerInst = this.observerInst || new MutationObserver(function() {
                t3.handler();
              }), this.observerInst.observe(this.el.node, { attributes: true });
            else
              try {
                this.observerInst.disconnect(), delete this.observerInst;
              } catch (t4) {
              }
          else
            this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
              t3.handler();
            });
        }, t2.prototype.cleanup = function() {
          !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
            this.remove();
          }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
            this.remove();
          }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
        }, SVG.extend(SVG.Element, { selectize: function(e2, i2) {
          return "object" == typeof e2 && (i2 = e2, e2 = true), (this.remember("_selectHandler") || new t2(this)).init(void 0 === e2 || e2, i2 || {}), this;
        } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", pointSize: 7, rotationPoint: true, deepSelect: false, pointType: "circle" };
      }(), function() {
        (function() {
          function t2(t3) {
            t3.remember("_resizeHandler", this), this.el = t3, this.parameters = {}, this.lastUpdateCall = null, this.p = t3.doc().node.createSVGPoint();
          }
          t2.prototype.transformPoint = function(t3, e2, i2) {
            return this.p.x = t3 - (this.offset.x - window.pageXOffset), this.p.y = e2 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i2 || this.m);
          }, t2.prototype._extractPosition = function(t3) {
            return { x: null != t3.clientX ? t3.clientX : t3.touches[0].clientX, y: null != t3.clientY ? t3.clientY : t3.touches[0].clientY };
          }, t2.prototype.init = function(t3) {
            var e2 = this;
            if (this.stop(), "stop" !== t3) {
              for (var i2 in this.options = {}, this.el.resize.defaults)
                this.options[i2] = this.el.resize.defaults[i2], void 0 !== t3[i2] && (this.options[i2] = t3[i2]);
              this.el.on("lt.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rt.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rb.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("lb.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("t.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("r.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("b.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("l.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rot.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("point.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.update();
            }
          }, t2.prototype.stop = function() {
            return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
          }, t2.prototype.resize = function(t3) {
            var e2 = this;
            this.m = this.el.node.getScreenCTM().inverse(), this.offset = { x: window.pageXOffset, y: window.pageYOffset };
            var i2 = this._extractPosition(t3.detail.event);
            if (this.parameters = { type: this.el.type, p: this.transformPoint(i2.x, i2.y), x: t3.detail.x, y: t3.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t3.detail.i) {
              var a2 = this.el.array().valueOf();
              this.parameters.i = t3.detail.i, this.parameters.pointCoords = [a2[t3.detail.i][0], a2[t3.detail.i][1]];
            }
            switch (t3.type) {
              case "lt":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3);
                  if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                    i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y + i3[1]).size(this.parameters.box.width - i3[0], this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "rt":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 2);
                  if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                    i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).size(this.parameters.box.width + i3[0], this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "rb":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                    i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i3[0], this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "lb":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 1);
                  if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                    i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).size(this.parameters.box.width - i3[0], this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "t":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 2);
                  if (this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).height(this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "r":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.width + i3[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i3[0]);
                  }
                };
                break;
              case "b":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "l":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 1);
                  if (this.parameters.box.width - i3[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).width(this.parameters.box.width - i3[0]);
                  }
                };
                break;
              case "rot":
                this.calc = function(t4, e3) {
                  var i3 = t4 + this.parameters.p.x, a3 = e3 + this.parameters.p.y, s2 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r2 = Math.atan2(a3 - this.parameters.box.y - this.parameters.box.height / 2, i3 - this.parameters.box.x - this.parameters.box.width / 2), o2 = this.parameters.rotation + 180 * (r2 - s2) / Math.PI + this.options.snapToAngle / 2;
                  this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o2 - o2 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
                };
                break;
              case "point":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a3 = this.el.array().valueOf();
                  a3[this.parameters.i][0] = this.parameters.pointCoords[0] + i3[0], a3[this.parameters.i][1] = this.parameters.pointCoords[1] + i3[1], this.el.plot(a3);
                };
            }
            this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t3 }), SVG.on(window, "touchmove.resize", function(t4) {
              e2.update(t4 || window.event);
            }), SVG.on(window, "touchend.resize", function() {
              e2.done();
            }), SVG.on(window, "mousemove.resize", function(t4) {
              e2.update(t4 || window.event);
            }), SVG.on(window, "mouseup.resize", function() {
              e2.done();
            });
          }, t2.prototype.update = function(t3) {
            if (t3) {
              var e2 = this._extractPosition(t3), i2 = this.transformPoint(e2.x, e2.y), a2 = i2.x - this.parameters.p.x, s2 = i2.y - this.parameters.p.y;
              this.lastUpdateCall = [a2, s2], this.calc(a2, s2), this.el.fire("resizing", { dx: a2, dy: s2, event: t3 });
            } else
              this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }, t2.prototype.done = function() {
            this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
          }, t2.prototype.snapToGrid = function(t3, e2, i2, a2) {
            var s2;
            return void 0 !== a2 ? s2 = [(i2 + t3) % this.options.snapToGrid, (a2 + e2) % this.options.snapToGrid] : (i2 = null == i2 ? 3 : i2, s2 = [(this.parameters.box.x + t3 + (1 & i2 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e2 + (2 & i2 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t3 < 0 && (s2[0] -= this.options.snapToGrid), e2 < 0 && (s2[1] -= this.options.snapToGrid), t3 -= Math.abs(s2[0]) < this.options.snapToGrid / 2 ? s2[0] : s2[0] - (t3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e2 -= Math.abs(s2[1]) < this.options.snapToGrid / 2 ? s2[1] : s2[1] - (e2 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t3, e2, i2, a2);
          }, t2.prototype.constraintToBox = function(t3, e2, i2, a2) {
            var s2, r2, o2 = this.options.constraint || {};
            return void 0 !== a2 ? (s2 = i2, r2 = a2) : (s2 = this.parameters.box.x + (1 & i2 ? 0 : this.parameters.box.width), r2 = this.parameters.box.y + (2 & i2 ? 0 : this.parameters.box.height)), void 0 !== o2.minX && s2 + t3 < o2.minX && (t3 = o2.minX - s2), void 0 !== o2.maxX && s2 + t3 > o2.maxX && (t3 = o2.maxX - s2), void 0 !== o2.minY && r2 + e2 < o2.minY && (e2 = o2.minY - r2), void 0 !== o2.maxY && r2 + e2 > o2.maxY && (e2 = o2.maxY - r2), [t3, e2];
          }, t2.prototype.checkAspectRatio = function(t3, e2) {
            if (!this.options.saveAspectRatio)
              return t3;
            var i2 = t3.slice(), a2 = this.parameters.box.width / this.parameters.box.height, s2 = this.parameters.box.width + t3[0], r2 = this.parameters.box.height - t3[1], o2 = s2 / r2;
            return o2 < a2 ? (i2[1] = s2 / a2 - this.parameters.box.height, e2 && (i2[1] = -i2[1])) : o2 > a2 && (i2[0] = this.parameters.box.width - r2 * a2, e2 && (i2[0] = -i2[0])), i2;
          }, SVG.extend(SVG.Element, { resize: function(e2) {
            return (this.remember("_resizeHandler") || new t2(this)).init(e2 || {}), this;
          } }), SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: false };
        }).call(this);
      }(), void 0 === window.Apex && (window.Apex = {});
      var Gt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "initModules", value: function() {
          this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "isSeriesHidden", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new b(this.ctx), this.ctx.axes = new J(this.ctx), this.ctx.core = new Wt(this.ctx.el, this.ctx), this.ctx.config = new Y({}), this.ctx.data = new B(this.ctx), this.ctx.grid = new j(this.ctx), this.ctx.graphics = new m2(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new Q(this.ctx), this.ctx.events = new Z(this.ctx), this.ctx.exports = new G(this.ctx), this.ctx.localization = new $2(this.ctx), this.ctx.options = new I(), this.ctx.responsive = new K(this.ctx), this.ctx.series = new W(this.ctx), this.ctx.theme = new tt(this.ctx), this.ctx.formatters = new S(this.ctx), this.ctx.titleSubtitle = new et(this.ctx), this.ctx.legend = new lt(this.ctx), this.ctx.toolbar = new ht(this.ctx), this.ctx.tooltip = new bt(this.ctx), this.ctx.dimensions = new ot(this.ctx), this.ctx.updateHelpers = new Bt(this.ctx), this.ctx.zoomPanSelection = new ct(this.ctx), this.ctx.w.globals.tooltip = new bt(this.ctx);
        } }]), t2;
      }();
      var Vt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "clear", value: function(t3) {
          var e2 = t3.isUpdating;
          this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e2 });
        } }, { key: "killSVG", value: function(t3) {
          t3.each(function(t4, e2) {
            this.removeClass("*"), this.off(), this.stop();
          }, true), t3.ungroup(), t3.clear();
        } }, { key: "clearDomElements", value: function(t3) {
          var e2 = this, i2 = t3.isUpdating, a2 = this.w.globals.dom.Paper.node;
          a2.parentNode && a2.parentNode.parentNode && !i2 && (a2.parentNode.parentNode.style.minHeight = "unset");
          var s2 = this.w.globals.dom.baseEl;
          s2 && this.ctx.eventList.forEach(function(t4) {
            s2.removeEventListener(t4, e2.ctx.events.documentEvent);
          });
          var r2 = this.w.globals.dom;
          if (null !== this.ctx.el)
            for (; this.ctx.el.firstChild; )
              this.ctx.el.removeChild(this.ctx.el.firstChild);
          this.killSVG(r2.Paper), r2.Paper.remove(), r2.elWrap = null, r2.elGraphical = null, r2.elLegendWrap = null, r2.elLegendForeign = null, r2.baseEl = null, r2.elGridRect = null, r2.elGridRectMask = null, r2.elGridRectMarkerMask = null, r2.elForecastMask = null, r2.elNonForecastMask = null, r2.elDefs = null;
        } }]), t2;
      }();
      var jt = /* @__PURE__ */ new WeakMap();
      var _t = function() {
        function t2(e2, i2) {
          a(this, t2), this.opts = i2, this.ctx = this, this.w = new R(i2).init(), this.el = e2, this.w.globals.cuid = x.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Gt(this).initModules(), this.create = x.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
        }
        return r(t2, [{ key: "render", value: function() {
          var t3 = this;
          return new Promise(function(e2, i2) {
            if (null !== t3.el) {
              void 0 === Apex._chartInstances && (Apex._chartInstances = []), t3.w.config.chart.id && Apex._chartInstances.push({ id: t3.w.globals.chartID, group: t3.w.config.chart.group, chart: t3 }), t3.setLocale(t3.w.config.chart.defaultLocale);
              var a2 = t3.w.config.chart.events.beforeMount;
              "function" == typeof a2 && a2(t3, t3.w), t3.events.fireEvent("beforeMount", [t3, t3.w]), window.addEventListener("resize", t3.windowResizeHandler), function(t4, e3) {
                var i3 = false;
                if (t4.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                  var a3 = t4.getBoundingClientRect();
                  "none" !== t4.style.display && 0 !== a3.width || (i3 = true);
                }
                var s3 = new ResizeObserver(function(a4) {
                  i3 && e3.call(t4, a4), i3 = true;
                });
                t4.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t4.children).forEach(function(t5) {
                  return s3.observe(t5);
                }) : s3.observe(t4), jt.set(e3, s3);
              }(t3.el.parentNode, t3.parentResizeHandler);
              var s2 = t3.el.getRootNode && t3.el.getRootNode(), r2 = x.is("ShadowRoot", s2), o2 = t3.el.ownerDocument, n2 = r2 ? s2.getElementById("apexcharts-css") : o2.getElementById("apexcharts-css");
              if (!n2) {
                var l2;
                (n2 = document.createElement("style")).id = "apexcharts-css", n2.textContent = '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  display: none;\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-radialbar-label {\n  cursor: pointer;\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers{\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows{\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers{\n  pointer-events: none\n}';
                var h2 = (null === (l2 = t3.opts.chart) || void 0 === l2 ? void 0 : l2.nonce) || t3.w.config.chart.nonce;
                h2 && n2.setAttribute("nonce", h2), r2 ? s2.prepend(n2) : o2.head.appendChild(n2);
              }
              var c2 = t3.create(t3.w.config.series, {});
              if (!c2)
                return e2(t3);
              t3.mount(c2).then(function() {
                "function" == typeof t3.w.config.chart.events.mounted && t3.w.config.chart.events.mounted(t3, t3.w), t3.events.fireEvent("mounted", [t3, t3.w]), e2(c2);
              }).catch(function(t4) {
                i2(t4);
              });
            } else
              i2(new Error("Element not found"));
          });
        } }, { key: "create", value: function(t3, e2) {
          var i2 = this.w;
          new Gt(this).initModules();
          var a2 = this.w.globals;
          (a2.noData = false, a2.animationEnded = false, this.responsive.checkResponsiveConfig(e2), i2.config.xaxis.convertedCatToNumeric) && new E(i2.config).convertCatToNumericXaxis(i2.config, this.ctx);
          if (null === this.el)
            return a2.animationEnded = true, null;
          if (this.core.setupElements(), "treemap" === i2.config.chart.type && (i2.config.grid.show = false, i2.config.yaxis[0].show = false), 0 === a2.svgWidth)
            return a2.animationEnded = true, null;
          var s2 = y.checkComboSeries(t3, i2.config.chart.type);
          a2.comboCharts = s2.comboCharts, a2.comboBarCount = s2.comboBarCount;
          var r2 = t3.every(function(t4) {
            return t4.data && 0 === t4.data.length;
          });
          (0 === t3.length || r2 && a2.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t3), this.theme.init(), new D(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a2.noData && a2.collapsedSeries.length !== a2.series.length && !i2.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a2.axisCharts && (this.core.coreCalculations(), "category" !== i2.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i2.globals.minX, this.ctx.toolbar.maxX = i2.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();
          var o2 = this.core.xySettings();
          this.grid.createGridMask();
          var n2 = this.core.plotChartType(t3, o2), l2 = new N(this);
          return l2.bringForward(), i2.config.dataLabels.background.enabled && l2.dataLabelsBackground(), this.core.shiftGraphPosition(), { elGraph: n2, xyRatios: o2, dimensions: { plot: { left: i2.globals.translateX, top: i2.globals.translateY, width: i2.globals.gridWidth, height: i2.globals.gridHeight } } };
        } }, { key: "mount", value: function() {
          var t3 = this, e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i2 = this, a2 = i2.w;
          return new Promise(function(s2, r2) {
            if (null === i2.el)
              return r2(new Error("Not enough data to display or target element not found"));
            (null === e2 || a2.globals.allSeriesCollapsed) && i2.series.handleNoData(), i2.grid = new j(i2);
            var o2, n2, l2 = i2.grid.drawGrid();
            (i2.annotations = new T(i2), i2.annotations.drawImageAnnos(), i2.annotations.drawTextAnnos(), "back" === a2.config.grid.position) && (l2 && a2.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (o2 = l2.elGridBorders) && void 0 !== o2 && o2.node && a2.globals.dom.elGraphical.add(l2.elGridBorders));
            if (Array.isArray(e2.elGraph))
              for (var h2 = 0; h2 < e2.elGraph.length; h2++)
                a2.globals.dom.elGraphical.add(e2.elGraph[h2]);
            else
              a2.globals.dom.elGraphical.add(e2.elGraph);
            "front" === a2.config.grid.position && (l2 && a2.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (n2 = l2.elGridBorders) && void 0 !== n2 && n2.node && a2.globals.dom.elGraphical.add(l2.elGridBorders));
            "front" === a2.config.xaxis.crosshairs.position && i2.crosshairs.drawXCrosshairs(), "front" === a2.config.yaxis[0].crosshairs.position && i2.crosshairs.drawYCrosshairs(), "treemap" !== a2.config.chart.type && i2.axes.drawAxis(a2.config.chart.type, l2);
            var c2 = new V(t3.ctx, l2), d2 = new q(t3.ctx, l2);
            if (null !== l2 && (c2.xAxisLabelCorrections(l2.xAxisTickWidth), d2.setYAxisTextAlignments(), a2.config.yaxis.map(function(t4, e3) {
              -1 === a2.globals.ignoreYAxisIndexes.indexOf(e3) && d2.yAxisTitleRotate(e3, t4.opposite);
            })), i2.annotations.drawAxesAnnotations(), !a2.globals.noData) {
              if (a2.config.tooltip.enabled && !a2.globals.noData && i2.w.globals.tooltip.drawTooltip(e2.xyRatios), a2.globals.axisCharts && (a2.globals.isXNumeric || a2.config.xaxis.convertedCatToNumeric || a2.globals.isRangeBar))
                (a2.config.chart.zoom.enabled || a2.config.chart.selection && a2.config.chart.selection.enabled || a2.config.chart.pan && a2.config.chart.pan.enabled) && i2.zoomPanSelection.init({ xyRatios: e2.xyRatios });
              else {
                var g2 = a2.config.chart.toolbar.tools;
                ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t4) {
                  g2[t4] = false;
                });
              }
              a2.config.chart.toolbar.show && !a2.globals.allSeriesCollapsed && i2.toolbar.createToolbar();
            }
            a2.globals.memory.methodsToExec.length > 0 && a2.globals.memory.methodsToExec.forEach(function(t4) {
              t4.method(t4.params, false, t4.context);
            }), a2.globals.axisCharts || a2.globals.noData || i2.core.resizeNonAxisCharts(), s2(i2);
          });
        } }, { key: "destroy", value: function() {
          var t3, e2;
          window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t3 = this.parentResizeHandler, (e2 = jt.get(t3)) && (e2.disconnect(), jt.delete(t3));
          var i2 = this.w.config.chart.id;
          i2 && Apex._chartInstances.forEach(function(t4, e3) {
            t4.id === x.escapeString(i2) && Apex._chartInstances.splice(e3, 1);
          }), new Vt(this.ctx).clear({ isUpdating: false });
        } }, { key: "updateOptions", value: function(t3) {
          var e2 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o2 = this.w;
          return o2.globals.selection = void 0, t3.series && (this.series.resetSeries(false, true, false), t3.series.length && t3.series[0].data && (t3.series = t3.series.map(function(t4, i3) {
            return e2.updateHelpers._extendSeries(t4, i3);
          })), this.updateHelpers.revertDefaultAxisMinMax()), t3.xaxis && (t3 = this.updateHelpers.forceXAxisUpdate(t3)), t3.yaxis && (t3 = this.updateHelpers.forceYAxisUpdate(t3)), o2.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t3.theme && (t3 = this.theme.updateThemeOptions(t3)), this.updateHelpers._updateOptions(t3, i2, a2, s2, r2);
        } }, { key: "updateSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t3, e2, i2);
        } }, { key: "appendSeries", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = this.w.config.series.slice();
          return a2.push(t3), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a2, e2, i2);
        } }, { key: "appendData", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this;
          i2.w.globals.dataChanged = true, i2.series.getPreviousPaths();
          for (var a2 = i2.w.config.series.slice(), s2 = 0; s2 < a2.length; s2++)
            if (null !== t3[s2] && void 0 !== t3[s2])
              for (var r2 = 0; r2 < t3[s2].data.length; r2++)
                a2[s2].data.push(t3[s2].data[r2]);
          return i2.w.config.series = a2, e2 && (i2.w.globals.initialSeries = x.clone(i2.w.config.series)), this.update();
        } }, { key: "update", value: function(t3) {
          var e2 = this;
          return new Promise(function(i2, a2) {
            new Vt(e2.ctx).clear({ isUpdating: true });
            var s2 = e2.create(e2.w.config.series, t3);
            if (!s2)
              return i2(e2);
            e2.mount(s2).then(function() {
              "function" == typeof e2.w.config.chart.events.updated && e2.w.config.chart.events.updated(e2, e2.w), e2.events.fireEvent("updated", [e2, e2.w]), e2.w.globals.isDirty = true, i2(e2);
            }).catch(function(t4) {
              a2(t4);
            });
          });
        } }, { key: "getSyncedCharts", value: function() {
          var t3 = this.getGroupedCharts(), e2 = [this];
          return t3.length && (e2 = [], t3.forEach(function(t4) {
            e2.push(t4);
          })), e2;
        } }, { key: "getGroupedCharts", value: function() {
          var t3 = this;
          return Apex._chartInstances.filter(function(t4) {
            if (t4.group)
              return true;
          }).map(function(e2) {
            return t3.w.config.chart.group === e2.group ? e2.chart : t3;
          });
        } }, { key: "toggleSeries", value: function(t3) {
          return this.series.toggleSeries(t3);
        } }, { key: "highlightSeriesOnLegendHover", value: function(t3, e2) {
          return this.series.toggleSeriesOnHover(t3, e2);
        } }, { key: "showSeries", value: function(t3) {
          this.series.showSeries(t3);
        } }, { key: "hideSeries", value: function(t3) {
          this.series.hideSeries(t3);
        } }, { key: "isSeriesHidden", value: function(t3) {
          this.series.isSeriesHidden(t3);
        } }, { key: "resetSeries", value: function() {
          var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this.series.resetSeries(t3, e2);
        } }, { key: "addEventListener", value: function(t3, e2) {
          this.events.addEventListener(t3, e2);
        } }, { key: "removeEventListener", value: function(t3, e2) {
          this.events.removeEventListener(t3, e2);
        } }, { key: "addXaxisAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addXaxisAnnotationExternal(t3, e2, a2);
        } }, { key: "addYaxisAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addYaxisAnnotationExternal(t3, e2, a2);
        } }, { key: "addPointAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addPointAnnotationExternal(t3, e2, a2);
        } }, { key: "clearAnnotations", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e2 = this;
          t3 && (e2 = t3), e2.annotations.clearAnnotations(e2);
        } }, { key: "removeAnnotation", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i2 = this;
          e2 && (i2 = e2), i2.annotations.removeAnnotation(i2, t3);
        } }, { key: "getChartArea", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
        } }, { key: "getSeriesTotalXRange", value: function(t3, e2) {
          return this.coreUtils.getSeriesTotalsXRange(t3, e2);
        } }, { key: "getHighestValueInSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new U(this.ctx).getMinYMaxY(t3).highestY;
        } }, { key: "getLowestValueInSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new U(this.ctx).getMinYMaxY(t3).lowestY;
        } }, { key: "getSeriesTotal", value: function() {
          return this.w.globals.seriesTotals;
        } }, { key: "toggleDataPointSelection", value: function(t3, e2) {
          return this.updateHelpers.toggleDataPointSelection(t3, e2);
        } }, { key: "zoomX", value: function(t3, e2) {
          this.ctx.toolbar.zoomUpdateOptions(t3, e2);
        } }, { key: "setLocale", value: function(t3) {
          this.localization.setCurrentLocaleValues(t3);
        } }, { key: "dataURI", value: function(t3) {
          return new G(this.ctx).dataURI(t3);
        } }, { key: "exportToCSV", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return new G(this.ctx).exportToCSV(t3);
        } }, { key: "paper", value: function() {
          return this.w.globals.dom.Paper;
        } }, { key: "_parentResizeCallback", value: function() {
          this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
        } }, { key: "_windowResize", value: function() {
          var t3 = this;
          clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
            t3.w.globals.resized = true, t3.w.globals.dataChanged = false, t3.ctx.update();
          }, 150);
        } }, { key: "_windowResizeHandler", value: function() {
          var t3 = this.w.config.chart.redrawOnWindowResize;
          "function" == typeof t3 && (t3 = t3()), t3 && this._windowResize();
        } }], [{ key: "getChartByID", value: function(t3) {
          var e2 = x.escapeString(t3);
          if (Apex._chartInstances) {
            var i2 = Apex._chartInstances.filter(function(t4) {
              return t4.id === e2;
            })[0];
            return i2 && i2.chart;
          }
        } }, { key: "initOnLoad", value: function() {
          for (var e2 = document.querySelectorAll("[data-apexcharts]"), i2 = 0; i2 < e2.length; i2++) {
            new t2(e2[i2], JSON.parse(e2[i2].getAttribute("data-options"))).render();
          }
        } }, { key: "exec", value: function(t3, e2) {
          var i2 = this.getChartByID(t3);
          if (i2) {
            i2.w.globals.isExecCalled = true;
            var a2 = null;
            if (-1 !== i2.publicMethods.indexOf(e2)) {
              for (var s2 = arguments.length, r2 = new Array(s2 > 2 ? s2 - 2 : 0), o2 = 2; o2 < s2; o2++)
                r2[o2 - 2] = arguments[o2];
              a2 = i2[e2].apply(i2, r2);
            }
            return a2;
          }
        } }, { key: "merge", value: function(t3, e2) {
          return x.extend(t3, e2);
        } }]), t2;
      }();
      module.exports = _t;
    }
  });

  // ../../node_modules/tom-select/dist/js/tom-select.complete.js
  var require_tom_select_complete = __commonJS({
    "../../node_modules/tom-select/dist/js/tom-select.complete.js"(exports, module) {
      (function(global, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.TomSelect = factory());
      })(exports, function() {
        "use strict";
        function forEvents(events, callback) {
          events.split(/\s+/).forEach((event) => {
            callback(event);
          });
        }
        class MicroEvent {
          constructor() {
            this._events = void 0;
            this._events = {};
          }
          on(events, fct) {
            forEvents(events, (event) => {
              const event_array = this._events[event] || [];
              event_array.push(fct);
              this._events[event] = event_array;
            });
          }
          off(events, fct) {
            var n = arguments.length;
            if (n === 0) {
              this._events = {};
              return;
            }
            forEvents(events, (event) => {
              if (n === 1) {
                delete this._events[event];
                return;
              }
              const event_array = this._events[event];
              if (event_array === void 0)
                return;
              event_array.splice(event_array.indexOf(fct), 1);
              this._events[event] = event_array;
            });
          }
          trigger(events, ...args) {
            var self2 = this;
            forEvents(events, (event) => {
              const event_array = self2._events[event];
              if (event_array === void 0)
                return;
              event_array.forEach((fct) => {
                fct.apply(self2, args);
              });
            });
          }
        }
        function MicroPlugin(Interface) {
          Interface.plugins = {};
          return class extends Interface {
            constructor(...args) {
              super(...args);
              this.plugins = {
                names: [],
                settings: {},
                requested: {},
                loaded: {}
              };
            }
            /**
             * Registers a plugin.
             *
             * @param {function} fn
             */
            static define(name, fn2) {
              Interface.plugins[name] = {
                "name": name,
                "fn": fn2
              };
            }
            /**
             * Initializes the listed plugins (with options).
             * Acceptable formats:
             *
             * List (without options):
             *   ['a', 'b', 'c']
             *
             * List (with options):
             *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
             *
             * Hash (with options):
             *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
             *
             * @param {array|object} plugins
             */
            initializePlugins(plugins) {
              var key, name;
              const self2 = this;
              const queue = [];
              if (Array.isArray(plugins)) {
                plugins.forEach((plugin) => {
                  if (typeof plugin === "string") {
                    queue.push(plugin);
                  } else {
                    self2.plugins.settings[plugin.name] = plugin.options;
                    queue.push(plugin.name);
                  }
                });
              } else if (plugins) {
                for (key in plugins) {
                  if (plugins.hasOwnProperty(key)) {
                    self2.plugins.settings[key] = plugins[key];
                    queue.push(key);
                  }
                }
              }
              while (name = queue.shift()) {
                self2.require(name);
              }
            }
            loadPlugin(name) {
              var self2 = this;
              var plugins = self2.plugins;
              var plugin = Interface.plugins[name];
              if (!Interface.plugins.hasOwnProperty(name)) {
                throw new Error('Unable to find "' + name + '" plugin');
              }
              plugins.requested[name] = true;
              plugins.loaded[name] = plugin.fn.apply(self2, [self2.plugins.settings[name] || {}]);
              plugins.names.push(name);
            }
            /**
             * Initializes a plugin.
             *
             */
            require(name) {
              var self2 = this;
              var plugins = self2.plugins;
              if (!self2.plugins.loaded.hasOwnProperty(name)) {
                if (plugins.requested[name]) {
                  throw new Error('Plugin has circular dependency ("' + name + '")');
                }
                self2.loadPlugin(name);
              }
              return plugins.loaded[name];
            }
          };
        }
        const arrayToPattern = (chars) => {
          chars = chars.filter(Boolean);
          if (chars.length < 2) {
            return chars[0] || "";
          }
          return maxValueLength(chars) == 1 ? "[" + chars.join("") + "]" : "(?:" + chars.join("|") + ")";
        };
        const sequencePattern = (array) => {
          if (!hasDuplicates(array)) {
            return array.join("");
          }
          let pattern = "";
          let prev_char_count = 0;
          const prev_pattern = () => {
            if (prev_char_count > 1) {
              pattern += "{" + prev_char_count + "}";
            }
          };
          array.forEach((char, i) => {
            if (char === array[i - 1]) {
              prev_char_count++;
              return;
            }
            prev_pattern();
            pattern += char;
            prev_char_count = 1;
          });
          prev_pattern();
          return pattern;
        };
        const setToPattern = (chars) => {
          let array = toArray2(chars);
          return arrayToPattern(array);
        };
        const hasDuplicates = (array) => {
          return new Set(array).size !== array.length;
        };
        const escape_regex = (str) => {
          return (str + "").replace(/([\$\(\)\*\+\.\?\[\]\^\{\|\}\\])/gu, "\\$1");
        };
        const maxValueLength = (array) => {
          return array.reduce((longest, value) => Math.max(longest, unicodeLength(value)), 0);
        };
        const unicodeLength = (str) => {
          return toArray2(str).length;
        };
        const toArray2 = (p) => Array.from(p);
        const allSubstrings = (input) => {
          if (input.length === 1)
            return [[input]];
          let result = [];
          const start5 = input.substring(1);
          const suba = allSubstrings(start5);
          suba.forEach(function(subresult) {
            let tmp = subresult.slice(0);
            tmp[0] = input.charAt(0) + tmp[0];
            result.push(tmp);
            tmp = subresult.slice(0);
            tmp.unshift(input.charAt(0));
            result.push(tmp);
          });
          return result;
        };
        const code_points = [[0, 65535]];
        const accent_pat = "[\u0300-\u036F\xB7\u02BE\u02BC]";
        let unicode_map;
        let multi_char_reg;
        const max_char_length = 3;
        const latin_convert = {};
        const latin_condensed = {
          "/": "\u2044\u2215",
          "0": "\u07C0",
          "a": "\u2C65\u0250\u0251",
          "aa": "\uA733",
          "ae": "\xE6\u01FD\u01E3",
          "ao": "\uA735",
          "au": "\uA737",
          "av": "\uA739\uA73B",
          "ay": "\uA73D",
          "b": "\u0180\u0253\u0183",
          "c": "\uA73F\u0188\u023C\u2184",
          "d": "\u0111\u0257\u0256\u1D05\u018C\uABB7\u0501\u0266",
          "e": "\u025B\u01DD\u1D07\u0247",
          "f": "\uA77C\u0192",
          "g": "\u01E5\u0260\uA7A1\u1D79\uA77F\u0262",
          "h": "\u0127\u2C68\u2C76\u0265",
          "i": "\u0268\u0131",
          "j": "\u0249\u0237",
          "k": "\u0199\u2C6A\uA741\uA743\uA745\uA7A3",
          "l": "\u0142\u019A\u026B\u2C61\uA749\uA747\uA781\u026D",
          "m": "\u0271\u026F\u03FB",
          "n": "\uA7A5\u019E\u0272\uA791\u1D0E\u043B\u0509",
          "o": "\xF8\u01FF\u0254\u0275\uA74B\uA74D\u1D11",
          "oe": "\u0153",
          "oi": "\u01A3",
          "oo": "\uA74F",
          "ou": "\u0223",
          "p": "\u01A5\u1D7D\uA751\uA753\uA755\u03C1",
          "q": "\uA757\uA759\u024B",
          "r": "\u024D\u027D\uA75B\uA7A7\uA783",
          "s": "\xDF\u023F\uA7A9\uA785\u0282",
          "t": "\u0167\u01AD\u0288\u2C66\uA787",
          "th": "\xFE",
          "tz": "\uA729",
          "u": "\u0289",
          "v": "\u028B\uA75F\u028C",
          "vy": "\uA761",
          "w": "\u2C73",
          "y": "\u01B4\u024F\u1EFF",
          "z": "\u01B6\u0225\u0240\u2C6C\uA763",
          "hv": "\u0195"
        };
        for (let latin in latin_condensed) {
          let unicode = latin_condensed[latin] || "";
          for (let i = 0; i < unicode.length; i++) {
            let char = unicode.substring(i, i + 1);
            latin_convert[char] = latin;
          }
        }
        const convert_pat = new RegExp(Object.keys(latin_convert).join("|") + "|" + accent_pat, "gu");
        const initialize = (_code_points) => {
          if (unicode_map !== void 0)
            return;
          unicode_map = generateMap(_code_points || code_points);
        };
        const normalize = (str, form = "NFKD") => str.normalize(form);
        const asciifold = (str) => {
          return toArray2(str).reduce(
            /**
             * @param {string} result
             * @param {string} char
             */
            (result, char) => {
              return result + _asciifold(char);
            },
            ""
          );
        };
        const _asciifold = (str) => {
          str = normalize(str).toLowerCase().replace(convert_pat, (char) => {
            return latin_convert[char] || "";
          });
          return normalize(str, "NFC");
        };
        function* generator(code_points2) {
          for (const [code_point_min, code_point_max] of code_points2) {
            for (let i = code_point_min; i <= code_point_max; i++) {
              let composed = String.fromCharCode(i);
              let folded = asciifold(composed);
              if (folded == composed.toLowerCase()) {
                continue;
              }
              if (folded.length > max_char_length) {
                continue;
              }
              if (folded.length == 0) {
                continue;
              }
              yield {
                folded,
                composed,
                code_point: i
              };
            }
          }
        }
        const generateSets = (code_points2) => {
          const unicode_sets = {};
          const addMatching = (folded, to_add) => {
            const folded_set = unicode_sets[folded] || /* @__PURE__ */ new Set();
            const patt = new RegExp("^" + setToPattern(folded_set) + "$", "iu");
            if (to_add.match(patt)) {
              return;
            }
            folded_set.add(escape_regex(to_add));
            unicode_sets[folded] = folded_set;
          };
          for (let value of generator(code_points2)) {
            addMatching(value.folded, value.folded);
            addMatching(value.folded, value.composed);
          }
          return unicode_sets;
        };
        const generateMap = (code_points2) => {
          const unicode_sets = generateSets(code_points2);
          const unicode_map2 = {};
          let multi_char = [];
          for (let folded in unicode_sets) {
            let set = unicode_sets[folded];
            if (set) {
              unicode_map2[folded] = setToPattern(set);
            }
            if (folded.length > 1) {
              multi_char.push(escape_regex(folded));
            }
          }
          multi_char.sort((a, b) => b.length - a.length);
          const multi_char_patt = arrayToPattern(multi_char);
          multi_char_reg = new RegExp("^" + multi_char_patt, "u");
          return unicode_map2;
        };
        const mapSequence = (strings, min_replacement = 1) => {
          let chars_replaced = 0;
          strings = strings.map((str) => {
            if (unicode_map[str]) {
              chars_replaced += str.length;
            }
            return unicode_map[str] || str;
          });
          if (chars_replaced >= min_replacement) {
            return sequencePattern(strings);
          }
          return "";
        };
        const substringsToPattern = (str, min_replacement = 1) => {
          min_replacement = Math.max(min_replacement, str.length - 1);
          return arrayToPattern(allSubstrings(str).map((sub_pat) => {
            return mapSequence(sub_pat, min_replacement);
          }));
        };
        const sequencesToPattern = (sequences, all = true) => {
          let min_replacement = sequences.length > 1 ? 1 : 0;
          return arrayToPattern(sequences.map((sequence) => {
            let seq = [];
            const len = all ? sequence.length() : sequence.length() - 1;
            for (let j = 0; j < len; j++) {
              seq.push(substringsToPattern(sequence.substrs[j] || "", min_replacement));
            }
            return sequencePattern(seq);
          }));
        };
        const inSequences = (needle_seq, sequences) => {
          for (const seq of sequences) {
            if (seq.start != needle_seq.start || seq.end != needle_seq.end) {
              continue;
            }
            if (seq.substrs.join("") !== needle_seq.substrs.join("")) {
              continue;
            }
            let needle_parts = needle_seq.parts;
            const filter = (part) => {
              for (const needle_part of needle_parts) {
                if (needle_part.start === part.start && needle_part.substr === part.substr) {
                  return false;
                }
                if (part.length == 1 || needle_part.length == 1) {
                  continue;
                }
                if (part.start < needle_part.start && part.end > needle_part.start) {
                  return true;
                }
                if (needle_part.start < part.start && needle_part.end > part.start) {
                  return true;
                }
              }
              return false;
            };
            let filtered = seq.parts.filter(filter);
            if (filtered.length > 0) {
              continue;
            }
            return true;
          }
          return false;
        };
        class Sequence {
          constructor() {
            this.parts = [];
            this.substrs = [];
            this.start = 0;
            this.end = 0;
          }
          /**
           * @param {TSequencePart|undefined} part
           */
          add(part) {
            if (part) {
              this.parts.push(part);
              this.substrs.push(part.substr);
              this.start = Math.min(part.start, this.start);
              this.end = Math.max(part.end, this.end);
            }
          }
          last() {
            return this.parts[this.parts.length - 1];
          }
          length() {
            return this.parts.length;
          }
          /**
           * @param {number} position
           * @param {TSequencePart} last_piece
           */
          clone(position, last_piece) {
            let clone = new Sequence();
            let parts = JSON.parse(JSON.stringify(this.parts));
            let last_part = parts.pop();
            for (const part of parts) {
              clone.add(part);
            }
            let last_substr = last_piece.substr.substring(0, position - last_part.start);
            let clone_last_len = last_substr.length;
            clone.add({
              start: last_part.start,
              end: last_part.start + clone_last_len,
              length: clone_last_len,
              substr: last_substr
            });
            return clone;
          }
        }
        const getPattern = (str) => {
          initialize();
          str = asciifold(str);
          let pattern = "";
          let sequences = [new Sequence()];
          for (let i = 0; i < str.length; i++) {
            let substr = str.substring(i);
            let match = substr.match(multi_char_reg);
            const char = str.substring(i, i + 1);
            const match_str = match ? match[0] : null;
            let overlapping = [];
            let added_types = /* @__PURE__ */ new Set();
            for (const sequence of sequences) {
              const last_piece = sequence.last();
              if (!last_piece || last_piece.length == 1 || last_piece.end <= i) {
                if (match_str) {
                  const len = match_str.length;
                  sequence.add({
                    start: i,
                    end: i + len,
                    length: len,
                    substr: match_str
                  });
                  added_types.add("1");
                } else {
                  sequence.add({
                    start: i,
                    end: i + 1,
                    length: 1,
                    substr: char
                  });
                  added_types.add("2");
                }
              } else if (match_str) {
                let clone = sequence.clone(i, last_piece);
                const len = match_str.length;
                clone.add({
                  start: i,
                  end: i + len,
                  length: len,
                  substr: match_str
                });
                overlapping.push(clone);
              } else {
                added_types.add("3");
              }
            }
            if (overlapping.length > 0) {
              overlapping = overlapping.sort((a, b) => {
                return a.length() - b.length();
              });
              for (let clone of overlapping) {
                if (inSequences(clone, sequences)) {
                  continue;
                }
                sequences.push(clone);
              }
              continue;
            }
            if (i > 0 && added_types.size == 1 && !added_types.has("3")) {
              pattern += sequencesToPattern(sequences, false);
              let new_seq = new Sequence();
              const old_seq = sequences[0];
              if (old_seq) {
                new_seq.add(old_seq.last());
              }
              sequences = [new_seq];
            }
          }
          pattern += sequencesToPattern(sequences, true);
          return pattern;
        };
        const getAttr = (obj, name) => {
          if (!obj)
            return;
          return obj[name];
        };
        const getAttrNesting = (obj, name) => {
          if (!obj)
            return;
          var part, names = name.split(".");
          while ((part = names.shift()) && (obj = obj[part]))
            ;
          return obj;
        };
        const scoreValue = (value, token, weight) => {
          var score, pos;
          if (!value)
            return 0;
          value = value + "";
          if (token.regex == null)
            return 0;
          pos = value.search(token.regex);
          if (pos === -1)
            return 0;
          score = token.string.length / value.length;
          if (pos === 0)
            score += 0.5;
          return score * weight;
        };
        const propToArray = (obj, key) => {
          var value = obj[key];
          if (typeof value == "function")
            return value;
          if (value && !Array.isArray(value)) {
            obj[key] = [value];
          }
        };
        const iterate$1 = (object, callback) => {
          if (Array.isArray(object)) {
            object.forEach(callback);
          } else {
            for (var key in object) {
              if (object.hasOwnProperty(key)) {
                callback(object[key], key);
              }
            }
          }
        };
        const cmp = (a, b) => {
          if (typeof a === "number" && typeof b === "number") {
            return a > b ? 1 : a < b ? -1 : 0;
          }
          a = asciifold(a + "").toLowerCase();
          b = asciifold(b + "").toLowerCase();
          if (a > b)
            return 1;
          if (b > a)
            return -1;
          return 0;
        };
        class Sifter {
          // []|{};
          /**
           * Textually searches arrays and hashes of objects
           * by property (or multiple properties). Designed
           * specifically for autocomplete.
           *
           */
          constructor(items, settings) {
            this.items = void 0;
            this.settings = void 0;
            this.items = items;
            this.settings = settings || {
              diacritics: true
            };
          }
          /**
           * Splits a search string into an array of individual
           * regexps to be used to match results.
           *
           */
          tokenize(query, respect_word_boundaries, weights) {
            if (!query || !query.length)
              return [];
            const tokens = [];
            const words = query.split(/\s+/);
            var field_regex;
            if (weights) {
              field_regex = new RegExp("^(" + Object.keys(weights).map(escape_regex).join("|") + "):(.*)$");
            }
            words.forEach((word) => {
              let field_match;
              let field = null;
              let regex = null;
              if (field_regex && (field_match = word.match(field_regex))) {
                field = field_match[1];
                word = field_match[2];
              }
              if (word.length > 0) {
                if (this.settings.diacritics) {
                  regex = getPattern(word) || null;
                } else {
                  regex = escape_regex(word);
                }
                if (regex && respect_word_boundaries)
                  regex = "\\b" + regex;
              }
              tokens.push({
                string: word,
                regex: regex ? new RegExp(regex, "iu") : null,
                field
              });
            });
            return tokens;
          }
          /**
           * Returns a function to be used to score individual results.
           *
           * Good matches will have a higher score than poor matches.
           * If an item is not a match, 0 will be returned by the function.
           *
           * @returns {T.ScoreFn}
           */
          getScoreFunction(query, options) {
            var search = this.prepareSearch(query, options);
            return this._getScoreFunction(search);
          }
          /**
           * @returns {T.ScoreFn}
           *
           */
          _getScoreFunction(search) {
            const tokens = search.tokens, token_count = tokens.length;
            if (!token_count) {
              return function() {
                return 0;
              };
            }
            const fields = search.options.fields, weights = search.weights, field_count = fields.length, getAttrFn = search.getAttrFn;
            if (!field_count) {
              return function() {
                return 1;
              };
            }
            const scoreObject = function() {
              if (field_count === 1) {
                return function(token, data) {
                  const field = fields[0].field;
                  return scoreValue(getAttrFn(data, field), token, weights[field] || 1);
                };
              }
              return function(token, data) {
                var sum = 0;
                if (token.field) {
                  const value = getAttrFn(data, token.field);
                  if (!token.regex && value) {
                    sum += 1 / field_count;
                  } else {
                    sum += scoreValue(value, token, 1);
                  }
                } else {
                  iterate$1(weights, (weight, field) => {
                    sum += scoreValue(getAttrFn(data, field), token, weight);
                  });
                }
                return sum / field_count;
              };
            }();
            if (token_count === 1) {
              return function(data) {
                return scoreObject(tokens[0], data);
              };
            }
            if (search.options.conjunction === "and") {
              return function(data) {
                var score, sum = 0;
                for (let token of tokens) {
                  score = scoreObject(token, data);
                  if (score <= 0)
                    return 0;
                  sum += score;
                }
                return sum / token_count;
              };
            } else {
              return function(data) {
                var sum = 0;
                iterate$1(tokens, (token) => {
                  sum += scoreObject(token, data);
                });
                return sum / token_count;
              };
            }
          }
          /**
           * Returns a function that can be used to compare two
           * results, for sorting purposes. If no sorting should
           * be performed, `null` will be returned.
           *
           * @return function(a,b)
           */
          getSortFunction(query, options) {
            var search = this.prepareSearch(query, options);
            return this._getSortFunction(search);
          }
          _getSortFunction(search) {
            var implicit_score, sort_flds = [];
            const self2 = this, options = search.options, sort = !search.query && options.sort_empty ? options.sort_empty : options.sort;
            if (typeof sort == "function") {
              return sort.bind(this);
            }
            const get_field = function get_field2(name, result) {
              if (name === "$score")
                return result.score;
              return search.getAttrFn(self2.items[result.id], name);
            };
            if (sort) {
              for (let s of sort) {
                if (search.query || s.field !== "$score") {
                  sort_flds.push(s);
                }
              }
            }
            if (search.query) {
              implicit_score = true;
              for (let fld of sort_flds) {
                if (fld.field === "$score") {
                  implicit_score = false;
                  break;
                }
              }
              if (implicit_score) {
                sort_flds.unshift({
                  field: "$score",
                  direction: "desc"
                });
              }
            } else {
              sort_flds = sort_flds.filter((fld) => fld.field !== "$score");
            }
            const sort_flds_count = sort_flds.length;
            if (!sort_flds_count) {
              return null;
            }
            return function(a, b) {
              var result, field;
              for (let sort_fld of sort_flds) {
                field = sort_fld.field;
                let multiplier = sort_fld.direction === "desc" ? -1 : 1;
                result = multiplier * cmp(get_field(field, a), get_field(field, b));
                if (result)
                  return result;
              }
              return 0;
            };
          }
          /**
           * Parses a search query and returns an object
           * with tokens and fields ready to be populated
           * with results.
           *
           */
          prepareSearch(query, optsUser) {
            const weights = {};
            var options = Object.assign({}, optsUser);
            propToArray(options, "sort");
            propToArray(options, "sort_empty");
            if (options.fields) {
              propToArray(options, "fields");
              const fields = [];
              options.fields.forEach((field) => {
                if (typeof field == "string") {
                  field = {
                    field,
                    weight: 1
                  };
                }
                fields.push(field);
                weights[field.field] = "weight" in field ? field.weight : 1;
              });
              options.fields = fields;
            }
            return {
              options,
              query: query.toLowerCase().trim(),
              tokens: this.tokenize(query, options.respect_word_boundaries, weights),
              total: 0,
              items: [],
              weights,
              getAttrFn: options.nesting ? getAttrNesting : getAttr
            };
          }
          /**
           * Searches through all items and returns a sorted array of matches.
           *
           */
          search(query, options) {
            var self2 = this, score, search;
            search = this.prepareSearch(query, options);
            options = search.options;
            query = search.query;
            const fn_score = options.score || self2._getScoreFunction(search);
            if (query.length) {
              iterate$1(self2.items, (item, id) => {
                score = fn_score(item);
                if (options.filter === false || score > 0) {
                  search.items.push({
                    "score": score,
                    "id": id
                  });
                }
              });
            } else {
              iterate$1(self2.items, (_, id) => {
                search.items.push({
                  "score": 1,
                  "id": id
                });
              });
            }
            const fn_sort = self2._getSortFunction(search);
            if (fn_sort)
              search.items.sort(fn_sort);
            search.total = search.items.length;
            if (typeof options.limit === "number") {
              search.items = search.items.slice(0, options.limit);
            }
            return search;
          }
        }
        const iterate = (object, callback) => {
          if (Array.isArray(object)) {
            object.forEach(callback);
          } else {
            for (var key in object) {
              if (object.hasOwnProperty(key)) {
                callback(object[key], key);
              }
            }
          }
        };
        const getDom = (query) => {
          if (query.jquery) {
            return query[0];
          }
          if (query instanceof HTMLElement) {
            return query;
          }
          if (isHtmlString(query)) {
            var tpl = document.createElement("template");
            tpl.innerHTML = query.trim();
            return tpl.content.firstChild;
          }
          return document.querySelector(query);
        };
        const isHtmlString = (arg) => {
          if (typeof arg === "string" && arg.indexOf("<") > -1) {
            return true;
          }
          return false;
        };
        const escapeQuery = (query) => {
          return query.replace(/['"\\]/g, "\\$&");
        };
        const triggerEvent = (dom_el, event_name) => {
          var event = document.createEvent("HTMLEvents");
          event.initEvent(event_name, true, false);
          dom_el.dispatchEvent(event);
        };
        const applyCSS = (dom_el, css) => {
          Object.assign(dom_el.style, css);
        };
        const addClasses = (elmts, ...classes) => {
          var norm_classes = classesArray(classes);
          elmts = castAsArray(elmts);
          elmts.map((el) => {
            norm_classes.map((cls) => {
              el.classList.add(cls);
            });
          });
        };
        const removeClasses = (elmts, ...classes) => {
          var norm_classes = classesArray(classes);
          elmts = castAsArray(elmts);
          elmts.map((el) => {
            norm_classes.map((cls) => {
              el.classList.remove(cls);
            });
          });
        };
        const classesArray = (args) => {
          var classes = [];
          iterate(args, (_classes) => {
            if (typeof _classes === "string") {
              _classes = _classes.trim().split(/[\11\12\14\15\40]/);
            }
            if (Array.isArray(_classes)) {
              classes = classes.concat(_classes);
            }
          });
          return classes.filter(Boolean);
        };
        const castAsArray = (arg) => {
          if (!Array.isArray(arg)) {
            arg = [arg];
          }
          return arg;
        };
        const parentMatch = (target, selector, wrapper) => {
          if (wrapper && !wrapper.contains(target)) {
            return;
          }
          while (target && target.matches) {
            if (target.matches(selector)) {
              return target;
            }
            target = target.parentNode;
          }
        };
        const getTail = (list, direction = 0) => {
          if (direction > 0) {
            return list[list.length - 1];
          }
          return list[0];
        };
        const isEmptyObject = (obj) => {
          return Object.keys(obj).length === 0;
        };
        const nodeIndex = (el, amongst) => {
          if (!el)
            return -1;
          amongst = amongst || el.nodeName;
          var i = 0;
          while (el = el.previousElementSibling) {
            if (el.matches(amongst)) {
              i++;
            }
          }
          return i;
        };
        const setAttr = (el, attrs) => {
          iterate(attrs, (val, attr) => {
            if (val == null) {
              el.removeAttribute(attr);
            } else {
              el.setAttribute(attr, "" + val);
            }
          });
        };
        const replaceNode = (existing, replacement) => {
          if (existing.parentNode)
            existing.parentNode.replaceChild(replacement, existing);
        };
        const highlight = (element, regex) => {
          if (regex === null)
            return;
          if (typeof regex === "string") {
            if (!regex.length)
              return;
            regex = new RegExp(regex, "i");
          }
          const highlightText = (node) => {
            var match = node.data.match(regex);
            if (match && node.data.length > 0) {
              var spannode = document.createElement("span");
              spannode.className = "highlight";
              var middlebit = node.splitText(match.index);
              middlebit.splitText(match[0].length);
              var middleclone = middlebit.cloneNode(true);
              spannode.appendChild(middleclone);
              replaceNode(middlebit, spannode);
              return 1;
            }
            return 0;
          };
          const highlightChildren = (node) => {
            if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName) && (node.className !== "highlight" || node.tagName !== "SPAN")) {
              Array.from(node.childNodes).forEach((element2) => {
                highlightRecursive(element2);
              });
            }
          };
          const highlightRecursive = (node) => {
            if (node.nodeType === 3) {
              return highlightText(node);
            }
            highlightChildren(node);
            return 0;
          };
          highlightRecursive(element);
        };
        const removeHighlight = (el) => {
          var elements = el.querySelectorAll("span.highlight");
          Array.prototype.forEach.call(elements, function(el2) {
            var parent = el2.parentNode;
            parent.replaceChild(el2.firstChild, el2);
            parent.normalize();
          });
        };
        const KEY_A = 65;
        const KEY_RETURN = 13;
        const KEY_ESC = 27;
        const KEY_LEFT = 37;
        const KEY_UP = 38;
        const KEY_RIGHT = 39;
        const KEY_DOWN = 40;
        const KEY_BACKSPACE = 8;
        const KEY_DELETE = 46;
        const KEY_TAB = 9;
        const IS_MAC = typeof navigator === "undefined" ? false : /Mac/.test(navigator.userAgent);
        const KEY_SHORTCUT = IS_MAC ? "metaKey" : "ctrlKey";
        var defaults = {
          options: [],
          optgroups: [],
          plugins: [],
          delimiter: ",",
          splitOn: null,
          // regexp or string for splitting up values from a paste command
          persist: true,
          diacritics: true,
          create: null,
          createOnBlur: false,
          createFilter: null,
          highlight: true,
          openOnFocus: true,
          shouldOpen: null,
          maxOptions: 50,
          maxItems: null,
          hideSelected: null,
          duplicates: false,
          addPrecedence: false,
          selectOnTab: false,
          preload: null,
          allowEmptyOption: false,
          //closeAfterSelect: false,
          refreshThrottle: 300,
          loadThrottle: 300,
          loadingClass: "loading",
          dataAttr: null,
          //'data-data',
          optgroupField: "optgroup",
          valueField: "value",
          labelField: "text",
          disabledField: "disabled",
          optgroupLabelField: "label",
          optgroupValueField: "value",
          lockOptgroupOrder: false,
          sortField: "$order",
          searchField: ["text"],
          searchConjunction: "and",
          mode: null,
          wrapperClass: "ts-wrapper",
          controlClass: "ts-control",
          dropdownClass: "ts-dropdown",
          dropdownContentClass: "ts-dropdown-content",
          itemClass: "item",
          optionClass: "option",
          dropdownParent: null,
          controlInput: '<input type="text" autocomplete="off" size="1" />',
          copyClassesToDropdown: false,
          placeholder: null,
          hidePlaceholder: null,
          shouldLoad: function(query) {
            return query.length > 0;
          },
          /*
          load                 : null, // function(query, callback) { ... }
          score                : null, // function(search) { ... }
          onInitialize         : null, // function() { ... }
          onChange             : null, // function(value) { ... }
          onItemAdd            : null, // function(value, $item) { ... }
          onItemRemove         : null, // function(value) { ... }
          onClear              : null, // function() { ... }
          onOptionAdd          : null, // function(value, data) { ... }
          onOptionRemove       : null, // function(value) { ... }
          onOptionClear        : null, // function() { ... }
          onOptionGroupAdd     : null, // function(id, data) { ... }
          onOptionGroupRemove  : null, // function(id) { ... }
          onOptionGroupClear   : null, // function() { ... }
          onDropdownOpen       : null, // function(dropdown) { ... }
          onDropdownClose      : null, // function(dropdown) { ... }
          onType               : null, // function(str) { ... }
          onDelete             : null, // function(values) { ... }
          */
          render: {
            /*
            item: null,
            optgroup: null,
            optgroup_header: null,
            option: null,
            option_create: null
            */
          }
        };
        const hash_key = (value) => {
          if (typeof value === "undefined" || value === null)
            return null;
          return get_hash(value);
        };
        const get_hash = (value) => {
          if (typeof value === "boolean")
            return value ? "1" : "0";
          return value + "";
        };
        const escape_html = (str) => {
          return (str + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
        };
        const timeout = (fn2, timeout2) => {
          if (timeout2 > 0) {
            return setTimeout(fn2, timeout2);
          }
          fn2.call(null);
          return null;
        };
        const loadDebounce = (fn2, delay) => {
          var timeout2;
          return function(value, callback) {
            var self2 = this;
            if (timeout2) {
              self2.loading = Math.max(self2.loading - 1, 0);
              clearTimeout(timeout2);
            }
            timeout2 = setTimeout(function() {
              timeout2 = null;
              self2.loadedSearches[value] = true;
              fn2.call(self2, value, callback);
            }, delay);
          };
        };
        const debounce_events = (self2, types, fn2) => {
          var type;
          var trigger = self2.trigger;
          var event_args = {};
          self2.trigger = function() {
            var type2 = arguments[0];
            if (types.indexOf(type2) !== -1) {
              event_args[type2] = arguments;
            } else {
              return trigger.apply(self2, arguments);
            }
          };
          fn2.apply(self2, []);
          self2.trigger = trigger;
          for (type of types) {
            if (type in event_args) {
              trigger.apply(self2, event_args[type]);
            }
          }
        };
        const getSelection = (input) => {
          return {
            start: input.selectionStart || 0,
            length: (input.selectionEnd || 0) - (input.selectionStart || 0)
          };
        };
        const preventDefault2 = (evt, stop = false) => {
          if (evt) {
            evt.preventDefault();
            if (stop) {
              evt.stopPropagation();
            }
          }
        };
        const addEvent = (target, type, callback, options) => {
          target.addEventListener(type, callback, options);
        };
        const isKeyDown = (key_name, evt) => {
          if (!evt) {
            return false;
          }
          if (!evt[key_name]) {
            return false;
          }
          var count = (evt.altKey ? 1 : 0) + (evt.ctrlKey ? 1 : 0) + (evt.shiftKey ? 1 : 0) + (evt.metaKey ? 1 : 0);
          if (count === 1) {
            return true;
          }
          return false;
        };
        const getId = (el, id) => {
          const existing_id = el.getAttribute("id");
          if (existing_id) {
            return existing_id;
          }
          el.setAttribute("id", id);
          return id;
        };
        const addSlashes = (str) => {
          return str.replace(/[\\"']/g, "\\$&");
        };
        const append = (parent, node) => {
          if (node)
            parent.append(node);
        };
        function getSettings(input, settings_user) {
          var settings = Object.assign({}, defaults, settings_user);
          var attr_data = settings.dataAttr;
          var field_label = settings.labelField;
          var field_value = settings.valueField;
          var field_disabled = settings.disabledField;
          var field_optgroup = settings.optgroupField;
          var field_optgroup_label = settings.optgroupLabelField;
          var field_optgroup_value = settings.optgroupValueField;
          var tag_name = input.tagName.toLowerCase();
          var placeholder = input.getAttribute("placeholder") || input.getAttribute("data-placeholder");
          if (!placeholder && !settings.allowEmptyOption) {
            let option = input.querySelector('option[value=""]');
            if (option) {
              placeholder = option.textContent;
            }
          }
          var settings_element = {
            placeholder,
            options: [],
            optgroups: [],
            items: [],
            maxItems: null
          };
          var init_select = () => {
            var tagName;
            var options = settings_element.options;
            var optionsMap = {};
            var group_count = 1;
            let $order = 0;
            var readData = (el) => {
              var data = Object.assign({}, el.dataset);
              var json = attr_data && data[attr_data];
              if (typeof json === "string" && json.length) {
                data = Object.assign(data, JSON.parse(json));
              }
              return data;
            };
            var addOption = (option, group) => {
              var value = hash_key(option.value);
              if (value == null)
                return;
              if (!value && !settings.allowEmptyOption)
                return;
              if (optionsMap.hasOwnProperty(value)) {
                if (group) {
                  var arr = optionsMap[value][field_optgroup];
                  if (!arr) {
                    optionsMap[value][field_optgroup] = group;
                  } else if (!Array.isArray(arr)) {
                    optionsMap[value][field_optgroup] = [arr, group];
                  } else {
                    arr.push(group);
                  }
                }
              } else {
                var option_data = readData(option);
                option_data[field_label] = option_data[field_label] || option.textContent;
                option_data[field_value] = option_data[field_value] || value;
                option_data[field_disabled] = option_data[field_disabled] || option.disabled;
                option_data[field_optgroup] = option_data[field_optgroup] || group;
                option_data.$option = option;
                option_data.$order = option_data.$order || ++$order;
                optionsMap[value] = option_data;
                options.push(option_data);
              }
              if (option.selected) {
                settings_element.items.push(value);
              }
            };
            var addGroup = (optgroup) => {
              var id, optgroup_data;
              optgroup_data = readData(optgroup);
              optgroup_data[field_optgroup_label] = optgroup_data[field_optgroup_label] || optgroup.getAttribute("label") || "";
              optgroup_data[field_optgroup_value] = optgroup_data[field_optgroup_value] || group_count++;
              optgroup_data[field_disabled] = optgroup_data[field_disabled] || optgroup.disabled;
              optgroup_data.$order = optgroup_data.$order || ++$order;
              settings_element.optgroups.push(optgroup_data);
              id = optgroup_data[field_optgroup_value];
              iterate(optgroup.children, (option) => {
                addOption(option, id);
              });
            };
            settings_element.maxItems = input.hasAttribute("multiple") ? null : 1;
            iterate(input.children, (child) => {
              tagName = child.tagName.toLowerCase();
              if (tagName === "optgroup") {
                addGroup(child);
              } else if (tagName === "option") {
                addOption(child);
              }
            });
          };
          var init_textbox = () => {
            const data_raw = input.getAttribute(attr_data);
            if (!data_raw) {
              var value = input.value.trim() || "";
              if (!settings.allowEmptyOption && !value.length)
                return;
              const values = value.split(settings.delimiter);
              iterate(values, (value2) => {
                const option = {};
                option[field_label] = value2;
                option[field_value] = value2;
                settings_element.options.push(option);
              });
              settings_element.items = values;
            } else {
              settings_element.options = JSON.parse(data_raw);
              iterate(settings_element.options, (opt) => {
                settings_element.items.push(opt[field_value]);
              });
            }
          };
          if (tag_name === "select") {
            init_select();
          } else {
            init_textbox();
          }
          return Object.assign({}, defaults, settings_element, settings_user);
        }
        var instance_i = 0;
        class TomSelect3 extends MicroPlugin(MicroEvent) {
          constructor(input_arg, user_settings) {
            super();
            this.control_input = void 0;
            this.wrapper = void 0;
            this.dropdown = void 0;
            this.control = void 0;
            this.dropdown_content = void 0;
            this.focus_node = void 0;
            this.order = 0;
            this.settings = void 0;
            this.input = void 0;
            this.tabIndex = void 0;
            this.is_select_tag = void 0;
            this.rtl = void 0;
            this.inputId = void 0;
            this._destroy = void 0;
            this.sifter = void 0;
            this.isOpen = false;
            this.isDisabled = false;
            this.isReadOnly = false;
            this.isRequired = void 0;
            this.isInvalid = false;
            this.isValid = true;
            this.isLocked = false;
            this.isFocused = false;
            this.isInputHidden = false;
            this.isSetup = false;
            this.ignoreFocus = false;
            this.ignoreHover = false;
            this.hasOptions = false;
            this.currentResults = void 0;
            this.lastValue = "";
            this.caretPos = 0;
            this.loading = 0;
            this.loadedSearches = {};
            this.activeOption = null;
            this.activeItems = [];
            this.optgroups = {};
            this.options = {};
            this.userOptions = {};
            this.items = [];
            this.refreshTimeout = null;
            instance_i++;
            var dir;
            var input = getDom(input_arg);
            if (input.tomselect) {
              throw new Error("Tom Select already initialized on this element");
            }
            input.tomselect = this;
            var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
            dir = computedStyle.getPropertyValue("direction");
            const settings = getSettings(input, user_settings);
            this.settings = settings;
            this.input = input;
            this.tabIndex = input.tabIndex || 0;
            this.is_select_tag = input.tagName.toLowerCase() === "select";
            this.rtl = /rtl/i.test(dir);
            this.inputId = getId(input, "tomselect-" + instance_i);
            this.isRequired = input.required;
            this.sifter = new Sifter(this.options, {
              diacritics: settings.diacritics
            });
            settings.mode = settings.mode || (settings.maxItems === 1 ? "single" : "multi");
            if (typeof settings.hideSelected !== "boolean") {
              settings.hideSelected = settings.mode === "multi";
            }
            if (typeof settings.hidePlaceholder !== "boolean") {
              settings.hidePlaceholder = settings.mode !== "multi";
            }
            var filter = settings.createFilter;
            if (typeof filter !== "function") {
              if (typeof filter === "string") {
                filter = new RegExp(filter);
              }
              if (filter instanceof RegExp) {
                settings.createFilter = (input2) => filter.test(input2);
              } else {
                settings.createFilter = (value) => {
                  return this.settings.duplicates || !this.options[value];
                };
              }
            }
            this.initializePlugins(settings.plugins);
            this.setupCallbacks();
            this.setupTemplates();
            const wrapper = getDom("<div>");
            const control = getDom("<div>");
            const dropdown = this._render("dropdown");
            const dropdown_content = getDom(`<div role="listbox" tabindex="-1">`);
            const classes = this.input.getAttribute("class") || "";
            const inputMode = settings.mode;
            var control_input;
            addClasses(wrapper, settings.wrapperClass, classes, inputMode);
            addClasses(control, settings.controlClass);
            append(wrapper, control);
            addClasses(dropdown, settings.dropdownClass, inputMode);
            if (settings.copyClassesToDropdown) {
              addClasses(dropdown, classes);
            }
            addClasses(dropdown_content, settings.dropdownContentClass);
            append(dropdown, dropdown_content);
            getDom(settings.dropdownParent || wrapper).appendChild(dropdown);
            if (isHtmlString(settings.controlInput)) {
              control_input = getDom(settings.controlInput);
              var attrs = ["autocorrect", "autocapitalize", "autocomplete", "spellcheck"];
              iterate$1(attrs, (attr) => {
                if (input.getAttribute(attr)) {
                  setAttr(control_input, {
                    [attr]: input.getAttribute(attr)
                  });
                }
              });
              control_input.tabIndex = -1;
              control.appendChild(control_input);
              this.focus_node = control_input;
            } else if (settings.controlInput) {
              control_input = getDom(settings.controlInput);
              this.focus_node = control_input;
            } else {
              control_input = getDom("<input/>");
              this.focus_node = control;
            }
            this.wrapper = wrapper;
            this.dropdown = dropdown;
            this.dropdown_content = dropdown_content;
            this.control = control;
            this.control_input = control_input;
            this.setup();
          }
          /**
           * set up event bindings.
           *
           */
          setup() {
            const self2 = this;
            const settings = self2.settings;
            const control_input = self2.control_input;
            const dropdown = self2.dropdown;
            const dropdown_content = self2.dropdown_content;
            const wrapper = self2.wrapper;
            const control = self2.control;
            const input = self2.input;
            const focus_node = self2.focus_node;
            const passive_event = {
              passive: true
            };
            const listboxId = self2.inputId + "-ts-dropdown";
            setAttr(dropdown_content, {
              id: listboxId
            });
            setAttr(focus_node, {
              role: "combobox",
              "aria-haspopup": "listbox",
              "aria-expanded": "false",
              "aria-controls": listboxId
            });
            const control_id = getId(focus_node, self2.inputId + "-ts-control");
            const query = "label[for='" + escapeQuery(self2.inputId) + "']";
            const label = document.querySelector(query);
            const label_click = self2.focus.bind(self2);
            if (label) {
              addEvent(label, "click", label_click);
              setAttr(label, {
                for: control_id
              });
              const label_id = getId(label, self2.inputId + "-ts-label");
              setAttr(focus_node, {
                "aria-labelledby": label_id
              });
              setAttr(dropdown_content, {
                "aria-labelledby": label_id
              });
            }
            wrapper.style.width = input.style.width;
            if (self2.plugins.names.length) {
              const classes_plugins = "plugin-" + self2.plugins.names.join(" plugin-");
              addClasses([wrapper, dropdown], classes_plugins);
            }
            if ((settings.maxItems === null || settings.maxItems > 1) && self2.is_select_tag) {
              setAttr(input, {
                multiple: "multiple"
              });
            }
            if (settings.placeholder) {
              setAttr(control_input, {
                placeholder: settings.placeholder
              });
            }
            if (!settings.splitOn && settings.delimiter) {
              settings.splitOn = new RegExp("\\s*" + escape_regex(settings.delimiter) + "+\\s*");
            }
            if (settings.load && settings.loadThrottle) {
              settings.load = loadDebounce(settings.load, settings.loadThrottle);
            }
            addEvent(dropdown, "mousemove", () => {
              self2.ignoreHover = false;
            });
            addEvent(dropdown, "mouseenter", (e) => {
              var target_match = parentMatch(e.target, "[data-selectable]", dropdown);
              if (target_match)
                self2.onOptionHover(e, target_match);
            }, {
              capture: true
            });
            addEvent(dropdown, "click", (evt) => {
              const option = parentMatch(evt.target, "[data-selectable]");
              if (option) {
                self2.onOptionSelect(evt, option);
                preventDefault2(evt, true);
              }
            });
            addEvent(control, "click", (evt) => {
              var target_match = parentMatch(evt.target, "[data-ts-item]", control);
              if (target_match && self2.onItemSelect(evt, target_match)) {
                preventDefault2(evt, true);
                return;
              }
              if (control_input.value != "") {
                return;
              }
              self2.onClick();
              preventDefault2(evt, true);
            });
            addEvent(focus_node, "keydown", (e) => self2.onKeyDown(e));
            addEvent(control_input, "keypress", (e) => self2.onKeyPress(e));
            addEvent(control_input, "input", (e) => self2.onInput(e));
            addEvent(focus_node, "blur", (e) => self2.onBlur(e));
            addEvent(focus_node, "focus", (e) => self2.onFocus(e));
            addEvent(control_input, "paste", (e) => self2.onPaste(e));
            const doc_mousedown = (evt) => {
              const target = evt.composedPath()[0];
              if (!wrapper.contains(target) && !dropdown.contains(target)) {
                if (self2.isFocused) {
                  self2.blur();
                }
                self2.inputState();
                return;
              }
              if (target == control_input && self2.isOpen) {
                evt.stopPropagation();
              } else {
                preventDefault2(evt, true);
              }
            };
            const win_scroll = () => {
              if (self2.isOpen) {
                self2.positionDropdown();
              }
            };
            addEvent(document, "mousedown", doc_mousedown);
            addEvent(window, "scroll", win_scroll, passive_event);
            addEvent(window, "resize", win_scroll, passive_event);
            this._destroy = () => {
              document.removeEventListener("mousedown", doc_mousedown);
              window.removeEventListener("scroll", win_scroll);
              window.removeEventListener("resize", win_scroll);
              if (label)
                label.removeEventListener("click", label_click);
            };
            this.revertSettings = {
              innerHTML: input.innerHTML,
              tabIndex: input.tabIndex
            };
            input.tabIndex = -1;
            input.insertAdjacentElement("afterend", self2.wrapper);
            self2.sync(false);
            settings.items = [];
            delete settings.optgroups;
            delete settings.options;
            addEvent(input, "invalid", () => {
              if (self2.isValid) {
                self2.isValid = false;
                self2.isInvalid = true;
                self2.refreshState();
              }
            });
            self2.updateOriginalInput();
            self2.refreshItems();
            self2.close(false);
            self2.inputState();
            self2.isSetup = true;
            if (input.disabled) {
              self2.disable();
            } else if (input.readOnly) {
              self2.setReadOnly(true);
            } else {
              self2.enable();
            }
            self2.on("change", this.onChange);
            addClasses(input, "tomselected", "ts-hidden-accessible");
            self2.trigger("initialize");
            if (settings.preload === true) {
              self2.preload();
            }
          }
          /**
           * Register options and optgroups
           *
           */
          setupOptions(options = [], optgroups = []) {
            this.addOptions(options);
            iterate$1(optgroups, (optgroup) => {
              this.registerOptionGroup(optgroup);
            });
          }
          /**
           * Sets up default rendering functions.
           */
          setupTemplates() {
            var self2 = this;
            var field_label = self2.settings.labelField;
            var field_optgroup = self2.settings.optgroupLabelField;
            var templates = {
              "optgroup": (data) => {
                let optgroup = document.createElement("div");
                optgroup.className = "optgroup";
                optgroup.appendChild(data.options);
                return optgroup;
              },
              "optgroup_header": (data, escape) => {
                return '<div class="optgroup-header">' + escape(data[field_optgroup]) + "</div>";
              },
              "option": (data, escape) => {
                return "<div>" + escape(data[field_label]) + "</div>";
              },
              "item": (data, escape) => {
                return "<div>" + escape(data[field_label]) + "</div>";
              },
              "option_create": (data, escape) => {
                return '<div class="create">Add <strong>' + escape(data.input) + "</strong>&hellip;</div>";
              },
              "no_results": () => {
                return '<div class="no-results">No results found</div>';
              },
              "loading": () => {
                return '<div class="spinner"></div>';
              },
              "not_loading": () => {
              },
              "dropdown": () => {
                return "<div></div>";
              }
            };
            self2.settings.render = Object.assign({}, templates, self2.settings.render);
          }
          /**
           * Maps fired events to callbacks provided
           * in the settings used when creating the control.
           */
          setupCallbacks() {
            var key, fn2;
            var callbacks = {
              "initialize": "onInitialize",
              "change": "onChange",
              "item_add": "onItemAdd",
              "item_remove": "onItemRemove",
              "item_select": "onItemSelect",
              "clear": "onClear",
              "option_add": "onOptionAdd",
              "option_remove": "onOptionRemove",
              "option_clear": "onOptionClear",
              "optgroup_add": "onOptionGroupAdd",
              "optgroup_remove": "onOptionGroupRemove",
              "optgroup_clear": "onOptionGroupClear",
              "dropdown_open": "onDropdownOpen",
              "dropdown_close": "onDropdownClose",
              "type": "onType",
              "load": "onLoad",
              "focus": "onFocus",
              "blur": "onBlur"
            };
            for (key in callbacks) {
              fn2 = this.settings[callbacks[key]];
              if (fn2)
                this.on(key, fn2);
            }
          }
          /**
           * Sync the Tom Select instance with the original input or select
           *
           */
          sync(get_settings = true) {
            const self2 = this;
            const settings = get_settings ? getSettings(self2.input, {
              delimiter: self2.settings.delimiter
            }) : self2.settings;
            self2.setupOptions(settings.options, settings.optgroups);
            self2.setValue(settings.items || [], true);
            self2.lastQuery = null;
          }
          /**
           * Triggered when the main control element
           * has a click event.
           *
           */
          onClick() {
            var self2 = this;
            if (self2.activeItems.length > 0) {
              self2.clearActiveItems();
              self2.focus();
              return;
            }
            if (self2.isFocused && self2.isOpen) {
              self2.blur();
            } else {
              self2.focus();
            }
          }
          /**
           * @deprecated v1.7
           *
           */
          onMouseDown() {
          }
          /**
           * Triggered when the value of the control has been changed.
           * This should propagate the event to the original DOM
           * input / select element.
           */
          onChange() {
            triggerEvent(this.input, "input");
            triggerEvent(this.input, "change");
          }
          /**
           * Triggered on <input> paste.
           *
           */
          onPaste(e) {
            var self2 = this;
            if (self2.isInputHidden || self2.isLocked) {
              preventDefault2(e);
              return;
            }
            if (!self2.settings.splitOn) {
              return;
            }
            setTimeout(() => {
              var pastedText = self2.inputValue();
              if (!pastedText.match(self2.settings.splitOn)) {
                return;
              }
              var splitInput = pastedText.trim().split(self2.settings.splitOn);
              iterate$1(splitInput, (piece) => {
                const hash3 = hash_key(piece);
                if (hash3) {
                  if (this.options[piece]) {
                    self2.addItem(piece);
                  } else {
                    self2.createItem(piece);
                  }
                }
              });
            }, 0);
          }
          /**
           * Triggered on <input> keypress.
           *
           */
          onKeyPress(e) {
            var self2 = this;
            if (self2.isLocked) {
              preventDefault2(e);
              return;
            }
            var character = String.fromCharCode(e.keyCode || e.which);
            if (self2.settings.create && self2.settings.mode === "multi" && character === self2.settings.delimiter) {
              self2.createItem();
              preventDefault2(e);
              return;
            }
          }
          /**
           * Triggered on <input> keydown.
           *
           */
          onKeyDown(e) {
            var self2 = this;
            self2.ignoreHover = true;
            if (self2.isLocked) {
              if (e.keyCode !== KEY_TAB) {
                preventDefault2(e);
              }
              return;
            }
            switch (e.keyCode) {
              case KEY_A:
                if (isKeyDown(KEY_SHORTCUT, e)) {
                  if (self2.control_input.value == "") {
                    preventDefault2(e);
                    self2.selectAll();
                    return;
                  }
                }
                break;
              case KEY_ESC:
                if (self2.isOpen) {
                  preventDefault2(e, true);
                  self2.close();
                }
                self2.clearActiveItems();
                return;
              case KEY_DOWN:
                if (!self2.isOpen && self2.hasOptions) {
                  self2.open();
                } else if (self2.activeOption) {
                  let next = self2.getAdjacent(self2.activeOption, 1);
                  if (next)
                    self2.setActiveOption(next);
                }
                preventDefault2(e);
                return;
              case KEY_UP:
                if (self2.activeOption) {
                  let prev = self2.getAdjacent(self2.activeOption, -1);
                  if (prev)
                    self2.setActiveOption(prev);
                }
                preventDefault2(e);
                return;
              case KEY_RETURN:
                if (self2.canSelect(self2.activeOption)) {
                  self2.onOptionSelect(e, self2.activeOption);
                  preventDefault2(e);
                } else if (self2.settings.create && self2.createItem()) {
                  preventDefault2(e);
                } else if (document.activeElement == self2.control_input && self2.isOpen) {
                  preventDefault2(e);
                }
                return;
              case KEY_LEFT:
                self2.advanceSelection(-1, e);
                return;
              case KEY_RIGHT:
                self2.advanceSelection(1, e);
                return;
              case KEY_TAB:
                if (self2.settings.selectOnTab) {
                  if (self2.canSelect(self2.activeOption)) {
                    self2.onOptionSelect(e, self2.activeOption);
                    preventDefault2(e);
                  }
                  if (self2.settings.create && self2.createItem()) {
                    preventDefault2(e);
                  }
                }
                return;
              case KEY_BACKSPACE:
              case KEY_DELETE:
                self2.deleteSelection(e);
                return;
            }
            if (self2.isInputHidden && !isKeyDown(KEY_SHORTCUT, e)) {
              preventDefault2(e);
            }
          }
          /**
           * Triggered on <input> keyup.
           *
           */
          onInput(e) {
            if (this.isLocked) {
              return;
            }
            const value = this.inputValue();
            if (this.lastValue === value)
              return;
            this.lastValue = value;
            if (value == "") {
              this._onInput();
              return;
            }
            if (this.refreshTimeout) {
              clearTimeout(this.refreshTimeout);
            }
            this.refreshTimeout = timeout(() => {
              this.refreshTimeout = null;
              this._onInput();
            }, this.settings.refreshThrottle);
          }
          _onInput() {
            const value = this.lastValue;
            if (this.settings.shouldLoad.call(this, value)) {
              this.load(value);
            }
            this.refreshOptions();
            this.trigger("type", value);
          }
          /**
           * Triggered when the user rolls over
           * an option in the autocomplete dropdown menu.
           *
           */
          onOptionHover(evt, option) {
            if (this.ignoreHover)
              return;
            this.setActiveOption(option, false);
          }
          /**
           * Triggered on <input> focus.
           *
           */
          onFocus(e) {
            var self2 = this;
            var wasFocused = self2.isFocused;
            if (self2.isDisabled || self2.isReadOnly) {
              self2.blur();
              preventDefault2(e);
              return;
            }
            if (self2.ignoreFocus)
              return;
            self2.isFocused = true;
            if (self2.settings.preload === "focus")
              self2.preload();
            if (!wasFocused)
              self2.trigger("focus");
            if (!self2.activeItems.length) {
              self2.inputState();
              self2.refreshOptions(!!self2.settings.openOnFocus);
            }
            self2.refreshState();
          }
          /**
           * Triggered on <input> blur.
           *
           */
          onBlur(e) {
            if (document.hasFocus() === false)
              return;
            var self2 = this;
            if (!self2.isFocused)
              return;
            self2.isFocused = false;
            self2.ignoreFocus = false;
            var deactivate = () => {
              self2.close();
              self2.setActiveItem();
              self2.setCaret(self2.items.length);
              self2.trigger("blur");
            };
            if (self2.settings.create && self2.settings.createOnBlur) {
              self2.createItem(null, deactivate);
            } else {
              deactivate();
            }
          }
          /**
           * Triggered when the user clicks on an option
           * in the autocomplete dropdown menu.
           *
           */
          onOptionSelect(evt, option) {
            var value, self2 = this;
            if (option.parentElement && option.parentElement.matches("[data-disabled]")) {
              return;
            }
            if (option.classList.contains("create")) {
              self2.createItem(null, () => {
                if (self2.settings.closeAfterSelect) {
                  self2.close();
                }
              });
            } else {
              value = option.dataset.value;
              if (typeof value !== "undefined") {
                self2.lastQuery = null;
                self2.addItem(value);
                if (self2.settings.closeAfterSelect) {
                  self2.close();
                }
                if (!self2.settings.hideSelected && evt.type && /click/.test(evt.type)) {
                  self2.setActiveOption(option);
                }
              }
            }
          }
          /**
           * Return true if the given option can be selected
           *
           */
          canSelect(option) {
            if (this.isOpen && option && this.dropdown_content.contains(option)) {
              return true;
            }
            return false;
          }
          /**
           * Triggered when the user clicks on an item
           * that has been selected.
           *
           */
          onItemSelect(evt, item) {
            var self2 = this;
            if (!self2.isLocked && self2.settings.mode === "multi") {
              preventDefault2(evt);
              self2.setActiveItem(item, evt);
              return true;
            }
            return false;
          }
          /**
           * Determines whether or not to invoke
           * the user-provided option provider / loader
           *
           * Note, there is a subtle difference between
           * this.canLoad() and this.settings.shouldLoad();
           *
           *	- settings.shouldLoad() is a user-input validator.
           *	When false is returned, the not_loading template
           *	will be added to the dropdown
           *
           *	- canLoad() is lower level validator that checks
           * 	the Tom Select instance. There is no inherent user
           *	feedback when canLoad returns false
           *
           */
          canLoad(value) {
            if (!this.settings.load)
              return false;
            if (this.loadedSearches.hasOwnProperty(value))
              return false;
            return true;
          }
          /**
           * Invokes the user-provided option provider / loader.
           *
           */
          load(value) {
            const self2 = this;
            if (!self2.canLoad(value))
              return;
            addClasses(self2.wrapper, self2.settings.loadingClass);
            self2.loading++;
            const callback = self2.loadCallback.bind(self2);
            self2.settings.load.call(self2, value, callback);
          }
          /**
           * Invoked by the user-provided option provider
           *
           */
          loadCallback(options, optgroups) {
            const self2 = this;
            self2.loading = Math.max(self2.loading - 1, 0);
            self2.lastQuery = null;
            self2.clearActiveOption();
            self2.setupOptions(options, optgroups);
            self2.refreshOptions(self2.isFocused && !self2.isInputHidden);
            if (!self2.loading) {
              removeClasses(self2.wrapper, self2.settings.loadingClass);
            }
            self2.trigger("load", options, optgroups);
          }
          preload() {
            var classList = this.wrapper.classList;
            if (classList.contains("preloaded"))
              return;
            classList.add("preloaded");
            this.load("");
          }
          /**
           * Sets the input field of the control to the specified value.
           *
           */
          setTextboxValue(value = "") {
            var input = this.control_input;
            var changed = input.value !== value;
            if (changed) {
              input.value = value;
              triggerEvent(input, "update");
              this.lastValue = value;
            }
          }
          /**
           * Returns the value of the control. If multiple items
           * can be selected (e.g. <select multiple>), this returns
           * an array. If only one item can be selected, this
           * returns a string.
           *
           */
          getValue() {
            if (this.is_select_tag && this.input.hasAttribute("multiple")) {
              return this.items;
            }
            return this.items.join(this.settings.delimiter);
          }
          /**
           * Resets the selected items to the given value.
           *
           */
          setValue(value, silent) {
            var events = silent ? [] : ["change"];
            debounce_events(this, events, () => {
              this.clear(silent);
              this.addItems(value, silent);
            });
          }
          /**
           * Resets the number of max items to the given value
           *
           */
          setMaxItems(value) {
            if (value === 0)
              value = null;
            this.settings.maxItems = value;
            this.refreshState();
          }
          /**
           * Sets the selected item.
           *
           */
          setActiveItem(item, e) {
            var self2 = this;
            var eventName;
            var i, begin, end3, swap;
            var last;
            if (self2.settings.mode === "single")
              return;
            if (!item) {
              self2.clearActiveItems();
              if (self2.isFocused) {
                self2.inputState();
              }
              return;
            }
            eventName = e && e.type.toLowerCase();
            if (eventName === "click" && isKeyDown("shiftKey", e) && self2.activeItems.length) {
              last = self2.getLastActive();
              begin = Array.prototype.indexOf.call(self2.control.children, last);
              end3 = Array.prototype.indexOf.call(self2.control.children, item);
              if (begin > end3) {
                swap = begin;
                begin = end3;
                end3 = swap;
              }
              for (i = begin; i <= end3; i++) {
                item = self2.control.children[i];
                if (self2.activeItems.indexOf(item) === -1) {
                  self2.setActiveItemClass(item);
                }
              }
              preventDefault2(e);
            } else if (eventName === "click" && isKeyDown(KEY_SHORTCUT, e) || eventName === "keydown" && isKeyDown("shiftKey", e)) {
              if (item.classList.contains("active")) {
                self2.removeActiveItem(item);
              } else {
                self2.setActiveItemClass(item);
              }
            } else {
              self2.clearActiveItems();
              self2.setActiveItemClass(item);
            }
            self2.inputState();
            if (!self2.isFocused) {
              self2.focus();
            }
          }
          /**
           * Set the active and last-active classes
           *
           */
          setActiveItemClass(item) {
            const self2 = this;
            const last_active = self2.control.querySelector(".last-active");
            if (last_active)
              removeClasses(last_active, "last-active");
            addClasses(item, "active last-active");
            self2.trigger("item_select", item);
            if (self2.activeItems.indexOf(item) == -1) {
              self2.activeItems.push(item);
            }
          }
          /**
           * Remove active item
           *
           */
          removeActiveItem(item) {
            var idx = this.activeItems.indexOf(item);
            this.activeItems.splice(idx, 1);
            removeClasses(item, "active");
          }
          /**
           * Clears all the active items
           *
           */
          clearActiveItems() {
            removeClasses(this.activeItems, "active");
            this.activeItems = [];
          }
          /**
           * Sets the selected item in the dropdown menu
           * of available options.
           *
           */
          setActiveOption(option, scroll = true) {
            if (option === this.activeOption) {
              return;
            }
            this.clearActiveOption();
            if (!option)
              return;
            this.activeOption = option;
            setAttr(this.focus_node, {
              "aria-activedescendant": option.getAttribute("id")
            });
            setAttr(option, {
              "aria-selected": "true"
            });
            addClasses(option, "active");
            if (scroll)
              this.scrollToOption(option);
          }
          /**
           * Sets the dropdown_content scrollTop to display the option
           *
           */
          scrollToOption(option, behavior) {
            if (!option)
              return;
            const content = this.dropdown_content;
            const height_menu = content.clientHeight;
            const scrollTop = content.scrollTop || 0;
            const height_item = option.offsetHeight;
            const y = option.getBoundingClientRect().top - content.getBoundingClientRect().top + scrollTop;
            if (y + height_item > height_menu + scrollTop) {
              this.scroll(y - height_menu + height_item, behavior);
            } else if (y < scrollTop) {
              this.scroll(y, behavior);
            }
          }
          /**
           * Scroll the dropdown to the given position
           *
           */
          scroll(scrollTop, behavior) {
            const content = this.dropdown_content;
            if (behavior) {
              content.style.scrollBehavior = behavior;
            }
            content.scrollTop = scrollTop;
            content.style.scrollBehavior = "";
          }
          /**
           * Clears the active option
           *
           */
          clearActiveOption() {
            if (this.activeOption) {
              removeClasses(this.activeOption, "active");
              setAttr(this.activeOption, {
                "aria-selected": null
              });
            }
            this.activeOption = null;
            setAttr(this.focus_node, {
              "aria-activedescendant": null
            });
          }
          /**
           * Selects all items (CTRL + A).
           */
          selectAll() {
            const self2 = this;
            if (self2.settings.mode === "single")
              return;
            const activeItems = self2.controlChildren();
            if (!activeItems.length)
              return;
            self2.inputState();
            self2.close();
            self2.activeItems = activeItems;
            iterate$1(activeItems, (item) => {
              self2.setActiveItemClass(item);
            });
          }
          /**
           * Determines if the control_input should be in a hidden or visible state
           *
           */
          inputState() {
            var self2 = this;
            if (!self2.control.contains(self2.control_input))
              return;
            setAttr(self2.control_input, {
              placeholder: self2.settings.placeholder
            });
            if (self2.activeItems.length > 0 || !self2.isFocused && self2.settings.hidePlaceholder && self2.items.length > 0) {
              self2.setTextboxValue();
              self2.isInputHidden = true;
            } else {
              if (self2.settings.hidePlaceholder && self2.items.length > 0) {
                setAttr(self2.control_input, {
                  placeholder: ""
                });
              }
              self2.isInputHidden = false;
            }
            self2.wrapper.classList.toggle("input-hidden", self2.isInputHidden);
          }
          /**
           * Get the input value
           */
          inputValue() {
            return this.control_input.value.trim();
          }
          /**
           * Gives the control focus.
           */
          focus() {
            var self2 = this;
            if (self2.isDisabled || self2.isReadOnly)
              return;
            self2.ignoreFocus = true;
            if (self2.control_input.offsetWidth) {
              self2.control_input.focus();
            } else {
              self2.focus_node.focus();
            }
            setTimeout(() => {
              self2.ignoreFocus = false;
              self2.onFocus();
            }, 0);
          }
          /**
           * Forces the control out of focus.
           *
           */
          blur() {
            this.focus_node.blur();
            this.onBlur();
          }
          /**
           * Returns a function that scores an object
           * to show how good of a match it is to the
           * provided query.
           *
           * @return {function}
           */
          getScoreFunction(query) {
            return this.sifter.getScoreFunction(query, this.getSearchOptions());
          }
          /**
           * Returns search options for sifter (the system
           * for scoring and sorting results).
           *
           * @see https://github.com/orchidjs/sifter.js
           * @return {object}
           */
          getSearchOptions() {
            var settings = this.settings;
            var sort = settings.sortField;
            if (typeof settings.sortField === "string") {
              sort = [{
                field: settings.sortField
              }];
            }
            return {
              fields: settings.searchField,
              conjunction: settings.searchConjunction,
              sort,
              nesting: settings.nesting
            };
          }
          /**
           * Searches through available options and returns
           * a sorted array of matches.
           *
           */
          search(query) {
            var result, calculateScore;
            var self2 = this;
            var options = this.getSearchOptions();
            if (self2.settings.score) {
              calculateScore = self2.settings.score.call(self2, query);
              if (typeof calculateScore !== "function") {
                throw new Error('Tom Select "score" setting must be a function that returns a function');
              }
            }
            if (query !== self2.lastQuery) {
              self2.lastQuery = query;
              result = self2.sifter.search(query, Object.assign(options, {
                score: calculateScore
              }));
              self2.currentResults = result;
            } else {
              result = Object.assign({}, self2.currentResults);
            }
            if (self2.settings.hideSelected) {
              result.items = result.items.filter((item) => {
                let hashed = hash_key(item.id);
                return !(hashed && self2.items.indexOf(hashed) !== -1);
              });
            }
            return result;
          }
          /**
           * Refreshes the list of available options shown
           * in the autocomplete dropdown menu.
           *
           */
          refreshOptions(triggerDropdown = true) {
            var i, j, k, n, optgroup, optgroups, html, has_create_option, active_group;
            var create;
            const groups = {};
            const groups_order = [];
            var self2 = this;
            var query = self2.inputValue();
            const same_query = query === self2.lastQuery || query == "" && self2.lastQuery == null;
            var results = self2.search(query);
            var active_option = null;
            var show_dropdown = self2.settings.shouldOpen || false;
            var dropdown_content = self2.dropdown_content;
            if (same_query) {
              active_option = self2.activeOption;
              if (active_option) {
                active_group = active_option.closest("[data-group]");
              }
            }
            n = results.items.length;
            if (typeof self2.settings.maxOptions === "number") {
              n = Math.min(n, self2.settings.maxOptions);
            }
            if (n > 0) {
              show_dropdown = true;
            }
            const getGroupFragment = (optgroup2, order2) => {
              let group_order_i = groups[optgroup2];
              if (group_order_i !== void 0) {
                let order_group = groups_order[group_order_i];
                if (order_group !== void 0) {
                  return [group_order_i, order_group.fragment];
                }
              }
              let group_fragment = document.createDocumentFragment();
              group_order_i = groups_order.length;
              groups_order.push({
                fragment: group_fragment,
                order: order2,
                optgroup: optgroup2
              });
              return [group_order_i, group_fragment];
            };
            for (i = 0; i < n; i++) {
              let item = results.items[i];
              if (!item)
                continue;
              let opt_value = item.id;
              let option = self2.options[opt_value];
              if (option === void 0)
                continue;
              let opt_hash = get_hash(opt_value);
              let option_el = self2.getOption(opt_hash, true);
              if (!self2.settings.hideSelected) {
                option_el.classList.toggle("selected", self2.items.includes(opt_hash));
              }
              optgroup = option[self2.settings.optgroupField] || "";
              optgroups = Array.isArray(optgroup) ? optgroup : [optgroup];
              for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
                optgroup = optgroups[j];
                let order2 = option.$order;
                let self_optgroup = self2.optgroups[optgroup];
                if (self_optgroup === void 0) {
                  optgroup = "";
                } else {
                  order2 = self_optgroup.$order;
                }
                const [group_order_i, group_fragment] = getGroupFragment(optgroup, order2);
                if (j > 0) {
                  option_el = option_el.cloneNode(true);
                  setAttr(option_el, {
                    id: option.$id + "-clone-" + j,
                    "aria-selected": null
                  });
                  option_el.classList.add("ts-cloned");
                  removeClasses(option_el, "active");
                  if (self2.activeOption && self2.activeOption.dataset.value == opt_value) {
                    if (active_group && active_group.dataset.group === optgroup.toString()) {
                      active_option = option_el;
                    }
                  }
                }
                group_fragment.appendChild(option_el);
                if (optgroup != "") {
                  groups[optgroup] = group_order_i;
                }
              }
            }
            if (self2.settings.lockOptgroupOrder) {
              groups_order.sort((a, b) => {
                return a.order - b.order;
              });
            }
            html = document.createDocumentFragment();
            iterate$1(groups_order, (group_order) => {
              let group_fragment = group_order.fragment;
              let optgroup2 = group_order.optgroup;
              if (!group_fragment || !group_fragment.children.length)
                return;
              let group_heading = self2.optgroups[optgroup2];
              if (group_heading !== void 0) {
                let group_options = document.createDocumentFragment();
                let header = self2.render("optgroup_header", group_heading);
                append(group_options, header);
                append(group_options, group_fragment);
                let group_html = self2.render("optgroup", {
                  group: group_heading,
                  options: group_options
                });
                append(html, group_html);
              } else {
                append(html, group_fragment);
              }
            });
            dropdown_content.innerHTML = "";
            append(dropdown_content, html);
            if (self2.settings.highlight) {
              removeHighlight(dropdown_content);
              if (results.query.length && results.tokens.length) {
                iterate$1(results.tokens, (tok) => {
                  highlight(dropdown_content, tok.regex);
                });
              }
            }
            var add_template = (template) => {
              let content = self2.render(template, {
                input: query
              });
              if (content) {
                show_dropdown = true;
                dropdown_content.insertBefore(content, dropdown_content.firstChild);
              }
              return content;
            };
            if (self2.loading) {
              add_template("loading");
            } else if (!self2.settings.shouldLoad.call(self2, query)) {
              add_template("not_loading");
            } else if (results.items.length === 0) {
              add_template("no_results");
            }
            has_create_option = self2.canCreate(query);
            if (has_create_option) {
              create = add_template("option_create");
            }
            self2.hasOptions = results.items.length > 0 || has_create_option;
            if (show_dropdown) {
              if (results.items.length > 0) {
                if (!active_option && self2.settings.mode === "single" && self2.items[0] != void 0) {
                  active_option = self2.getOption(self2.items[0]);
                }
                if (!dropdown_content.contains(active_option)) {
                  let active_index = 0;
                  if (create && !self2.settings.addPrecedence) {
                    active_index = 1;
                  }
                  active_option = self2.selectable()[active_index];
                }
              } else if (create) {
                active_option = create;
              }
              if (triggerDropdown && !self2.isOpen) {
                self2.open();
                self2.scrollToOption(active_option, "auto");
              }
              self2.setActiveOption(active_option);
            } else {
              self2.clearActiveOption();
              if (triggerDropdown && self2.isOpen) {
                self2.close(false);
              }
            }
          }
          /**
           * Return list of selectable options
           *
           */
          selectable() {
            return this.dropdown_content.querySelectorAll("[data-selectable]");
          }
          /**
           * Adds an available option. If it already exists,
           * nothing will happen. Note: this does not refresh
           * the options list dropdown (use `refreshOptions`
           * for that).
           *
           * Usage:
           *
           *   this.addOption(data)
           *
           */
          addOption(data, user_created = false) {
            const self2 = this;
            if (Array.isArray(data)) {
              self2.addOptions(data, user_created);
              return false;
            }
            const key = hash_key(data[self2.settings.valueField]);
            if (key === null || self2.options.hasOwnProperty(key)) {
              return false;
            }
            data.$order = data.$order || ++self2.order;
            data.$id = self2.inputId + "-opt-" + data.$order;
            self2.options[key] = data;
            self2.lastQuery = null;
            if (user_created) {
              self2.userOptions[key] = user_created;
              self2.trigger("option_add", key, data);
            }
            return key;
          }
          /**
           * Add multiple options
           *
           */
          addOptions(data, user_created = false) {
            iterate$1(data, (dat) => {
              this.addOption(dat, user_created);
            });
          }
          /**
           * @deprecated 1.7.7
           */
          registerOption(data) {
            return this.addOption(data);
          }
          /**
           * Registers an option group to the pool of option groups.
           *
           * @return {boolean|string}
           */
          registerOptionGroup(data) {
            var key = hash_key(data[this.settings.optgroupValueField]);
            if (key === null)
              return false;
            data.$order = data.$order || ++this.order;
            this.optgroups[key] = data;
            return key;
          }
          /**
           * Registers a new optgroup for options
           * to be bucketed into.
           *
           */
          addOptionGroup(id, data) {
            var hashed_id;
            data[this.settings.optgroupValueField] = id;
            if (hashed_id = this.registerOptionGroup(data)) {
              this.trigger("optgroup_add", hashed_id, data);
            }
          }
          /**
           * Removes an existing option group.
           *
           */
          removeOptionGroup(id) {
            if (this.optgroups.hasOwnProperty(id)) {
              delete this.optgroups[id];
              this.clearCache();
              this.trigger("optgroup_remove", id);
            }
          }
          /**
           * Clears all existing option groups.
           */
          clearOptionGroups() {
            this.optgroups = {};
            this.clearCache();
            this.trigger("optgroup_clear");
          }
          /**
           * Updates an option available for selection. If
           * it is visible in the selected items or options
           * dropdown, it will be re-rendered automatically.
           *
           */
          updateOption(value, data) {
            const self2 = this;
            var item_new;
            var index_item;
            const value_old = hash_key(value);
            const value_new = hash_key(data[self2.settings.valueField]);
            if (value_old === null)
              return;
            const data_old = self2.options[value_old];
            if (data_old == void 0)
              return;
            if (typeof value_new !== "string")
              throw new Error("Value must be set in option data");
            const option = self2.getOption(value_old);
            const item = self2.getItem(value_old);
            data.$order = data.$order || data_old.$order;
            delete self2.options[value_old];
            self2.uncacheValue(value_new);
            self2.options[value_new] = data;
            if (option) {
              if (self2.dropdown_content.contains(option)) {
                const option_new = self2._render("option", data);
                replaceNode(option, option_new);
                if (self2.activeOption === option) {
                  self2.setActiveOption(option_new);
                }
              }
              option.remove();
            }
            if (item) {
              index_item = self2.items.indexOf(value_old);
              if (index_item !== -1) {
                self2.items.splice(index_item, 1, value_new);
              }
              item_new = self2._render("item", data);
              if (item.classList.contains("active"))
                addClasses(item_new, "active");
              replaceNode(item, item_new);
            }
            self2.lastQuery = null;
          }
          /**
           * Removes a single option.
           *
           */
          removeOption(value, silent) {
            const self2 = this;
            value = get_hash(value);
            self2.uncacheValue(value);
            delete self2.userOptions[value];
            delete self2.options[value];
            self2.lastQuery = null;
            self2.trigger("option_remove", value);
            self2.removeItem(value, silent);
          }
          /**
           * Clears all options.
           */
          clearOptions(filter) {
            const boundFilter = (filter || this.clearFilter).bind(this);
            this.loadedSearches = {};
            this.userOptions = {};
            this.clearCache();
            const selected = {};
            iterate$1(this.options, (option, key) => {
              if (boundFilter(option, key)) {
                selected[key] = option;
              }
            });
            this.options = this.sifter.items = selected;
            this.lastQuery = null;
            this.trigger("option_clear");
          }
          /**
           * Used by clearOptions() to decide whether or not an option should be removed
           * Return true to keep an option, false to remove
           *
           */
          clearFilter(option, value) {
            if (this.items.indexOf(value) >= 0) {
              return true;
            }
            return false;
          }
          /**
           * Returns the dom element of the option
           * matching the given value.
           *
           */
          getOption(value, create = false) {
            const hashed = hash_key(value);
            if (hashed === null)
              return null;
            const option = this.options[hashed];
            if (option != void 0) {
              if (option.$div) {
                return option.$div;
              }
              if (create) {
                return this._render("option", option);
              }
            }
            return null;
          }
          /**
           * Returns the dom element of the next or previous dom element of the same type
           * Note: adjacent options may not be adjacent DOM elements (optgroups)
           *
           */
          getAdjacent(option, direction, type = "option") {
            var self2 = this, all;
            if (!option) {
              return null;
            }
            if (type == "item") {
              all = self2.controlChildren();
            } else {
              all = self2.dropdown_content.querySelectorAll("[data-selectable]");
            }
            for (let i = 0; i < all.length; i++) {
              if (all[i] != option) {
                continue;
              }
              if (direction > 0) {
                return all[i + 1];
              }
              return all[i - 1];
            }
            return null;
          }
          /**
           * Returns the dom element of the item
           * matching the given value.
           *
           */
          getItem(item) {
            if (typeof item == "object") {
              return item;
            }
            var value = hash_key(item);
            return value !== null ? this.control.querySelector(`[data-value="${addSlashes(value)}"]`) : null;
          }
          /**
           * "Selects" multiple items at once. Adds them to the list
           * at the current caret position.
           *
           */
          addItems(values, silent) {
            var self2 = this;
            var items = Array.isArray(values) ? values : [values];
            items = items.filter((x) => self2.items.indexOf(x) === -1);
            const last_item = items[items.length - 1];
            items.forEach((item) => {
              self2.isPending = item !== last_item;
              self2.addItem(item, silent);
            });
          }
          /**
           * "Selects" an item. Adds it to the list
           * at the current caret position.
           *
           */
          addItem(value, silent) {
            var events = silent ? [] : ["change", "dropdown_close"];
            debounce_events(this, events, () => {
              var item, wasFull;
              const self2 = this;
              const inputMode = self2.settings.mode;
              const hashed = hash_key(value);
              if (hashed && self2.items.indexOf(hashed) !== -1) {
                if (inputMode === "single") {
                  self2.close();
                }
                if (inputMode === "single" || !self2.settings.duplicates) {
                  return;
                }
              }
              if (hashed === null || !self2.options.hasOwnProperty(hashed))
                return;
              if (inputMode === "single")
                self2.clear(silent);
              if (inputMode === "multi" && self2.isFull())
                return;
              item = self2._render("item", self2.options[hashed]);
              if (self2.control.contains(item)) {
                item = item.cloneNode(true);
              }
              wasFull = self2.isFull();
              self2.items.splice(self2.caretPos, 0, hashed);
              self2.insertAtCaret(item);
              if (self2.isSetup) {
                if (!self2.isPending && self2.settings.hideSelected) {
                  let option = self2.getOption(hashed);
                  let next = self2.getAdjacent(option, 1);
                  if (next) {
                    self2.setActiveOption(next);
                  }
                }
                if (!self2.isPending && !self2.settings.closeAfterSelect) {
                  self2.refreshOptions(self2.isFocused && inputMode !== "single");
                }
                if (self2.settings.closeAfterSelect != false && self2.isFull()) {
                  self2.close();
                } else if (!self2.isPending) {
                  self2.positionDropdown();
                }
                self2.trigger("item_add", hashed, item);
                if (!self2.isPending) {
                  self2.updateOriginalInput({
                    silent
                  });
                }
              }
              if (!self2.isPending || !wasFull && self2.isFull()) {
                self2.inputState();
                self2.refreshState();
              }
            });
          }
          /**
           * Removes the selected item matching
           * the provided value.
           *
           */
          removeItem(item = null, silent) {
            const self2 = this;
            item = self2.getItem(item);
            if (!item)
              return;
            var i, idx;
            const value = item.dataset.value;
            i = nodeIndex(item);
            item.remove();
            if (item.classList.contains("active")) {
              idx = self2.activeItems.indexOf(item);
              self2.activeItems.splice(idx, 1);
              removeClasses(item, "active");
            }
            self2.items.splice(i, 1);
            self2.lastQuery = null;
            if (!self2.settings.persist && self2.userOptions.hasOwnProperty(value)) {
              self2.removeOption(value, silent);
            }
            if (i < self2.caretPos) {
              self2.setCaret(self2.caretPos - 1);
            }
            self2.updateOriginalInput({
              silent
            });
            self2.refreshState();
            self2.positionDropdown();
            self2.trigger("item_remove", value, item);
          }
          /**
           * Invokes the `create` method provided in the
           * TomSelect options that should provide the data
           * for the new item, given the user input.
           *
           * Once this completes, it will be added
           * to the item list.
           *
           */
          createItem(input = null, callback = () => {
          }) {
            if (arguments.length === 3) {
              callback = arguments[2];
            }
            if (typeof callback != "function") {
              callback = () => {
              };
            }
            var self2 = this;
            var caret = self2.caretPos;
            var output;
            input = input || self2.inputValue();
            if (!self2.canCreate(input)) {
              callback();
              return false;
            }
            self2.lock();
            var created = false;
            var create = (data) => {
              self2.unlock();
              if (!data || typeof data !== "object")
                return callback();
              var value = hash_key(data[self2.settings.valueField]);
              if (typeof value !== "string") {
                return callback();
              }
              self2.setTextboxValue();
              self2.addOption(data, true);
              self2.setCaret(caret);
              self2.addItem(value);
              callback(data);
              created = true;
            };
            if (typeof self2.settings.create === "function") {
              output = self2.settings.create.call(this, input, create);
            } else {
              output = {
                [self2.settings.labelField]: input,
                [self2.settings.valueField]: input
              };
            }
            if (!created) {
              create(output);
            }
            return true;
          }
          /**
           * Re-renders the selected item lists.
           */
          refreshItems() {
            var self2 = this;
            self2.lastQuery = null;
            if (self2.isSetup) {
              self2.addItems(self2.items);
            }
            self2.updateOriginalInput();
            self2.refreshState();
          }
          /**
           * Updates all state-dependent attributes
           * and CSS classes.
           */
          refreshState() {
            const self2 = this;
            self2.refreshValidityState();
            const isFull = self2.isFull();
            const isLocked = self2.isLocked;
            self2.wrapper.classList.toggle("rtl", self2.rtl);
            const wrap_classList = self2.wrapper.classList;
            wrap_classList.toggle("focus", self2.isFocused);
            wrap_classList.toggle("disabled", self2.isDisabled);
            wrap_classList.toggle("readonly", self2.isReadOnly);
            wrap_classList.toggle("required", self2.isRequired);
            wrap_classList.toggle("invalid", !self2.isValid);
            wrap_classList.toggle("locked", isLocked);
            wrap_classList.toggle("full", isFull);
            wrap_classList.toggle("input-active", self2.isFocused && !self2.isInputHidden);
            wrap_classList.toggle("dropdown-active", self2.isOpen);
            wrap_classList.toggle("has-options", isEmptyObject(self2.options));
            wrap_classList.toggle("has-items", self2.items.length > 0);
          }
          /**
           * Update the `required` attribute of both input and control input.
           *
           * The `required` property needs to be activated on the control input
           * for the error to be displayed at the right place. `required` also
           * needs to be temporarily deactivated on the input since the input is
           * hidden and can't show errors.
           */
          refreshValidityState() {
            var self2 = this;
            if (!self2.input.validity) {
              return;
            }
            self2.isValid = self2.input.validity.valid;
            self2.isInvalid = !self2.isValid;
          }
          /**
           * Determines whether or not more items can be added
           * to the control without exceeding the user-defined maximum.
           *
           * @returns {boolean}
           */
          isFull() {
            return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;
          }
          /**
           * Refreshes the original <select> or <input>
           * element to reflect the current state.
           *
           */
          updateOriginalInput(opts = {}) {
            const self2 = this;
            var option, label;
            const empty_option = self2.input.querySelector('option[value=""]');
            if (self2.is_select_tag) {
              let AddSelected = function(option_el, value, label2) {
                if (!option_el) {
                  option_el = getDom('<option value="' + escape_html(value) + '">' + escape_html(label2) + "</option>");
                }
                if (option_el != empty_option) {
                  self2.input.append(option_el);
                }
                selected.push(option_el);
                if (option_el != empty_option || has_selected > 0) {
                  option_el.selected = true;
                }
                return option_el;
              };
              const selected = [];
              const has_selected = self2.input.querySelectorAll("option:checked").length;
              self2.input.querySelectorAll("option:checked").forEach((option_el) => {
                option_el.selected = false;
              });
              if (self2.items.length == 0 && self2.settings.mode == "single") {
                AddSelected(empty_option, "", "");
              } else {
                self2.items.forEach((value) => {
                  option = self2.options[value];
                  label = option[self2.settings.labelField] || "";
                  if (selected.includes(option.$option)) {
                    const reuse_opt = self2.input.querySelector(`option[value="${addSlashes(value)}"]:not(:checked)`);
                    AddSelected(reuse_opt, value, label);
                  } else {
                    option.$option = AddSelected(option.$option, value, label);
                  }
                });
              }
            } else {
              self2.input.value = self2.getValue();
            }
            if (self2.isSetup) {
              if (!opts.silent) {
                self2.trigger("change", self2.getValue());
              }
            }
          }
          /**
           * Shows the autocomplete dropdown containing
           * the available options.
           */
          open() {
            var self2 = this;
            if (self2.isLocked || self2.isOpen || self2.settings.mode === "multi" && self2.isFull())
              return;
            self2.isOpen = true;
            setAttr(self2.focus_node, {
              "aria-expanded": "true"
            });
            self2.refreshState();
            applyCSS(self2.dropdown, {
              visibility: "hidden",
              display: "block"
            });
            self2.positionDropdown();
            applyCSS(self2.dropdown, {
              visibility: "visible",
              display: "block"
            });
            self2.focus();
            self2.trigger("dropdown_open", self2.dropdown);
          }
          /**
           * Closes the autocomplete dropdown menu.
           */
          close(setTextboxValue = true) {
            var self2 = this;
            var trigger = self2.isOpen;
            if (setTextboxValue) {
              self2.setTextboxValue();
              if (self2.settings.mode === "single" && self2.items.length) {
                self2.inputState();
              }
            }
            self2.isOpen = false;
            setAttr(self2.focus_node, {
              "aria-expanded": "false"
            });
            applyCSS(self2.dropdown, {
              display: "none"
            });
            if (self2.settings.hideSelected) {
              self2.clearActiveOption();
            }
            self2.refreshState();
            if (trigger)
              self2.trigger("dropdown_close", self2.dropdown);
          }
          /**
           * Calculates and applies the appropriate
           * position of the dropdown if dropdownParent = 'body'.
           * Otherwise, position is determined by css
           */
          positionDropdown() {
            if (this.settings.dropdownParent !== "body") {
              return;
            }
            var context = this.control;
            var rect = context.getBoundingClientRect();
            var top3 = context.offsetHeight + rect.top + window.scrollY;
            var left3 = rect.left + window.scrollX;
            applyCSS(this.dropdown, {
              width: rect.width + "px",
              top: top3 + "px",
              left: left3 + "px"
            });
          }
          /**
           * Resets / clears all selected items
           * from the control.
           *
           */
          clear(silent) {
            var self2 = this;
            if (!self2.items.length)
              return;
            var items = self2.controlChildren();
            iterate$1(items, (item) => {
              self2.removeItem(item, true);
            });
            self2.inputState();
            if (!silent)
              self2.updateOriginalInput();
            self2.trigger("clear");
          }
          /**
           * A helper method for inserting an element
           * at the current caret position.
           *
           */
          insertAtCaret(el) {
            const self2 = this;
            const caret = self2.caretPos;
            const target = self2.control;
            target.insertBefore(el, target.children[caret] || null);
            self2.setCaret(caret + 1);
          }
          /**
           * Removes the current selected item(s).
           *
           */
          deleteSelection(e) {
            var direction, selection, caret, tail;
            var self2 = this;
            direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
            selection = getSelection(self2.control_input);
            const rm_items = [];
            if (self2.activeItems.length) {
              tail = getTail(self2.activeItems, direction);
              caret = nodeIndex(tail);
              if (direction > 0) {
                caret++;
              }
              iterate$1(self2.activeItems, (item) => rm_items.push(item));
            } else if ((self2.isFocused || self2.settings.mode === "single") && self2.items.length) {
              const items = self2.controlChildren();
              let rm_item;
              if (direction < 0 && selection.start === 0 && selection.length === 0) {
                rm_item = items[self2.caretPos - 1];
              } else if (direction > 0 && selection.start === self2.inputValue().length) {
                rm_item = items[self2.caretPos];
              }
              if (rm_item !== void 0) {
                rm_items.push(rm_item);
              }
            }
            if (!self2.shouldDelete(rm_items, e)) {
              return false;
            }
            preventDefault2(e, true);
            if (typeof caret !== "undefined") {
              self2.setCaret(caret);
            }
            while (rm_items.length) {
              self2.removeItem(rm_items.pop());
            }
            self2.inputState();
            self2.positionDropdown();
            self2.refreshOptions(false);
            return true;
          }
          /**
           * Return true if the items should be deleted
           */
          shouldDelete(items, evt) {
            const values = items.map((item) => item.dataset.value);
            if (!values.length || typeof this.settings.onDelete === "function" && this.settings.onDelete(values, evt) === false) {
              return false;
            }
            return true;
          }
          /**
           * Selects the previous / next item (depending on the `direction` argument).
           *
           * > 0 - right
           * < 0 - left
           *
           */
          advanceSelection(direction, e) {
            var last_active, adjacent, self2 = this;
            if (self2.rtl)
              direction *= -1;
            if (self2.inputValue().length)
              return;
            if (isKeyDown(KEY_SHORTCUT, e) || isKeyDown("shiftKey", e)) {
              last_active = self2.getLastActive(direction);
              if (last_active) {
                if (!last_active.classList.contains("active")) {
                  adjacent = last_active;
                } else {
                  adjacent = self2.getAdjacent(last_active, direction, "item");
                }
              } else if (direction > 0) {
                adjacent = self2.control_input.nextElementSibling;
              } else {
                adjacent = self2.control_input.previousElementSibling;
              }
              if (adjacent) {
                if (adjacent.classList.contains("active")) {
                  self2.removeActiveItem(last_active);
                }
                self2.setActiveItemClass(adjacent);
              }
            } else {
              self2.moveCaret(direction);
            }
          }
          moveCaret(direction) {
          }
          /**
           * Get the last active item
           *
           */
          getLastActive(direction) {
            let last_active = this.control.querySelector(".last-active");
            if (last_active) {
              return last_active;
            }
            var result = this.control.querySelectorAll(".active");
            if (result) {
              return getTail(result, direction);
            }
          }
          /**
           * Moves the caret to the specified index.
           *
           * The input must be moved by leaving it in place and moving the
           * siblings, due to the fact that focus cannot be restored once lost
           * on mobile webkit devices
           *
           */
          setCaret(new_pos) {
            this.caretPos = this.items.length;
          }
          /**
           * Return list of item dom elements
           *
           */
          controlChildren() {
            return Array.from(this.control.querySelectorAll("[data-ts-item]"));
          }
          /**
           * Disables user input on the control. Used while
           * items are being asynchronously created.
           */
          lock() {
            this.setLocked(true);
          }
          /**
           * Re-enables user input on the control.
           */
          unlock() {
            this.setLocked(false);
          }
          /**
           * Disable or enable user input on the control
           */
          setLocked(lock = this.isReadOnly || this.isDisabled) {
            this.isLocked = lock;
            this.refreshState();
          }
          /**
           * Disables user input on the control completely.
           * While disabled, it cannot receive focus.
           */
          disable() {
            this.setDisabled(true);
            this.close();
          }
          /**
           * Enables the control so that it can respond
           * to focus and user input.
           */
          enable() {
            this.setDisabled(false);
          }
          setDisabled(disabled) {
            this.focus_node.tabIndex = disabled ? -1 : this.tabIndex;
            this.isDisabled = disabled;
            this.input.disabled = disabled;
            this.control_input.disabled = disabled;
            this.setLocked();
          }
          setReadOnly(isReadOnly) {
            this.isReadOnly = isReadOnly;
            this.input.readOnly = isReadOnly;
            this.control_input.readOnly = isReadOnly;
            this.setLocked();
          }
          /**
           * Completely destroys the control and
           * unbinds all event listeners so that it can
           * be garbage collected.
           */
          destroy() {
            var self2 = this;
            var revertSettings = self2.revertSettings;
            self2.trigger("destroy");
            self2.off();
            self2.wrapper.remove();
            self2.dropdown.remove();
            self2.input.innerHTML = revertSettings.innerHTML;
            self2.input.tabIndex = revertSettings.tabIndex;
            removeClasses(self2.input, "tomselected", "ts-hidden-accessible");
            self2._destroy();
            delete self2.input.tomselect;
          }
          /**
           * A helper method for rendering "item" and
           * "option" templates, given the data.
           *
           */
          render(templateName, data) {
            var id, html;
            const self2 = this;
            if (typeof this.settings.render[templateName] !== "function") {
              return null;
            }
            html = self2.settings.render[templateName].call(this, data, escape_html);
            if (!html) {
              return null;
            }
            html = getDom(html);
            if (templateName === "option" || templateName === "option_create") {
              if (data[self2.settings.disabledField]) {
                setAttr(html, {
                  "aria-disabled": "true"
                });
              } else {
                setAttr(html, {
                  "data-selectable": ""
                });
              }
            } else if (templateName === "optgroup") {
              id = data.group[self2.settings.optgroupValueField];
              setAttr(html, {
                "data-group": id
              });
              if (data.group[self2.settings.disabledField]) {
                setAttr(html, {
                  "data-disabled": ""
                });
              }
            }
            if (templateName === "option" || templateName === "item") {
              const value = get_hash(data[self2.settings.valueField]);
              setAttr(html, {
                "data-value": value
              });
              if (templateName === "item") {
                addClasses(html, self2.settings.itemClass);
                setAttr(html, {
                  "data-ts-item": ""
                });
              } else {
                addClasses(html, self2.settings.optionClass);
                setAttr(html, {
                  role: "option",
                  id: data.$id
                });
                data.$div = html;
                self2.options[value] = data;
              }
            }
            return html;
          }
          /**
           * Type guarded rendering
           *
           */
          _render(templateName, data) {
            const html = this.render(templateName, data);
            if (html == null) {
              throw "HTMLElement expected";
            }
            return html;
          }
          /**
           * Clears the render cache for a template. If
           * no template is given, clears all render
           * caches.
           *
           */
          clearCache() {
            iterate$1(this.options, (option) => {
              if (option.$div) {
                option.$div.remove();
                delete option.$div;
              }
            });
          }
          /**
           * Removes a value from item and option caches
           *
           */
          uncacheValue(value) {
            const option_el = this.getOption(value);
            if (option_el)
              option_el.remove();
          }
          /**
           * Determines whether or not to display the
           * create item prompt, given a user input.
           *
           */
          canCreate(input) {
            return this.settings.create && input.length > 0 && this.settings.createFilter.call(this, input);
          }
          /**
           * Wraps this.`method` so that `new_fn` can be invoked 'before', 'after', or 'instead' of the original method
           *
           * this.hook('instead','onKeyDown',function( arg1, arg2 ...){
           *
           * });
           */
          hook(when, method, new_fn) {
            var self2 = this;
            var orig_method = self2[method];
            self2[method] = function() {
              var result, result_new;
              if (when === "after") {
                result = orig_method.apply(self2, arguments);
              }
              result_new = new_fn.apply(self2, arguments);
              if (when === "instead") {
                return result_new;
              }
              if (when === "before") {
                result = orig_method.apply(self2, arguments);
              }
              return result;
            };
          }
        }
        function change_listener() {
          addEvent(this.input, "change", () => {
            this.sync();
          });
        }
        function checkbox_options(userOptions) {
          var self2 = this;
          var orig_onOptionSelect = self2.onOptionSelect;
          self2.settings.hideSelected = false;
          const cbOptions = Object.assign({
            // so that the user may add different ones as well
            className: "tomselect-checkbox",
            // the following default to the historic plugin's values
            checkedClassNames: void 0,
            uncheckedClassNames: void 0
          }, userOptions);
          var UpdateChecked = function UpdateChecked2(checkbox, toCheck) {
            if (toCheck) {
              checkbox.checked = true;
              if (cbOptions.uncheckedClassNames) {
                checkbox.classList.remove(...cbOptions.uncheckedClassNames);
              }
              if (cbOptions.checkedClassNames) {
                checkbox.classList.add(...cbOptions.checkedClassNames);
              }
            } else {
              checkbox.checked = false;
              if (cbOptions.checkedClassNames) {
                checkbox.classList.remove(...cbOptions.checkedClassNames);
              }
              if (cbOptions.uncheckedClassNames) {
                checkbox.classList.add(...cbOptions.uncheckedClassNames);
              }
            }
          };
          var UpdateCheckbox = function UpdateCheckbox2(option) {
            setTimeout(() => {
              var checkbox = option.querySelector("input." + cbOptions.className);
              if (checkbox instanceof HTMLInputElement) {
                UpdateChecked(checkbox, option.classList.contains("selected"));
              }
            }, 1);
          };
          self2.hook("after", "setupTemplates", () => {
            var orig_render_option = self2.settings.render.option;
            self2.settings.render.option = (data, escape_html2) => {
              var rendered = getDom(orig_render_option.call(self2, data, escape_html2));
              var checkbox = document.createElement("input");
              if (cbOptions.className) {
                checkbox.classList.add(cbOptions.className);
              }
              checkbox.addEventListener("click", function(evt) {
                preventDefault2(evt);
              });
              checkbox.type = "checkbox";
              const hashed = hash_key(data[self2.settings.valueField]);
              UpdateChecked(checkbox, !!(hashed && self2.items.indexOf(hashed) > -1));
              rendered.prepend(checkbox);
              return rendered;
            };
          });
          self2.on("item_remove", (value) => {
            var option = self2.getOption(value);
            if (option) {
              option.classList.remove("selected");
              UpdateCheckbox(option);
            }
          });
          self2.on("item_add", (value) => {
            var option = self2.getOption(value);
            if (option) {
              UpdateCheckbox(option);
            }
          });
          self2.hook("instead", "onOptionSelect", (evt, option) => {
            if (option.classList.contains("selected")) {
              option.classList.remove("selected");
              self2.removeItem(option.dataset.value);
              self2.refreshOptions();
              preventDefault2(evt, true);
              return;
            }
            orig_onOptionSelect.call(self2, evt, option);
            UpdateCheckbox(option);
          });
        }
        function clear_button(userOptions) {
          const self2 = this;
          const options = Object.assign({
            className: "clear-button",
            title: "Clear All",
            html: (data) => {
              return `<div class="${data.className}" title="${data.title}">&#10799;</div>`;
            }
          }, userOptions);
          self2.on("initialize", () => {
            var button = getDom(options.html(options));
            button.addEventListener("click", (evt) => {
              if (self2.isLocked)
                return;
              self2.clear();
              if (self2.settings.mode === "single" && self2.settings.allowEmptyOption) {
                self2.addItem("");
              }
              evt.preventDefault();
              evt.stopPropagation();
            });
            self2.control.appendChild(button);
          });
        }
        const insertAfter = (referenceNode, newNode) => {
          var _referenceNode$parent;
          (_referenceNode$parent = referenceNode.parentNode) == null || _referenceNode$parent.insertBefore(newNode, referenceNode.nextSibling);
        };
        const insertBefore = (referenceNode, newNode) => {
          var _referenceNode$parent2;
          (_referenceNode$parent2 = referenceNode.parentNode) == null || _referenceNode$parent2.insertBefore(newNode, referenceNode);
        };
        const isBefore = (referenceNode, newNode) => {
          do {
            var _newNode;
            newNode = (_newNode = newNode) == null ? void 0 : _newNode.previousElementSibling;
            if (referenceNode == newNode) {
              return true;
            }
          } while (newNode && newNode.previousElementSibling);
          return false;
        };
        function drag_drop() {
          var self2 = this;
          if (self2.settings.mode !== "multi")
            return;
          var orig_lock = self2.lock;
          var orig_unlock = self2.unlock;
          let sortable = true;
          let drag_item;
          self2.hook("after", "setupTemplates", () => {
            var orig_render_item = self2.settings.render.item;
            self2.settings.render.item = (data, escape) => {
              const item = getDom(orig_render_item.call(self2, data, escape));
              setAttr(item, {
                "draggable": "true"
              });
              const mousedown = (evt) => {
                if (!sortable)
                  preventDefault2(evt);
                evt.stopPropagation();
              };
              const dragStart = (evt) => {
                drag_item = item;
                setTimeout(() => {
                  item.classList.add("ts-dragging");
                }, 0);
              };
              const dragOver = (evt) => {
                evt.preventDefault();
                item.classList.add("ts-drag-over");
                moveitem(item, drag_item);
              };
              const dragLeave = () => {
                item.classList.remove("ts-drag-over");
              };
              const moveitem = (targetitem, dragitem) => {
                if (dragitem === void 0)
                  return;
                if (isBefore(dragitem, item)) {
                  insertAfter(targetitem, dragitem);
                } else {
                  insertBefore(targetitem, dragitem);
                }
              };
              const dragend = () => {
                var _drag_item;
                document.querySelectorAll(".ts-drag-over").forEach((el) => el.classList.remove("ts-drag-over"));
                (_drag_item = drag_item) == null || _drag_item.classList.remove("ts-dragging");
                drag_item = void 0;
                var values = [];
                self2.control.querySelectorAll(`[data-value]`).forEach((el) => {
                  if (el.dataset.value) {
                    let value = el.dataset.value;
                    if (value) {
                      values.push(value);
                    }
                  }
                });
                self2.setValue(values);
              };
              addEvent(item, "mousedown", mousedown);
              addEvent(item, "dragstart", dragStart);
              addEvent(item, "dragenter", dragOver);
              addEvent(item, "dragover", dragOver);
              addEvent(item, "dragleave", dragLeave);
              addEvent(item, "dragend", dragend);
              return item;
            };
          });
          self2.hook("instead", "lock", () => {
            sortable = false;
            return orig_lock.call(self2);
          });
          self2.hook("instead", "unlock", () => {
            sortable = true;
            return orig_unlock.call(self2);
          });
        }
        function dropdown_header(userOptions) {
          const self2 = this;
          const options = Object.assign({
            title: "Untitled",
            headerClass: "dropdown-header",
            titleRowClass: "dropdown-header-title",
            labelClass: "dropdown-header-label",
            closeClass: "dropdown-header-close",
            html: (data) => {
              return '<div class="' + data.headerClass + '"><div class="' + data.titleRowClass + '"><span class="' + data.labelClass + '">' + data.title + '</span><a class="' + data.closeClass + '">&times;</a></div></div>';
            }
          }, userOptions);
          self2.on("initialize", () => {
            var header = getDom(options.html(options));
            var close_link = header.querySelector("." + options.closeClass);
            if (close_link) {
              close_link.addEventListener("click", (evt) => {
                preventDefault2(evt, true);
                self2.close();
              });
            }
            self2.dropdown.insertBefore(header, self2.dropdown.firstChild);
          });
        }
        function caret_position() {
          var self2 = this;
          self2.hook("instead", "setCaret", (new_pos) => {
            if (self2.settings.mode === "single" || !self2.control.contains(self2.control_input)) {
              new_pos = self2.items.length;
            } else {
              new_pos = Math.max(0, Math.min(self2.items.length, new_pos));
              if (new_pos != self2.caretPos && !self2.isPending) {
                self2.controlChildren().forEach((child, j) => {
                  if (j < new_pos) {
                    self2.control_input.insertAdjacentElement("beforebegin", child);
                  } else {
                    self2.control.appendChild(child);
                  }
                });
              }
            }
            self2.caretPos = new_pos;
          });
          self2.hook("instead", "moveCaret", (direction) => {
            if (!self2.isFocused)
              return;
            const last_active = self2.getLastActive(direction);
            if (last_active) {
              const idx = nodeIndex(last_active);
              self2.setCaret(direction > 0 ? idx + 1 : idx);
              self2.setActiveItem();
              removeClasses(last_active, "last-active");
            } else {
              self2.setCaret(self2.caretPos + direction);
            }
          });
        }
        function dropdown_input() {
          const self2 = this;
          self2.settings.shouldOpen = true;
          self2.hook("before", "setup", () => {
            self2.focus_node = self2.control;
            addClasses(self2.control_input, "dropdown-input");
            const div = getDom('<div class="dropdown-input-wrap">');
            div.append(self2.control_input);
            self2.dropdown.insertBefore(div, self2.dropdown.firstChild);
            const placeholder = getDom('<input class="items-placeholder" tabindex="-1" />');
            placeholder.placeholder = self2.settings.placeholder || "";
            self2.control.append(placeholder);
          });
          self2.on("initialize", () => {
            self2.control_input.addEventListener("keydown", (evt) => {
              switch (evt.keyCode) {
                case KEY_ESC:
                  if (self2.isOpen) {
                    preventDefault2(evt, true);
                    self2.close();
                  }
                  self2.clearActiveItems();
                  return;
                case KEY_TAB:
                  self2.focus_node.tabIndex = -1;
                  break;
              }
              return self2.onKeyDown.call(self2, evt);
            });
            self2.on("blur", () => {
              self2.focus_node.tabIndex = self2.isDisabled ? -1 : self2.tabIndex;
            });
            self2.on("dropdown_open", () => {
              self2.control_input.focus();
            });
            const orig_onBlur = self2.onBlur;
            self2.hook("instead", "onBlur", (evt) => {
              if (evt && evt.relatedTarget == self2.control_input)
                return;
              return orig_onBlur.call(self2);
            });
            addEvent(self2.control_input, "blur", () => self2.onBlur());
            self2.hook("before", "close", () => {
              if (!self2.isOpen)
                return;
              self2.focus_node.focus({
                preventScroll: true
              });
            });
          });
        }
        function input_autogrow() {
          var self2 = this;
          self2.on("initialize", () => {
            var test_input = document.createElement("span");
            var control = self2.control_input;
            test_input.style.cssText = "position:absolute; top:-99999px; left:-99999px; width:auto; padding:0; white-space:pre; ";
            self2.wrapper.appendChild(test_input);
            var transfer_styles = ["letterSpacing", "fontSize", "fontFamily", "fontWeight", "textTransform"];
            for (const style_name of transfer_styles) {
              test_input.style[style_name] = control.style[style_name];
            }
            var resize = () => {
              test_input.textContent = control.value;
              control.style.width = test_input.clientWidth + "px";
            };
            resize();
            self2.on("update item_add item_remove", resize);
            addEvent(control, "input", resize);
            addEvent(control, "keyup", resize);
            addEvent(control, "blur", resize);
            addEvent(control, "update", resize);
          });
        }
        function no_backspace_delete() {
          var self2 = this;
          var orig_deleteSelection = self2.deleteSelection;
          this.hook("instead", "deleteSelection", (evt) => {
            if (self2.activeItems.length) {
              return orig_deleteSelection.call(self2, evt);
            }
            return false;
          });
        }
        function no_active_items() {
          this.hook("instead", "setActiveItem", () => {
          });
          this.hook("instead", "selectAll", () => {
          });
        }
        function optgroup_columns() {
          var self2 = this;
          var orig_keydown = self2.onKeyDown;
          self2.hook("instead", "onKeyDown", (evt) => {
            var index, option, options, optgroup;
            if (!self2.isOpen || !(evt.keyCode === KEY_LEFT || evt.keyCode === KEY_RIGHT)) {
              return orig_keydown.call(self2, evt);
            }
            self2.ignoreHover = true;
            optgroup = parentMatch(self2.activeOption, "[data-group]");
            index = nodeIndex(self2.activeOption, "[data-selectable]");
            if (!optgroup) {
              return;
            }
            if (evt.keyCode === KEY_LEFT) {
              optgroup = optgroup.previousSibling;
            } else {
              optgroup = optgroup.nextSibling;
            }
            if (!optgroup) {
              return;
            }
            options = optgroup.querySelectorAll("[data-selectable]");
            option = options[Math.min(options.length - 1, index)];
            if (option) {
              self2.setActiveOption(option);
            }
          });
        }
        function remove_button(userOptions) {
          const options = Object.assign({
            label: "&times;",
            title: "Remove",
            className: "remove",
            append: true
          }, userOptions);
          var self2 = this;
          if (!options.append) {
            return;
          }
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + "</a>";
          self2.hook("after", "setupTemplates", () => {
            var orig_render_item = self2.settings.render.item;
            self2.settings.render.item = (data, escape) => {
              var item = getDom(orig_render_item.call(self2, data, escape));
              var close_button = getDom(html);
              item.appendChild(close_button);
              addEvent(close_button, "mousedown", (evt) => {
                preventDefault2(evt, true);
              });
              addEvent(close_button, "click", (evt) => {
                if (self2.isLocked)
                  return;
                preventDefault2(evt, true);
                if (self2.isLocked)
                  return;
                if (!self2.shouldDelete([item], evt))
                  return;
                self2.removeItem(item);
                self2.refreshOptions(false);
                self2.inputState();
              });
              return item;
            };
          });
        }
        function restore_on_backspace(userOptions) {
          const self2 = this;
          const options = Object.assign({
            text: (option) => {
              return option[self2.settings.labelField];
            }
          }, userOptions);
          self2.on("item_remove", function(value) {
            if (!self2.isFocused) {
              return;
            }
            if (self2.control_input.value.trim() === "") {
              var option = self2.options[value];
              if (option) {
                self2.setTextboxValue(options.text.call(self2, option));
              }
            }
          });
        }
        function virtual_scroll() {
          const self2 = this;
          const orig_canLoad = self2.canLoad;
          const orig_clearActiveOption = self2.clearActiveOption;
          const orig_loadCallback = self2.loadCallback;
          var pagination = {};
          var dropdown_content;
          var loading_more = false;
          var load_more_opt;
          var default_values = [];
          if (!self2.settings.shouldLoadMore) {
            self2.settings.shouldLoadMore = () => {
              const scroll_percent = dropdown_content.clientHeight / (dropdown_content.scrollHeight - dropdown_content.scrollTop);
              if (scroll_percent > 0.9) {
                return true;
              }
              if (self2.activeOption) {
                var selectable = self2.selectable();
                var index = Array.from(selectable).indexOf(self2.activeOption);
                if (index >= selectable.length - 2) {
                  return true;
                }
              }
              return false;
            };
          }
          if (!self2.settings.firstUrl) {
            throw "virtual_scroll plugin requires a firstUrl() method";
          }
          self2.settings.sortField = [{
            field: "$order"
          }, {
            field: "$score"
          }];
          const canLoadMore = (query) => {
            if (typeof self2.settings.maxOptions === "number" && dropdown_content.children.length >= self2.settings.maxOptions) {
              return false;
            }
            if (query in pagination && pagination[query]) {
              return true;
            }
            return false;
          };
          const clearFilter = (option, value) => {
            if (self2.items.indexOf(value) >= 0 || default_values.indexOf(value) >= 0) {
              return true;
            }
            return false;
          };
          self2.setNextUrl = (value, next_url) => {
            pagination[value] = next_url;
          };
          self2.getUrl = (query) => {
            if (query in pagination) {
              const next_url = pagination[query];
              pagination[query] = false;
              return next_url;
            }
            self2.clearPagination();
            return self2.settings.firstUrl.call(self2, query);
          };
          self2.clearPagination = () => {
            pagination = {};
          };
          self2.hook("instead", "clearActiveOption", () => {
            if (loading_more) {
              return;
            }
            return orig_clearActiveOption.call(self2);
          });
          self2.hook("instead", "canLoad", (query) => {
            if (!(query in pagination)) {
              return orig_canLoad.call(self2, query);
            }
            return canLoadMore(query);
          });
          self2.hook("instead", "loadCallback", (options, optgroups) => {
            if (!loading_more) {
              self2.clearOptions(clearFilter);
            } else if (load_more_opt) {
              const first_option = options[0];
              if (first_option !== void 0) {
                load_more_opt.dataset.value = first_option[self2.settings.valueField];
              }
            }
            orig_loadCallback.call(self2, options, optgroups);
            loading_more = false;
          });
          self2.hook("after", "refreshOptions", () => {
            const query = self2.lastValue;
            var option;
            if (canLoadMore(query)) {
              option = self2.render("loading_more", {
                query
              });
              if (option) {
                option.setAttribute("data-selectable", "");
                load_more_opt = option;
              }
            } else if (query in pagination && !dropdown_content.querySelector(".no-results")) {
              option = self2.render("no_more_results", {
                query
              });
            }
            if (option) {
              addClasses(option, self2.settings.optionClass);
              dropdown_content.append(option);
            }
          });
          self2.on("initialize", () => {
            default_values = Object.keys(self2.options);
            dropdown_content = self2.dropdown_content;
            self2.settings.render = Object.assign({}, {
              loading_more: () => {
                return `<div class="loading-more-results">Loading more results ... </div>`;
              },
              no_more_results: () => {
                return `<div class="no-more-results">No more results</div>`;
              }
            }, self2.settings.render);
            dropdown_content.addEventListener("scroll", () => {
              if (!self2.settings.shouldLoadMore.call(self2)) {
                return;
              }
              if (!canLoadMore(self2.lastValue)) {
                return;
              }
              if (loading_more)
                return;
              loading_more = true;
              self2.load.call(self2, self2.lastValue);
            });
          });
        }
        TomSelect3.define("change_listener", change_listener);
        TomSelect3.define("checkbox_options", checkbox_options);
        TomSelect3.define("clear_button", clear_button);
        TomSelect3.define("drag_drop", drag_drop);
        TomSelect3.define("dropdown_header", dropdown_header);
        TomSelect3.define("caret_position", caret_position);
        TomSelect3.define("dropdown_input", dropdown_input);
        TomSelect3.define("input_autogrow", input_autogrow);
        TomSelect3.define("no_backspace_delete", no_backspace_delete);
        TomSelect3.define("no_active_items", no_active_items);
        TomSelect3.define("optgroup_columns", optgroup_columns);
        TomSelect3.define("remove_button", remove_button);
        TomSelect3.define("restore_on_backspace", restore_on_backspace);
        TomSelect3.define("virtual_scroll", virtual_scroll);
        return TomSelect3;
      });
    }
  });

  // ../../node_modules/gridstack/dist/gridstack.js
  var require_gridstack = __commonJS({
    "../../node_modules/gridstack/dist/gridstack.js"(exports) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["jquery", "exports"], factory);
        } else if (typeof exports !== "undefined") {
          var jQueryModule;
          try {
            jQueryModule = require_jquery();
          } catch (e) {
          }
          factory(jQueryModule || window.jQuery, exports);
        } else {
          factory(window.jQuery, window);
        }
      })(function($2, scope) {
        var obsolete = function(f, oldName, newName, rev) {
          var wrapper = function() {
            console.warn("gridstack.js: Function `" + oldName + "` is deprecated in " + rev + " and has been replaced with `" + newName + "`. It will be **completely** removed in v1.0");
            return f.apply(this, arguments);
          };
          wrapper.prototype = f.prototype;
          return wrapper;
        };
        var obsoleteOpts = function(opts, oldName, newName, rev) {
          if (opts[oldName] !== void 0) {
            opts[newName] = opts[oldName];
            console.warn("gridstack.js: Option `" + oldName + "` is deprecated in " + rev + " and has been replaced with `" + newName + "`. It will be **completely** removed in v1.0");
          }
        };
        var obsoleteOptsDel = function(opts, oldName, rev, info) {
          if (opts[oldName] !== void 0) {
            console.warn("gridstack.js: Option `" + oldName + "` is deprecated in " + rev + info);
          }
        };
        var obsoleteAttr = function(el, oldName, newName, rev) {
          var oldAttr = el.attr(oldName);
          if (oldAttr !== void 0) {
            el.attr(newName, oldAttr);
            console.warn("gridstack.js: attribute `" + oldName + "`=" + oldAttr + " is deprecated on this object in " + rev + " and has been replaced with `" + newName + "`. It will be **completely** removed in v1.0");
          }
        };
        var Utils = {
          isIntercepted: function(a, b) {
            return !(a.x + a.width <= b.x || b.x + b.width <= a.x || a.y + a.height <= b.y || b.y + b.height <= a.y);
          },
          sort: function(nodes, dir, column) {
            if (!column) {
              var widths = nodes.map(function(node) {
                return node.x + node.width;
              });
              column = Math.max.apply(Math, widths);
            }
            if (dir === -1)
              return Utils.sortBy(nodes, function(n) {
                return -(n.x + n.y * column);
              });
            else
              return Utils.sortBy(nodes, function(n) {
                return n.x + n.y * column;
              });
          },
          createStylesheet: function(id, parent) {
            var style = document.createElement("style");
            style.setAttribute("type", "text/css");
            style.setAttribute("data-gs-style-id", id);
            if (style.styleSheet) {
              style.styleSheet.cssText = "";
            } else {
              style.appendChild(document.createTextNode(""));
            }
            if (!parent) {
              parent = document.getElementsByTagName("head")[0];
            }
            parent.insertBefore(style, parent.firstChild);
            return style.sheet;
          },
          removeStylesheet: function(id) {
            $2("STYLE[data-gs-style-id=" + id + "]").remove();
          },
          insertCSSRule: function(sheet, selector, rules, index) {
            if (typeof sheet.insertRule === "function") {
              sheet.insertRule(selector + "{" + rules + "}", index);
            } else if (typeof sheet.addRule === "function") {
              sheet.addRule(selector, rules, index);
            }
          },
          toBool: function(v) {
            if (typeof v === "boolean") {
              return v;
            }
            if (typeof v === "string") {
              v = v.toLowerCase();
              return !(v === "" || v === "no" || v === "false" || v === "0");
            }
            return Boolean(v);
          },
          _collisionNodeCheck: function(n) {
            return n !== this.node && Utils.isIntercepted(n, this.nn);
          },
          _didCollide: function(bn) {
            return Utils.isIntercepted({ x: this.n.x, y: this.newY, width: this.n.width, height: this.n.height }, bn);
          },
          _isAddNodeIntercepted: function(n) {
            return Utils.isIntercepted({ x: this.x, y: this.y, width: this.node.width, height: this.node.height }, n);
          },
          parseHeight: function(val) {
            var height = val;
            var heightUnit = "px";
            if (height && typeof height === "string") {
              var match = height.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);
              if (!match) {
                throw new Error("Invalid height");
              }
              heightUnit = match[2] || "px";
              height = parseFloat(match[1]);
            }
            return { height, unit: heightUnit };
          },
          without: function(array, item) {
            var index = array.indexOf(item);
            if (index !== -1) {
              array = array.slice(0);
              array.splice(index, 1);
            }
            return array;
          },
          sortBy: function(array, getter) {
            return array.slice(0).sort(function(left3, right3) {
              var valueLeft = getter(left3);
              var valueRight = getter(right3);
              if (valueRight === valueLeft) {
                return 0;
              }
              return valueLeft > valueRight ? 1 : -1;
            });
          },
          defaults: function(target) {
            var sources = Array.prototype.slice.call(arguments, 1);
            sources.forEach(function(source) {
              for (var prop in source) {
                if (source.hasOwnProperty(prop) && (!target.hasOwnProperty(prop) || target[prop] === void 0)) {
                  target[prop] = source[prop];
                }
              }
            });
            return target;
          },
          clone: function(target) {
            return $2.extend({}, target);
          },
          throttle: function(callback, delay) {
            var isWaiting = false;
            return function() {
              if (!isWaiting) {
                callback.apply(this, arguments);
                isWaiting = true;
                setTimeout(function() {
                  isWaiting = false;
                }, delay);
              }
            };
          },
          removePositioningStyles: function(el) {
            var style = el[0].style;
            if (style.position) {
              style.removeProperty("position");
            }
            if (style.left) {
              style.removeProperty("left");
            }
            if (style.top) {
              style.removeProperty("top");
            }
            if (style.width) {
              style.removeProperty("width");
            }
            if (style.height) {
              style.removeProperty("height");
            }
          },
          getScrollParent: function(el) {
            var returnEl;
            if (el === null) {
              returnEl = null;
            } else if (el.scrollHeight > el.clientHeight) {
              returnEl = el;
            } else {
              returnEl = Utils.getScrollParent(el.parentNode);
            }
            return returnEl;
          },
          updateScrollPosition: function(el, ui, distance) {
            var rect = el.getBoundingClientRect();
            var innerHeightOrClientHeight = window.innerHeight || document.documentElement.clientHeight;
            if (rect.top < 0 || rect.bottom > innerHeightOrClientHeight) {
              var offsetDiffDown = rect.bottom - innerHeightOrClientHeight;
              var offsetDiffUp = rect.top;
              var scrollEl = Utils.getScrollParent(el);
              if (scrollEl !== null) {
                var prevScroll = scrollEl.scrollTop;
                if (rect.top < 0 && distance < 0) {
                  if (el.offsetHeight > innerHeightOrClientHeight) {
                    scrollEl.scrollTop += distance;
                  } else {
                    scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;
                  }
                } else if (distance > 0) {
                  if (el.offsetHeight > innerHeightOrClientHeight) {
                    scrollEl.scrollTop += distance;
                  } else {
                    scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;
                  }
                }
                ui.position.top += scrollEl.scrollTop - prevScroll;
              }
            }
          }
        };
        function GridStackDragDropPlugin(grid) {
          this.grid = grid;
        }
        GridStackDragDropPlugin.registeredPlugins = [];
        GridStackDragDropPlugin.registerPlugin = function(pluginClass) {
          GridStackDragDropPlugin.registeredPlugins.push(pluginClass);
        };
        GridStackDragDropPlugin.prototype.resizable = function(el, opts) {
          return this;
        };
        GridStackDragDropPlugin.prototype.draggable = function(el, opts) {
          return this;
        };
        GridStackDragDropPlugin.prototype.droppable = function(el, opts) {
          return this;
        };
        GridStackDragDropPlugin.prototype.isDroppable = function(el) {
          return false;
        };
        GridStackDragDropPlugin.prototype.on = function(el, eventName, callback) {
          return this;
        };
        var idSeq = 0;
        var GridStackEngine = function(column, onchange, float, maxRow, items) {
          this.column = column || 12;
          this.float = float || false;
          this.maxRow = maxRow || 0;
          this.nodes = items || [];
          this.onchange = onchange || function() {
          };
          this._addedNodes = [];
          this._removedNodes = [];
          this._batchMode = false;
        };
        GridStackEngine.prototype.batchUpdate = function() {
          if (this._batchMode)
            return;
          this._batchMode = true;
          this._prevFloat = this.float;
          this.float = true;
        };
        GridStackEngine.prototype.commit = function() {
          if (!this._batchMode)
            return;
          this._batchMode = false;
          this.float = this._prevFloat;
          delete this._prevFloat;
          this._packNodes();
          this._notify();
        };
        GridStackEngine.prototype.getNodeDataByDOMEl = function(el) {
          return this.nodes.find(function(n) {
            return el.get(0) === n.el.get(0);
          });
        };
        GridStackEngine.prototype._fixCollisions = function(node) {
          var self2 = this;
          this._sortNodes(-1);
          var nn = node;
          var hasLocked = Boolean(this.nodes.find(function(n) {
            return n.locked;
          }));
          if (!this.float && !hasLocked) {
            nn = { x: 0, y: node.y, width: this.column, height: node.height };
          }
          while (true) {
            var collisionNode = this.nodes.find(Utils._collisionNodeCheck, { node, nn });
            if (!collisionNode) {
              return;
            }
            this.moveNode(
              collisionNode,
              collisionNode.x,
              node.y + node.height,
              collisionNode.width,
              collisionNode.height,
              true
            );
          }
        };
        GridStackEngine.prototype.isAreaEmpty = function(x, y, width, height) {
          var nn = { x: x || 0, y: y || 0, width: width || 1, height: height || 1 };
          var collisionNode = this.nodes.find(function(n) {
            return Utils.isIntercepted(n, nn);
          });
          return !collisionNode;
        };
        GridStackEngine.prototype._sortNodes = function(dir) {
          this.nodes = Utils.sort(this.nodes, dir, this.column);
        };
        GridStackEngine.prototype._packNodes = function() {
          this._sortNodes();
          if (this.float) {
            this.nodes.forEach(function(n, i) {
              if (n._updating || n._packY === void 0 || n.y === n._packY) {
                return;
              }
              var newY = n.y;
              while (newY >= n._packY) {
                var collisionNode = this.nodes.slice(0, i).find(Utils._didCollide, { n, newY });
                if (!collisionNode) {
                  n._dirty = true;
                  n.y = newY;
                }
                --newY;
              }
            }, this);
          } else {
            this.nodes.forEach(function(n, i) {
              if (n.locked) {
                return;
              }
              while (n.y > 0) {
                var newY = n.y - 1;
                var canBeMoved = i === 0;
                if (i > 0) {
                  var collisionNode = this.nodes.slice(0, i).find(Utils._didCollide, { n, newY });
                  canBeMoved = collisionNode === void 0;
                }
                if (!canBeMoved) {
                  break;
                }
                n._dirty = n.y !== newY;
                n.y = newY;
              }
            }, this);
          }
        };
        GridStackEngine.prototype._prepareNode = function(node, resizing) {
          node = node || {};
          if (node.x === void 0 || node.y === void 0 || node.x === null || node.y === null) {
            node.autoPosition = true;
          }
          var defaults = { width: 1, height: 1, x: 0, y: 0 };
          node = Utils.defaults(node, defaults);
          node.x = parseInt(node.x);
          node.y = parseInt(node.y);
          node.width = parseInt(node.width);
          node.height = parseInt(node.height);
          node.autoPosition = node.autoPosition || false;
          node.noResize = node.noResize || false;
          node.noMove = node.noMove || false;
          if (Number.isNaN(node.x)) {
            node.x = defaults.x;
            node.autoPosition = true;
          }
          if (Number.isNaN(node.y)) {
            node.y = defaults.y;
            node.autoPosition = true;
          }
          if (Number.isNaN(node.width)) {
            node.width = defaults.width;
          }
          if (Number.isNaN(node.height)) {
            node.height = defaults.height;
          }
          if (node.width > this.column) {
            node.width = this.column;
          } else if (node.width < 1) {
            node.width = 1;
          }
          if (node.height < 1) {
            node.height = 1;
          }
          if (node.x < 0) {
            node.x = 0;
          }
          if (node.x + node.width > this.column) {
            if (resizing) {
              node.width = this.column - node.x;
            } else {
              node.x = this.column - node.width;
            }
          }
          if (node.y < 0) {
            node.y = 0;
          }
          return node;
        };
        GridStackEngine.prototype._notify = function() {
          if (this._batchMode) {
            return;
          }
          var args = Array.prototype.slice.call(arguments, 0);
          args[0] = args[0] === void 0 ? [] : Array.isArray(args[0]) ? args[0] : [args[0]];
          args[1] = args[1] === void 0 ? true : args[1];
          var dirtyNodes = args[0].concat(this.getDirtyNodes());
          this.onchange(dirtyNodes, args[1]);
        };
        GridStackEngine.prototype.cleanNodes = function() {
          if (this._batchMode) {
            return;
          }
          this.nodes.forEach(function(n) {
            delete n._dirty;
          });
        };
        GridStackEngine.prototype.getDirtyNodes = function(verify) {
          if (verify) {
            var dirtNodes = [];
            this.nodes.forEach(function(n) {
              if (n._dirty) {
                if (n.y === n._origY && n.x === n._origX && n.width === n._origW && n.height === n._origH) {
                  delete n._dirty;
                } else {
                  dirtNodes.push(n);
                }
              }
            });
            return dirtNodes;
          }
          return this.nodes.filter(function(n) {
            return n._dirty;
          });
        };
        GridStackEngine.prototype.addNode = function(node, triggerAddEvent) {
          node = this._prepareNode(node);
          if (node.maxWidth !== void 0) {
            node.width = Math.min(node.width, node.maxWidth);
          }
          if (node.maxHeight !== void 0) {
            node.height = Math.min(node.height, node.maxHeight);
          }
          if (node.minWidth !== void 0) {
            node.width = Math.max(node.width, node.minWidth);
          }
          if (node.minHeight !== void 0) {
            node.height = Math.max(node.height, node.minHeight);
          }
          node._id = node._id || ++idSeq;
          if (node.autoPosition) {
            this._sortNodes();
            for (var i = 0; ; ++i) {
              var x = i % this.column;
              var y = Math.floor(i / this.column);
              if (x + node.width > this.column) {
                continue;
              }
              if (!this.nodes.find(Utils._isAddNodeIntercepted, { x, y, node })) {
                node.x = x;
                node.y = y;
                delete node.autoPosition;
                break;
              }
            }
          }
          this.nodes.push(node);
          if (triggerAddEvent) {
            this._addedNodes.push(node);
          }
          this._fixCollisions(node);
          this._packNodes();
          this._notify();
          return node;
        };
        GridStackEngine.prototype.removeNode = function(node, detachNode) {
          detachNode = detachNode === void 0 ? true : detachNode;
          this._removedNodes.push(node);
          node._id = null;
          this.nodes = Utils.without(this.nodes, node);
          this._packNodes();
          this._notify(node, detachNode);
        };
        GridStackEngine.prototype.removeAll = function(detachNode) {
          delete this._layouts;
          if (this.nodes.length === 0) {
            return;
          }
          detachNode = detachNode === void 0 ? true : detachNode;
          this.nodes.forEach(function(n) {
            n._id = null;
          });
          this._removedNodes = this.nodes;
          this.nodes = [];
          this._notify(this._removedNodes, detachNode);
        };
        GridStackEngine.prototype.canMoveNode = function(node, x, y, width, height) {
          if (!this.isNodeChangedPosition(node, x, y, width, height)) {
            return false;
          }
          var hasLocked = Boolean(this.nodes.find(function(n) {
            return n.locked;
          }));
          if (!this.maxRow && !hasLocked) {
            return true;
          }
          var clonedNode;
          var clone = new GridStackEngine(
            this.column,
            null,
            this.float,
            0,
            this.nodes.map(function(n) {
              if (n === node) {
                clonedNode = $2.extend({}, n);
                return clonedNode;
              }
              return $2.extend({}, n);
            })
          );
          if (!clonedNode) {
            return true;
          }
          clone.moveNode(clonedNode, x, y, width, height);
          var res = true;
          if (hasLocked) {
            res &= !Boolean(clone.nodes.find(function(n) {
              return n !== clonedNode && Boolean(n.locked) && Boolean(n._dirty);
            }));
          }
          if (this.maxRow) {
            res &= clone.getGridHeight() <= this.maxRow;
          }
          return res;
        };
        GridStackEngine.prototype.canBePlacedWithRespectToHeight = function(node) {
          if (!this.maxRow) {
            return true;
          }
          var clone = new GridStackEngine(
            this.column,
            null,
            this.float,
            0,
            this.nodes.map(function(n) {
              return $2.extend({}, n);
            })
          );
          clone.addNode(node);
          return clone.getGridHeight() <= this.maxRow;
        };
        GridStackEngine.prototype.isNodeChangedPosition = function(node, x, y, width, height) {
          if (typeof x !== "number") {
            x = node.x;
          }
          if (typeof y !== "number") {
            y = node.y;
          }
          if (typeof width !== "number") {
            width = node.width;
          }
          if (typeof height !== "number") {
            height = node.height;
          }
          if (node.maxWidth !== void 0) {
            width = Math.min(width, node.maxWidth);
          }
          if (node.maxHeight !== void 0) {
            height = Math.min(height, node.maxHeight);
          }
          if (node.minWidth !== void 0) {
            width = Math.max(width, node.minWidth);
          }
          if (node.minHeight !== void 0) {
            height = Math.max(height, node.minHeight);
          }
          if (node.x === x && node.y === y && node.width === width && node.height === height) {
            return false;
          }
          return true;
        };
        GridStackEngine.prototype.moveNode = function(node, x, y, width, height, noPack) {
          if (typeof x !== "number") {
            x = node.x;
          }
          if (typeof y !== "number") {
            y = node.y;
          }
          if (typeof width !== "number") {
            width = node.width;
          }
          if (typeof height !== "number") {
            height = node.height;
          }
          if (node.maxWidth !== void 0) {
            width = Math.min(width, node.maxWidth);
          }
          if (node.maxHeight !== void 0) {
            height = Math.min(height, node.maxHeight);
          }
          if (node.minWidth !== void 0) {
            width = Math.max(width, node.minWidth);
          }
          if (node.minHeight !== void 0) {
            height = Math.max(height, node.minHeight);
          }
          if (node.x === x && node.y === y && node.width === width && node.height === height) {
            return node;
          }
          var resizing = node.width !== width;
          node._dirty = true;
          node.x = x;
          node.y = y;
          node.width = width;
          node.height = height;
          node.lastTriedX = x;
          node.lastTriedY = y;
          node.lastTriedWidth = width;
          node.lastTriedHeight = height;
          node = this._prepareNode(node, resizing);
          this._fixCollisions(node);
          if (!noPack) {
            this._packNodes();
            this._notify();
          }
          return node;
        };
        GridStackEngine.prototype.getGridHeight = function() {
          return this.nodes.reduce(function(memo, n) {
            return Math.max(memo, n.y + n.height);
          }, 0);
        };
        GridStackEngine.prototype.beginUpdate = function(node) {
          if (node._updating)
            return;
          node._updating = true;
          this.nodes.forEach(function(n) {
            n._packY = n.y;
          });
        };
        GridStackEngine.prototype.endUpdate = function() {
          var n = this.nodes.find(function(n2) {
            return n2._updating;
          });
          if (n) {
            n._updating = false;
            this.nodes.forEach(function(n2) {
              delete n2._packY;
            });
          }
        };
        var GridStack = function(el, opts) {
          var self2 = this;
          var oneColumnMode, _prevColumn, isAutoCellHeight;
          opts = opts || {};
          this.container = $2(el);
          obsoleteOpts(opts, "width", "column", "v0.5.3");
          obsoleteOpts(opts, "height", "maxRow", "v0.5.3");
          obsoleteOptsDel(opts, "oneColumnModeClass", "v0.6.3", ". Use class `.grid-stack-1` instead");
          obsoleteAttr(this.container, "data-gs-width", "data-gs-column", "v0.5.3");
          obsoleteAttr(this.container, "data-gs-height", "data-gs-max-row", "v0.5.3");
          opts.itemClass = opts.itemClass || "grid-stack-item";
          var isNested = this.container.closest("." + opts.itemClass).length > 0;
          this.opts = Utils.defaults(opts, {
            column: parseInt(this.container.attr("data-gs-column")) || 12,
            maxRow: parseInt(this.container.attr("data-gs-max-row")) || 0,
            itemClass: "grid-stack-item",
            placeholderClass: "grid-stack-placeholder",
            placeholderText: "",
            handle: ".grid-stack-item-content",
            handleClass: null,
            cellHeight: 60,
            verticalMargin: 20,
            auto: true,
            minWidth: 768,
            float: false,
            staticGrid: false,
            _class: "grid-stack-instance-" + (Math.random() * 1e4).toFixed(0),
            animate: Boolean(this.container.attr("data-gs-animate")) || false,
            alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,
            resizable: Utils.defaults(opts.resizable || {}, {
              autoHide: !(opts.alwaysShowResizeHandle || false),
              handles: "se"
            }),
            draggable: Utils.defaults(opts.draggable || {}, {
              handle: (opts.handleClass ? "." + opts.handleClass : opts.handle ? opts.handle : "") || ".grid-stack-item-content",
              scroll: false,
              appendTo: "body"
            }),
            disableDrag: opts.disableDrag || false,
            disableResize: opts.disableResize || false,
            rtl: "auto",
            removable: false,
            removableOptions: Utils.defaults(opts.removableOptions || {}, {
              accept: "." + opts.itemClass
            }),
            removeTimeout: 2e3,
            verticalMarginUnit: "px",
            cellHeightUnit: "px",
            disableOneColumnMode: opts.disableOneColumnMode || false,
            oneColumnModeDomSort: opts.oneColumnModeDomSort,
            ddPlugin: null
          });
          if (this.opts.ddPlugin === false) {
            this.opts.ddPlugin = GridStackDragDropPlugin;
          } else if (this.opts.ddPlugin === null) {
            this.opts.ddPlugin = GridStackDragDropPlugin.registeredPlugins[0] || GridStackDragDropPlugin;
          }
          this.dd = new this.opts.ddPlugin(this);
          if (this.opts.rtl === "auto") {
            this.opts.rtl = this.container.css("direction") === "rtl";
          }
          if (this.opts.rtl) {
            this.container.addClass("grid-stack-rtl");
          }
          this.opts.isNested = isNested;
          isAutoCellHeight = this.opts.cellHeight === "auto";
          if (isAutoCellHeight) {
            self2.cellHeight(self2.cellWidth(), true);
          } else {
            this.cellHeight(this.opts.cellHeight, true);
          }
          this.verticalMargin(this.opts.verticalMargin, true);
          this.container.addClass(this.opts._class);
          this._setStaticClass();
          if (isNested) {
            this.container.addClass("grid-stack-nested");
          }
          this._initStyles();
          this.grid = new GridStackEngine(this.opts.column, function(nodes, detachNode) {
            detachNode = detachNode === void 0 ? true : detachNode;
            var maxHeight = 0;
            this.nodes.forEach(function(n) {
              maxHeight = Math.max(maxHeight, n.y + n.height);
            });
            nodes.forEach(function(n) {
              if (detachNode && n._id === null) {
                if (n.el) {
                  n.el.remove();
                }
              } else {
                n.el.attr("data-gs-x", n.x).attr("data-gs-y", n.y).attr("data-gs-width", n.width).attr("data-gs-height", n.height);
              }
            });
            self2._updateStyles(maxHeight + 10);
          }, this.opts.float, this.opts.maxRow);
          if (this.opts.auto) {
            var elements = [];
            var _this = this;
            this.container.children("." + this.opts.itemClass + ":not(." + this.opts.placeholderClass + ")").each(function(index, el2) {
              el2 = $2(el2);
              var x = parseInt(el2.attr("data-gs-x"));
              var y = parseInt(el2.attr("data-gs-y"));
              elements.push({
                el: el2,
                // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order
                i: (Number.isNaN(x) ? 1e3 : x) + (Number.isNaN(y) ? 1e3 : y) * _this.opts.column
              });
            });
            Utils.sortBy(elements, function(x) {
              return x.i;
            }).forEach(function(item) {
              this._prepareElement(item.el);
            }, this);
          }
          this.grid._saveInitial();
          this.setAnimation(this.opts.animate);
          this.placeholder = $2(
            '<div class="' + this.opts.placeholderClass + " " + this.opts.itemClass + '"><div class="placeholder-content">' + this.opts.placeholderText + "</div></div>"
          ).hide();
          this._updateContainerHeight();
          this._updateHeightsOnResize = Utils.throttle(function() {
            self2.cellHeight(self2.cellWidth(), false);
          }, 100);
          this.onResizeHandler = function() {
            if (isAutoCellHeight) {
              self2._updateHeightsOnResize();
            }
            if (self2.opts.staticGrid) {
              return;
            }
            if (!self2.opts.disableOneColumnMode && (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) <= self2.opts.minWidth) {
              if (self2.oneColumnMode) {
                return;
              }
              self2.oneColumnMode = true;
              self2.setColumn(1);
            } else {
              if (!self2.oneColumnMode) {
                return;
              }
              self2.oneColumnMode = false;
              self2.setColumn(self2._prevColumn);
            }
          };
          $2(window).resize(this.onResizeHandler);
          this.onResizeHandler();
          if (!self2.opts.staticGrid && typeof self2.opts.removable === "string") {
            var trashZone = $2(self2.opts.removable);
            if (!this.dd.isDroppable(trashZone)) {
              this.dd.droppable(trashZone, self2.opts.removableOptions);
            }
            this.dd.on(trashZone, "dropover", function(event, ui) {
              var el2 = $2(ui.draggable);
              var node = el2.data("_gridstack_node");
              if (!node || node._grid !== self2) {
                return;
              }
              el2.data("inTrashZone", true);
              self2._setupRemovingTimeout(el2);
            }).on(trashZone, "dropout", function(event, ui) {
              var el2 = $2(ui.draggable);
              var node = el2.data("_gridstack_node");
              if (!node || node._grid !== self2) {
                return;
              }
              el2.data("inTrashZone", false);
              self2._clearRemovingTimeout(el2);
            });
          }
          if (!self2.opts.staticGrid && self2.opts.acceptWidgets) {
            var draggingElement = null;
            var onDrag = function(event, ui) {
              var el2 = draggingElement;
              var node = el2.data("_gridstack_node");
              var pos = self2.getCellFromPixel({ left: event.pageX, top: event.pageY }, true);
              var x = Math.max(0, pos.x);
              var y = Math.max(0, pos.y);
              if (!node._added) {
                node._added = true;
                node.el = el2;
                node.autoPosition = true;
                node.x = x;
                node.y = y;
                self2.grid.cleanNodes();
                self2.grid.beginUpdate(node);
                self2.grid.addNode(node);
                self2.container.append(self2.placeholder);
                self2.placeholder.attr("data-gs-x", node.x).attr("data-gs-y", node.y).attr("data-gs-width", node.width).attr("data-gs-height", node.height).show();
                node.el = self2.placeholder;
                node._beforeDragX = node.x;
                node._beforeDragY = node.y;
                self2._updateContainerHeight();
              }
              if (!self2.grid.canMoveNode(node, x, y)) {
                return;
              }
              self2.grid.moveNode(node, x, y);
              self2._updateContainerHeight();
            };
            this.dd.droppable(self2.container, {
              accept: function(el2) {
                el2 = $2(el2);
                var node = el2.data("_gridstack_node");
                if (node && node._grid === self2) {
                  return false;
                }
                return el2.is(self2.opts.acceptWidgets === true ? ".grid-stack-item" : self2.opts.acceptWidgets);
              }
            }).on(self2.container, "dropover", function(event, ui) {
              var el2 = $2(ui.draggable);
              var width, height;
              var origNode = el2.data("_gridstack_node");
              if (!origNode || !origNode.width || !origNode.height) {
                var w = parseInt(el2.attr("data-gs-width"));
                if (w > 0) {
                  origNode = origNode || {};
                  origNode.width = w;
                }
                var h = parseInt(el2.attr("data-gs-height"));
                if (h > 0) {
                  origNode = origNode || {};
                  origNode.height = h;
                }
              }
              var cellWidth = self2.cellWidth();
              var cellHeight = self2.cellHeight();
              var verticalMargin = self2.opts.verticalMargin;
              width = origNode && origNode.width ? origNode.width : Math.ceil(el2.outerWidth() / cellWidth);
              height = origNode && origNode.height ? origNode.height : Math.round((el2.outerHeight() + verticalMargin) / (cellHeight + verticalMargin));
              draggingElement = el2;
              var node = self2.grid._prepareNode({ width, height, _added: false, _temporary: true });
              node.isOutOfGrid = true;
              el2.data("_gridstack_node", node);
              el2.data("_gridstack_node_orig", origNode);
              el2.on("drag", onDrag);
              return false;
            }).on(self2.container, "dropout", function(event, ui) {
              var el2 = $2(ui.draggable);
              if (!el2.data("_gridstack_node")) {
                return;
              }
              var node = el2.data("_gridstack_node");
              if (!node.isOutOfGrid) {
                return;
              }
              el2.unbind("drag", onDrag);
              node.el = null;
              self2.grid.removeNode(node);
              self2.placeholder.detach();
              self2._updateContainerHeight();
              el2.data("_gridstack_node", el2.data("_gridstack_node_orig"));
              return false;
            }).on(self2.container, "drop", function(event, ui) {
              self2.placeholder.detach();
              var node = $2(ui.draggable).data("_gridstack_node");
              node.isOutOfGrid = false;
              node._grid = self2;
              var el2 = $2(ui.draggable).clone(false);
              el2.data("_gridstack_node", node);
              var originalNode = $2(ui.draggable).data("_gridstack_node_orig");
              if (originalNode !== void 0 && originalNode._grid !== void 0) {
                originalNode._grid._triggerRemoveEvent();
              }
              $2(ui.helper).remove();
              node.el = el2;
              self2.placeholder.hide();
              Utils.removePositioningStyles(el2);
              el2.find("div.ui-resizable-handle").remove();
              el2.attr("data-gs-x", node.x).attr("data-gs-y", node.y).attr("data-gs-width", node.width).attr("data-gs-height", node.height).addClass(self2.opts.itemClass).enableSelection().removeData("draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled").unbind("drag", onDrag);
              self2.container.append(el2);
              self2._prepareElementsByNode(el2, node);
              self2._updateContainerHeight();
              self2.grid._addedNodes.push(node);
              self2._triggerAddEvent();
              self2._triggerChangeEvent();
              self2.grid.endUpdate();
              $2(ui.draggable).unbind("drag", onDrag);
              $2(ui.draggable).removeData("_gridstack_node");
              $2(ui.draggable).removeData("_gridstack_node_orig");
              self2.container.trigger("dropped", [originalNode, node]);
              return false;
            });
          }
        };
        GridStack.prototype._triggerChangeEvent = function() {
          if (this.grid._batchMode) {
            return;
          }
          var elements = this.grid.getDirtyNodes(true);
          if (elements && elements.length) {
            this.grid._layoutsNodesChange(elements);
            this.container.trigger("change", [elements]);
          }
          this.grid._saveInitial();
        };
        GridStack.prototype._triggerAddEvent = function() {
          if (this.grid._batchMode) {
            return;
          }
          if (this.grid._addedNodes && this.grid._addedNodes.length > 0) {
            this.grid._layoutsNodesChange(this.grid._addedNodes);
            this.grid._addedNodes.forEach(function(n) {
              delete n._dirty;
            });
            this.container.trigger("added", [this.grid._addedNodes]);
            this.grid._addedNodes = [];
          }
        };
        GridStack.prototype._triggerRemoveEvent = function() {
          if (this.grid._batchMode) {
            return;
          }
          if (this.grid._removedNodes && this.grid._removedNodes.length > 0) {
            this.container.trigger("removed", [this.grid._removedNodes]);
            this.grid._removedNodes = [];
          }
        };
        GridStack.prototype._initStyles = function() {
          if (this._stylesId) {
            Utils.removeStylesheet(this._stylesId);
          }
          this._stylesId = "gridstack-style-" + (Math.random() * 1e5).toFixed();
          this._styles = Utils.createStylesheet(this._stylesId, this.container.get(0).parentNode);
          if (this._styles !== null) {
            this._styles._max = 0;
          }
        };
        GridStack.prototype._updateStyles = function(maxHeight) {
          if (this._styles === null || this._styles === void 0) {
            return;
          }
          var prefix = "." + this.opts._class + " ." + this.opts.itemClass;
          var self2 = this;
          var getHeight;
          if (maxHeight === void 0) {
            maxHeight = this._styles._max;
          }
          this._initStyles();
          this._updateContainerHeight();
          if (!this.opts.cellHeight) {
            return;
          }
          if (this._styles._max !== 0 && maxHeight <= this._styles._max) {
            return;
          }
          if (!this.opts.verticalMargin || this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {
            getHeight = function(nbRows, nbMargins) {
              return self2.opts.cellHeight * nbRows + self2.opts.verticalMargin * nbMargins + self2.opts.cellHeightUnit;
            };
          } else {
            getHeight = function(nbRows, nbMargins) {
              if (!nbRows || !nbMargins) {
                return self2.opts.cellHeight * nbRows + self2.opts.verticalMargin * nbMargins + self2.opts.cellHeightUnit;
              }
              return "calc(" + (self2.opts.cellHeight * nbRows + self2.opts.cellHeightUnit) + " + " + (self2.opts.verticalMargin * nbMargins + self2.opts.verticalMarginUnit) + ")";
            };
          }
          if (this._styles._max === 0) {
            Utils.insertCSSRule(this._styles, prefix, "min-height: " + getHeight(1, 0) + ";", 0);
          }
          if (maxHeight > this._styles._max) {
            for (var i = this._styles._max; i < maxHeight; ++i) {
              Utils.insertCSSRule(
                this._styles,
                prefix + '[data-gs-height="' + (i + 1) + '"]',
                "height: " + getHeight(i + 1, i) + ";",
                i
              );
              Utils.insertCSSRule(
                this._styles,
                prefix + '[data-gs-min-height="' + (i + 1) + '"]',
                "min-height: " + getHeight(i + 1, i) + ";",
                i
              );
              Utils.insertCSSRule(
                this._styles,
                prefix + '[data-gs-max-height="' + (i + 1) + '"]',
                "max-height: " + getHeight(i + 1, i) + ";",
                i
              );
              Utils.insertCSSRule(
                this._styles,
                prefix + '[data-gs-y="' + i + '"]',
                "top: " + getHeight(i, i) + ";",
                i
              );
            }
            this._styles._max = maxHeight;
          }
        };
        GridStack.prototype._updateContainerHeight = function() {
          if (this.grid._batchMode) {
            return;
          }
          var height = this.grid.getGridHeight();
          var cssMinHeight = parseInt(this.container.css("min-height"));
          if (cssMinHeight > 0) {
            var verticalMargin = this.opts.verticalMargin;
            var minHeight = Math.round((cssMinHeight + verticalMargin) / (this.cellHeight() + verticalMargin));
            if (height < minHeight) {
              height = minHeight;
            }
          }
          this.container.attr("data-gs-current-height", height);
          if (!this.opts.cellHeight) {
            return;
          }
          if (!this.opts.verticalMargin) {
            this.container.css("height", height * this.opts.cellHeight + this.opts.cellHeightUnit);
          } else if (this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {
            this.container.css("height", height * (this.opts.cellHeight + this.opts.verticalMargin) - this.opts.verticalMargin + this.opts.cellHeightUnit);
          } else {
            this.container.css("height", "calc(" + (height * this.opts.cellHeight + this.opts.cellHeightUnit) + " + " + (height * (this.opts.verticalMargin - 1) + this.opts.verticalMarginUnit) + ")");
          }
        };
        GridStack.prototype._setupRemovingTimeout = function(el) {
          var self2 = this;
          var node = $2(el).data("_gridstack_node");
          if (node._removeTimeout || !self2.opts.removable) {
            return;
          }
          node._removeTimeout = setTimeout(function() {
            el.addClass("grid-stack-item-removing");
            node._isAboutToRemove = true;
          }, self2.opts.removeTimeout);
        };
        GridStack.prototype._clearRemovingTimeout = function(el) {
          var node = $2(el).data("_gridstack_node");
          if (!node._removeTimeout) {
            return;
          }
          clearTimeout(node._removeTimeout);
          node._removeTimeout = null;
          el.removeClass("grid-stack-item-removing");
          node._isAboutToRemove = false;
        };
        GridStack.prototype._prepareElementsByNode = function(el, node) {
          var self2 = this;
          var cellWidth;
          var cellHeight;
          var dragOrResize = function(event, ui) {
            var x = Math.round(ui.position.left / cellWidth);
            var y = Math.floor((ui.position.top + cellHeight / 2) / cellHeight);
            var width;
            var height;
            if (event.type !== "drag") {
              width = Math.round(ui.size.width / cellWidth);
              height = Math.round(ui.size.height / cellHeight);
            }
            if (event.type === "drag") {
              var distance = ui.position.top - node._prevYPix;
              node._prevYPix = ui.position.top;
              Utils.updateScrollPosition(el[0], ui, distance);
              if (el.data("inTrashZone") || x < 0 || x >= self2.grid.column || y < 0 || !self2.grid.float && y > self2.grid.getGridHeight()) {
                if (!node._temporaryRemoved) {
                  if (self2.opts.removable === true) {
                    self2._setupRemovingTimeout(el);
                  }
                  x = node._beforeDragX;
                  y = node._beforeDragY;
                  self2.placeholder.detach();
                  self2.placeholder.hide();
                  self2.grid.removeNode(node);
                  self2._updateContainerHeight();
                  node._temporaryRemoved = true;
                } else {
                  return;
                }
              } else {
                self2._clearRemovingTimeout(el);
                if (node._temporaryRemoved) {
                  self2.grid.addNode(node);
                  self2.placeholder.attr("data-gs-x", x).attr("data-gs-y", y).attr("data-gs-width", width).attr("data-gs-height", height).show();
                  self2.container.append(self2.placeholder);
                  node.el = self2.placeholder;
                  node._temporaryRemoved = false;
                }
              }
            } else if (event.type === "resize") {
              if (x < 0) {
                return;
              }
            }
            var lastTriedWidth = width !== void 0 ? width : node.lastTriedWidth;
            var lastTriedHeight = height !== void 0 ? height : node.lastTriedHeight;
            if (!self2.grid.canMoveNode(node, x, y, width, height) || node.lastTriedX === x && node.lastTriedY === y && node.lastTriedWidth === lastTriedWidth && node.lastTriedHeight === lastTriedHeight) {
              return;
            }
            node.lastTriedX = x;
            node.lastTriedY = y;
            node.lastTriedWidth = width;
            node.lastTriedHeight = height;
            self2.grid.moveNode(node, x, y, width, height);
            self2._updateContainerHeight();
            if (event.type === "resize") {
              $2(event.target).trigger("gsresize", node);
            }
          };
          var onStartMoving = function(event, ui) {
            self2.container.append(self2.placeholder);
            var o = $2(this);
            self2.grid.cleanNodes();
            self2.grid.beginUpdate(node);
            cellWidth = self2.cellWidth();
            var strictCellHeight = self2.cellHeight();
            cellHeight = self2.container.height() / parseInt(self2.container.attr("data-gs-current-height"));
            self2.placeholder.attr("data-gs-x", o.attr("data-gs-x")).attr("data-gs-y", o.attr("data-gs-y")).attr("data-gs-width", o.attr("data-gs-width")).attr("data-gs-height", o.attr("data-gs-height")).show();
            node.el = self2.placeholder;
            node._beforeDragX = node.x;
            node._beforeDragY = node.y;
            node._prevYPix = ui.position.top;
            var minHeight = node.minHeight || 1;
            var verticalMargin = self2.opts.verticalMargin;
            self2.dd.resizable(el, "option", "minWidth", cellWidth * (node.minWidth || 1));
            self2.dd.resizable(el, "option", "minHeight", strictCellHeight * minHeight + (minHeight - 1) * verticalMargin);
            if (event.type === "resizestart") {
              o.find(".grid-stack-item").trigger("resizestart");
            }
          };
          var onEndMoving = function(event, ui) {
            var o = $2(this);
            if (!o.data("_gridstack_node")) {
              return;
            }
            self2.placeholder.detach();
            node.el = o;
            self2.placeholder.hide();
            if (node._isAboutToRemove) {
              var gridToNotify = el.data("_gridstack_node")._grid;
              gridToNotify._triggerRemoveEvent();
              el.removeData("_gridstack_node");
              el.remove();
            } else {
              self2._clearRemovingTimeout(el);
              if (!node._temporaryRemoved) {
                Utils.removePositioningStyles(o);
                o.attr("data-gs-x", node.x).attr("data-gs-y", node.y).attr("data-gs-width", node.width).attr("data-gs-height", node.height);
              } else {
                Utils.removePositioningStyles(o);
                o.attr("data-gs-x", node._beforeDragX).attr("data-gs-y", node._beforeDragY).attr("data-gs-width", node.width).attr("data-gs-height", node.height);
                node.x = node._beforeDragX;
                node.y = node._beforeDragY;
                node._temporaryRemoved = false;
                self2.grid.addNode(node);
              }
            }
            self2._updateContainerHeight();
            self2._triggerChangeEvent(
              /*forceNotify*/
            );
            self2.grid.endUpdate();
            var nestedGrids = o.find(".grid-stack");
            if (nestedGrids.length && event.type === "resizestop") {
              nestedGrids.each(function(index, el2) {
                $2(el2).data("gridstack").onResizeHandler();
              });
              o.find(".grid-stack-item").trigger("resizestop");
              o.find(".grid-stack-item").trigger("gsresizestop");
            }
            if (event.type === "resizestop") {
              self2.container.trigger("gsresizestop", o);
            }
          };
          this.dd.draggable(el, {
            start: onStartMoving,
            stop: onEndMoving,
            drag: dragOrResize
          }).resizable(el, {
            start: onStartMoving,
            stop: onEndMoving,
            resize: dragOrResize
          });
          if (node.noMove || this.opts.disableDrag || this.opts.staticGrid) {
            this.dd.draggable(el, "disable");
          }
          if (node.noResize || this.opts.disableResize || this.opts.staticGrid) {
            this.dd.resizable(el, "disable");
          }
          this._writeAttr(el, node);
        };
        GridStack.prototype._prepareElement = function(el, triggerAddEvent) {
          triggerAddEvent = triggerAddEvent !== void 0 ? triggerAddEvent : false;
          var self2 = this;
          el = $2(el);
          el.addClass(this.opts.itemClass);
          var node = this._readAttr(el, { el, _grid: self2 });
          node = self2.grid.addNode(node, triggerAddEvent);
          el.data("_gridstack_node", node);
          this._prepareElementsByNode(el, node);
        };
        GridStack.prototype._writeAttr = function(el, node) {
          el = $2(el);
          node = node || {};
          if (node.x !== void 0) {
            el.attr("data-gs-x", node.x);
          }
          if (node.y !== void 0) {
            el.attr("data-gs-y", node.y);
          }
          if (node.width !== void 0) {
            el.attr("data-gs-width", node.width);
          }
          if (node.height !== void 0) {
            el.attr("data-gs-height", node.height);
          }
          if (node.autoPosition !== void 0) {
            el.attr("data-gs-auto-position", node.autoPosition ? true : null);
          }
          if (node.minWidth !== void 0) {
            el.attr("data-gs-min-width", node.minWidth);
          }
          if (node.maxWidth !== void 0) {
            el.attr("data-gs-max-width", node.maxWidth);
          }
          if (node.minHeight !== void 0) {
            el.attr("data-gs-min-height", node.minHeight);
          }
          if (node.maxHeight !== void 0) {
            el.attr("data-gs-max-height", node.maxHeight);
          }
          if (node.noResize !== void 0) {
            el.attr("data-gs-no-resize", node.noResize ? true : null);
          }
          if (node.noMove !== void 0) {
            el.attr("data-gs-no-move", node.noMove ? true : null);
          }
          if (node.locked !== void 0) {
            el.attr("data-gs-locked", node.locked ? true : null);
          }
          if (node.resizeHandles !== void 0) {
            el.attr("data-gs-resize-handles", node.resizeHandles);
          }
          if (node.id !== void 0) {
            el.attr("data-gs-id", node.id);
          }
        };
        GridStack.prototype._readAttr = function(el, node) {
          el = $2(el);
          node = node || {};
          node.x = el.attr("data-gs-x");
          node.y = el.attr("data-gs-y");
          node.width = el.attr("data-gs-width");
          node.height = el.attr("data-gs-height");
          node.autoPosition = Utils.toBool(el.attr("data-gs-auto-position"));
          node.maxWidth = el.attr("data-gs-max-width");
          node.minWidth = el.attr("data-gs-min-width");
          node.maxHeight = el.attr("data-gs-max-height");
          node.minHeight = el.attr("data-gs-min-height");
          node.noResize = Utils.toBool(el.attr("data-gs-no-resize"));
          node.noMove = Utils.toBool(el.attr("data-gs-no-move"));
          node.locked = Utils.toBool(el.attr("data-gs-locked"));
          node.resizeHandles = el.attr("data-gs-resize-handles");
          node.id = el.attr("data-gs-id");
          return node;
        };
        GridStack.prototype.setAnimation = function(enable) {
          if (enable) {
            this.container.addClass("grid-stack-animate");
          } else {
            this.container.removeClass("grid-stack-animate");
          }
        };
        GridStack.prototype.addWidget = function(el, node, y, width, height, autoPosition, minWidth, maxWidth, minHeight, maxHeight, id) {
          if (node === void 0 || typeof node === "object") {
            node = node || {};
          } else {
            return this.addWidget(el, {
              x: node,
              y,
              width,
              height,
              autoPosition,
              minWidth,
              maxWidth,
              minHeight,
              maxHeight,
              id
            });
          }
          el = $2(el);
          this._writeAttr(el, node);
          this.container.append(el);
          return this.makeWidget(el);
        };
        GridStack.prototype.makeWidget = function(el) {
          el = $2(el);
          this._prepareElement(el, true);
          this._updateContainerHeight();
          this._triggerAddEvent();
          this._triggerChangeEvent(true);
          return el;
        };
        GridStack.prototype.willItFit = function(x, y, width, height, autoPosition) {
          var node = { x, y, width, height, autoPosition };
          return this.grid.canBePlacedWithRespectToHeight(node);
        };
        GridStack.prototype.removeWidget = function(el, detachNode) {
          detachNode = detachNode === void 0 ? true : detachNode;
          el = $2(el);
          var node = el.data("_gridstack_node");
          if (!node) {
            node = this.grid.getNodeDataByDOMEl(el);
          }
          el.removeData("_gridstack_node");
          this.grid.removeNode(node, detachNode);
          this._triggerRemoveEvent();
          this._triggerChangeEvent(true);
        };
        GridStack.prototype.removeAll = function(detachNode) {
          if (detachNode !== false) {
            this.grid.nodes.forEach(function(node) {
              node.el.removeData("_gridstack_node");
            });
          }
          this.grid.removeAll(detachNode);
          this._triggerRemoveEvent();
        };
        GridStack.prototype.destroy = function(detachGrid) {
          $2(window).off("resize", this.onResizeHandler);
          this.disable();
          if (detachGrid !== void 0 && !detachGrid) {
            this.removeAll(false);
            this.container.removeData("gridstack");
          } else {
            this.container.remove();
          }
          Utils.removeStylesheet(this._stylesId);
          if (this.grid) {
            this.grid = null;
          }
        };
        GridStack.prototype.resizable = function(el, val) {
          var self2 = this;
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            node.noResize = !(val || false);
            if (node.noResize) {
              self2.dd.resizable(el2, "disable");
            } else {
              self2.dd.resizable(el2, "enable");
            }
          });
          return this;
        };
        GridStack.prototype.movable = function(el, val) {
          var self2 = this;
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            node.noMove = !(val || false);
            if (node.noMove) {
              self2.dd.draggable(el2, "disable");
              el2.removeClass("ui-draggable-handle");
            } else {
              self2.dd.draggable(el2, "enable");
              el2.addClass("ui-draggable-handle");
            }
          });
          return this;
        };
        GridStack.prototype.enableMove = function(doEnable, includeNewWidgets) {
          this.movable(this.container.children("." + this.opts.itemClass), doEnable);
          if (includeNewWidgets) {
            this.opts.disableDrag = !doEnable;
          }
        };
        GridStack.prototype.enableResize = function(doEnable, includeNewWidgets) {
          this.resizable(this.container.children("." + this.opts.itemClass), doEnable);
          if (includeNewWidgets) {
            this.opts.disableResize = !doEnable;
          }
        };
        GridStack.prototype.disable = function() {
          this.movable(this.container.children("." + this.opts.itemClass), false);
          this.resizable(this.container.children("." + this.opts.itemClass), false);
          this.container.trigger("disable");
        };
        GridStack.prototype.enable = function() {
          this.movable(this.container.children("." + this.opts.itemClass), true);
          this.resizable(this.container.children("." + this.opts.itemClass), true);
          this.container.trigger("enable");
        };
        GridStack.prototype.locked = function(el, val) {
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            node.locked = val || false;
            el2.attr("data-gs-locked", node.locked ? "yes" : null);
          });
          return this;
        };
        GridStack.prototype.maxHeight = function(el, val) {
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            if (!isNaN(val)) {
              node.maxHeight = val || false;
              el2.attr("data-gs-max-height", val);
            }
          });
          return this;
        };
        GridStack.prototype.minHeight = function(el, val) {
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            if (!isNaN(val)) {
              node.minHeight = val || false;
              el2.attr("data-gs-min-height", val);
            }
          });
          return this;
        };
        GridStack.prototype.maxWidth = function(el, val) {
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            if (!isNaN(val)) {
              node.maxWidth = val || false;
              el2.attr("data-gs-max-width", val);
            }
          });
          return this;
        };
        GridStack.prototype.minWidth = function(el, val) {
          el = $2(el);
          el.each(function(index, el2) {
            el2 = $2(el2);
            var node = el2.data("_gridstack_node");
            if (!node) {
              return;
            }
            if (!isNaN(val)) {
              node.minWidth = val || false;
              el2.attr("data-gs-min-width", val);
            }
          });
          return this;
        };
        GridStack.prototype._updateElement = function(el, callback) {
          el = $2(el).first();
          var node = el.data("_gridstack_node");
          if (!node) {
            return;
          }
          var self2 = this;
          self2.grid.cleanNodes();
          self2.grid.beginUpdate(node);
          callback.call(this, el, node);
          self2._updateContainerHeight();
          self2._triggerChangeEvent();
          self2.grid.endUpdate();
        };
        GridStack.prototype.resize = function(el, width, height) {
          this._updateElement(el, function(el2, node) {
            width = width !== null && width !== void 0 ? width : node.width;
            height = height !== null && height !== void 0 ? height : node.height;
            this.grid.moveNode(node, node.x, node.y, width, height);
          });
        };
        GridStack.prototype.move = function(el, x, y) {
          this._updateElement(el, function(el2, node) {
            x = x !== null && x !== void 0 ? x : node.x;
            y = y !== null && y !== void 0 ? y : node.y;
            this.grid.moveNode(node, x, y, node.width, node.height);
          });
        };
        GridStack.prototype.update = function(el, x, y, width, height) {
          this._updateElement(el, function(el2, node) {
            x = x !== null && x !== void 0 ? x : node.x;
            y = y !== null && y !== void 0 ? y : node.y;
            width = width !== null && width !== void 0 ? width : node.width;
            height = height !== null && height !== void 0 ? height : node.height;
            this.grid.moveNode(node, x, y, width, height);
          });
        };
        GridStack.prototype.compact = function() {
          if (this.grid.nodes.length === 0) {
            return;
          }
          this.batchUpdate();
          this.grid._sortNodes();
          var nodes = this.grid.nodes;
          this.grid.nodes = [];
          nodes.forEach(function(node) {
            if (!node.noMove && !node.locked) {
              node.autoPosition = true;
            }
            this.grid.addNode(node, false);
            node._dirty = true;
          }, this);
          this.commit();
        };
        GridStack.prototype.verticalMargin = function(val, noUpdate) {
          if (val === void 0) {
            return this.opts.verticalMargin;
          }
          var heightData = Utils.parseHeight(val);
          if (this.opts.verticalMarginUnit === heightData.unit && this.opts.maxRow === heightData.height) {
            return;
          }
          this.opts.verticalMarginUnit = heightData.unit;
          this.opts.verticalMargin = heightData.height;
          if (!noUpdate) {
            this._updateStyles();
          }
        };
        GridStack.prototype.cellHeight = function(val, noUpdate) {
          if (val === void 0) {
            if (this.opts.cellHeight && this.opts.cellHeight !== "auto") {
              return this.opts.cellHeight;
            }
            var o = this.container.children("." + this.opts.itemClass).first();
            var height = o.attr("data-gs-height");
            var verticalMargin = this.opts.verticalMargin;
            return Math.round((o.outerHeight() - (height - 1) * verticalMargin) / height);
          }
          var heightData = Utils.parseHeight(val);
          if (this.opts.cellHeightUnit === heightData.unit && this.opts.cellHeight === heightData.height) {
            return;
          }
          this.opts.cellHeightUnit = heightData.unit;
          this.opts.cellHeight = heightData.height;
          if (!noUpdate) {
            this._updateStyles();
          }
        };
        GridStack.prototype.cellWidth = function() {
          return Math.round(this.container.outerWidth() / this.opts.column);
        };
        GridStack.prototype.getCellFromPixel = function(position, useOffset) {
          var containerPos = useOffset !== void 0 && useOffset ? this.container.offset() : this.container.position();
          var relativeLeft = position.left - containerPos.left;
          var relativeTop = position.top - containerPos.top;
          var columnWidth = Math.floor(this.container.width() / this.opts.column);
          var rowHeight = Math.floor(this.container.height() / parseInt(this.container.attr("data-gs-current-height")));
          return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };
        };
        GridStack.prototype.batchUpdate = function() {
          this.grid.batchUpdate();
        };
        GridStack.prototype.commit = function() {
          this.grid.commit();
          this._triggerRemoveEvent();
          this._triggerAddEvent();
          this._triggerChangeEvent();
        };
        GridStack.prototype.isAreaEmpty = function(x, y, width, height) {
          return this.grid.isAreaEmpty(x, y, width, height);
        };
        GridStack.prototype.setStatic = function(staticValue) {
          this.opts.staticGrid = staticValue === true;
          this.enableMove(!staticValue);
          this.enableResize(!staticValue);
          this._setStaticClass();
        };
        GridStack.prototype._setStaticClass = function() {
          var staticClassName = "grid-stack-static";
          if (this.opts.staticGrid === true) {
            this.container.addClass(staticClassName);
          } else {
            this.container.removeClass(staticClassName);
          }
        };
        GridStackEngine.prototype._layoutsNodesChange = function(nodes) {
          if (!this._layouts || this._ignoreLayoutsNodeChange)
            return;
          this._layouts.forEach(function(layout, column) {
            if (!layout || column === this.column)
              return;
            if (column < this.column) {
              this._layouts[column] = void 0;
            } else {
              nodes.forEach(function(node) {
                var n = layout.find(function(l) {
                  return l._id === node._id;
                });
                if (!n)
                  return;
                var ratio = column / this.column;
                if (node.y !== node._origY) {
                  n.y += node.y - node._origY;
                }
                if (node.x !== node._origX) {
                  n.x = Math.round(node.x * ratio);
                }
                if (node.width !== node._origW) {
                  n.width = Math.round(node.width * ratio);
                }
              }, this);
            }
          }, this);
        };
        GridStackEngine.prototype._updateNodeWidths = function(oldColumn, column, nodes) {
          if (!this.nodes.length || oldColumn === column) {
            return;
          }
          var copy = [this.nodes.length];
          this.nodes.forEach(function(n, i) {
            copy[i] = { x: n.x, y: n.y, width: n.width, _id: n._id };
          });
          this._layouts = this._layouts || [];
          this._layouts[oldColumn] = copy;
          if (column === 1 && nodes && nodes.length) {
            var top3 = 0;
            nodes.forEach(function(n) {
              n.x = 0;
              n.width = 1;
              n.y = Math.max(n.y, top3);
              top3 = n.y + n.height;
            });
          } else {
            nodes = Utils.sort(this.nodes, -1, oldColumn);
          }
          var cacheNodes = this._layouts[column] || [];
          var lastIndex = this._layouts.length - 1;
          if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {
            cacheNodes = this._layouts[lastIndex] || [];
            if (cacheNodes.length) {
              oldColumn = lastIndex;
              cacheNodes.forEach(function(cacheNode) {
                var j = nodes.findIndex(function(n) {
                  return n && n._id === cacheNode._id;
                });
                if (j !== -1) {
                  nodes[j].x = cacheNode.x;
                  nodes[j].y = cacheNode.y;
                  nodes[j].width = cacheNode.width;
                }
              });
              cacheNodes = [];
            }
          }
          var newNodes = [];
          cacheNodes.forEach(function(cacheNode) {
            var j = nodes.findIndex(function(n) {
              return n && n._id === cacheNode._id;
            });
            if (j !== -1) {
              nodes[j].x = cacheNode.x;
              nodes[j].y = cacheNode.y;
              nodes[j].width = cacheNode.width;
              newNodes.push(nodes[j]);
              nodes[j] = null;
            }
          });
          var ratio = column / oldColumn;
          nodes.forEach(function(node) {
            if (!node)
              return;
            node.x = column === 1 ? 0 : Math.round(node.x * ratio);
            node.width = column === 1 || oldColumn === 1 ? 1 : Math.round(node.width * ratio) || 1;
            newNodes.push(node);
          });
          newNodes = Utils.sort(newNodes, -1, column);
          this._ignoreLayoutsNodeChange = true;
          this.batchUpdate();
          this.nodes = [];
          newNodes.forEach(function(node) {
            this.addNode(node, false);
            node._dirty = true;
          }, this);
          this.commit();
          delete this._ignoreLayoutsNodeChange;
        };
        GridStackEngine.prototype._saveInitial = function() {
          this.nodes.forEach(function(n) {
            n._origX = n.x;
            n._origY = n.y;
            n._origW = n.width;
            n._origH = n.height;
            delete n._dirty;
          });
        };
        GridStack.prototype.setColumn = function(column, doNotPropagate) {
          if (this.opts.column === column) {
            return;
          }
          var oldColumn = this.opts.column;
          if (column === 1) {
            this._prevColumn = oldColumn;
          } else {
            delete this._prevColumn;
          }
          this.container.removeClass("grid-stack-" + oldColumn);
          this.container.addClass("grid-stack-" + column);
          this.opts.column = this.grid.column = column;
          if (doNotPropagate === true) {
            return;
          }
          var domNodes;
          if (this.opts.oneColumnModeDomSort && column === 1) {
            domNodes = [];
            this.container.children("." + this.opts.itemClass).each(function(index, el) {
              var node = $2(el).data("_gridstack_node");
              if (node) {
                domNodes.push(node);
              }
            });
            if (!domNodes.length) {
              domNodes = void 0;
            }
          }
          this.grid._updateNodeWidths(oldColumn, column, domNodes);
          this.grid._ignoreLayoutsNodeChange = true;
          this._triggerChangeEvent();
          delete this.grid._ignoreLayoutsNodeChange;
        };
        GridStack.prototype.float = function(val) {
          if (val === void 0) {
            return this.opts.float || false;
          }
          if (this.opts.float === val) {
            return;
          }
          this.opts.float = this.grid.float = val || false;
          if (!val) {
            this.grid._packNodes();
            this.grid._notify();
            this._triggerChangeEvent();
          }
        };
        GridStack.prototype.setGridWidth = obsolete(
          GridStack.prototype.setColumn,
          "setGridWidth",
          "setColumn",
          "v0.5.3"
        );
        scope.GridStackUI = GridStack;
        scope.GridStackUI.Utils = Utils;
        scope.GridStackUI.Engine = GridStackEngine;
        scope.GridStackUI.GridStackDragDropPlugin = GridStackDragDropPlugin;
        $2.fn.gridstack = function(opts) {
          return this.each(function() {
            var o = $2(this);
            if (!o.data("gridstack")) {
              o.data("gridstack", new GridStack(this, opts));
            }
          });
        };
        return scope.GridStackUI;
      });
    }
  });

  // ../../node_modules/@rails/ujs/app/assets/javascripts/rails-ujs.esm.js
  var linkClickSelector = "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]";
  var buttonClickSelector = {
    selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
    exclude: "form button"
  };
  var inputChangeSelector = "select[data-remote], input[data-remote], textarea[data-remote]";
  var formSubmitSelector = "form:not([data-turbo=true])";
  var formInputClickSelector = "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])";
  var formDisableSelector = "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled";
  var formEnableSelector = "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled";
  var fileInputSelector = "input[name][type=file]:not([disabled])";
  var linkDisableSelector = "a[data-disable-with], a[data-disable]";
  var buttonDisableSelector = "button[data-remote][data-disable-with], button[data-remote][data-disable]";
  var nonce = null;
  var loadCSPNonce = () => {
    const metaTag = document.querySelector("meta[name=csp-nonce]");
    return nonce = metaTag && metaTag.content;
  };
  var cspNonce = () => nonce || loadCSPNonce();
  var m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
  var matches = function(element, selector) {
    if (selector.exclude) {
      return m.call(element, selector.selector) && !m.call(element, selector.exclude);
    } else {
      return m.call(element, selector);
    }
  };
  var EXPANDO = "_ujsData";
  var getData = (element, key) => element[EXPANDO] ? element[EXPANDO][key] : void 0;
  var setData = function(element, key, value) {
    if (!element[EXPANDO]) {
      element[EXPANDO] = {};
    }
    return element[EXPANDO][key] = value;
  };
  var $ = (selector) => Array.prototype.slice.call(document.querySelectorAll(selector));
  var isContentEditable = function(element) {
    var isEditable = false;
    do {
      if (element.isContentEditable) {
        isEditable = true;
        break;
      }
      element = element.parentElement;
    } while (element);
    return isEditable;
  };
  var csrfToken = () => {
    const meta = document.querySelector("meta[name=csrf-token]");
    return meta && meta.content;
  };
  var csrfParam = () => {
    const meta = document.querySelector("meta[name=csrf-param]");
    return meta && meta.content;
  };
  var CSRFProtection = (xhr) => {
    const token = csrfToken();
    if (token) {
      return xhr.setRequestHeader("X-CSRF-Token", token);
    }
  };
  var refreshCSRFTokens = () => {
    const token = csrfToken();
    const param = csrfParam();
    if (token && param) {
      return $('form input[name="' + param + '"]').forEach((input) => input.value = token);
    }
  };
  var AcceptHeaders = {
    "*": "*/*",
    text: "text/plain",
    html: "text/html",
    xml: "application/xml, text/xml",
    json: "application/json, text/javascript",
    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
  };
  var ajax = (options) => {
    options = prepareOptions(options);
    var xhr = createXHR(options, function() {
      const response = processResponse(xhr.response != null ? xhr.response : xhr.responseText, xhr.getResponseHeader("Content-Type"));
      if (Math.floor(xhr.status / 100) === 2) {
        if (typeof options.success === "function") {
          options.success(response, xhr.statusText, xhr);
        }
      } else {
        if (typeof options.error === "function") {
          options.error(response, xhr.statusText, xhr);
        }
      }
      return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
    });
    if (options.beforeSend && !options.beforeSend(xhr, options)) {
      return false;
    }
    if (xhr.readyState === XMLHttpRequest.OPENED) {
      return xhr.send(options.data);
    }
  };
  var prepareOptions = function(options) {
    options.url = options.url || location.href;
    options.type = options.type.toUpperCase();
    if (options.type === "GET" && options.data) {
      if (options.url.indexOf("?") < 0) {
        options.url += "?" + options.data;
      } else {
        options.url += "&" + options.data;
      }
    }
    if (!(options.dataType in AcceptHeaders)) {
      options.dataType = "*";
    }
    options.accept = AcceptHeaders[options.dataType];
    if (options.dataType !== "*") {
      options.accept += ", */*; q=0.01";
    }
    return options;
  };
  var createXHR = function(options, done) {
    const xhr = new XMLHttpRequest();
    xhr.open(options.type, options.url, true);
    xhr.setRequestHeader("Accept", options.accept);
    if (typeof options.data === "string") {
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
    }
    if (!options.crossDomain) {
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      CSRFProtection(xhr);
    }
    xhr.withCredentials = !!options.withCredentials;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        return done(xhr);
      }
    };
    return xhr;
  };
  var processResponse = function(response, type) {
    if (typeof response === "string" && typeof type === "string") {
      if (type.match(/\bjson\b/)) {
        try {
          response = JSON.parse(response);
        } catch (error2) {
        }
      } else if (type.match(/\b(?:java|ecma)script\b/)) {
        const script = document.createElement("script");
        script.setAttribute("nonce", cspNonce());
        script.text = response;
        document.head.appendChild(script).parentNode.removeChild(script);
      } else if (type.match(/\b(xml|html|svg)\b/)) {
        const parser = new DOMParser();
        type = type.replace(/;.+/, "");
        try {
          response = parser.parseFromString(response, type);
        } catch (error1) {
        }
      }
    }
    return response;
  };
  var href = (element) => element.href;
  var isCrossDomain = function(url) {
    const originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    const urlAnchor = document.createElement("a");
    try {
      urlAnchor.href = url;
      return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
    } catch (e) {
      return true;
    }
  };
  var preventDefault;
  var { CustomEvent: CustomEvent2 } = window;
  if (typeof CustomEvent2 !== "function") {
    CustomEvent2 = function(event, params) {
      const evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    };
    CustomEvent2.prototype = window.Event.prototype;
    ({ preventDefault } = CustomEvent2.prototype);
    CustomEvent2.prototype.preventDefault = function() {
      const result = preventDefault.call(this);
      if (this.cancelable && !this.defaultPrevented) {
        Object.defineProperty(this, "defaultPrevented", {
          get() {
            return true;
          }
        });
      }
      return result;
    };
  }
  var fire = (obj, name, data) => {
    const event = new CustomEvent2(name, {
      bubbles: true,
      cancelable: true,
      detail: data
    });
    obj.dispatchEvent(event);
    return !event.defaultPrevented;
  };
  var stopEverything = (e) => {
    fire(e.target, "ujs:everythingStopped");
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
  };
  var delegate = (element, selector, eventType, handler) => element.addEventListener(eventType, function(e) {
    let { target } = e;
    while (!!(target instanceof Element) && !matches(target, selector)) {
      target = target.parentNode;
    }
    if (target instanceof Element && handler.call(target, e) === false) {
      e.preventDefault();
      e.stopPropagation();
    }
  });
  var toArray = (e) => Array.prototype.slice.call(e);
  var serializeElement = (element, additionalParam) => {
    let inputs = [element];
    if (matches(element, "form")) {
      inputs = toArray(element.elements);
    }
    const params = [];
    inputs.forEach(function(input) {
      if (!input.name || input.disabled) {
        return;
      }
      if (matches(input, "fieldset[disabled] *")) {
        return;
      }
      if (matches(input, "select")) {
        toArray(input.options).forEach(function(option) {
          if (option.selected) {
            params.push({
              name: input.name,
              value: option.value
            });
          }
        });
      } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
        params.push({
          name: input.name,
          value: input.value
        });
      }
    });
    if (additionalParam) {
      params.push(additionalParam);
    }
    return params.map(function(param) {
      if (param.name) {
        return `${encodeURIComponent(param.name)}=${encodeURIComponent(param.value)}`;
      } else {
        return param;
      }
    }).join("&");
  };
  var formElements = (form, selector) => {
    if (matches(form, "form")) {
      return toArray(form.elements).filter((el) => matches(el, selector));
    } else {
      return toArray(form.querySelectorAll(selector));
    }
  };
  var handleConfirmWithRails = (rails) => function(e) {
    if (!allowAction(this, rails)) {
      stopEverything(e);
    }
  };
  var confirm2 = (message, element) => window.confirm(message);
  var allowAction = function(element, rails) {
    let callback;
    const message = element.getAttribute("data-confirm");
    if (!message) {
      return true;
    }
    let answer = false;
    if (fire(element, "confirm")) {
      try {
        answer = rails.confirm(message, element);
      } catch (error2) {
      }
      callback = fire(element, "confirm:complete", [answer]);
    }
    return answer && callback;
  };
  var handleDisabledElement = function(e) {
    const element = this;
    if (element.disabled) {
      stopEverything(e);
    }
  };
  var enableElement = (e) => {
    let element;
    if (e instanceof Event) {
      if (isXhrRedirect(e)) {
        return;
      }
      element = e.target;
    } else {
      element = e;
    }
    if (isContentEditable(element)) {
      return;
    }
    if (matches(element, linkDisableSelector)) {
      return enableLinkElement(element);
    } else if (matches(element, buttonDisableSelector) || matches(element, formEnableSelector)) {
      return enableFormElement(element);
    } else if (matches(element, formSubmitSelector)) {
      return enableFormElements(element);
    }
  };
  var disableElement = (e) => {
    const element = e instanceof Event ? e.target : e;
    if (isContentEditable(element)) {
      return;
    }
    if (matches(element, linkDisableSelector)) {
      return disableLinkElement(element);
    } else if (matches(element, buttonDisableSelector) || matches(element, formDisableSelector)) {
      return disableFormElement(element);
    } else if (matches(element, formSubmitSelector)) {
      return disableFormElements(element);
    }
  };
  var disableLinkElement = function(element) {
    if (getData(element, "ujs:disabled")) {
      return;
    }
    const replacement = element.getAttribute("data-disable-with");
    if (replacement != null) {
      setData(element, "ujs:enable-with", element.innerHTML);
      element.innerHTML = replacement;
    }
    element.addEventListener("click", stopEverything);
    return setData(element, "ujs:disabled", true);
  };
  var enableLinkElement = function(element) {
    const originalText = getData(element, "ujs:enable-with");
    if (originalText != null) {
      element.innerHTML = originalText;
      setData(element, "ujs:enable-with", null);
    }
    element.removeEventListener("click", stopEverything);
    return setData(element, "ujs:disabled", null);
  };
  var disableFormElements = (form) => formElements(form, formDisableSelector).forEach(disableFormElement);
  var disableFormElement = function(element) {
    if (getData(element, "ujs:disabled")) {
      return;
    }
    const replacement = element.getAttribute("data-disable-with");
    if (replacement != null) {
      if (matches(element, "button")) {
        setData(element, "ujs:enable-with", element.innerHTML);
        element.innerHTML = replacement;
      } else {
        setData(element, "ujs:enable-with", element.value);
        element.value = replacement;
      }
    }
    element.disabled = true;
    return setData(element, "ujs:disabled", true);
  };
  var enableFormElements = (form) => formElements(form, formEnableSelector).forEach((element) => enableFormElement(element));
  var enableFormElement = function(element) {
    const originalText = getData(element, "ujs:enable-with");
    if (originalText != null) {
      if (matches(element, "button")) {
        element.innerHTML = originalText;
      } else {
        element.value = originalText;
      }
      setData(element, "ujs:enable-with", null);
    }
    element.disabled = false;
    return setData(element, "ujs:disabled", null);
  };
  var isXhrRedirect = function(event) {
    const xhr = event.detail ? event.detail[0] : void 0;
    return xhr && xhr.getResponseHeader("X-Xhr-Redirect");
  };
  var handleMethodWithRails = (rails) => function(e) {
    const link = this;
    const method = link.getAttribute("data-method");
    if (!method) {
      return;
    }
    if (isContentEditable(this)) {
      return;
    }
    const href2 = rails.href(link);
    const csrfToken$1 = csrfToken();
    const csrfParam$1 = csrfParam();
    const form = document.createElement("form");
    let formContent = `<input name='_method' value='${method}' type='hidden' />`;
    if (csrfParam$1 && csrfToken$1 && !isCrossDomain(href2)) {
      formContent += `<input name='${csrfParam$1}' value='${csrfToken$1}' type='hidden' />`;
    }
    formContent += '<input type="submit" />';
    form.method = "post";
    form.action = href2;
    form.target = link.target;
    form.innerHTML = formContent;
    form.style.display = "none";
    document.body.appendChild(form);
    form.querySelector('[type="submit"]').click();
    stopEverything(e);
  };
  var isRemote = function(element) {
    const value = element.getAttribute("data-remote");
    return value != null && value !== "false";
  };
  var handleRemoteWithRails = (rails) => function(e) {
    let data, method, url;
    const element = this;
    if (!isRemote(element)) {
      return true;
    }
    if (!fire(element, "ajax:before")) {
      fire(element, "ajax:stopped");
      return false;
    }
    if (isContentEditable(element)) {
      fire(element, "ajax:stopped");
      return false;
    }
    const withCredentials = element.getAttribute("data-with-credentials");
    const dataType = element.getAttribute("data-type") || "script";
    if (matches(element, formSubmitSelector)) {
      const button = getData(element, "ujs:submit-button");
      method = getData(element, "ujs:submit-button-formmethod") || element.getAttribute("method") || "get";
      url = getData(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
      if (method.toUpperCase() === "GET") {
        url = url.replace(/\?.*$/, "");
      }
      if (element.enctype === "multipart/form-data") {
        data = new FormData(element);
        if (button != null) {
          data.append(button.name, button.value);
        }
      } else {
        data = serializeElement(element, button);
      }
      setData(element, "ujs:submit-button", null);
      setData(element, "ujs:submit-button-formmethod", null);
      setData(element, "ujs:submit-button-formaction", null);
    } else if (matches(element, buttonClickSelector) || matches(element, inputChangeSelector)) {
      method = element.getAttribute("data-method");
      url = element.getAttribute("data-url");
      data = serializeElement(element, element.getAttribute("data-params"));
    } else {
      method = element.getAttribute("data-method");
      url = rails.href(element);
      data = element.getAttribute("data-params");
    }
    ajax({
      type: method || "GET",
      url,
      data,
      dataType,
      beforeSend(xhr, options) {
        if (fire(element, "ajax:beforeSend", [xhr, options])) {
          return fire(element, "ajax:send", [xhr]);
        } else {
          fire(element, "ajax:stopped");
          return false;
        }
      },
      success(...args) {
        return fire(element, "ajax:success", args);
      },
      error(...args) {
        return fire(element, "ajax:error", args);
      },
      complete(...args) {
        return fire(element, "ajax:complete", args);
      },
      crossDomain: isCrossDomain(url),
      withCredentials: withCredentials != null && withCredentials !== "false"
    });
    stopEverything(e);
  };
  var formSubmitButtonClick = function(e) {
    const button = this;
    const { form } = button;
    if (!form) {
      return;
    }
    if (button.name) {
      setData(form, "ujs:submit-button", {
        name: button.name,
        value: button.value
      });
    }
    setData(form, "ujs:formnovalidate-button", button.formNoValidate);
    setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
    return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
  };
  var preventInsignificantClick = function(e) {
    const link = this;
    const method = (link.getAttribute("data-method") || "GET").toUpperCase();
    const data = link.getAttribute("data-params");
    const metaClick = e.metaKey || e.ctrlKey;
    const insignificantMetaClick = metaClick && method === "GET" && !data;
    const nonPrimaryMouseClick = e.button != null && e.button !== 0;
    if (nonPrimaryMouseClick || insignificantMetaClick) {
      e.stopImmediatePropagation();
    }
  };
  var Rails = {
    $,
    ajax,
    buttonClickSelector,
    buttonDisableSelector,
    confirm: confirm2,
    cspNonce,
    csrfToken,
    csrfParam,
    CSRFProtection,
    delegate,
    disableElement,
    enableElement,
    fileInputSelector,
    fire,
    formElements,
    formEnableSelector,
    formDisableSelector,
    formInputClickSelector,
    formSubmitButtonClick,
    formSubmitSelector,
    getData,
    handleDisabledElement,
    href,
    inputChangeSelector,
    isCrossDomain,
    linkClickSelector,
    linkDisableSelector,
    loadCSPNonce,
    matches,
    preventInsignificantClick,
    refreshCSRFTokens,
    serializeElement,
    setData,
    stopEverything
  };
  var handleConfirm = handleConfirmWithRails(Rails);
  Rails.handleConfirm = handleConfirm;
  var handleMethod = handleMethodWithRails(Rails);
  Rails.handleMethod = handleMethod;
  var handleRemote = handleRemoteWithRails(Rails);
  Rails.handleRemote = handleRemote;
  var start = function() {
    if (window._rails_loaded) {
      throw new Error("rails-ujs has already been loaded!");
    }
    window.addEventListener("pageshow", function() {
      $(formEnableSelector).forEach(function(el) {
        if (getData(el, "ujs:disabled")) {
          enableElement(el);
        }
      });
      $(linkDisableSelector).forEach(function(el) {
        if (getData(el, "ujs:disabled")) {
          enableElement(el);
        }
      });
    });
    delegate(document, linkDisableSelector, "ajax:complete", enableElement);
    delegate(document, linkDisableSelector, "ajax:stopped", enableElement);
    delegate(document, buttonDisableSelector, "ajax:complete", enableElement);
    delegate(document, buttonDisableSelector, "ajax:stopped", enableElement);
    delegate(document, linkClickSelector, "click", preventInsignificantClick);
    delegate(document, linkClickSelector, "click", handleDisabledElement);
    delegate(document, linkClickSelector, "click", handleConfirm);
    delegate(document, linkClickSelector, "click", disableElement);
    delegate(document, linkClickSelector, "click", handleRemote);
    delegate(document, linkClickSelector, "click", handleMethod);
    delegate(document, buttonClickSelector, "click", preventInsignificantClick);
    delegate(document, buttonClickSelector, "click", handleDisabledElement);
    delegate(document, buttonClickSelector, "click", handleConfirm);
    delegate(document, buttonClickSelector, "click", disableElement);
    delegate(document, buttonClickSelector, "click", handleRemote);
    delegate(document, inputChangeSelector, "change", handleDisabledElement);
    delegate(document, inputChangeSelector, "change", handleConfirm);
    delegate(document, inputChangeSelector, "change", handleRemote);
    delegate(document, formSubmitSelector, "submit", handleDisabledElement);
    delegate(document, formSubmitSelector, "submit", handleConfirm);
    delegate(document, formSubmitSelector, "submit", handleRemote);
    delegate(document, formSubmitSelector, "submit", (e) => setTimeout(() => disableElement(e), 13));
    delegate(document, formSubmitSelector, "ajax:send", disableElement);
    delegate(document, formSubmitSelector, "ajax:complete", enableElement);
    delegate(document, formInputClickSelector, "click", preventInsignificantClick);
    delegate(document, formInputClickSelector, "click", handleDisabledElement);
    delegate(document, formInputClickSelector, "click", handleConfirm);
    delegate(document, formInputClickSelector, "click", formSubmitButtonClick);
    document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
    document.addEventListener("DOMContentLoaded", loadCSPNonce);
    return window._rails_loaded = true;
  };
  Rails.start = start;
  if (typeof jQuery !== "undefined" && jQuery && jQuery.ajax) {
    if (jQuery.rails) {
      throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
    }
    jQuery.rails = Rails;
    jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
      if (!options.crossDomain) {
        return CSRFProtection(xhr);
      }
    });
  }

  // ../../node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class _FrameElement extends HTMLElement {
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new _FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left3, right3) {
    return expandURL(left3).href == expandURL(right3).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce2 = getMetaContent("csp-nonce");
      if (cspNonce2) {
        createdScriptElement.nonce = cspNonce2;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      composed: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i) => {
      const value = values[i] == void 0 ? "" : values[i];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_, i) => {
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        return "-";
      } else if (i == 14) {
        return "4";
      } else if (i == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
      return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector);
    }
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate2, method, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate2;
      this.method = method;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      const { fetchOptions } = this;
      this.delegate.prepareRequest(this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error2) {
        if (error2.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error2)) {
            this.delegate.requestErrored(this, error2);
          }
          throw error2;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isSafe ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isSafe() {
      return this.method === FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate2, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate2;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class _FormSubmission {
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    constructor(delegate2, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate2;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    get method() {
      var _a;
      const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
      return this.fetchRequest.isSafe;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await _FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareRequest(request) {
      if (!request.isSafe) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          request.headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      this.setSubmitsWith();
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      this.resetSubmitterText();
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
      if (!this.submitter || !this.submitsWith)
        return;
      if (this.submitter.matches("button")) {
        this.originalSubmitText = this.submitter.innerHTML;
        this.submitter.innerHTML = this.submitsWith;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        this.originalSubmitText = input.value;
        input.value = this.submitsWith;
      }
    }
    resetSubmitterText() {
      if (!this.submitter || !this.originalSubmitText)
        return;
      if (this.submitter.matches("button")) {
        this.submitter.innerHTML = this.originalSubmitText;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        input.value = this.originalSubmitText;
      }
    }
    requestMustRedirect(request) {
      return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
      var _a;
      return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate2, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate2;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
      const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
      for (const element of document.getElementsByName(target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var View = class {
    constructor(delegate2, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate2;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x, y }) {
      this.scrollRoot.scrollTo(x, y);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    missing() {
      this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate2, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate2;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
      const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate2, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate2;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
      for (const element of document.getElementsByName(anchor.target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var FormLinkClickObserver = class {
    constructor(delegate2, element) {
      this.delegate = delegate2;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const form = document.createElement("form");
      const type = "hidden";
      for (const [name, value] of location2.searchParams) {
        form.append(Object.assign(document.createElement("input"), { type, name, value }));
      }
      const action = Object.assign(location2, { search: "" });
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action.href);
      form.setAttribute("hidden", "");
      const method = link.getAttribute("data-turbo-method");
      if (method)
        form.setAttribute("method", method);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = getVisitAction(link);
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    static async preservingPermanentElements(delegate2, permanentElementMap, callback) {
      const bardo = new this(delegate2, permanentElementMap);
      bardo.enter();
      await callback();
      bardo.leave();
    }
    constructor(delegate2, permanentElementMap) {
      this.delegate = delegate2;
      this.permanentElementMap = permanentElementMap;
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    async preservingPermanentElements(callback) {
      await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    constructor(delegate2, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate2;
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class _ProgressBar {
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${_ProgressBar.animationDuration}ms ease-out,
          opacity ${_ProgressBar.animationDuration / 2}ms ${_ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, _ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, _ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = _ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class _PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new _PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate2, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate2;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method = getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response,
          shouldCacheSnapshot: false,
          willRender: false
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareRequest(request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = (/* @__PURE__ */ new Date()).getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.selector = "[data-turbo-temporary]";
      this.deprecatedSelector = "[data-turbo-cache=false]";
      this.started = false;
      this.removeTemporaryElements = (_event) => {
        for (const element of this.temporaryElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    get temporaryElements() {
      return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
      const elements = document.querySelectorAll(this.deprecatedSelector);
      if (elements.length) {
        console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
      }
      return [...elements];
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate2) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate2) {
      this.delegate = delegate2;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.isSafe;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
      return getVisitAction(submitter, formElement) || "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate2) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate2) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate2) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        await this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const mergedHeadElements = this.mergeProvisionalElements();
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      await mergedHeadElements;
      await newStylesheetElements;
    }
    async replaceBody() {
      await this.preservingPermanentElements(async () => {
        this.activateNewBody();
        await this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    async mergeProvisionalElements() {
      const newHeadElements = [...this.newHeadProvisionalElements];
      for (const element of this.currentHeadProvisionalElements) {
        if (!this.isCurrentElementInElementList(element, newHeadElements)) {
          document.head.removeChild(element);
        }
      }
      for (const element of newHeadElements) {
        document.head.appendChild(element);
      }
    }
    isCurrentElementInElementList(element, elementList) {
      for (const [index, newElement] of elementList.entries()) {
        if (element.tagName == "TITLE") {
          if (newElement.tagName != "TITLE") {
            continue;
          }
          if (element.innerHTML == newElement.innerHTML) {
            elementList.splice(index, 1);
            return true;
          }
        }
        if (newElement.isEqualNode(element)) {
          elementList.splice(index, 1);
          return true;
        }
      }
      return false;
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    async assignNewBody() {
      await this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index = this.keys.indexOf(key);
      if (index > -1)
        this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
      if (snapshot.isCacheable) {
        this.delegate.viewWillCacheSnapshot();
        const { lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate2) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate2;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = findClosestRecursively(element, "[data-turbo]");
      const withinFrame = findClosestRecursively(element, "turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      return getVisitAction(link) || "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e) => e.remove());
    },
    replace() {
      this.targetElements.forEach((e) => e.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((targetElement) => {
        targetElement.innerHTML = "";
        targetElement.append(this.templateContent);
      });
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start2() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start: start2,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var TurboFrameMissingError = class extends Error {
  };
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const document2 = parseHTMLDocument(html);
          const pageSnapshot = PageSnapshot.fromDocument(document2);
          if (pageSnapshot.isVisitable) {
            await this.loadFrameResponse(fetchResponse, document2);
          } else {
            await this.handleUnvisitableFrameResponse(fetchResponse);
          }
        }
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(element) {
      this.proposeVisitIfNavigatedWithAction(element, element);
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareRequest(fetchRequest);
      this.formSubmission.start();
    }
    prepareRequest(request) {
      var _a;
      request.headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
      if (!formSubmission.isSafe) {
        session.clearCache();
      }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
      session.clearCache();
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async loadFrameResponse(fetchResponse, document2) {
      const newFrameElement = await this.extractForeignFrameElement(document2.body);
      if (newFrameElement) {
        const snapshot = new Snapshot(newFrameElement);
        const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
        if (this.view.renderPromise)
          await this.view.renderPromise;
        this.changeHistory();
        await this.view.render(renderer);
        this.complete = true;
        session.frameRendered(fetchResponse, this.element);
        session.frameLoaded(this.element);
        this.fetchResponseLoaded(fetchResponse);
      } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
        this.handleFrameMissingFromResponse(fetchResponse);
      }
    }
    async visit(url) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (this.action) {
        const pageSnapshot = PageSnapshot.fromElement(frame).clone();
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method = getHistoryMethodForAction(this.action);
        session.history.update(method, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    async handleUnvisitableFrameResponse(fetchResponse) {
      console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
      await this.visitResponse(fetchResponse.response);
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url, options = {}) => {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options);
        }
      };
      const event = dispatch("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
      this.view.missing();
      this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
      const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
      throw new TurboFrameMissingError(message);
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error2) {
        console.error(error2);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class _StreamElement extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error2) {
        console.error(error2);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c) => c.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e) => [...e.children]).filter((c) => !!c.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c) => !!c.id).map((c) => c.id);
      return existingChildren.filter((c) => newChildrenIds.includes(c.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: _StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo;
  start2();

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer3 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer3();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m2, x) {
        return "_" + x.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, {
        received: this.dispatchMessageEvent.bind(this),
        connected: this.subscriptionConnected.bind(this),
        disconnected: this.subscriptionDisconnected.bind(this)
      });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    subscriptionConnected() {
      this.setAttribute("connected", "");
    }
    subscriptionDisconnected() {
      this.removeAttribute("connected");
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  if (customElements.get("turbo-cable-stream-source") === void 0) {
    customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const body = isBodyInit(fetchOptions.body) ? fetchOptions.body : new URLSearchParams();
        const method = determineFetchMethod(submitter, body, form);
        if (!/get/i.test(method)) {
          if (/post/i.test(method)) {
            body.delete("_method");
          } else {
            body.set("_method", method);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }
  function determineFetchMethod(submitter, body, form) {
    const formMethod = determineFormMethod(submitter);
    const overrideMethod = body.get("_method");
    const method = form.getAttribute("method") || "get";
    if (typeof formMethod == "string") {
      return formMethod;
    } else if (typeof overrideMethod == "string") {
      return overrideMethod;
    } else {
      return method;
    }
  }
  function determineFormMethod(submitter) {
    if (submitter instanceof HTMLButtonElement || submitter instanceof HTMLInputElement) {
      if (submitter.hasAttribute("formmethod")) {
        return submitter.formMethod;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
  function isBodyInit(body) {
    return body instanceof FormData || body instanceof URLSearchParams;
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // jquery.js
  var import_jquery = __toESM(require_jquery());
  window.jQuery = import_jquery.default;
  window.$ = import_jquery.default;

  // ../../vendor/assets/javascripts/jquery-ui.js
  (function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
      define(["jquery"], factory);
    } else {
      factory(jQuery);
    }
  })(function($2) {
    "use strict";
    $2.ui = $2.ui || {};
    var version = $2.ui.version = "1.13.0";
    var widgetUuid = 0;
    var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
    var widgetSlice = Array.prototype.slice;
    $2.cleanData = /* @__PURE__ */ function(orig) {
      return function(elems) {
        var events, elem, i;
        for (i = 0; (elem = elems[i]) != null; i++) {
          events = $2._data(elem, "events");
          if (events && events.remove) {
            $2(elem).triggerHandler("remove");
          }
        }
        orig(elems);
      };
    }($2.cleanData);
    $2.widget = function(name, base, prototype) {
      var existingConstructor, constructor, basePrototype;
      var proxiedPrototype = {};
      var namespace = name.split(".")[0];
      name = name.split(".")[1];
      var fullName = namespace + "-" + name;
      if (!prototype) {
        prototype = base;
        base = $2.Widget;
      }
      if (Array.isArray(prototype)) {
        prototype = $2.extend.apply(null, [{}].concat(prototype));
      }
      $2.expr.pseudos[fullName.toLowerCase()] = function(elem) {
        return !!$2.data(elem, fullName);
      };
      $2[namespace] = $2[namespace] || {};
      existingConstructor = $2[namespace][name];
      constructor = $2[namespace][name] = function(options, element) {
        if (!this._createWidget) {
          return new constructor(options, element);
        }
        if (arguments.length) {
          this._createWidget(options, element);
        }
      };
      $2.extend(constructor, existingConstructor, {
        version: prototype.version,
        // Copy the object used to create the prototype in case we need to
        // redefine the widget later
        _proto: $2.extend({}, prototype),
        // Track widgets that inherit from this widget in case this widget is
        // redefined after a widget inherits from it
        _childConstructors: []
      });
      basePrototype = new base();
      basePrototype.options = $2.widget.extend({}, basePrototype.options);
      $2.each(prototype, function(prop, value) {
        if (typeof value !== "function") {
          proxiedPrototype[prop] = value;
          return;
        }
        proxiedPrototype[prop] = /* @__PURE__ */ function() {
          function _super() {
            return base.prototype[prop].apply(this, arguments);
          }
          function _superApply(args) {
            return base.prototype[prop].apply(this, args);
          }
          return function() {
            var __super = this._super;
            var __superApply = this._superApply;
            var returnValue;
            this._super = _super;
            this._superApply = _superApply;
            returnValue = value.apply(this, arguments);
            this._super = __super;
            this._superApply = __superApply;
            return returnValue;
          };
        }();
      });
      constructor.prototype = $2.widget.extend(basePrototype, {
        // TODO: remove support for widgetEventPrefix
        // always use the name + a colon as the prefix, e.g., draggable:start
        // don't prefix for widgets that aren't DOM-based
        widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
      }, proxiedPrototype, {
        constructor,
        namespace,
        widgetName: name,
        widgetFullName: fullName
      });
      if (existingConstructor) {
        $2.each(existingConstructor._childConstructors, function(i, child) {
          var childPrototype = child.prototype;
          $2.widget(
            childPrototype.namespace + "." + childPrototype.widgetName,
            constructor,
            child._proto
          );
        });
        delete existingConstructor._childConstructors;
      } else {
        base._childConstructors.push(constructor);
      }
      $2.widget.bridge(name, constructor);
      return constructor;
    };
    $2.widget.extend = function(target) {
      var input = widgetSlice.call(arguments, 1);
      var inputIndex = 0;
      var inputLength = input.length;
      var key;
      var value;
      for (; inputIndex < inputLength; inputIndex++) {
        for (key in input[inputIndex]) {
          value = input[inputIndex][key];
          if (widgetHasOwnProperty.call(input[inputIndex], key) && value !== void 0) {
            if ($2.isPlainObject(value)) {
              target[key] = $2.isPlainObject(target[key]) ? $2.widget.extend({}, target[key], value) : (
                // Don't extend strings, arrays, etc. with objects
                $2.widget.extend({}, value)
              );
            } else {
              target[key] = value;
            }
          }
        }
      }
      return target;
    };
    $2.widget.bridge = function(name, object) {
      var fullName = object.prototype.widgetFullName || name;
      $2.fn[name] = function(options) {
        var isMethodCall = typeof options === "string";
        var args = widgetSlice.call(arguments, 1);
        var returnValue = this;
        if (isMethodCall) {
          if (!this.length && options === "instance") {
            returnValue = void 0;
          } else {
            this.each(function() {
              var methodValue;
              var instance = $2.data(this, fullName);
              if (options === "instance") {
                returnValue = instance;
                return false;
              }
              if (!instance) {
                return $2.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'");
              }
              if (typeof instance[options] !== "function" || options.charAt(0) === "_") {
                return $2.error("no such method '" + options + "' for " + name + " widget instance");
              }
              methodValue = instance[options].apply(instance, args);
              if (methodValue !== instance && methodValue !== void 0) {
                returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                return false;
              }
            });
          }
        } else {
          if (args.length) {
            options = $2.widget.extend.apply(null, [options].concat(args));
          }
          this.each(function() {
            var instance = $2.data(this, fullName);
            if (instance) {
              instance.option(options || {});
              if (instance._init) {
                instance._init();
              }
            } else {
              $2.data(this, fullName, new object(options, this));
            }
          });
        }
        return returnValue;
      };
    };
    $2.Widget = function() {
    };
    $2.Widget._childConstructors = [];
    $2.Widget.prototype = {
      widgetName: "widget",
      widgetEventPrefix: "",
      defaultElement: "<div>",
      options: {
        classes: {},
        disabled: false,
        // Callbacks
        create: null
      },
      _createWidget: function(options, element) {
        element = $2(element || this.defaultElement || this)[0];
        this.element = $2(element);
        this.uuid = widgetUuid++;
        this.eventNamespace = "." + this.widgetName + this.uuid;
        this.bindings = $2();
        this.hoverable = $2();
        this.focusable = $2();
        this.classesElementLookup = {};
        if (element !== this) {
          $2.data(element, this.widgetFullName, this);
          this._on(true, this.element, {
            remove: function(event) {
              if (event.target === element) {
                this.destroy();
              }
            }
          });
          this.document = $2(element.style ? (
            // Element within the document
            element.ownerDocument
          ) : (
            // Element is window or document
            element.document || element
          ));
          this.window = $2(this.document[0].defaultView || this.document[0].parentWindow);
        }
        this.options = $2.widget.extend(
          {},
          this.options,
          this._getCreateOptions(),
          options
        );
        this._create();
        if (this.options.disabled) {
          this._setOptionDisabled(this.options.disabled);
        }
        this._trigger("create", null, this._getCreateEventData());
        this._init();
      },
      _getCreateOptions: function() {
        return {};
      },
      _getCreateEventData: $2.noop,
      _create: $2.noop,
      _init: $2.noop,
      destroy: function() {
        var that = this;
        this._destroy();
        $2.each(this.classesElementLookup, function(key, value) {
          that._removeClass(value, key);
        });
        this.element.off(this.eventNamespace).removeData(this.widgetFullName);
        this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
        this.bindings.off(this.eventNamespace);
      },
      _destroy: $2.noop,
      widget: function() {
        return this.element;
      },
      option: function(key, value) {
        var options = key;
        var parts;
        var curOption;
        var i;
        if (arguments.length === 0) {
          return $2.widget.extend({}, this.options);
        }
        if (typeof key === "string") {
          options = {};
          parts = key.split(".");
          key = parts.shift();
          if (parts.length) {
            curOption = options[key] = $2.widget.extend({}, this.options[key]);
            for (i = 0; i < parts.length - 1; i++) {
              curOption[parts[i]] = curOption[parts[i]] || {};
              curOption = curOption[parts[i]];
            }
            key = parts.pop();
            if (arguments.length === 1) {
              return curOption[key] === void 0 ? null : curOption[key];
            }
            curOption[key] = value;
          } else {
            if (arguments.length === 1) {
              return this.options[key] === void 0 ? null : this.options[key];
            }
            options[key] = value;
          }
        }
        this._setOptions(options);
        return this;
      },
      _setOptions: function(options) {
        var key;
        for (key in options) {
          this._setOption(key, options[key]);
        }
        return this;
      },
      _setOption: function(key, value) {
        if (key === "classes") {
          this._setOptionClasses(value);
        }
        this.options[key] = value;
        if (key === "disabled") {
          this._setOptionDisabled(value);
        }
        return this;
      },
      _setOptionClasses: function(value) {
        var classKey, elements, currentElements;
        for (classKey in value) {
          currentElements = this.classesElementLookup[classKey];
          if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {
            continue;
          }
          elements = $2(currentElements.get());
          this._removeClass(currentElements, classKey);
          elements.addClass(this._classes({
            element: elements,
            keys: classKey,
            classes: value,
            add: true
          }));
        }
      },
      _setOptionDisabled: function(value) {
        this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);
        if (value) {
          this._removeClass(this.hoverable, null, "ui-state-hover");
          this._removeClass(this.focusable, null, "ui-state-focus");
        }
      },
      enable: function() {
        return this._setOptions({ disabled: false });
      },
      disable: function() {
        return this._setOptions({ disabled: true });
      },
      _classes: function(options) {
        var full = [];
        var that = this;
        options = $2.extend({
          element: this.element,
          classes: this.options.classes || {}
        }, options);
        function bindRemoveEvent() {
          options.element.each(function(_, element) {
            var isTracked = $2.map(that.classesElementLookup, function(elements) {
              return elements;
            }).some(function(elements) {
              return elements.is(element);
            });
            if (!isTracked) {
              that._on($2(element), {
                remove: "_untrackClassesElement"
              });
            }
          });
        }
        function processClassString(classes, checkOption) {
          var current, i;
          for (i = 0; i < classes.length; i++) {
            current = that.classesElementLookup[classes[i]] || $2();
            if (options.add) {
              bindRemoveEvent();
              current = $2($2.uniqueSort(current.get().concat(options.element.get())));
            } else {
              current = $2(current.not(options.element).get());
            }
            that.classesElementLookup[classes[i]] = current;
            full.push(classes[i]);
            if (checkOption && options.classes[classes[i]]) {
              full.push(options.classes[classes[i]]);
            }
          }
        }
        if (options.keys) {
          processClassString(options.keys.match(/\S+/g) || [], true);
        }
        if (options.extra) {
          processClassString(options.extra.match(/\S+/g) || []);
        }
        return full.join(" ");
      },
      _untrackClassesElement: function(event) {
        var that = this;
        $2.each(that.classesElementLookup, function(key, value) {
          if ($2.inArray(event.target, value) !== -1) {
            that.classesElementLookup[key] = $2(value.not(event.target).get());
          }
        });
        this._off($2(event.target));
      },
      _removeClass: function(element, keys, extra) {
        return this._toggleClass(element, keys, extra, false);
      },
      _addClass: function(element, keys, extra) {
        return this._toggleClass(element, keys, extra, true);
      },
      _toggleClass: function(element, keys, extra, add2) {
        add2 = typeof add2 === "boolean" ? add2 : extra;
        var shift = typeof element === "string" || element === null, options = {
          extra: shift ? keys : extra,
          keys: shift ? element : keys,
          element: shift ? this.element : element,
          add: add2
        };
        options.element.toggleClass(this._classes(options), add2);
        return this;
      },
      _on: function(suppressDisabledCheck, element, handlers) {
        var delegateElement;
        var instance = this;
        if (typeof suppressDisabledCheck !== "boolean") {
          handlers = element;
          element = suppressDisabledCheck;
          suppressDisabledCheck = false;
        }
        if (!handlers) {
          handlers = element;
          element = this.element;
          delegateElement = this.widget();
        } else {
          element = delegateElement = $2(element);
          this.bindings = this.bindings.add(element);
        }
        $2.each(handlers, function(event, handler) {
          function handlerProxy() {
            if (!suppressDisabledCheck && (instance.options.disabled === true || $2(this).hasClass("ui-state-disabled"))) {
              return;
            }
            return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
          }
          if (typeof handler !== "string") {
            handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $2.guid++;
          }
          var match = event.match(/^([\w:-]*)\s*(.*)$/);
          var eventName = match[1] + instance.eventNamespace;
          var selector = match[2];
          if (selector) {
            delegateElement.on(eventName, selector, handlerProxy);
          } else {
            element.on(eventName, handlerProxy);
          }
        });
      },
      _off: function(element, eventName) {
        eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
        element.off(eventName);
        this.bindings = $2(this.bindings.not(element).get());
        this.focusable = $2(this.focusable.not(element).get());
        this.hoverable = $2(this.hoverable.not(element).get());
      },
      _delay: function(handler, delay) {
        function handlerProxy() {
          return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
        }
        var instance = this;
        return setTimeout(handlerProxy, delay || 0);
      },
      _hoverable: function(element) {
        this.hoverable = this.hoverable.add(element);
        this._on(element, {
          mouseenter: function(event) {
            this._addClass($2(event.currentTarget), null, "ui-state-hover");
          },
          mouseleave: function(event) {
            this._removeClass($2(event.currentTarget), null, "ui-state-hover");
          }
        });
      },
      _focusable: function(element) {
        this.focusable = this.focusable.add(element);
        this._on(element, {
          focusin: function(event) {
            this._addClass($2(event.currentTarget), null, "ui-state-focus");
          },
          focusout: function(event) {
            this._removeClass($2(event.currentTarget), null, "ui-state-focus");
          }
        });
      },
      _trigger: function(type, event, data2) {
        var prop, orig;
        var callback = this.options[type];
        data2 = data2 || {};
        event = $2.Event(event);
        event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
        event.target = this.element[0];
        orig = event.originalEvent;
        if (orig) {
          for (prop in orig) {
            if (!(prop in event)) {
              event[prop] = orig[prop];
            }
          }
        }
        this.element.trigger(event, data2);
        return !(typeof callback === "function" && callback.apply(this.element[0], [event].concat(data2)) === false || event.isDefaultPrevented());
      }
    };
    $2.each({ show: "fadeIn", hide: "fadeOut" }, function(method, defaultEffect) {
      $2.Widget.prototype["_" + method] = function(element, options, callback) {
        if (typeof options === "string") {
          options = { effect: options };
        }
        var hasOptions;
        var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
        options = options || {};
        if (typeof options === "number") {
          options = { duration: options };
        } else if (options === true) {
          options = {};
        }
        hasOptions = !$2.isEmptyObject(options);
        options.complete = callback;
        if (options.delay) {
          element.delay(options.delay);
        }
        if (hasOptions && $2.effects && $2.effects.effect[effectName]) {
          element[method](options);
        } else if (effectName !== method && element[effectName]) {
          element[effectName](options.duration, options.easing, callback);
        } else {
          element.queue(function(next) {
            $2(this)[method]();
            if (callback) {
              callback.call(element[0]);
            }
            next();
          });
        }
      };
    });
    var widget = $2.widget;
    (function() {
      var cachedScrollbarWidth, max2 = Math.max, abs = Math.abs, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $2.fn.position;
      function getOffsets(offsets, width, height) {
        return [
          parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
          parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
        ];
      }
      function parseCss(element, property) {
        return parseInt($2.css(element, property), 10) || 0;
      }
      function isWindow(obj) {
        return obj != null && obj === obj.window;
      }
      function getDimensions(elem) {
        var raw = elem[0];
        if (raw.nodeType === 9) {
          return {
            width: elem.width(),
            height: elem.height(),
            offset: { top: 0, left: 0 }
          };
        }
        if (isWindow(raw)) {
          return {
            width: elem.width(),
            height: elem.height(),
            offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
          };
        }
        if (raw.preventDefault) {
          return {
            width: 0,
            height: 0,
            offset: { top: raw.pageY, left: raw.pageX }
          };
        }
        return {
          width: elem.outerWidth(),
          height: elem.outerHeight(),
          offset: elem.offset()
        };
      }
      $2.position = {
        scrollbarWidth: function() {
          if (cachedScrollbarWidth !== void 0) {
            return cachedScrollbarWidth;
          }
          var w1, w2, div = $2("<div style='display:block;position:absolute;width:200px;height:200px;overflow:hidden;'><div style='height:300px;width:auto;'></div></div>"), innerDiv = div.children()[0];
          $2("body").append(div);
          w1 = innerDiv.offsetWidth;
          div.css("overflow", "scroll");
          w2 = innerDiv.offsetWidth;
          if (w1 === w2) {
            w2 = div[0].clientWidth;
          }
          div.remove();
          return cachedScrollbarWidth = w1 - w2;
        },
        getScrollInfo: function(within2) {
          var overflowX = within2.isWindow || within2.isDocument ? "" : within2.element.css("overflow-x"), overflowY = within2.isWindow || within2.isDocument ? "" : within2.element.css("overflow-y"), hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within2.width < within2.element[0].scrollWidth, hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within2.height < within2.element[0].scrollHeight;
          return {
            width: hasOverflowY ? $2.position.scrollbarWidth() : 0,
            height: hasOverflowX ? $2.position.scrollbarWidth() : 0
          };
        },
        getWithinInfo: function(element) {
          var withinElement = $2(element || window), isElemWindow = isWindow(withinElement[0]), isDocument = !!withinElement[0] && withinElement[0].nodeType === 9, hasOffset = !isElemWindow && !isDocument;
          return {
            element: withinElement,
            isWindow: isElemWindow,
            isDocument,
            offset: hasOffset ? $2(element).offset() : { left: 0, top: 0 },
            scrollLeft: withinElement.scrollLeft(),
            scrollTop: withinElement.scrollTop(),
            width: withinElement.outerWidth(),
            height: withinElement.outerHeight()
          };
        }
      };
      $2.fn.position = function(options) {
        if (!options || !options.of) {
          return _position.apply(this, arguments);
        }
        options = $2.extend({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = typeof options.of === "string" ? $2(document).find(options.of) : $2(options.of), within2 = $2.position.getWithinInfo(options.within), scrollInfo = $2.position.getScrollInfo(within2), collision = (options.collision || "flip").split(" "), offsets = {};
        dimensions = getDimensions(target);
        if (target[0].preventDefault) {
          options.at = "left top";
        }
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        basePosition = $2.extend({}, targetOffset);
        $2.each(["my", "at"], function() {
          var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
          if (pos.length === 1) {
            pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
          }
          pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
          pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
          horizontalOffset = roffset.exec(pos[0]);
          verticalOffset = roffset.exec(pos[1]);
          offsets[this] = [
            horizontalOffset ? horizontalOffset[0] : 0,
            verticalOffset ? verticalOffset[0] : 0
          ];
          options[this] = [
            rposition.exec(pos[0])[0],
            rposition.exec(pos[1])[0]
          ];
        });
        if (collision.length === 1) {
          collision[1] = collision[0];
        }
        if (options.at[0] === "right") {
          basePosition.left += targetWidth;
        } else if (options.at[0] === "center") {
          basePosition.left += targetWidth / 2;
        }
        if (options.at[1] === "bottom") {
          basePosition.top += targetHeight;
        } else if (options.at[1] === "center") {
          basePosition.top += targetHeight / 2;
        }
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        return this.each(function() {
          var collisionPosition, using, elem = $2(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position2 = $2.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
          if (options.my[0] === "right") {
            position2.left -= elemWidth;
          } else if (options.my[0] === "center") {
            position2.left -= elemWidth / 2;
          }
          if (options.my[1] === "bottom") {
            position2.top -= elemHeight;
          } else if (options.my[1] === "center") {
            position2.top -= elemHeight / 2;
          }
          position2.left += myOffset[0];
          position2.top += myOffset[1];
          collisionPosition = {
            marginLeft,
            marginTop
          };
          $2.each(["left", "top"], function(i, dir) {
            if ($2.ui.position[collision[i]]) {
              $2.ui.position[collision[i]][dir](position2, {
                targetWidth,
                targetHeight,
                elemWidth,
                elemHeight,
                collisionPosition,
                collisionWidth,
                collisionHeight,
                offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                my: options.my,
                at: options.at,
                within: within2,
                elem
              });
            }
          });
          if (options.using) {
            using = function(props) {
              var left3 = targetOffset.left - position2.left, right3 = left3 + targetWidth - elemWidth, top3 = targetOffset.top - position2.top, bottom3 = top3 + targetHeight - elemHeight, feedback = {
                target: {
                  element: target,
                  left: targetOffset.left,
                  top: targetOffset.top,
                  width: targetWidth,
                  height: targetHeight
                },
                element: {
                  element: elem,
                  left: position2.left,
                  top: position2.top,
                  width: elemWidth,
                  height: elemHeight
                },
                horizontal: right3 < 0 ? "left" : left3 > 0 ? "right" : "center",
                vertical: bottom3 < 0 ? "top" : top3 > 0 ? "bottom" : "middle"
              };
              if (targetWidth < elemWidth && abs(left3 + right3) < targetWidth) {
                feedback.horizontal = "center";
              }
              if (targetHeight < elemHeight && abs(top3 + bottom3) < targetHeight) {
                feedback.vertical = "middle";
              }
              if (max2(abs(left3), abs(right3)) > max2(abs(top3), abs(bottom3))) {
                feedback.important = "horizontal";
              } else {
                feedback.important = "vertical";
              }
              options.using.call(this, props, feedback);
            };
          }
          elem.offset($2.extend(position2, { using }));
        });
      };
      $2.ui.position = {
        fit: {
          left: function(position2, data2) {
            var within2 = data2.within, withinOffset = within2.isWindow ? within2.scrollLeft : within2.offset.left, outerWidth = within2.width, collisionPosLeft = position2.left - data2.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data2.collisionWidth - outerWidth - withinOffset, newOverRight;
            if (data2.collisionWidth > outerWidth) {
              if (overLeft > 0 && overRight <= 0) {
                newOverRight = position2.left + overLeft + data2.collisionWidth - outerWidth - withinOffset;
                position2.left += overLeft - newOverRight;
              } else if (overRight > 0 && overLeft <= 0) {
                position2.left = withinOffset;
              } else {
                if (overLeft > overRight) {
                  position2.left = withinOffset + outerWidth - data2.collisionWidth;
                } else {
                  position2.left = withinOffset;
                }
              }
            } else if (overLeft > 0) {
              position2.left += overLeft;
            } else if (overRight > 0) {
              position2.left -= overRight;
            } else {
              position2.left = max2(position2.left - collisionPosLeft, position2.left);
            }
          },
          top: function(position2, data2) {
            var within2 = data2.within, withinOffset = within2.isWindow ? within2.scrollTop : within2.offset.top, outerHeight = data2.within.height, collisionPosTop = position2.top - data2.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data2.collisionHeight - outerHeight - withinOffset, newOverBottom;
            if (data2.collisionHeight > outerHeight) {
              if (overTop > 0 && overBottom <= 0) {
                newOverBottom = position2.top + overTop + data2.collisionHeight - outerHeight - withinOffset;
                position2.top += overTop - newOverBottom;
              } else if (overBottom > 0 && overTop <= 0) {
                position2.top = withinOffset;
              } else {
                if (overTop > overBottom) {
                  position2.top = withinOffset + outerHeight - data2.collisionHeight;
                } else {
                  position2.top = withinOffset;
                }
              }
            } else if (overTop > 0) {
              position2.top += overTop;
            } else if (overBottom > 0) {
              position2.top -= overBottom;
            } else {
              position2.top = max2(position2.top - collisionPosTop, position2.top);
            }
          }
        },
        flip: {
          left: function(position2, data2) {
            var within2 = data2.within, withinOffset = within2.offset.left + within2.scrollLeft, outerWidth = within2.width, offsetLeft = within2.isWindow ? within2.scrollLeft : within2.offset.left, collisionPosLeft = position2.left - data2.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data2.collisionWidth - outerWidth - offsetLeft, myOffset = data2.my[0] === "left" ? -data2.elemWidth : data2.my[0] === "right" ? data2.elemWidth : 0, atOffset = data2.at[0] === "left" ? data2.targetWidth : data2.at[0] === "right" ? -data2.targetWidth : 0, offset2 = -2 * data2.offset[0], newOverRight, newOverLeft;
            if (overLeft < 0) {
              newOverRight = position2.left + myOffset + atOffset + offset2 + data2.collisionWidth - outerWidth - withinOffset;
              if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                position2.left += myOffset + atOffset + offset2;
              }
            } else if (overRight > 0) {
              newOverLeft = position2.left - data2.collisionPosition.marginLeft + myOffset + atOffset + offset2 - offsetLeft;
              if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                position2.left += myOffset + atOffset + offset2;
              }
            }
          },
          top: function(position2, data2) {
            var within2 = data2.within, withinOffset = within2.offset.top + within2.scrollTop, outerHeight = within2.height, offsetTop = within2.isWindow ? within2.scrollTop : within2.offset.top, collisionPosTop = position2.top - data2.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data2.collisionHeight - outerHeight - offsetTop, top3 = data2.my[1] === "top", myOffset = top3 ? -data2.elemHeight : data2.my[1] === "bottom" ? data2.elemHeight : 0, atOffset = data2.at[1] === "top" ? data2.targetHeight : data2.at[1] === "bottom" ? -data2.targetHeight : 0, offset2 = -2 * data2.offset[1], newOverTop, newOverBottom;
            if (overTop < 0) {
              newOverBottom = position2.top + myOffset + atOffset + offset2 + data2.collisionHeight - outerHeight - withinOffset;
              if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                position2.top += myOffset + atOffset + offset2;
              }
            } else if (overBottom > 0) {
              newOverTop = position2.top - data2.collisionPosition.marginTop + myOffset + atOffset + offset2 - offsetTop;
              if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                position2.top += myOffset + atOffset + offset2;
              }
            }
          }
        },
        flipfit: {
          left: function() {
            $2.ui.position.flip.left.apply(this, arguments);
            $2.ui.position.fit.left.apply(this, arguments);
          },
          top: function() {
            $2.ui.position.flip.top.apply(this, arguments);
            $2.ui.position.fit.top.apply(this, arguments);
          }
        }
      };
    })();
    var position = $2.ui.position;
    var data = $2.extend($2.expr.pseudos, {
      data: $2.expr.createPseudo ? $2.expr.createPseudo(function(dataName) {
        return function(elem) {
          return !!$2.data(elem, dataName);
        };
      }) : (
        // Support: jQuery <1.8
        function(elem, i, match) {
          return !!$2.data(elem, match[3]);
        }
      )
    });
    var disableSelection = $2.fn.extend({
      disableSelection: function() {
        var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
        return function() {
          return this.on(eventType + ".ui-disableSelection", function(event) {
            event.preventDefault();
          });
        };
      }(),
      enableSelection: function() {
        return this.off(".ui-disableSelection");
      }
    });
    $2.ui.focusable = function(element, hasTabindex) {
      var map, mapName, img, focusableIfVisible, fieldset, nodeName = element.nodeName.toLowerCase();
      if ("area" === nodeName) {
        map = element.parentNode;
        mapName = map.name;
        if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
          return false;
        }
        img = $2("img[usemap='#" + mapName + "']");
        return img.length > 0 && img.is(":visible");
      }
      if (/^(input|select|textarea|button|object)$/.test(nodeName)) {
        focusableIfVisible = !element.disabled;
        if (focusableIfVisible) {
          fieldset = $2(element).closest("fieldset")[0];
          if (fieldset) {
            focusableIfVisible = !fieldset.disabled;
          }
        }
      } else if ("a" === nodeName) {
        focusableIfVisible = element.href || hasTabindex;
      } else {
        focusableIfVisible = hasTabindex;
      }
      return focusableIfVisible && $2(element).is(":visible") && visible($2(element));
    };
    function visible(element) {
      var visibility = element.css("visibility");
      while (visibility === "inherit") {
        element = element.parent();
        visibility = element.css("visibility");
      }
      return visibility === "visible";
    }
    $2.extend($2.expr.pseudos, {
      focusable: function(element) {
        return $2.ui.focusable(element, $2.attr(element, "tabindex") != null);
      }
    });
    var focusable = $2.ui.focusable;
    var form = $2.fn._form = function() {
      return typeof this[0].form === "string" ? this.closest("form") : $2(this[0].form);
    };
    var formResetMixin = $2.ui.formResetMixin = {
      _formResetHandler: function() {
        var form2 = $2(this);
        setTimeout(function() {
          var instances = form2.data("ui-form-reset-instances");
          $2.each(instances, function() {
            this.refresh();
          });
        });
      },
      _bindFormResetHandler: function() {
        this.form = this.element._form();
        if (!this.form.length) {
          return;
        }
        var instances = this.form.data("ui-form-reset-instances") || [];
        if (!instances.length) {
          this.form.on("reset.ui-form-reset", this._formResetHandler);
        }
        instances.push(this);
        this.form.data("ui-form-reset-instances", instances);
      },
      _unbindFormResetHandler: function() {
        if (!this.form.length) {
          return;
        }
        var instances = this.form.data("ui-form-reset-instances");
        instances.splice($2.inArray(this, instances), 1);
        if (instances.length) {
          this.form.data("ui-form-reset-instances", instances);
        } else {
          this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");
        }
      }
    };
    if (!$2.expr.pseudos) {
      $2.expr.pseudos = $2.expr[":"];
    }
    if (!$2.uniqueSort) {
      $2.uniqueSort = $2.unique;
    }
    if (!$2.escapeSelector) {
      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
      var fcssescape = function(ch, asCodePoint) {
        if (asCodePoint) {
          if (ch === "\0") {
            return "\uFFFD";
          }
          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        }
        return "\\" + ch;
      };
      $2.escapeSelector = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };
    }
    if (!$2.fn.even || !$2.fn.odd) {
      $2.fn.extend({
        even: function() {
          return this.filter(function(i) {
            return i % 2 === 0;
          });
        },
        odd: function() {
          return this.filter(function(i) {
            return i % 2 === 1;
          });
        }
      });
    }
    ;
    var keycode = $2.ui.keyCode = {
      BACKSPACE: 8,
      COMMA: 188,
      DELETE: 46,
      DOWN: 40,
      END: 35,
      ENTER: 13,
      ESCAPE: 27,
      HOME: 36,
      LEFT: 37,
      PAGE_DOWN: 34,
      PAGE_UP: 33,
      PERIOD: 190,
      RIGHT: 39,
      SPACE: 32,
      TAB: 9,
      UP: 38
    };
    var labels = $2.fn.labels = function() {
      var ancestor, selector, id, labels2, ancestors;
      if (!this.length) {
        return this.pushStack([]);
      }
      if (this[0].labels && this[0].labels.length) {
        return this.pushStack(this[0].labels);
      }
      labels2 = this.eq(0).parents("label");
      id = this.attr("id");
      if (id) {
        ancestor = this.eq(0).parents().last();
        ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings());
        selector = "label[for='" + $2.escapeSelector(id) + "']";
        labels2 = labels2.add(ancestors.find(selector).addBack(selector));
      }
      return this.pushStack(labels2);
    };
    var scrollParent = $2.fn.scrollParent = function(includeHidden) {
      var position2 = this.css("position"), excludeStaticParent = position2 === "absolute", overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent2 = this.parents().filter(function() {
        var parent = $2(this);
        if (excludeStaticParent && parent.css("position") === "static") {
          return false;
        }
        return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
      }).eq(0);
      return position2 === "fixed" || !scrollParent2.length ? $2(this[0].ownerDocument || document) : scrollParent2;
    };
    var tabbable = $2.extend($2.expr.pseudos, {
      tabbable: function(element) {
        var tabIndex = $2.attr(element, "tabindex"), hasTabindex = tabIndex != null;
        return (!hasTabindex || tabIndex >= 0) && $2.ui.focusable(element, hasTabindex);
      }
    });
    var uniqueId = $2.fn.extend({
      uniqueId: /* @__PURE__ */ function() {
        var uuid2 = 0;
        return function() {
          return this.each(function() {
            if (!this.id) {
              this.id = "ui-id-" + ++uuid2;
            }
          });
        };
      }(),
      removeUniqueId: function() {
        return this.each(function() {
          if (/^ui-id-\d+$/.test(this.id)) {
            $2(this).removeAttr("id");
          }
        });
      }
    });
    var ie = $2.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    var mouseHandled = false;
    $2(document).on("mouseup", function() {
      mouseHandled = false;
    });
    var widgetsMouse = $2.widget("ui.mouse", {
      version: "1.13.0",
      options: {
        cancel: "input, textarea, button, select, option",
        distance: 1,
        delay: 0
      },
      _mouseInit: function() {
        var that = this;
        this.element.on("mousedown." + this.widgetName, function(event) {
          return that._mouseDown(event);
        }).on("click." + this.widgetName, function(event) {
          if (true === $2.data(event.target, that.widgetName + ".preventClickEvent")) {
            $2.removeData(event.target, that.widgetName + ".preventClickEvent");
            event.stopImmediatePropagation();
            return false;
          }
        });
        this.started = false;
      },
      // TODO: make sure destroying one instance of mouse doesn't mess with
      // other instances of mouse
      _mouseDestroy: function() {
        this.element.off("." + this.widgetName);
        if (this._mouseMoveDelegate) {
          this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
        }
      },
      _mouseDown: function(event) {
        if (mouseHandled) {
          return;
        }
        this._mouseMoved = false;
        if (this._mouseStarted) {
          this._mouseUp(event);
        }
        this._mouseDownEvent = event;
        var that = this, btnIsLeft = event.which === 1, elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $2(event.target).closest(this.options.cancel).length : false;
        if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
          return true;
        }
        this.mouseDelayMet = !this.options.delay;
        if (!this.mouseDelayMet) {
          this._mouseDelayTimer = setTimeout(function() {
            that.mouseDelayMet = true;
          }, this.options.delay);
        }
        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
          this._mouseStarted = this._mouseStart(event) !== false;
          if (!this._mouseStarted) {
            event.preventDefault();
            return true;
          }
        }
        if (true === $2.data(event.target, this.widgetName + ".preventClickEvent")) {
          $2.removeData(event.target, this.widgetName + ".preventClickEvent");
        }
        this._mouseMoveDelegate = function(event2) {
          return that._mouseMove(event2);
        };
        this._mouseUpDelegate = function(event2) {
          return that._mouseUp(event2);
        };
        this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);
        event.preventDefault();
        mouseHandled = true;
        return true;
      },
      _mouseMove: function(event) {
        if (this._mouseMoved) {
          if ($2.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
            return this._mouseUp(event);
          } else if (!event.which) {
            if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {
              this.ignoreMissingWhich = true;
            } else if (!this.ignoreMissingWhich) {
              return this._mouseUp(event);
            }
          }
        }
        if (event.which || event.button) {
          this._mouseMoved = true;
        }
        if (this._mouseStarted) {
          this._mouseDrag(event);
          return event.preventDefault();
        }
        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
          this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
          if (this._mouseStarted) {
            this._mouseDrag(event);
          } else {
            this._mouseUp(event);
          }
        }
        return !this._mouseStarted;
      },
      _mouseUp: function(event) {
        this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
        if (this._mouseStarted) {
          this._mouseStarted = false;
          if (event.target === this._mouseDownEvent.target) {
            $2.data(event.target, this.widgetName + ".preventClickEvent", true);
          }
          this._mouseStop(event);
        }
        if (this._mouseDelayTimer) {
          clearTimeout(this._mouseDelayTimer);
          delete this._mouseDelayTimer;
        }
        this.ignoreMissingWhich = false;
        mouseHandled = false;
        event.preventDefault();
      },
      _mouseDistanceMet: function(event) {
        return Math.max(
          Math.abs(this._mouseDownEvent.pageX - event.pageX),
          Math.abs(this._mouseDownEvent.pageY - event.pageY)
        ) >= this.options.distance;
      },
      _mouseDelayMet: function() {
        return this.mouseDelayMet;
      },
      // These are placeholder methods, to be overriden by extending plugin
      _mouseStart: function() {
      },
      _mouseDrag: function() {
      },
      _mouseStop: function() {
      },
      _mouseCapture: function() {
        return true;
      }
    });
    var plugin = $2.ui.plugin = {
      add: function(module, option, set) {
        var i, proto = $2.ui[module].prototype;
        for (i in set) {
          proto.plugins[i] = proto.plugins[i] || [];
          proto.plugins[i].push([option, set[i]]);
        }
      },
      call: function(instance, name, args, allowDisconnected) {
        var i, set = instance.plugins[name];
        if (!set) {
          return;
        }
        if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
          return;
        }
        for (i = 0; i < set.length; i++) {
          if (instance.options[set[i][0]]) {
            set[i][1].apply(instance.element, args);
          }
        }
      }
    };
    var safeActiveElement = $2.ui.safeActiveElement = function(document2) {
      var activeElement;
      try {
        activeElement = document2.activeElement;
      } catch (error2) {
        activeElement = document2.body;
      }
      if (!activeElement) {
        activeElement = document2.body;
      }
      if (!activeElement.nodeName) {
        activeElement = document2.body;
      }
      return activeElement;
    };
    var safeBlur = $2.ui.safeBlur = function(element) {
      if (element && element.nodeName.toLowerCase() !== "body") {
        $2(element).trigger("blur");
      }
    };
    $2.widget("ui.draggable", $2.ui.mouse, {
      version: "1.13.0",
      widgetEventPrefix: "drag",
      options: {
        addClasses: true,
        appendTo: "parent",
        axis: false,
        connectToSortable: false,
        containment: false,
        cursor: "auto",
        cursorAt: false,
        grid: false,
        handle: false,
        helper: "original",
        iframeFix: false,
        opacity: false,
        refreshPositions: false,
        revert: false,
        revertDuration: 500,
        scope: "default",
        scroll: true,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        snap: false,
        snapMode: "both",
        snapTolerance: 20,
        stack: false,
        zIndex: false,
        // Callbacks
        drag: null,
        start: null,
        stop: null
      },
      _create: function() {
        if (this.options.helper === "original") {
          this._setPositionRelative();
        }
        if (this.options.addClasses) {
          this._addClass("ui-draggable");
        }
        this._setHandleClassName();
        this._mouseInit();
      },
      _setOption: function(key, value) {
        this._super(key, value);
        if (key === "handle") {
          this._removeHandleClassName();
          this._setHandleClassName();
        }
      },
      _destroy: function() {
        if ((this.helper || this.element).is(".ui-draggable-dragging")) {
          this.destroyOnClear = true;
          return;
        }
        this._removeHandleClassName();
        this._mouseDestroy();
      },
      _mouseCapture: function(event) {
        var o = this.options;
        if (this.helper || o.disabled || $2(event.target).closest(".ui-resizable-handle").length > 0) {
          return false;
        }
        this.handle = this._getHandle(event);
        if (!this.handle) {
          return false;
        }
        this._blurActiveElement(event);
        this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);
        return true;
      },
      _blockFrames: function(selector) {
        this.iframeBlocks = this.document.find(selector).map(function() {
          var iframe = $2(this);
          return $2("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
        });
      },
      _unblockFrames: function() {
        if (this.iframeBlocks) {
          this.iframeBlocks.remove();
          delete this.iframeBlocks;
        }
      },
      _blurActiveElement: function(event) {
        var activeElement = $2.ui.safeActiveElement(this.document[0]), target = $2(event.target);
        if (target.closest(activeElement).length) {
          return;
        }
        $2.ui.safeBlur(activeElement);
      },
      _mouseStart: function(event) {
        var o = this.options;
        this.helper = this._createHelper(event);
        this._addClass(this.helper, "ui-draggable-dragging");
        this._cacheHelperProportions();
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.current = this;
        }
        this._cacheMargins();
        this.cssPosition = this.helper.css("position");
        this.scrollParent = this.helper.scrollParent(true);
        this.offsetParent = this.helper.offsetParent();
        this.hasFixedAncestor = this.helper.parents().filter(function() {
          return $2(this).css("position") === "fixed";
        }).length > 0;
        this.positionAbs = this.element.offset();
        this._refreshOffsets(event);
        this.originalPosition = this.position = this._generatePosition(event, false);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;
        if (o.cursorAt) {
          this._adjustOffsetFromHelper(o.cursorAt);
        }
        this._setContainment();
        if (this._trigger("start", event) === false) {
          this._clear();
          return false;
        }
        this._cacheHelperProportions();
        if ($2.ui.ddmanager && !o.dropBehaviour) {
          $2.ui.ddmanager.prepareOffsets(this, event);
        }
        this._mouseDrag(event, true);
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.dragStart(this, event);
        }
        return true;
      },
      _refreshOffsets: function(event) {
        this.offset = {
          top: this.positionAbs.top - this.margins.top,
          left: this.positionAbs.left - this.margins.left,
          scroll: false,
          parent: this._getParentOffset(),
          relative: this._getRelativeOffset()
        };
        this.offset.click = {
          left: event.pageX - this.offset.left,
          top: event.pageY - this.offset.top
        };
      },
      _mouseDrag: function(event, noPropagation) {
        if (this.hasFixedAncestor) {
          this.offset.parent = this._getParentOffset();
        }
        this.position = this._generatePosition(event, true);
        this.positionAbs = this._convertPositionTo("absolute");
        if (!noPropagation) {
          var ui = this._uiHash();
          if (this._trigger("drag", event, ui) === false) {
            this._mouseUp(new $2.Event("mouseup", event));
            return false;
          }
          this.position = ui.position;
        }
        this.helper[0].style.left = this.position.left + "px";
        this.helper[0].style.top = this.position.top + "px";
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.drag(this, event);
        }
        return false;
      },
      _mouseStop: function(event) {
        var that = this, dropped = false;
        if ($2.ui.ddmanager && !this.options.dropBehaviour) {
          dropped = $2.ui.ddmanager.drop(this, event);
        }
        if (this.dropped) {
          dropped = this.dropped;
          this.dropped = false;
        }
        if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || typeof this.options.revert === "function" && this.options.revert.call(this.element, dropped)) {
          $2(this.helper).animate(
            this.originalPosition,
            parseInt(this.options.revertDuration, 10),
            function() {
              if (that._trigger("stop", event) !== false) {
                that._clear();
              }
            }
          );
        } else {
          if (this._trigger("stop", event) !== false) {
            this._clear();
          }
        }
        return false;
      },
      _mouseUp: function(event) {
        this._unblockFrames();
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.dragStop(this, event);
        }
        if (this.handleElement.is(event.target)) {
          this.element.trigger("focus");
        }
        return $2.ui.mouse.prototype._mouseUp.call(this, event);
      },
      cancel: function() {
        if (this.helper.is(".ui-draggable-dragging")) {
          this._mouseUp(new $2.Event("mouseup", { target: this.element[0] }));
        } else {
          this._clear();
        }
        return this;
      },
      _getHandle: function(event) {
        return this.options.handle ? !!$2(event.target).closest(this.element.find(this.options.handle)).length : true;
      },
      _setHandleClassName: function() {
        this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
        this._addClass(this.handleElement, "ui-draggable-handle");
      },
      _removeHandleClassName: function() {
        this._removeClass(this.handleElement, "ui-draggable-handle");
      },
      _createHelper: function(event) {
        var o = this.options, helperIsFunction = typeof o.helper === "function", helper = helperIsFunction ? $2(o.helper.apply(this.element[0], [event])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;
        if (!helper.parents("body").length) {
          helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo);
        }
        if (helperIsFunction && helper[0] === this.element[0]) {
          this._setPositionRelative();
        }
        if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
          helper.css("position", "absolute");
        }
        return helper;
      },
      _setPositionRelative: function() {
        if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
          this.element[0].style.position = "relative";
        }
      },
      _adjustOffsetFromHelper: function(obj) {
        if (typeof obj === "string") {
          obj = obj.split(" ");
        }
        if (Array.isArray(obj)) {
          obj = { left: +obj[0], top: +obj[1] || 0 };
        }
        if ("left" in obj) {
          this.offset.click.left = obj.left + this.margins.left;
        }
        if ("right" in obj) {
          this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }
        if ("top" in obj) {
          this.offset.click.top = obj.top + this.margins.top;
        }
        if ("bottom" in obj) {
          this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }
      },
      _isRootNode: function(element) {
        return /(html|body)/i.test(element.tagName) || element === this.document[0];
      },
      _getParentOffset: function() {
        var po = this.offsetParent.offset(), document2 = this.document[0];
        if (this.cssPosition === "absolute" && this.scrollParent[0] !== document2 && $2.contains(this.scrollParent[0], this.offsetParent[0])) {
          po.left += this.scrollParent.scrollLeft();
          po.top += this.scrollParent.scrollTop();
        }
        if (this._isRootNode(this.offsetParent[0])) {
          po = { top: 0, left: 0 };
        }
        return {
          top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
          left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
        };
      },
      _getRelativeOffset: function() {
        if (this.cssPosition !== "relative") {
          return { top: 0, left: 0 };
        }
        var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
        return {
          top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
          left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
        };
      },
      _cacheMargins: function() {
        this.margins = {
          left: parseInt(this.element.css("marginLeft"), 10) || 0,
          top: parseInt(this.element.css("marginTop"), 10) || 0,
          right: parseInt(this.element.css("marginRight"), 10) || 0,
          bottom: parseInt(this.element.css("marginBottom"), 10) || 0
        };
      },
      _cacheHelperProportions: function() {
        this.helperProportions = {
          width: this.helper.outerWidth(),
          height: this.helper.outerHeight()
        };
      },
      _setContainment: function() {
        var isUserScrollable, c, ce, o = this.options, document2 = this.document[0];
        this.relativeContainer = null;
        if (!o.containment) {
          this.containment = null;
          return;
        }
        if (o.containment === "window") {
          this.containment = [
            $2(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
            $2(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
            $2(window).scrollLeft() + $2(window).width() - this.helperProportions.width - this.margins.left,
            $2(window).scrollTop() + ($2(window).height() || document2.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
          ];
          return;
        }
        if (o.containment === "document") {
          this.containment = [
            0,
            0,
            $2(document2).width() - this.helperProportions.width - this.margins.left,
            ($2(document2).height() || document2.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
          ];
          return;
        }
        if (o.containment.constructor === Array) {
          this.containment = o.containment;
          return;
        }
        if (o.containment === "parent") {
          o.containment = this.helper[0].parentNode;
        }
        c = $2(o.containment);
        ce = c[0];
        if (!ce) {
          return;
        }
        isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));
        this.containment = [
          (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0),
          (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0),
          (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
          (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom
        ];
        this.relativeContainer = c;
      },
      _convertPositionTo: function(d, pos) {
        if (!pos) {
          pos = this.position;
        }
        var mod = d === "absolute" ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
        return {
          top: (
            // The absolute mouse position
            pos.top + // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.top * mod + // The offsetParent's offset without borders (offset + border)
            this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod
          ),
          left: (
            // The absolute mouse position
            pos.left + // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.left * mod + // The offsetParent's offset without borders (offset + border)
            this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
          )
        };
      },
      _generatePosition: function(event, constrainPosition) {
        var containment, co, top3, left3, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
        if (!scrollIsRootNode || !this.offset.scroll) {
          this.offset.scroll = {
            top: this.scrollParent.scrollTop(),
            left: this.scrollParent.scrollLeft()
          };
        }
        if (constrainPosition) {
          if (this.containment) {
            if (this.relativeContainer) {
              co = this.relativeContainer.offset();
              containment = [
                this.containment[0] + co.left,
                this.containment[1] + co.top,
                this.containment[2] + co.left,
                this.containment[3] + co.top
              ];
            } else {
              containment = this.containment;
            }
            if (event.pageX - this.offset.click.left < containment[0]) {
              pageX = containment[0] + this.offset.click.left;
            }
            if (event.pageY - this.offset.click.top < containment[1]) {
              pageY = containment[1] + this.offset.click.top;
            }
            if (event.pageX - this.offset.click.left > containment[2]) {
              pageX = containment[2] + this.offset.click.left;
            }
            if (event.pageY - this.offset.click.top > containment[3]) {
              pageY = containment[3] + this.offset.click.top;
            }
          }
          if (o.grid) {
            top3 = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
            pageY = containment ? top3 - this.offset.click.top >= containment[1] || top3 - this.offset.click.top > containment[3] ? top3 : top3 - this.offset.click.top >= containment[1] ? top3 - o.grid[1] : top3 + o.grid[1] : top3;
            left3 = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
            pageX = containment ? left3 - this.offset.click.left >= containment[0] || left3 - this.offset.click.left > containment[2] ? left3 : left3 - this.offset.click.left >= containment[0] ? left3 - o.grid[0] : left3 + o.grid[0] : left3;
          }
          if (o.axis === "y") {
            pageX = this.originalPageX;
          }
          if (o.axis === "x") {
            pageY = this.originalPageY;
          }
        }
        return {
          top: (
            // The absolute mouse position
            pageY - // Click offset (relative to the element)
            this.offset.click.top - // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.top - // The offsetParent's offset without borders (offset + border)
            this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top)
          ),
          left: (
            // The absolute mouse position
            pageX - // Click offset (relative to the element)
            this.offset.click.left - // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.left - // The offsetParent's offset without borders (offset + border)
            this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
          )
        };
      },
      _clear: function() {
        this._removeClass(this.helper, "ui-draggable-dragging");
        if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
          this.helper.remove();
        }
        this.helper = null;
        this.cancelHelperRemoval = false;
        if (this.destroyOnClear) {
          this.destroy();
        }
      },
      // From now on bulk stuff - mainly helpers
      _trigger: function(type, event, ui) {
        ui = ui || this._uiHash();
        $2.ui.plugin.call(this, type, [event, ui, this], true);
        if (/^(drag|start|stop)/.test(type)) {
          this.positionAbs = this._convertPositionTo("absolute");
          ui.offset = this.positionAbs;
        }
        return $2.Widget.prototype._trigger.call(this, type, event, ui);
      },
      plugins: {},
      _uiHash: function() {
        return {
          helper: this.helper,
          position: this.position,
          originalPosition: this.originalPosition,
          offset: this.positionAbs
        };
      }
    });
    $2.ui.plugin.add("draggable", "connectToSortable", {
      start: function(event, ui, draggable) {
        var uiSortable = $2.extend({}, ui, {
          item: draggable.element
        });
        draggable.sortables = [];
        $2(draggable.options.connectToSortable).each(function() {
          var sortable = $2(this).sortable("instance");
          if (sortable && !sortable.options.disabled) {
            draggable.sortables.push(sortable);
            sortable.refreshPositions();
            sortable._trigger("activate", event, uiSortable);
          }
        });
      },
      stop: function(event, ui, draggable) {
        var uiSortable = $2.extend({}, ui, {
          item: draggable.element
        });
        draggable.cancelHelperRemoval = false;
        $2.each(draggable.sortables, function() {
          var sortable = this;
          if (sortable.isOver) {
            sortable.isOver = 0;
            draggable.cancelHelperRemoval = true;
            sortable.cancelHelperRemoval = false;
            sortable._storedCSS = {
              position: sortable.placeholder.css("position"),
              top: sortable.placeholder.css("top"),
              left: sortable.placeholder.css("left")
            };
            sortable._mouseStop(event);
            sortable.options.helper = sortable.options._helper;
          } else {
            sortable.cancelHelperRemoval = true;
            sortable._trigger("deactivate", event, uiSortable);
          }
        });
      },
      drag: function(event, ui, draggable) {
        $2.each(draggable.sortables, function() {
          var innermostIntersecting = false, sortable = this;
          sortable.positionAbs = draggable.positionAbs;
          sortable.helperProportions = draggable.helperProportions;
          sortable.offset.click = draggable.offset.click;
          if (sortable._intersectsWith(sortable.containerCache)) {
            innermostIntersecting = true;
            $2.each(draggable.sortables, function() {
              this.positionAbs = draggable.positionAbs;
              this.helperProportions = draggable.helperProportions;
              this.offset.click = draggable.offset.click;
              if (this !== sortable && this._intersectsWith(this.containerCache) && $2.contains(sortable.element[0], this.element[0])) {
                innermostIntersecting = false;
              }
              return innermostIntersecting;
            });
          }
          if (innermostIntersecting) {
            if (!sortable.isOver) {
              sortable.isOver = 1;
              draggable._parent = ui.helper.parent();
              sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true);
              sortable.options._helper = sortable.options.helper;
              sortable.options.helper = function() {
                return ui.helper[0];
              };
              event.target = sortable.currentItem[0];
              sortable._mouseCapture(event, true);
              sortable._mouseStart(event, true, true);
              sortable.offset.click.top = draggable.offset.click.top;
              sortable.offset.click.left = draggable.offset.click.left;
              sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
              sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;
              draggable._trigger("toSortable", event);
              draggable.dropped = sortable.element;
              $2.each(draggable.sortables, function() {
                this.refreshPositions();
              });
              draggable.currentItem = draggable.element;
              sortable.fromOutside = draggable;
            }
            if (sortable.currentItem) {
              sortable._mouseDrag(event);
              ui.position = sortable.position;
            }
          } else {
            if (sortable.isOver) {
              sortable.isOver = 0;
              sortable.cancelHelperRemoval = true;
              sortable.options._revert = sortable.options.revert;
              sortable.options.revert = false;
              sortable._trigger("out", event, sortable._uiHash(sortable));
              sortable._mouseStop(event, true);
              sortable.options.revert = sortable.options._revert;
              sortable.options.helper = sortable.options._helper;
              if (sortable.placeholder) {
                sortable.placeholder.remove();
              }
              ui.helper.appendTo(draggable._parent);
              draggable._refreshOffsets(event);
              ui.position = draggable._generatePosition(event, true);
              draggable._trigger("fromSortable", event);
              draggable.dropped = false;
              $2.each(draggable.sortables, function() {
                this.refreshPositions();
              });
            }
          }
        });
      }
    });
    $2.ui.plugin.add("draggable", "cursor", {
      start: function(event, ui, instance) {
        var t = $2("body"), o = instance.options;
        if (t.css("cursor")) {
          o._cursor = t.css("cursor");
        }
        t.css("cursor", o.cursor);
      },
      stop: function(event, ui, instance) {
        var o = instance.options;
        if (o._cursor) {
          $2("body").css("cursor", o._cursor);
        }
      }
    });
    $2.ui.plugin.add("draggable", "opacity", {
      start: function(event, ui, instance) {
        var t = $2(ui.helper), o = instance.options;
        if (t.css("opacity")) {
          o._opacity = t.css("opacity");
        }
        t.css("opacity", o.opacity);
      },
      stop: function(event, ui, instance) {
        var o = instance.options;
        if (o._opacity) {
          $2(ui.helper).css("opacity", o._opacity);
        }
      }
    });
    $2.ui.plugin.add("draggable", "scroll", {
      start: function(event, ui, i) {
        if (!i.scrollParentNotHidden) {
          i.scrollParentNotHidden = i.helper.scrollParent(false);
        }
        if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") {
          i.overflowOffset = i.scrollParentNotHidden.offset();
        }
      },
      drag: function(event, ui, i) {
        var o = i.options, scrolled = false, scrollParent2 = i.scrollParentNotHidden[0], document2 = i.document[0];
        if (scrollParent2 !== document2 && scrollParent2.tagName !== "HTML") {
          if (!o.axis || o.axis !== "x") {
            if (i.overflowOffset.top + scrollParent2.offsetHeight - event.pageY < o.scrollSensitivity) {
              scrollParent2.scrollTop = scrolled = scrollParent2.scrollTop + o.scrollSpeed;
            } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
              scrollParent2.scrollTop = scrolled = scrollParent2.scrollTop - o.scrollSpeed;
            }
          }
          if (!o.axis || o.axis !== "y") {
            if (i.overflowOffset.left + scrollParent2.offsetWidth - event.pageX < o.scrollSensitivity) {
              scrollParent2.scrollLeft = scrolled = scrollParent2.scrollLeft + o.scrollSpeed;
            } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
              scrollParent2.scrollLeft = scrolled = scrollParent2.scrollLeft - o.scrollSpeed;
            }
          }
        } else {
          if (!o.axis || o.axis !== "x") {
            if (event.pageY - $2(document2).scrollTop() < o.scrollSensitivity) {
              scrolled = $2(document2).scrollTop($2(document2).scrollTop() - o.scrollSpeed);
            } else if ($2(window).height() - (event.pageY - $2(document2).scrollTop()) < o.scrollSensitivity) {
              scrolled = $2(document2).scrollTop($2(document2).scrollTop() + o.scrollSpeed);
            }
          }
          if (!o.axis || o.axis !== "y") {
            if (event.pageX - $2(document2).scrollLeft() < o.scrollSensitivity) {
              scrolled = $2(document2).scrollLeft(
                $2(document2).scrollLeft() - o.scrollSpeed
              );
            } else if ($2(window).width() - (event.pageX - $2(document2).scrollLeft()) < o.scrollSensitivity) {
              scrolled = $2(document2).scrollLeft(
                $2(document2).scrollLeft() + o.scrollSpeed
              );
            }
          }
        }
        if (scrolled !== false && $2.ui.ddmanager && !o.dropBehaviour) {
          $2.ui.ddmanager.prepareOffsets(i, event);
        }
      }
    });
    $2.ui.plugin.add("draggable", "snap", {
      start: function(event, ui, i) {
        var o = i.options;
        i.snapElements = [];
        $2(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
          var $t = $2(this), $o = $t.offset();
          if (this !== i.element[0]) {
            i.snapElements.push({
              item: this,
              width: $t.outerWidth(),
              height: $t.outerHeight(),
              top: $o.top,
              left: $o.left
            });
          }
        });
      },
      drag: function(event, ui, inst) {
        var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
        for (i = inst.snapElements.length - 1; i >= 0; i--) {
          l = inst.snapElements[i].left - inst.margins.left;
          r = l + inst.snapElements[i].width;
          t = inst.snapElements[i].top - inst.margins.top;
          b = t + inst.snapElements[i].height;
          if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$2.contains(
            inst.snapElements[i].item.ownerDocument,
            inst.snapElements[i].item
          )) {
            if (inst.snapElements[i].snapping) {
              if (inst.options.snap.release) {
                inst.options.snap.release.call(
                  inst.element,
                  event,
                  $2.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })
                );
              }
            }
            inst.snapElements[i].snapping = false;
            continue;
          }
          if (o.snapMode !== "inner") {
            ts = Math.abs(t - y2) <= d;
            bs = Math.abs(b - y1) <= d;
            ls = Math.abs(l - x2) <= d;
            rs = Math.abs(r - x1) <= d;
            if (ts) {
              ui.position.top = inst._convertPositionTo("relative", {
                top: t - inst.helperProportions.height,
                left: 0
              }).top;
            }
            if (bs) {
              ui.position.top = inst._convertPositionTo("relative", {
                top: b,
                left: 0
              }).top;
            }
            if (ls) {
              ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: l - inst.helperProportions.width
              }).left;
            }
            if (rs) {
              ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: r
              }).left;
            }
          }
          first = ts || bs || ls || rs;
          if (o.snapMode !== "outer") {
            ts = Math.abs(t - y1) <= d;
            bs = Math.abs(b - y2) <= d;
            ls = Math.abs(l - x1) <= d;
            rs = Math.abs(r - x2) <= d;
            if (ts) {
              ui.position.top = inst._convertPositionTo("relative", {
                top: t,
                left: 0
              }).top;
            }
            if (bs) {
              ui.position.top = inst._convertPositionTo("relative", {
                top: b - inst.helperProportions.height,
                left: 0
              }).top;
            }
            if (ls) {
              ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: l
              }).left;
            }
            if (rs) {
              ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: r - inst.helperProportions.width
              }).left;
            }
          }
          if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
            if (inst.options.snap.snap) {
              inst.options.snap.snap.call(
                inst.element,
                event,
                $2.extend(inst._uiHash(), {
                  snapItem: inst.snapElements[i].item
                })
              );
            }
          }
          inst.snapElements[i].snapping = ts || bs || ls || rs || first;
        }
      }
    });
    $2.ui.plugin.add("draggable", "stack", {
      start: function(event, ui, instance) {
        var min2, o = instance.options, group = $2.makeArray($2(o.stack)).sort(function(a, b) {
          return (parseInt($2(a).css("zIndex"), 10) || 0) - (parseInt($2(b).css("zIndex"), 10) || 0);
        });
        if (!group.length) {
          return;
        }
        min2 = parseInt($2(group[0]).css("zIndex"), 10) || 0;
        $2(group).each(function(i) {
          $2(this).css("zIndex", min2 + i);
        });
        this.css("zIndex", min2 + group.length);
      }
    });
    $2.ui.plugin.add("draggable", "zIndex", {
      start: function(event, ui, instance) {
        var t = $2(ui.helper), o = instance.options;
        if (t.css("zIndex")) {
          o._zIndex = t.css("zIndex");
        }
        t.css("zIndex", o.zIndex);
      },
      stop: function(event, ui, instance) {
        var o = instance.options;
        if (o._zIndex) {
          $2(ui.helper).css("zIndex", o._zIndex);
        }
      }
    });
    var widgetsDraggable = $2.ui.draggable;
    $2.widget("ui.droppable", {
      version: "1.13.0",
      widgetEventPrefix: "drop",
      options: {
        accept: "*",
        addClasses: true,
        greedy: false,
        scope: "default",
        tolerance: "intersect",
        // Callbacks
        activate: null,
        deactivate: null,
        drop: null,
        out: null,
        over: null
      },
      _create: function() {
        var proportions, o = this.options, accept = o.accept;
        this.isover = false;
        this.isout = true;
        this.accept = typeof accept === "function" ? accept : function(d) {
          return d.is(accept);
        };
        this.proportions = function() {
          if (arguments.length) {
            proportions = arguments[0];
          } else {
            return proportions ? proportions : proportions = {
              width: this.element[0].offsetWidth,
              height: this.element[0].offsetHeight
            };
          }
        };
        this._addToManager(o.scope);
        if (o.addClasses) {
          this._addClass("ui-droppable");
        }
      },
      _addToManager: function(scope) {
        $2.ui.ddmanager.droppables[scope] = $2.ui.ddmanager.droppables[scope] || [];
        $2.ui.ddmanager.droppables[scope].push(this);
      },
      _splice: function(drop) {
        var i = 0;
        for (; i < drop.length; i++) {
          if (drop[i] === this) {
            drop.splice(i, 1);
          }
        }
      },
      _destroy: function() {
        var drop = $2.ui.ddmanager.droppables[this.options.scope];
        this._splice(drop);
      },
      _setOption: function(key, value) {
        if (key === "accept") {
          this.accept = typeof value === "function" ? value : function(d) {
            return d.is(value);
          };
        } else if (key === "scope") {
          var drop = $2.ui.ddmanager.droppables[this.options.scope];
          this._splice(drop);
          this._addToManager(value);
        }
        this._super(key, value);
      },
      _activate: function(event) {
        var draggable = $2.ui.ddmanager.current;
        this._addActiveClass();
        if (draggable) {
          this._trigger("activate", event, this.ui(draggable));
        }
      },
      _deactivate: function(event) {
        var draggable = $2.ui.ddmanager.current;
        this._removeActiveClass();
        if (draggable) {
          this._trigger("deactivate", event, this.ui(draggable));
        }
      },
      _over: function(event) {
        var draggable = $2.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
          return;
        }
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
          this._addHoverClass();
          this._trigger("over", event, this.ui(draggable));
        }
      },
      _out: function(event) {
        var draggable = $2.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
          return;
        }
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
          this._removeHoverClass();
          this._trigger("out", event, this.ui(draggable));
        }
      },
      _drop: function(event, custom) {
        var draggable = custom || $2.ui.ddmanager.current, childrenIntersection = false;
        if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
          return false;
        }
        this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
          var inst = $2(this).droppable("instance");
          if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(
            inst.element[0],
            draggable.currentItem || draggable.element
          ) && $2.ui.intersect(
            draggable,
            $2.extend(inst, { offset: inst.element.offset() }),
            inst.options.tolerance,
            event
          )) {
            childrenIntersection = true;
            return false;
          }
        });
        if (childrenIntersection) {
          return false;
        }
        if (this.accept.call(
          this.element[0],
          draggable.currentItem || draggable.element
        )) {
          this._removeActiveClass();
          this._removeHoverClass();
          this._trigger("drop", event, this.ui(draggable));
          return this.element;
        }
        return false;
      },
      ui: function(c) {
        return {
          draggable: c.currentItem || c.element,
          helper: c.helper,
          position: c.position,
          offset: c.positionAbs
        };
      },
      // Extension points just to make backcompat sane and avoid duplicating logic
      // TODO: Remove in 1.14 along with call to it below
      _addHoverClass: function() {
        this._addClass("ui-droppable-hover");
      },
      _removeHoverClass: function() {
        this._removeClass("ui-droppable-hover");
      },
      _addActiveClass: function() {
        this._addClass("ui-droppable-active");
      },
      _removeActiveClass: function() {
        this._removeClass("ui-droppable-active");
      }
    });
    $2.ui.intersect = /* @__PURE__ */ function() {
      function isOverAxis(x, reference2, size) {
        return x >= reference2 && x < reference2 + size;
      }
      return function(draggable, droppable, toleranceMode, event) {
        if (!droppable.offset) {
          return false;
        }
        var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left, y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height;
        switch (toleranceMode) {
          case "fit":
            return l <= x1 && x2 <= r && t <= y1 && y2 <= b;
          case "intersect":
            return l < x1 + draggable.helperProportions.width / 2 && // Right Half
            x2 - draggable.helperProportions.width / 2 < r && // Left Half
            t < y1 + draggable.helperProportions.height / 2 && // Bottom Half
            y2 - draggable.helperProportions.height / 2 < b;
          case "pointer":
            return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);
          case "touch":
            return (y1 >= t && y1 <= b || // Top edge touching
            y2 >= t && y2 <= b || // Bottom edge touching
            y1 < t && y2 > b) && (x1 >= l && x1 <= r || // Left edge touching
            x2 >= l && x2 <= r || // Right edge touching
            x1 < l && x2 > r);
          default:
            return false;
        }
      };
    }();
    $2.ui.ddmanager = {
      current: null,
      droppables: { "default": [] },
      prepareOffsets: function(t, event) {
        var i, j, m2 = $2.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
        droppablesLoop:
          for (i = 0; i < m2.length; i++) {
            if (m2[i].options.disabled || t && !m2[i].accept.call(
              m2[i].element[0],
              t.currentItem || t.element
            )) {
              continue;
            }
            for (j = 0; j < list.length; j++) {
              if (list[j] === m2[i].element[0]) {
                m2[i].proportions().height = 0;
                continue droppablesLoop;
              }
            }
            m2[i].visible = m2[i].element.css("display") !== "none";
            if (!m2[i].visible) {
              continue;
            }
            if (type === "mousedown") {
              m2[i]._activate.call(m2[i], event);
            }
            m2[i].offset = m2[i].element.offset();
            m2[i].proportions({
              width: m2[i].element[0].offsetWidth,
              height: m2[i].element[0].offsetHeight
            });
          }
      },
      drop: function(draggable, event) {
        var dropped = false;
        $2.each(($2.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
          if (!this.options) {
            return;
          }
          if (!this.options.disabled && this.visible && $2.ui.intersect(draggable, this, this.options.tolerance, event)) {
            dropped = this._drop.call(this, event) || dropped;
          }
          if (!this.options.disabled && this.visible && this.accept.call(
            this.element[0],
            draggable.currentItem || draggable.element
          )) {
            this.isout = true;
            this.isover = false;
            this._deactivate.call(this, event);
          }
        });
        return dropped;
      },
      dragStart: function(draggable, event) {
        draggable.element.parentsUntil("body").on("scroll.droppable", function() {
          if (!draggable.options.refreshPositions) {
            $2.ui.ddmanager.prepareOffsets(draggable, event);
          }
        });
      },
      drag: function(draggable, event) {
        if (draggable.options.refreshPositions) {
          $2.ui.ddmanager.prepareOffsets(draggable, event);
        }
        $2.each($2.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
          if (this.options.disabled || this.greedyChild || !this.visible) {
            return;
          }
          var parentInstance, scope, parent, intersects = $2.ui.intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
          if (!c) {
            return;
          }
          if (this.options.greedy) {
            scope = this.options.scope;
            parent = this.element.parents(":data(ui-droppable)").filter(function() {
              return $2(this).droppable("instance").options.scope === scope;
            });
            if (parent.length) {
              parentInstance = $2(parent[0]).droppable("instance");
              parentInstance.greedyChild = c === "isover";
            }
          }
          if (parentInstance && c === "isover") {
            parentInstance.isover = false;
            parentInstance.isout = true;
            parentInstance._out.call(parentInstance, event);
          }
          this[c] = true;
          this[c === "isout" ? "isover" : "isout"] = false;
          this[c === "isover" ? "_over" : "_out"].call(this, event);
          if (parentInstance && c === "isout") {
            parentInstance.isout = false;
            parentInstance.isover = true;
            parentInstance._over.call(parentInstance, event);
          }
        });
      },
      dragStop: function(draggable, event) {
        draggable.element.parentsUntil("body").off("scroll.droppable");
        if (!draggable.options.refreshPositions) {
          $2.ui.ddmanager.prepareOffsets(draggable, event);
        }
      }
    };
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.droppable", $2.ui.droppable, {
        options: {
          hoverClass: false,
          activeClass: false
        },
        _addActiveClass: function() {
          this._super();
          if (this.options.activeClass) {
            this.element.addClass(this.options.activeClass);
          }
        },
        _removeActiveClass: function() {
          this._super();
          if (this.options.activeClass) {
            this.element.removeClass(this.options.activeClass);
          }
        },
        _addHoverClass: function() {
          this._super();
          if (this.options.hoverClass) {
            this.element.addClass(this.options.hoverClass);
          }
        },
        _removeHoverClass: function() {
          this._super();
          if (this.options.hoverClass) {
            this.element.removeClass(this.options.hoverClass);
          }
        }
      });
    }
    var widgetsDroppable = $2.ui.droppable;
    $2.widget("ui.resizable", $2.ui.mouse, {
      version: "1.13.0",
      widgetEventPrefix: "resize",
      options: {
        alsoResize: false,
        animate: false,
        animateDuration: "slow",
        animateEasing: "swing",
        aspectRatio: false,
        autoHide: false,
        classes: {
          "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
        },
        containment: false,
        ghost: false,
        grid: false,
        handles: "e,s,se",
        helper: false,
        maxHeight: null,
        maxWidth: null,
        minHeight: 10,
        minWidth: 10,
        // See #7960
        zIndex: 90,
        // Callbacks
        resize: null,
        start: null,
        stop: null
      },
      _num: function(value) {
        return parseFloat(value) || 0;
      },
      _isNumber: function(value) {
        return !isNaN(parseFloat(value));
      },
      _hasScroll: function(el, a) {
        if ($2(el).css("overflow") === "hidden") {
          return false;
        }
        var scroll = a && a === "left" ? "scrollLeft" : "scrollTop", has = false;
        if (el[scroll] > 0) {
          return true;
        }
        try {
          el[scroll] = 1;
          has = el[scroll] > 0;
          el[scroll] = 0;
        } catch (e) {
        }
        return has;
      },
      _create: function() {
        var margins, o = this.options, that = this;
        this._addClass("ui-resizable");
        $2.extend(this, {
          _aspectRatio: !!o.aspectRatio,
          aspectRatio: o.aspectRatio,
          originalElement: this.element,
          _proportionallyResizeElements: [],
          _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
        });
        if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
          this.element.wrap(
            $2("<div class='ui-wrapper'></div>").css({
              overflow: "hidden",
              position: this.element.css("position"),
              width: this.element.outerWidth(),
              height: this.element.outerHeight(),
              top: this.element.css("top"),
              left: this.element.css("left")
            })
          );
          this.element = this.element.parent().data(
            "ui-resizable",
            this.element.resizable("instance")
          );
          this.elementIsWrapper = true;
          margins = {
            marginTop: this.originalElement.css("marginTop"),
            marginRight: this.originalElement.css("marginRight"),
            marginBottom: this.originalElement.css("marginBottom"),
            marginLeft: this.originalElement.css("marginLeft")
          };
          this.element.css(margins);
          this.originalElement.css("margin", 0);
          this.originalResizeStyle = this.originalElement.css("resize");
          this.originalElement.css("resize", "none");
          this._proportionallyResizeElements.push(this.originalElement.css({
            position: "static",
            zoom: 1,
            display: "block"
          }));
          this.originalElement.css(margins);
          this._proportionallyResize();
        }
        this._setupHandles();
        if (o.autoHide) {
          $2(this.element).on("mouseenter", function() {
            if (o.disabled) {
              return;
            }
            that._removeClass("ui-resizable-autohide");
            that._handles.show();
          }).on("mouseleave", function() {
            if (o.disabled) {
              return;
            }
            if (!that.resizing) {
              that._addClass("ui-resizable-autohide");
              that._handles.hide();
            }
          });
        }
        this._mouseInit();
      },
      _destroy: function() {
        this._mouseDestroy();
        this._addedHandles.remove();
        var wrapper, _destroy = function(exp) {
          $2(exp).removeData("resizable").removeData("ui-resizable").off(".resizable");
        };
        if (this.elementIsWrapper) {
          _destroy(this.element);
          wrapper = this.element;
          this.originalElement.css({
            position: wrapper.css("position"),
            width: wrapper.outerWidth(),
            height: wrapper.outerHeight(),
            top: wrapper.css("top"),
            left: wrapper.css("left")
          }).insertAfter(wrapper);
          wrapper.remove();
        }
        this.originalElement.css("resize", this.originalResizeStyle);
        _destroy(this.originalElement);
        return this;
      },
      _setOption: function(key, value) {
        this._super(key, value);
        switch (key) {
          case "handles":
            this._removeHandles();
            this._setupHandles();
            break;
          case "aspectRatio":
            this._aspectRatio = !!value;
            break;
          default:
            break;
        }
      },
      _setupHandles: function() {
        var o = this.options, handle, i, n, hname, axis, that = this;
        this.handles = o.handles || (!$2(".ui-resizable-handle", this.element).length ? "e,s,se" : {
          n: ".ui-resizable-n",
          e: ".ui-resizable-e",
          s: ".ui-resizable-s",
          w: ".ui-resizable-w",
          se: ".ui-resizable-se",
          sw: ".ui-resizable-sw",
          ne: ".ui-resizable-ne",
          nw: ".ui-resizable-nw"
        });
        this._handles = $2();
        this._addedHandles = $2();
        if (this.handles.constructor === String) {
          if (this.handles === "all") {
            this.handles = "n,e,s,w,se,sw,ne,nw";
          }
          n = this.handles.split(",");
          this.handles = {};
          for (i = 0; i < n.length; i++) {
            handle = String.prototype.trim.call(n[i]);
            hname = "ui-resizable-" + handle;
            axis = $2("<div>");
            this._addClass(axis, "ui-resizable-handle " + hname);
            axis.css({ zIndex: o.zIndex });
            this.handles[handle] = ".ui-resizable-" + handle;
            if (!this.element.children(this.handles[handle]).length) {
              this.element.append(axis);
              this._addedHandles = this._addedHandles.add(axis);
            }
          }
        }
        this._renderAxis = function(target) {
          var i2, axis2, padPos, padWrapper;
          target = target || this.element;
          for (i2 in this.handles) {
            if (this.handles[i2].constructor === String) {
              this.handles[i2] = this.element.children(this.handles[i2]).first().show();
            } else if (this.handles[i2].jquery || this.handles[i2].nodeType) {
              this.handles[i2] = $2(this.handles[i2]);
              this._on(this.handles[i2], { "mousedown": that._mouseDown });
            }
            if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
              axis2 = $2(this.handles[i2], this.element);
              padWrapper = /sw|ne|nw|se|n|s/.test(i2) ? axis2.outerHeight() : axis2.outerWidth();
              padPos = [
                "padding",
                /ne|nw|n/.test(i2) ? "Top" : /se|sw|s/.test(i2) ? "Bottom" : /^e$/.test(i2) ? "Right" : "Left"
              ].join("");
              target.css(padPos, padWrapper);
              this._proportionallyResize();
            }
            this._handles = this._handles.add(this.handles[i2]);
          }
        };
        this._renderAxis(this.element);
        this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
        this._handles.disableSelection();
        this._handles.on("mouseover", function() {
          if (!that.resizing) {
            if (this.className) {
              axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
            }
            that.axis = axis && axis[1] ? axis[1] : "se";
          }
        });
        if (o.autoHide) {
          this._handles.hide();
          this._addClass("ui-resizable-autohide");
        }
      },
      _removeHandles: function() {
        this._addedHandles.remove();
      },
      _mouseCapture: function(event) {
        var i, handle, capture = false;
        for (i in this.handles) {
          handle = $2(this.handles[i])[0];
          if (handle === event.target || $2.contains(handle, event.target)) {
            capture = true;
          }
        }
        return !this.options.disabled && capture;
      },
      _mouseStart: function(event) {
        var curleft, curtop, cursor, o = this.options, el = this.element;
        this.resizing = true;
        this._renderProxy();
        curleft = this._num(this.helper.css("left"));
        curtop = this._num(this.helper.css("top"));
        if (o.containment) {
          curleft += $2(o.containment).scrollLeft() || 0;
          curtop += $2(o.containment).scrollTop() || 0;
        }
        this.offset = this.helper.offset();
        this.position = { left: curleft, top: curtop };
        this.size = this._helper ? {
          width: this.helper.width(),
          height: this.helper.height()
        } : {
          width: el.width(),
          height: el.height()
        };
        this.originalSize = this._helper ? {
          width: el.outerWidth(),
          height: el.outerHeight()
        } : {
          width: el.width(),
          height: el.height()
        };
        this.sizeDiff = {
          width: el.outerWidth() - el.width(),
          height: el.outerHeight() - el.height()
        };
        this.originalPosition = { left: curleft, top: curtop };
        this.originalMousePosition = { left: event.pageX, top: event.pageY };
        this.aspectRatio = typeof o.aspectRatio === "number" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
        cursor = $2(".ui-resizable-" + this.axis).css("cursor");
        $2("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);
        this._addClass("ui-resizable-resizing");
        this._propagate("start", event);
        return true;
      },
      _mouseDrag: function(event) {
        var data2, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
        this._updatePrevProperties();
        if (!trigger) {
          return false;
        }
        data2 = trigger.apply(this, [event, dx, dy]);
        this._updateVirtualBoundaries(event.shiftKey);
        if (this._aspectRatio || event.shiftKey) {
          data2 = this._updateRatio(data2, event);
        }
        data2 = this._respectSize(data2, event);
        this._updateCache(data2);
        this._propagate("resize", event);
        props = this._applyChanges();
        if (!this._helper && this._proportionallyResizeElements.length) {
          this._proportionallyResize();
        }
        if (!$2.isEmptyObject(props)) {
          this._updatePrevProperties();
          this._trigger("resize", event, this.ui());
          this._applyChanges();
        }
        return false;
      },
      _mouseStop: function(event) {
        this.resizing = false;
        var pr, ista, soffseth, soffsetw, s, left3, top3, o = this.options, that = this;
        if (this._helper) {
          pr = this._proportionallyResizeElements;
          ista = pr.length && /textarea/i.test(pr[0].nodeName);
          soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
          soffsetw = ista ? 0 : that.sizeDiff.width;
          s = {
            width: that.helper.width() - soffsetw,
            height: that.helper.height() - soffseth
          };
          left3 = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null;
          top3 = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;
          if (!o.animate) {
            this.element.css($2.extend(s, { top: top3, left: left3 }));
          }
          that.helper.height(that.size.height);
          that.helper.width(that.size.width);
          if (this._helper && !o.animate) {
            this._proportionallyResize();
          }
        }
        $2("body").css("cursor", "auto");
        this._removeClass("ui-resizable-resizing");
        this._propagate("stop", event);
        if (this._helper) {
          this.helper.remove();
        }
        return false;
      },
      _updatePrevProperties: function() {
        this.prevPosition = {
          top: this.position.top,
          left: this.position.left
        };
        this.prevSize = {
          width: this.size.width,
          height: this.size.height
        };
      },
      _applyChanges: function() {
        var props = {};
        if (this.position.top !== this.prevPosition.top) {
          props.top = this.position.top + "px";
        }
        if (this.position.left !== this.prevPosition.left) {
          props.left = this.position.left + "px";
        }
        if (this.size.width !== this.prevSize.width) {
          props.width = this.size.width + "px";
        }
        if (this.size.height !== this.prevSize.height) {
          props.height = this.size.height + "px";
        }
        this.helper.css(props);
        return props;
      },
      _updateVirtualBoundaries: function(forceAspectRatio) {
        var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
        b = {
          minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
          maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
          minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
          maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
        };
        if (this._aspectRatio || forceAspectRatio) {
          pMinWidth = b.minHeight * this.aspectRatio;
          pMinHeight = b.minWidth / this.aspectRatio;
          pMaxWidth = b.maxHeight * this.aspectRatio;
          pMaxHeight = b.maxWidth / this.aspectRatio;
          if (pMinWidth > b.minWidth) {
            b.minWidth = pMinWidth;
          }
          if (pMinHeight > b.minHeight) {
            b.minHeight = pMinHeight;
          }
          if (pMaxWidth < b.maxWidth) {
            b.maxWidth = pMaxWidth;
          }
          if (pMaxHeight < b.maxHeight) {
            b.maxHeight = pMaxHeight;
          }
        }
        this._vBoundaries = b;
      },
      _updateCache: function(data2) {
        this.offset = this.helper.offset();
        if (this._isNumber(data2.left)) {
          this.position.left = data2.left;
        }
        if (this._isNumber(data2.top)) {
          this.position.top = data2.top;
        }
        if (this._isNumber(data2.height)) {
          this.size.height = data2.height;
        }
        if (this._isNumber(data2.width)) {
          this.size.width = data2.width;
        }
      },
      _updateRatio: function(data2) {
        var cpos = this.position, csize = this.size, a = this.axis;
        if (this._isNumber(data2.height)) {
          data2.width = data2.height * this.aspectRatio;
        } else if (this._isNumber(data2.width)) {
          data2.height = data2.width / this.aspectRatio;
        }
        if (a === "sw") {
          data2.left = cpos.left + (csize.width - data2.width);
          data2.top = null;
        }
        if (a === "nw") {
          data2.top = cpos.top + (csize.height - data2.height);
          data2.left = cpos.left + (csize.width - data2.width);
        }
        return data2;
      },
      _respectSize: function(data2) {
        var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data2.width) && o.maxWidth && o.maxWidth < data2.width, ismaxh = this._isNumber(data2.height) && o.maxHeight && o.maxHeight < data2.height, isminw = this._isNumber(data2.width) && o.minWidth && o.minWidth > data2.width, isminh = this._isNumber(data2.height) && o.minHeight && o.minHeight > data2.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.originalPosition.top + this.originalSize.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
        if (isminw) {
          data2.width = o.minWidth;
        }
        if (isminh) {
          data2.height = o.minHeight;
        }
        if (ismaxw) {
          data2.width = o.maxWidth;
        }
        if (ismaxh) {
          data2.height = o.maxHeight;
        }
        if (isminw && cw) {
          data2.left = dw - o.minWidth;
        }
        if (ismaxw && cw) {
          data2.left = dw - o.maxWidth;
        }
        if (isminh && ch) {
          data2.top = dh - o.minHeight;
        }
        if (ismaxh && ch) {
          data2.top = dh - o.maxHeight;
        }
        if (!data2.width && !data2.height && !data2.left && data2.top) {
          data2.top = null;
        } else if (!data2.width && !data2.height && !data2.top && data2.left) {
          data2.left = null;
        }
        return data2;
      },
      _getPaddingPlusBorderDimensions: function(element) {
        var i = 0, widths = [], borders = [
          element.css("borderTopWidth"),
          element.css("borderRightWidth"),
          element.css("borderBottomWidth"),
          element.css("borderLeftWidth")
        ], paddings = [
          element.css("paddingTop"),
          element.css("paddingRight"),
          element.css("paddingBottom"),
          element.css("paddingLeft")
        ];
        for (; i < 4; i++) {
          widths[i] = parseFloat(borders[i]) || 0;
          widths[i] += parseFloat(paddings[i]) || 0;
        }
        return {
          height: widths[0] + widths[2],
          width: widths[1] + widths[3]
        };
      },
      _proportionallyResize: function() {
        if (!this._proportionallyResizeElements.length) {
          return;
        }
        var prel, i = 0, element = this.helper || this.element;
        for (; i < this._proportionallyResizeElements.length; i++) {
          prel = this._proportionallyResizeElements[i];
          if (!this.outerDimensions) {
            this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);
          }
          prel.css({
            height: element.height() - this.outerDimensions.height || 0,
            width: element.width() - this.outerDimensions.width || 0
          });
        }
      },
      _renderProxy: function() {
        var el = this.element, o = this.options;
        this.elementOffset = el.offset();
        if (this._helper) {
          this.helper = this.helper || $2("<div></div>").css({ overflow: "hidden" });
          this._addClass(this.helper, this._helper);
          this.helper.css({
            width: this.element.outerWidth(),
            height: this.element.outerHeight(),
            position: "absolute",
            left: this.elementOffset.left + "px",
            top: this.elementOffset.top + "px",
            zIndex: ++o.zIndex
            //TODO: Don't modify option
          });
          this.helper.appendTo("body").disableSelection();
        } else {
          this.helper = this.element;
        }
      },
      _change: {
        e: function(event, dx) {
          return { width: this.originalSize.width + dx };
        },
        w: function(event, dx) {
          var cs = this.originalSize, sp = this.originalPosition;
          return { left: sp.left + dx, width: cs.width - dx };
        },
        n: function(event, dx, dy) {
          var cs = this.originalSize, sp = this.originalPosition;
          return { top: sp.top + dy, height: cs.height - dy };
        },
        s: function(event, dx, dy) {
          return { height: this.originalSize.height + dy };
        },
        se: function(event, dx, dy) {
          return $2.extend(
            this._change.s.apply(this, arguments),
            this._change.e.apply(this, [event, dx, dy])
          );
        },
        sw: function(event, dx, dy) {
          return $2.extend(
            this._change.s.apply(this, arguments),
            this._change.w.apply(this, [event, dx, dy])
          );
        },
        ne: function(event, dx, dy) {
          return $2.extend(
            this._change.n.apply(this, arguments),
            this._change.e.apply(this, [event, dx, dy])
          );
        },
        nw: function(event, dx, dy) {
          return $2.extend(
            this._change.n.apply(this, arguments),
            this._change.w.apply(this, [event, dx, dy])
          );
        }
      },
      _propagate: function(n, event) {
        $2.ui.plugin.call(this, n, [event, this.ui()]);
        if (n !== "resize") {
          this._trigger(n, event, this.ui());
        }
      },
      plugins: {},
      ui: function() {
        return {
          originalElement: this.originalElement,
          element: this.element,
          helper: this.helper,
          position: this.position,
          size: this.size,
          originalSize: this.originalSize,
          originalPosition: this.originalPosition
        };
      }
    });
    $2.ui.plugin.add("resizable", "animate", {
      stop: function(event) {
        var that = $2(this).resizable("instance"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
          width: that.size.width - soffsetw,
          height: that.size.height - soffseth
        }, left3 = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null, top3 = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;
        that.element.animate(
          $2.extend(style, top3 && left3 ? { top: top3, left: left3 } : {}),
          {
            duration: o.animateDuration,
            easing: o.animateEasing,
            step: function() {
              var data2 = {
                width: parseFloat(that.element.css("width")),
                height: parseFloat(that.element.css("height")),
                top: parseFloat(that.element.css("top")),
                left: parseFloat(that.element.css("left"))
              };
              if (pr && pr.length) {
                $2(pr[0]).css({ width: data2.width, height: data2.height });
              }
              that._updateCache(data2);
              that._propagate("resize", event);
            }
          }
        );
      }
    });
    $2.ui.plugin.add("resizable", "containment", {
      start: function() {
        var element, p, co, ch, cw, width, height, that = $2(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $2 ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
        if (!ce) {
          return;
        }
        that.containerElement = $2(ce);
        if (/document/.test(oc) || oc === document) {
          that.containerOffset = {
            left: 0,
            top: 0
          };
          that.containerPosition = {
            left: 0,
            top: 0
          };
          that.parentData = {
            element: $2(document),
            left: 0,
            top: 0,
            width: $2(document).width(),
            height: $2(document).height() || document.body.parentNode.scrollHeight
          };
        } else {
          element = $2(ce);
          p = [];
          $2(["Top", "Right", "Left", "Bottom"]).each(function(i, name) {
            p[i] = that._num(element.css("padding" + name));
          });
          that.containerOffset = element.offset();
          that.containerPosition = element.position();
          that.containerSize = {
            height: element.innerHeight() - p[3],
            width: element.innerWidth() - p[1]
          };
          co = that.containerOffset;
          ch = that.containerSize.height;
          cw = that.containerSize.width;
          width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
          height = that._hasScroll(ce) ? ce.scrollHeight : ch;
          that.parentData = {
            element: ce,
            left: co.left,
            top: co.top,
            width,
            height
          };
        }
      },
      resize: function(event) {
        var woset, hoset, isParent, isOffsetRelative, that = $2(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
          top: 0,
          left: 0
        }, ce = that.containerElement, continueResize = true;
        if (ce[0] !== document && /static/.test(ce.css("position"))) {
          cop = co;
        }
        if (cp.left < (that._helper ? co.left : 0)) {
          that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
          if (pRatio) {
            that.size.height = that.size.width / that.aspectRatio;
            continueResize = false;
          }
          that.position.left = o.helper ? co.left : 0;
        }
        if (cp.top < (that._helper ? co.top : 0)) {
          that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
          if (pRatio) {
            that.size.width = that.size.height * that.aspectRatio;
            continueResize = false;
          }
          that.position.top = that._helper ? co.top : 0;
        }
        isParent = that.containerElement.get(0) === that.element.parent().get(0);
        isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
        if (isParent && isOffsetRelative) {
          that.offset.left = that.parentData.left + that.position.left;
          that.offset.top = that.parentData.top + that.position.top;
        } else {
          that.offset.left = that.element.offset().left;
          that.offset.top = that.element.offset().top;
        }
        woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));
        hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));
        if (woset + that.size.width >= that.parentData.width) {
          that.size.width = that.parentData.width - woset;
          if (pRatio) {
            that.size.height = that.size.width / that.aspectRatio;
            continueResize = false;
          }
        }
        if (hoset + that.size.height >= that.parentData.height) {
          that.size.height = that.parentData.height - hoset;
          if (pRatio) {
            that.size.width = that.size.height * that.aspectRatio;
            continueResize = false;
          }
        }
        if (!continueResize) {
          that.position.left = that.prevPosition.left;
          that.position.top = that.prevPosition.top;
          that.size.width = that.prevSize.width;
          that.size.height = that.prevSize.height;
        }
      },
      stop: function() {
        var that = $2(this).resizable("instance"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $2(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
        if (that._helper && !o.animate && /relative/.test(ce.css("position"))) {
          $2(this).css({
            left: ho.left - cop.left - co.left,
            width: w,
            height: h
          });
        }
        if (that._helper && !o.animate && /static/.test(ce.css("position"))) {
          $2(this).css({
            left: ho.left - cop.left - co.left,
            width: w,
            height: h
          });
        }
      }
    });
    $2.ui.plugin.add("resizable", "alsoResize", {
      start: function() {
        var that = $2(this).resizable("instance"), o = that.options;
        $2(o.alsoResize).each(function() {
          var el = $2(this);
          el.data("ui-resizable-alsoresize", {
            width: parseFloat(el.width()),
            height: parseFloat(el.height()),
            left: parseFloat(el.css("left")),
            top: parseFloat(el.css("top"))
          });
        });
      },
      resize: function(event, ui) {
        var that = $2(this).resizable("instance"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
          height: that.size.height - os.height || 0,
          width: that.size.width - os.width || 0,
          top: that.position.top - op.top || 0,
          left: that.position.left - op.left || 0
        };
        $2(o.alsoResize).each(function() {
          var el = $2(this), start5 = $2(this).data("ui-resizable-alsoresize"), style = {}, css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
          $2.each(css, function(i, prop) {
            var sum = (start5[prop] || 0) + (delta[prop] || 0);
            if (sum && sum >= 0) {
              style[prop] = sum || null;
            }
          });
          el.css(style);
        });
      },
      stop: function() {
        $2(this).removeData("ui-resizable-alsoresize");
      }
    });
    $2.ui.plugin.add("resizable", "ghost", {
      start: function() {
        var that = $2(this).resizable("instance"), cs = that.size;
        that.ghost = that.originalElement.clone();
        that.ghost.css({
          opacity: 0.25,
          display: "block",
          position: "relative",
          height: cs.height,
          width: cs.width,
          margin: 0,
          left: 0,
          top: 0
        });
        that._addClass(that.ghost, "ui-resizable-ghost");
        if ($2.uiBackCompat !== false && typeof that.options.ghost === "string") {
          that.ghost.addClass(this.options.ghost);
        }
        that.ghost.appendTo(that.helper);
      },
      resize: function() {
        var that = $2(this).resizable("instance");
        if (that.ghost) {
          that.ghost.css({
            position: "relative",
            height: that.size.height,
            width: that.size.width
          });
        }
      },
      stop: function() {
        var that = $2(this).resizable("instance");
        if (that.ghost && that.helper) {
          that.helper.get(0).removeChild(that.ghost.get(0));
        }
      }
    });
    $2.ui.plugin.add("resizable", "grid", {
      resize: function() {
        var outerDimensions, that = $2(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
        o.grid = grid;
        if (isMinWidth) {
          newWidth += gridX;
        }
        if (isMinHeight) {
          newHeight += gridY;
        }
        if (isMaxWidth) {
          newWidth -= gridX;
        }
        if (isMaxHeight) {
          newHeight -= gridY;
        }
        if (/^(se|s|e)$/.test(a)) {
          that.size.width = newWidth;
          that.size.height = newHeight;
        } else if (/^(ne)$/.test(a)) {
          that.size.width = newWidth;
          that.size.height = newHeight;
          that.position.top = op.top - oy;
        } else if (/^(sw)$/.test(a)) {
          that.size.width = newWidth;
          that.size.height = newHeight;
          that.position.left = op.left - ox;
        } else {
          if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
            outerDimensions = that._getPaddingPlusBorderDimensions(this);
          }
          if (newHeight - gridY > 0) {
            that.size.height = newHeight;
            that.position.top = op.top - oy;
          } else {
            newHeight = gridY - outerDimensions.height;
            that.size.height = newHeight;
            that.position.top = op.top + os.height - newHeight;
          }
          if (newWidth - gridX > 0) {
            that.size.width = newWidth;
            that.position.left = op.left - ox;
          } else {
            newWidth = gridX - outerDimensions.width;
            that.size.width = newWidth;
            that.position.left = op.left + os.width - newWidth;
          }
        }
      }
    });
    var widgetsResizable = $2.ui.resizable;
    var widgetsSelectable = $2.widget("ui.selectable", $2.ui.mouse, {
      version: "1.13.0",
      options: {
        appendTo: "body",
        autoRefresh: true,
        distance: 0,
        filter: "*",
        tolerance: "touch",
        // Callbacks
        selected: null,
        selecting: null,
        start: null,
        stop: null,
        unselected: null,
        unselecting: null
      },
      _create: function() {
        var that = this;
        this._addClass("ui-selectable");
        this.dragged = false;
        this.refresh = function() {
          that.elementPos = $2(that.element[0]).offset();
          that.selectees = $2(that.options.filter, that.element[0]);
          that._addClass(that.selectees, "ui-selectee");
          that.selectees.each(function() {
            var $this = $2(this), selecteeOffset = $this.offset(), pos = {
              left: selecteeOffset.left - that.elementPos.left,
              top: selecteeOffset.top - that.elementPos.top
            };
            $2.data(this, "selectable-item", {
              element: this,
              $element: $this,
              left: pos.left,
              top: pos.top,
              right: pos.left + $this.outerWidth(),
              bottom: pos.top + $this.outerHeight(),
              startselected: false,
              selected: $this.hasClass("ui-selected"),
              selecting: $this.hasClass("ui-selecting"),
              unselecting: $this.hasClass("ui-unselecting")
            });
          });
        };
        this.refresh();
        this._mouseInit();
        this.helper = $2("<div>");
        this._addClass(this.helper, "ui-selectable-helper");
      },
      _destroy: function() {
        this.selectees.removeData("selectable-item");
        this._mouseDestroy();
      },
      _mouseStart: function(event) {
        var that = this, options = this.options;
        this.opos = [event.pageX, event.pageY];
        this.elementPos = $2(this.element[0]).offset();
        if (this.options.disabled) {
          return;
        }
        this.selectees = $2(options.filter, this.element[0]);
        this._trigger("start", event);
        $2(options.appendTo).append(this.helper);
        this.helper.css({
          "left": event.pageX,
          "top": event.pageY,
          "width": 0,
          "height": 0
        });
        if (options.autoRefresh) {
          this.refresh();
        }
        this.selectees.filter(".ui-selected").each(function() {
          var selectee = $2.data(this, "selectable-item");
          selectee.startselected = true;
          if (!event.metaKey && !event.ctrlKey) {
            that._removeClass(selectee.$element, "ui-selected");
            selectee.selected = false;
            that._addClass(selectee.$element, "ui-unselecting");
            selectee.unselecting = true;
            that._trigger("unselecting", event, {
              unselecting: selectee.element
            });
          }
        });
        $2(event.target).parents().addBack().each(function() {
          var doSelect, selectee = $2.data(this, "selectable-item");
          if (selectee) {
            doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
            that._removeClass(selectee.$element, doSelect ? "ui-unselecting" : "ui-selected")._addClass(selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting");
            selectee.unselecting = !doSelect;
            selectee.selecting = doSelect;
            selectee.selected = doSelect;
            if (doSelect) {
              that._trigger("selecting", event, {
                selecting: selectee.element
              });
            } else {
              that._trigger("unselecting", event, {
                unselecting: selectee.element
              });
            }
            return false;
          }
        });
      },
      _mouseDrag: function(event) {
        this.dragged = true;
        if (this.options.disabled) {
          return;
        }
        var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
        if (x1 > x2) {
          tmp = x2;
          x2 = x1;
          x1 = tmp;
        }
        if (y1 > y2) {
          tmp = y2;
          y2 = y1;
          y1 = tmp;
        }
        this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });
        this.selectees.each(function() {
          var selectee = $2.data(this, "selectable-item"), hit = false, offset2 = {};
          if (!selectee || selectee.element === that.element[0]) {
            return;
          }
          offset2.left = selectee.left + that.elementPos.left;
          offset2.right = selectee.right + that.elementPos.left;
          offset2.top = selectee.top + that.elementPos.top;
          offset2.bottom = selectee.bottom + that.elementPos.top;
          if (options.tolerance === "touch") {
            hit = !(offset2.left > x2 || offset2.right < x1 || offset2.top > y2 || offset2.bottom < y1);
          } else if (options.tolerance === "fit") {
            hit = offset2.left > x1 && offset2.right < x2 && offset2.top > y1 && offset2.bottom < y2;
          }
          if (hit) {
            if (selectee.selected) {
              that._removeClass(selectee.$element, "ui-selected");
              selectee.selected = false;
            }
            if (selectee.unselecting) {
              that._removeClass(selectee.$element, "ui-unselecting");
              selectee.unselecting = false;
            }
            if (!selectee.selecting) {
              that._addClass(selectee.$element, "ui-selecting");
              selectee.selecting = true;
              that._trigger("selecting", event, {
                selecting: selectee.element
              });
            }
          } else {
            if (selectee.selecting) {
              if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                that._removeClass(selectee.$element, "ui-selecting");
                selectee.selecting = false;
                that._addClass(selectee.$element, "ui-selected");
                selectee.selected = true;
              } else {
                that._removeClass(selectee.$element, "ui-selecting");
                selectee.selecting = false;
                if (selectee.startselected) {
                  that._addClass(selectee.$element, "ui-unselecting");
                  selectee.unselecting = true;
                }
                that._trigger("unselecting", event, {
                  unselecting: selectee.element
                });
              }
            }
            if (selectee.selected) {
              if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                that._removeClass(selectee.$element, "ui-selected");
                selectee.selected = false;
                that._addClass(selectee.$element, "ui-unselecting");
                selectee.unselecting = true;
                that._trigger("unselecting", event, {
                  unselecting: selectee.element
                });
              }
            }
          }
        });
        return false;
      },
      _mouseStop: function(event) {
        var that = this;
        this.dragged = false;
        $2(".ui-unselecting", this.element[0]).each(function() {
          var selectee = $2.data(this, "selectable-item");
          that._removeClass(selectee.$element, "ui-unselecting");
          selectee.unselecting = false;
          selectee.startselected = false;
          that._trigger("unselected", event, {
            unselected: selectee.element
          });
        });
        $2(".ui-selecting", this.element[0]).each(function() {
          var selectee = $2.data(this, "selectable-item");
          that._removeClass(selectee.$element, "ui-selecting")._addClass(selectee.$element, "ui-selected");
          selectee.selecting = false;
          selectee.selected = true;
          selectee.startselected = true;
          that._trigger("selected", event, {
            selected: selectee.element
          });
        });
        this._trigger("stop", event);
        this.helper.remove();
        return false;
      }
    });
    var widgetsSortable = $2.widget("ui.sortable", $2.ui.mouse, {
      version: "1.13.0",
      widgetEventPrefix: "sort",
      ready: false,
      options: {
        appendTo: "parent",
        axis: false,
        connectWith: false,
        containment: false,
        cursor: "auto",
        cursorAt: false,
        dropOnEmpty: true,
        forcePlaceholderSize: false,
        forceHelperSize: false,
        grid: false,
        handle: false,
        helper: "original",
        items: "> *",
        opacity: false,
        placeholder: false,
        revert: false,
        scroll: true,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        scope: "default",
        tolerance: "intersect",
        zIndex: 1e3,
        // Callbacks
        activate: null,
        beforeStop: null,
        change: null,
        deactivate: null,
        out: null,
        over: null,
        receive: null,
        remove: null,
        sort: null,
        start: null,
        stop: null,
        update: null
      },
      _isOverAxis: function(x, reference2, size) {
        return x >= reference2 && x < reference2 + size;
      },
      _isFloating: function(item) {
        return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
      },
      _create: function() {
        this.containerCache = {};
        this._addClass("ui-sortable");
        this.refresh();
        this.offset = this.element.offset();
        this._mouseInit();
        this._setHandleClassName();
        this.ready = true;
      },
      _setOption: function(key, value) {
        this._super(key, value);
        if (key === "handle") {
          this._setHandleClassName();
        }
      },
      _setHandleClassName: function() {
        var that = this;
        this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle");
        $2.each(this.items, function() {
          that._addClass(
            this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item,
            "ui-sortable-handle"
          );
        });
      },
      _destroy: function() {
        this._mouseDestroy();
        for (var i = this.items.length - 1; i >= 0; i--) {
          this.items[i].item.removeData(this.widgetName + "-item");
        }
        return this;
      },
      _mouseCapture: function(event, overrideHandle) {
        var currentItem = null, validHandle = false, that = this;
        if (this.reverting) {
          return false;
        }
        if (this.options.disabled || this.options.type === "static") {
          return false;
        }
        this._refreshItems(event);
        $2(event.target).parents().each(function() {
          if ($2.data(this, that.widgetName + "-item") === that) {
            currentItem = $2(this);
            return false;
          }
        });
        if ($2.data(event.target, that.widgetName + "-item") === that) {
          currentItem = $2(event.target);
        }
        if (!currentItem) {
          return false;
        }
        if (this.options.handle && !overrideHandle) {
          $2(this.options.handle, currentItem).find("*").addBack().each(function() {
            if (this === event.target) {
              validHandle = true;
            }
          });
          if (!validHandle) {
            return false;
          }
        }
        this.currentItem = currentItem;
        this._removeCurrentsFromItems();
        return true;
      },
      _mouseStart: function(event, overrideHandle, noActivation) {
        var i, body, o = this.options;
        this.currentContainer = this;
        this.refreshPositions();
        this.appendTo = $2(o.appendTo !== "parent" ? o.appendTo : this.currentItem.parent());
        this.helper = this._createHelper(event);
        this._cacheHelperProportions();
        this._cacheMargins();
        this.offset = this.currentItem.offset();
        this.offset = {
          top: this.offset.top - this.margins.top,
          left: this.offset.left - this.margins.left
        };
        $2.extend(this.offset, {
          click: {
            //Where the click happened, relative to the element
            left: event.pageX - this.offset.left,
            top: event.pageY - this.offset.top
          },
          // This is a relative to absolute position minus the actual position calculation -
          // only used for relative positioned helper
          relative: this._getRelativeOffset()
        });
        this.helper.css("position", "absolute");
        this.cssPosition = this.helper.css("position");
        if (o.cursorAt) {
          this._adjustOffsetFromHelper(o.cursorAt);
        }
        this.domPosition = {
          prev: this.currentItem.prev()[0],
          parent: this.currentItem.parent()[0]
        };
        if (this.helper[0] !== this.currentItem[0]) {
          this.currentItem.hide();
        }
        this._createPlaceholder();
        this.scrollParent = this.placeholder.scrollParent();
        $2.extend(this.offset, {
          parent: this._getParentOffset()
        });
        if (o.containment) {
          this._setContainment();
        }
        if (o.cursor && o.cursor !== "auto") {
          body = this.document.find("body");
          this.storedCursor = body.css("cursor");
          body.css("cursor", o.cursor);
          this.storedStylesheet = $2("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
        }
        if (o.zIndex) {
          if (this.helper.css("zIndex")) {
            this._storedZIndex = this.helper.css("zIndex");
          }
          this.helper.css("zIndex", o.zIndex);
        }
        if (o.opacity) {
          if (this.helper.css("opacity")) {
            this._storedOpacity = this.helper.css("opacity");
          }
          this.helper.css("opacity", o.opacity);
        }
        if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
          this.overflowOffset = this.scrollParent.offset();
        }
        this._trigger("start", event, this._uiHash());
        if (!this._preserveHelperProportions) {
          this._cacheHelperProportions();
        }
        if (!noActivation) {
          for (i = this.containers.length - 1; i >= 0; i--) {
            this.containers[i]._trigger("activate", event, this._uiHash(this));
          }
        }
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.current = this;
        }
        if ($2.ui.ddmanager && !o.dropBehaviour) {
          $2.ui.ddmanager.prepareOffsets(this, event);
        }
        this.dragging = true;
        this._addClass(this.helper, "ui-sortable-helper");
        if (!this.helper.parent().is(this.appendTo)) {
          this.helper.detach().appendTo(this.appendTo);
          this.offset.parent = this._getParentOffset();
        }
        this.position = this.originalPosition = this._generatePosition(event);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;
        this.lastPositionAbs = this.positionAbs = this._convertPositionTo("absolute");
        this._mouseDrag(event);
        return true;
      },
      _scroll: function(event) {
        var o = this.options, scrolled = false;
        if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
          if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
          } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
          }
          if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
          } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
          }
        } else {
          if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
            scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
          } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
            scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
          }
          if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
            scrolled = this.document.scrollLeft(
              this.document.scrollLeft() - o.scrollSpeed
            );
          } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
            scrolled = this.document.scrollLeft(
              this.document.scrollLeft() + o.scrollSpeed
            );
          }
        }
        return scrolled;
      },
      _mouseDrag: function(event) {
        var i, item, itemElement, intersection, o = this.options;
        this.position = this._generatePosition(event);
        this.positionAbs = this._convertPositionTo("absolute");
        if (!this.options.axis || this.options.axis !== "y") {
          this.helper[0].style.left = this.position.left + "px";
        }
        if (!this.options.axis || this.options.axis !== "x") {
          this.helper[0].style.top = this.position.top + "px";
        }
        this._contactContainers(event);
        if (this.innermostContainer !== null) {
          if (o.scroll) {
            if (this._scroll(event) !== false) {
              this._refreshItemPositions(true);
              if ($2.ui.ddmanager && !o.dropBehaviour) {
                $2.ui.ddmanager.prepareOffsets(this, event);
              }
            }
          }
          this.dragDirection = {
            vertical: this._getDragVerticalDirection(),
            horizontal: this._getDragHorizontalDirection()
          };
          for (i = this.items.length - 1; i >= 0; i--) {
            item = this.items[i];
            itemElement = item.item[0];
            intersection = this._intersectsWithPointer(item);
            if (!intersection) {
              continue;
            }
            if (item.instance !== this.currentContainer) {
              continue;
            }
            if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$2.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$2.contains(this.element[0], itemElement) : true)) {
              this.direction = intersection === 1 ? "down" : "up";
              if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                this._rearrange(event, item);
              } else {
                break;
              }
              this._trigger("change", event, this._uiHash());
              break;
            }
          }
        }
        if ($2.ui.ddmanager) {
          $2.ui.ddmanager.drag(this, event);
        }
        this._trigger("sort", event, this._uiHash());
        this.lastPositionAbs = this.positionAbs;
        return false;
      },
      _mouseStop: function(event, noPropagation) {
        if (!event) {
          return;
        }
        if ($2.ui.ddmanager && !this.options.dropBehaviour) {
          $2.ui.ddmanager.drop(this, event);
        }
        if (this.options.revert) {
          var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
          if (!axis || axis === "x") {
            animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
          }
          if (!axis || axis === "y") {
            animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
          }
          this.reverting = true;
          $2(this.helper).animate(
            animation,
            parseInt(this.options.revert, 10) || 500,
            function() {
              that._clear(event);
            }
          );
        } else {
          this._clear(event, noPropagation);
        }
        return false;
      },
      cancel: function() {
        if (this.dragging) {
          this._mouseUp(new $2.Event("mouseup", { target: null }));
          if (this.options.helper === "original") {
            this.currentItem.css(this._storedCSS);
            this._removeClass(this.currentItem, "ui-sortable-helper");
          } else {
            this.currentItem.show();
          }
          for (var i = this.containers.length - 1; i >= 0; i--) {
            this.containers[i]._trigger("deactivate", null, this._uiHash(this));
            if (this.containers[i].containerCache.over) {
              this.containers[i]._trigger("out", null, this._uiHash(this));
              this.containers[i].containerCache.over = 0;
            }
          }
        }
        if (this.placeholder) {
          if (this.placeholder[0].parentNode) {
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
          }
          if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
            this.helper.remove();
          }
          $2.extend(this, {
            helper: null,
            dragging: false,
            reverting: false,
            _noFinalSort: null
          });
          if (this.domPosition.prev) {
            $2(this.domPosition.prev).after(this.currentItem);
          } else {
            $2(this.domPosition.parent).prepend(this.currentItem);
          }
        }
        return this;
      },
      serialize: function(o) {
        var items = this._getItemsAsjQuery(o && o.connected), str = [];
        o = o || {};
        $2(items).each(function() {
          var res = ($2(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
          if (res) {
            str.push(
              (o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2])
            );
          }
        });
        if (!str.length && o.key) {
          str.push(o.key + "=");
        }
        return str.join("&");
      },
      toArray: function(o) {
        var items = this._getItemsAsjQuery(o && o.connected), ret = [];
        o = o || {};
        items.each(function() {
          ret.push($2(o.item || this).attr(o.attribute || "id") || "");
        });
        return ret;
      },
      /* Be careful with the following core functions */
      _intersectsWith: function(item) {
        var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = this.options.axis === "x" || y1 + dyClick > t && y1 + dyClick < b, isOverElementWidth = this.options.axis === "y" || x1 + dxClick > l && x1 + dxClick < r, isOverElement = isOverElementHeight && isOverElementWidth;
        if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) {
          return isOverElement;
        } else {
          return l < x1 + this.helperProportions.width / 2 && // Right Half
          x2 - this.helperProportions.width / 2 < r && // Left Half
          t < y1 + this.helperProportions.height / 2 && // Bottom Half
          y2 - this.helperProportions.height / 2 < b;
        }
      },
      _intersectsWithPointer: function(item) {
        var verticalDirection, horizontalDirection, isOverElementHeight = this.options.axis === "x" || this._isOverAxis(
          this.positionAbs.top + this.offset.click.top,
          item.top,
          item.height
        ), isOverElementWidth = this.options.axis === "y" || this._isOverAxis(
          this.positionAbs.left + this.offset.click.left,
          item.left,
          item.width
        ), isOverElement = isOverElementHeight && isOverElementWidth;
        if (!isOverElement) {
          return false;
        }
        verticalDirection = this.dragDirection.vertical;
        horizontalDirection = this.dragDirection.horizontal;
        return this.floating ? horizontalDirection === "right" || verticalDirection === "down" ? 2 : 1 : verticalDirection && (verticalDirection === "down" ? 2 : 1);
      },
      _intersectsWithSides: function(item) {
        var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this.dragDirection.vertical, horizontalDirection = this.dragDirection.horizontal;
        if (this.floating && horizontalDirection) {
          return horizontalDirection === "right" && isOverRightHalf || horizontalDirection === "left" && !isOverRightHalf;
        } else {
          return verticalDirection && (verticalDirection === "down" && isOverBottomHalf || verticalDirection === "up" && !isOverBottomHalf);
        }
      },
      _getDragVerticalDirection: function() {
        var delta = this.positionAbs.top - this.lastPositionAbs.top;
        return delta !== 0 && (delta > 0 ? "down" : "up");
      },
      _getDragHorizontalDirection: function() {
        var delta = this.positionAbs.left - this.lastPositionAbs.left;
        return delta !== 0 && (delta > 0 ? "right" : "left");
      },
      refresh: function(event) {
        this._refreshItems(event);
        this._setHandleClassName();
        this.refreshPositions();
        return this;
      },
      _connectWith: function() {
        var options = this.options;
        return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
      },
      _getItemsAsjQuery: function(connected) {
        var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
        if (connectWith && connected) {
          for (i = connectWith.length - 1; i >= 0; i--) {
            cur = $2(connectWith[i], this.document[0]);
            for (j = cur.length - 1; j >= 0; j--) {
              inst = $2.data(cur[j], this.widgetFullName);
              if (inst && inst !== this && !inst.options.disabled) {
                queries.push([typeof inst.options.items === "function" ? inst.options.items.call(inst.element) : $2(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
              }
            }
          }
        }
        queries.push([typeof this.options.items === "function" ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $2(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
        function addItems() {
          items.push(this);
        }
        for (i = queries.length - 1; i >= 0; i--) {
          queries[i][0].each(addItems);
        }
        return $2(items);
      },
      _removeCurrentsFromItems: function() {
        var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
        this.items = $2.grep(this.items, function(item) {
          for (var j = 0; j < list.length; j++) {
            if (list[j] === item.item[0]) {
              return false;
            }
          }
          return true;
        });
      },
      _refreshItems: function(event) {
        this.items = [];
        this.containers = [this];
        var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [[typeof this.options.items === "function" ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $2(this.options.items, this.element), this]], connectWith = this._connectWith();
        if (connectWith && this.ready) {
          for (i = connectWith.length - 1; i >= 0; i--) {
            cur = $2(connectWith[i], this.document[0]);
            for (j = cur.length - 1; j >= 0; j--) {
              inst = $2.data(cur[j], this.widgetFullName);
              if (inst && inst !== this && !inst.options.disabled) {
                queries.push([typeof inst.options.items === "function" ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $2(inst.options.items, inst.element), inst]);
                this.containers.push(inst);
              }
            }
          }
        }
        for (i = queries.length - 1; i >= 0; i--) {
          targetData = queries[i][1];
          _queries = queries[i][0];
          for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
            item = $2(_queries[j]);
            item.data(this.widgetName + "-item", targetData);
            items.push({
              item,
              instance: targetData,
              width: 0,
              height: 0,
              left: 0,
              top: 0
            });
          }
        }
      },
      _refreshItemPositions: function(fast) {
        var i, item, t, p;
        for (i = this.items.length - 1; i >= 0; i--) {
          item = this.items[i];
          if (this.currentContainer && item.instance !== this.currentContainer && item.item[0] !== this.currentItem[0]) {
            continue;
          }
          t = this.options.toleranceElement ? $2(this.options.toleranceElement, item.item) : item.item;
          if (!fast) {
            item.width = t.outerWidth();
            item.height = t.outerHeight();
          }
          p = t.offset();
          item.left = p.left;
          item.top = p.top;
        }
      },
      refreshPositions: function(fast) {
        this.floating = this.items.length ? this.options.axis === "x" || this._isFloating(this.items[0].item) : false;
        if (this.innermostContainer !== null) {
          this._refreshItemPositions(fast);
        }
        var i, p;
        if (this.options.custom && this.options.custom.refreshContainers) {
          this.options.custom.refreshContainers.call(this);
        } else {
          for (i = this.containers.length - 1; i >= 0; i--) {
            p = this.containers[i].element.offset();
            this.containers[i].containerCache.left = p.left;
            this.containers[i].containerCache.top = p.top;
            this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
            this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
          }
        }
        return this;
      },
      _createPlaceholder: function(that) {
        that = that || this;
        var className, nodeName, o = that.options;
        if (!o.placeholder || o.placeholder.constructor === String) {
          className = o.placeholder;
          nodeName = that.currentItem[0].nodeName.toLowerCase();
          o.placeholder = {
            element: function() {
              var element = $2("<" + nodeName + ">", that.document[0]);
              that._addClass(
                element,
                "ui-sortable-placeholder",
                className || that.currentItem[0].className
              )._removeClass(element, "ui-sortable-helper");
              if (nodeName === "tbody") {
                that._createTrPlaceholder(
                  that.currentItem.find("tr").eq(0),
                  $2("<tr>", that.document[0]).appendTo(element)
                );
              } else if (nodeName === "tr") {
                that._createTrPlaceholder(that.currentItem, element);
              } else if (nodeName === "img") {
                element.attr("src", that.currentItem.attr("src"));
              }
              if (!className) {
                element.css("visibility", "hidden");
              }
              return element;
            },
            update: function(container, p) {
              if (className && !o.forcePlaceholderSize) {
                return;
              }
              if (!p.height() || o.forcePlaceholderSize && (nodeName === "tbody" || nodeName === "tr")) {
                p.height(
                  that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10)
                );
              }
              if (!p.width()) {
                p.width(
                  that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10)
                );
              }
            }
          };
        }
        that.placeholder = $2(o.placeholder.element.call(that.element, that.currentItem));
        that.currentItem.after(that.placeholder);
        o.placeholder.update(that, that.placeholder);
      },
      _createTrPlaceholder: function(sourceTr, targetTr) {
        var that = this;
        sourceTr.children().each(function() {
          $2("<td>&#160;</td>", that.document[0]).attr("colspan", $2(this).attr("colspan") || 1).appendTo(targetTr);
        });
      },
      _contactContainers: function(event) {
        var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
        for (i = this.containers.length - 1; i >= 0; i--) {
          if ($2.contains(this.currentItem[0], this.containers[i].element[0])) {
            continue;
          }
          if (this._intersectsWith(this.containers[i].containerCache)) {
            if (innermostContainer && $2.contains(
              this.containers[i].element[0],
              innermostContainer.element[0]
            )) {
              continue;
            }
            innermostContainer = this.containers[i];
            innermostIndex = i;
          } else {
            if (this.containers[i].containerCache.over) {
              this.containers[i]._trigger("out", event, this._uiHash(this));
              this.containers[i].containerCache.over = 0;
            }
          }
        }
        this.innermostContainer = innermostContainer;
        if (!innermostContainer) {
          return;
        }
        if (this.containers.length === 1) {
          if (!this.containers[innermostIndex].containerCache.over) {
            this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
            this.containers[innermostIndex].containerCache.over = 1;
          }
        } else {
          dist = 1e4;
          itemWithLeastDistance = null;
          floating = innermostContainer.floating || this._isFloating(this.currentItem);
          posProperty = floating ? "left" : "top";
          sizeProperty = floating ? "width" : "height";
          axis = floating ? "pageX" : "pageY";
          for (j = this.items.length - 1; j >= 0; j--) {
            if (!$2.contains(
              this.containers[innermostIndex].element[0],
              this.items[j].item[0]
            )) {
              continue;
            }
            if (this.items[j].item[0] === this.currentItem[0]) {
              continue;
            }
            cur = this.items[j].item.offset()[posProperty];
            nearBottom = false;
            if (event[axis] - cur > this.items[j][sizeProperty] / 2) {
              nearBottom = true;
            }
            if (Math.abs(event[axis] - cur) < dist) {
              dist = Math.abs(event[axis] - cur);
              itemWithLeastDistance = this.items[j];
              this.direction = nearBottom ? "up" : "down";
            }
          }
          if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
            return;
          }
          if (this.currentContainer === this.containers[innermostIndex]) {
            if (!this.currentContainer.containerCache.over) {
              this.containers[innermostIndex]._trigger("over", event, this._uiHash());
              this.currentContainer.containerCache.over = 1;
            }
            return;
          }
          if (itemWithLeastDistance) {
            this._rearrange(event, itemWithLeastDistance, null, true);
          } else {
            this._rearrange(event, null, this.containers[innermostIndex].element, true);
          }
          this._trigger("change", event, this._uiHash());
          this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
          this.currentContainer = this.containers[innermostIndex];
          this.options.placeholder.update(this.currentContainer, this.placeholder);
          this.scrollParent = this.placeholder.scrollParent();
          if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
            this.overflowOffset = this.scrollParent.offset();
          }
          this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
          this.containers[innermostIndex].containerCache.over = 1;
        }
      },
      _createHelper: function(event) {
        var o = this.options, helper = typeof o.helper === "function" ? $2(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === "clone" ? this.currentItem.clone() : this.currentItem;
        if (!helper.parents("body").length) {
          this.appendTo[0].appendChild(helper[0]);
        }
        if (helper[0] === this.currentItem[0]) {
          this._storedCSS = {
            width: this.currentItem[0].style.width,
            height: this.currentItem[0].style.height,
            position: this.currentItem.css("position"),
            top: this.currentItem.css("top"),
            left: this.currentItem.css("left")
          };
        }
        if (!helper[0].style.width || o.forceHelperSize) {
          helper.width(this.currentItem.width());
        }
        if (!helper[0].style.height || o.forceHelperSize) {
          helper.height(this.currentItem.height());
        }
        return helper;
      },
      _adjustOffsetFromHelper: function(obj) {
        if (typeof obj === "string") {
          obj = obj.split(" ");
        }
        if (Array.isArray(obj)) {
          obj = { left: +obj[0], top: +obj[1] || 0 };
        }
        if ("left" in obj) {
          this.offset.click.left = obj.left + this.margins.left;
        }
        if ("right" in obj) {
          this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }
        if ("top" in obj) {
          this.offset.click.top = obj.top + this.margins.top;
        }
        if ("bottom" in obj) {
          this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }
      },
      _getParentOffset: function() {
        this.offsetParent = this.helper.offsetParent();
        var po = this.offsetParent.offset();
        if (this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $2.contains(this.scrollParent[0], this.offsetParent[0])) {
          po.left += this.scrollParent.scrollLeft();
          po.top += this.scrollParent.scrollTop();
        }
        if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $2.ui.ie) {
          po = { top: 0, left: 0 };
        }
        return {
          top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
          left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
        };
      },
      _getRelativeOffset: function() {
        if (this.cssPosition === "relative") {
          var p = this.currentItem.position();
          return {
            top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
            left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
          };
        } else {
          return { top: 0, left: 0 };
        }
      },
      _cacheMargins: function() {
        this.margins = {
          left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
          top: parseInt(this.currentItem.css("marginTop"), 10) || 0
        };
      },
      _cacheHelperProportions: function() {
        this.helperProportions = {
          width: this.helper.outerWidth(),
          height: this.helper.outerHeight()
        };
      },
      _setContainment: function() {
        var ce, co, over, o = this.options;
        if (o.containment === "parent") {
          o.containment = this.helper[0].parentNode;
        }
        if (o.containment === "document" || o.containment === "window") {
          this.containment = [
            0 - this.offset.relative.left - this.offset.parent.left,
            0 - this.offset.relative.top - this.offset.parent.top,
            o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left,
            (o.containment === "document" ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
          ];
        }
        if (!/^(document|window|parent)$/.test(o.containment)) {
          ce = $2(o.containment)[0];
          co = $2(o.containment).offset();
          over = $2(ce).css("overflow") !== "hidden";
          this.containment = [
            co.left + (parseInt($2(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($2(ce).css("paddingLeft"), 10) || 0) - this.margins.left,
            co.top + (parseInt($2(ce).css("borderTopWidth"), 10) || 0) + (parseInt($2(ce).css("paddingTop"), 10) || 0) - this.margins.top,
            co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($2(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($2(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left,
            co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($2(ce).css("borderTopWidth"), 10) || 0) - (parseInt($2(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top
          ];
        }
      },
      _convertPositionTo: function(d, pos) {
        if (!pos) {
          pos = this.position;
        }
        var mod = d === "absolute" ? 1 : -1, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $2.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        return {
          top: (
            // The absolute mouse position
            pos.top + // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.top * mod + // The offsetParent's offset without borders (offset + border)
            this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod
          ),
          left: (
            // The absolute mouse position
            pos.left + // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.left * mod + // The offsetParent's offset without borders (offset + border)
            this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
          )
        };
      },
      _generatePosition: function(event) {
        var top3, left3, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $2.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        if (this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
          this.offset.relative = this._getRelativeOffset();
        }
        if (this.originalPosition) {
          if (this.containment) {
            if (event.pageX - this.offset.click.left < this.containment[0]) {
              pageX = this.containment[0] + this.offset.click.left;
            }
            if (event.pageY - this.offset.click.top < this.containment[1]) {
              pageY = this.containment[1] + this.offset.click.top;
            }
            if (event.pageX - this.offset.click.left > this.containment[2]) {
              pageX = this.containment[2] + this.offset.click.left;
            }
            if (event.pageY - this.offset.click.top > this.containment[3]) {
              pageY = this.containment[3] + this.offset.click.top;
            }
          }
          if (o.grid) {
            top3 = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
            pageY = this.containment ? top3 - this.offset.click.top >= this.containment[1] && top3 - this.offset.click.top <= this.containment[3] ? top3 : top3 - this.offset.click.top >= this.containment[1] ? top3 - o.grid[1] : top3 + o.grid[1] : top3;
            left3 = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
            pageX = this.containment ? left3 - this.offset.click.left >= this.containment[0] && left3 - this.offset.click.left <= this.containment[2] ? left3 : left3 - this.offset.click.left >= this.containment[0] ? left3 - o.grid[0] : left3 + o.grid[0] : left3;
          }
        }
        return {
          top: (
            // The absolute mouse position
            pageY - // Click offset (relative to the element)
            this.offset.click.top - // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.top - // The offsetParent's offset without borders (offset + border)
            this.offset.parent.top + (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop())
          ),
          left: (
            // The absolute mouse position
            pageX - // Click offset (relative to the element)
            this.offset.click.left - // Only for relative positioned nodes: Relative offset from element to offset parent
            this.offset.relative.left - // The offsetParent's offset without borders (offset + border)
            this.offset.parent.left + (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
          )
        };
      },
      _rearrange: function(event, i, a, hardRefresh) {
        if (a) {
          a[0].appendChild(this.placeholder[0]);
        } else {
          i.item[0].parentNode.insertBefore(
            this.placeholder[0],
            this.direction === "down" ? i.item[0] : i.item[0].nextSibling
          );
        }
        this.counter = this.counter ? ++this.counter : 1;
        var counter = this.counter;
        this._delay(function() {
          if (counter === this.counter) {
            this.refreshPositions(!hardRefresh);
          }
        });
      },
      _clear: function(event, noPropagation) {
        this.reverting = false;
        var i, delayedTriggers = [];
        if (!this._noFinalSort && this.currentItem.parent().length) {
          this.placeholder.before(this.currentItem);
        }
        this._noFinalSort = null;
        if (this.helper[0] === this.currentItem[0]) {
          for (i in this._storedCSS) {
            if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
              this._storedCSS[i] = "";
            }
          }
          this.currentItem.css(this._storedCSS);
          this._removeClass(this.currentItem, "ui-sortable-helper");
        } else {
          this.currentItem.show();
        }
        if (this.fromOutside && !noPropagation) {
          delayedTriggers.push(function(event2) {
            this._trigger("receive", event2, this._uiHash(this.fromOutside));
          });
        }
        if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
          delayedTriggers.push(function(event2) {
            this._trigger("update", event2, this._uiHash());
          });
        }
        if (this !== this.currentContainer) {
          if (!noPropagation) {
            delayedTriggers.push(function(event2) {
              this._trigger("remove", event2, this._uiHash());
            });
            delayedTriggers.push(function(c) {
              return function(event2) {
                c._trigger("receive", event2, this._uiHash(this));
              };
            }.call(this, this.currentContainer));
            delayedTriggers.push(function(c) {
              return function(event2) {
                c._trigger("update", event2, this._uiHash(this));
              };
            }.call(this, this.currentContainer));
          }
        }
        function delayEvent(type, instance, container) {
          return function(event2) {
            container._trigger(type, event2, instance._uiHash(instance));
          };
        }
        for (i = this.containers.length - 1; i >= 0; i--) {
          if (!noPropagation) {
            delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]));
          }
          if (this.containers[i].containerCache.over) {
            delayedTriggers.push(delayEvent("out", this, this.containers[i]));
            this.containers[i].containerCache.over = 0;
          }
        }
        if (this.storedCursor) {
          this.document.find("body").css("cursor", this.storedCursor);
          this.storedStylesheet.remove();
        }
        if (this._storedOpacity) {
          this.helper.css("opacity", this._storedOpacity);
        }
        if (this._storedZIndex) {
          this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
        }
        this.dragging = false;
        if (!noPropagation) {
          this._trigger("beforeStop", event, this._uiHash());
        }
        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
        if (!this.cancelHelperRemoval) {
          if (this.helper[0] !== this.currentItem[0]) {
            this.helper.remove();
          }
          this.helper = null;
        }
        if (!noPropagation) {
          for (i = 0; i < delayedTriggers.length; i++) {
            delayedTriggers[i].call(this, event);
          }
          this._trigger("stop", event, this._uiHash());
        }
        this.fromOutside = false;
        return !this.cancelHelperRemoval;
      },
      _trigger: function() {
        if ($2.Widget.prototype._trigger.apply(this, arguments) === false) {
          this.cancel();
        }
      },
      _uiHash: function(_inst) {
        var inst = _inst || this;
        return {
          helper: inst.helper,
          placeholder: inst.placeholder || $2([]),
          position: inst.position,
          originalPosition: inst.originalPosition,
          offset: inst.positionAbs,
          item: inst.currentItem,
          sender: _inst ? _inst.element : null
        };
      }
    });
    var widgetsAccordion = $2.widget("ui.accordion", {
      version: "1.13.0",
      options: {
        active: 0,
        animate: {},
        classes: {
          "ui-accordion-header": "ui-corner-top",
          "ui-accordion-header-collapsed": "ui-corner-all",
          "ui-accordion-content": "ui-corner-bottom"
        },
        collapsible: false,
        event: "click",
        header: function(elem) {
          return elem.find("> li > :first-child").add(elem.find("> :not(li)").even());
        },
        heightStyle: "auto",
        icons: {
          activeHeader: "ui-icon-triangle-1-s",
          header: "ui-icon-triangle-1-e"
        },
        // Callbacks
        activate: null,
        beforeActivate: null
      },
      hideProps: {
        borderTopWidth: "hide",
        borderBottomWidth: "hide",
        paddingTop: "hide",
        paddingBottom: "hide",
        height: "hide"
      },
      showProps: {
        borderTopWidth: "show",
        borderBottomWidth: "show",
        paddingTop: "show",
        paddingBottom: "show",
        height: "show"
      },
      _create: function() {
        var options = this.options;
        this.prevShow = this.prevHide = $2();
        this._addClass("ui-accordion", "ui-widget ui-helper-reset");
        this.element.attr("role", "tablist");
        if (!options.collapsible && (options.active === false || options.active == null)) {
          options.active = 0;
        }
        this._processPanels();
        if (options.active < 0) {
          options.active += this.headers.length;
        }
        this._refresh();
      },
      _getCreateEventData: function() {
        return {
          header: this.active,
          panel: !this.active.length ? $2() : this.active.next()
        };
      },
      _createIcons: function() {
        var icon, children, icons = this.options.icons;
        if (icons) {
          icon = $2("<span>");
          this._addClass(icon, "ui-accordion-header-icon", "ui-icon " + icons.header);
          icon.prependTo(this.headers);
          children = this.active.children(".ui-accordion-header-icon");
          this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, "ui-accordion-icons");
        }
      },
      _destroyIcons: function() {
        this._removeClass(this.headers, "ui-accordion-icons");
        this.headers.children(".ui-accordion-header-icon").remove();
      },
      _destroy: function() {
        var contents;
        this.element.removeAttr("role");
        this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId();
        this._destroyIcons();
        contents = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId();
        if (this.options.heightStyle !== "content") {
          contents.css("height", "");
        }
      },
      _setOption: function(key, value) {
        if (key === "active") {
          this._activate(value);
          return;
        }
        if (key === "event") {
          if (this.options.event) {
            this._off(this.headers, this.options.event);
          }
          this._setupEvents(value);
        }
        this._super(key, value);
        if (key === "collapsible" && !value && this.options.active === false) {
          this._activate(0);
        }
        if (key === "icons") {
          this._destroyIcons();
          if (value) {
            this._createIcons();
          }
        }
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this.element.attr("aria-disabled", value);
        this._toggleClass(null, "ui-state-disabled", !!value);
        this._toggleClass(
          this.headers.add(this.headers.next()),
          null,
          "ui-state-disabled",
          !!value
        );
      },
      _keydown: function(event) {
        if (event.altKey || event.ctrlKey) {
          return;
        }
        var keyCode = $2.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false;
        switch (event.keyCode) {
          case keyCode.RIGHT:
          case keyCode.DOWN:
            toFocus = this.headers[(currentIndex + 1) % length];
            break;
          case keyCode.LEFT:
          case keyCode.UP:
            toFocus = this.headers[(currentIndex - 1 + length) % length];
            break;
          case keyCode.SPACE:
          case keyCode.ENTER:
            this._eventHandler(event);
            break;
          case keyCode.HOME:
            toFocus = this.headers[0];
            break;
          case keyCode.END:
            toFocus = this.headers[length - 1];
            break;
        }
        if (toFocus) {
          $2(event.target).attr("tabIndex", -1);
          $2(toFocus).attr("tabIndex", 0);
          $2(toFocus).trigger("focus");
          event.preventDefault();
        }
      },
      _panelKeyDown: function(event) {
        if (event.keyCode === $2.ui.keyCode.UP && event.ctrlKey) {
          $2(event.currentTarget).prev().trigger("focus");
        }
      },
      refresh: function() {
        var options = this.options;
        this._processPanels();
        if (options.active === false && options.collapsible === true || !this.headers.length) {
          options.active = false;
          this.active = $2();
        } else if (options.active === false) {
          this._activate(0);
        } else if (this.active.length && !$2.contains(this.element[0], this.active[0])) {
          if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
            options.active = false;
            this.active = $2();
          } else {
            this._activate(Math.max(0, options.active - 1));
          }
        } else {
          options.active = this.headers.index(this.active);
        }
        this._destroyIcons();
        this._refresh();
      },
      _processPanels: function() {
        var prevHeaders = this.headers, prevPanels = this.panels;
        if (typeof this.options.header === "function") {
          this.headers = this.options.header(this.element);
        } else {
          this.headers = this.element.find(this.options.header);
        }
        this._addClass(
          this.headers,
          "ui-accordion-header ui-accordion-header-collapsed",
          "ui-state-default"
        );
        this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide();
        this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content");
        if (prevPanels) {
          this._off(prevHeaders.not(this.headers));
          this._off(prevPanels.not(this.panels));
        }
      },
      _refresh: function() {
        var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
        this.active = this._findActive(options.active);
        this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed");
        this._addClass(this.active.next(), "ui-accordion-content-active");
        this.active.next().show();
        this.headers.attr("role", "tab").each(function() {
          var header = $2(this), headerId = header.uniqueId().attr("id"), panel = header.next(), panelId = panel.uniqueId().attr("id");
          header.attr("aria-controls", panelId);
          panel.attr("aria-labelledby", headerId);
        }).next().attr("role", "tabpanel");
        this.headers.not(this.active).attr({
          "aria-selected": "false",
          "aria-expanded": "false",
          tabIndex: -1
        }).next().attr({
          "aria-hidden": "true"
        }).hide();
        if (!this.active.length) {
          this.headers.eq(0).attr("tabIndex", 0);
        } else {
          this.active.attr({
            "aria-selected": "true",
            "aria-expanded": "true",
            tabIndex: 0
          }).next().attr({
            "aria-hidden": "false"
          });
        }
        this._createIcons();
        this._setupEvents(options.event);
        if (heightStyle === "fill") {
          maxHeight = parent.height();
          this.element.siblings(":visible").each(function() {
            var elem = $2(this), position2 = elem.css("position");
            if (position2 === "absolute" || position2 === "fixed") {
              return;
            }
            maxHeight -= elem.outerHeight(true);
          });
          this.headers.each(function() {
            maxHeight -= $2(this).outerHeight(true);
          });
          this.headers.next().each(function() {
            $2(this).height(Math.max(0, maxHeight - $2(this).innerHeight() + $2(this).height()));
          }).css("overflow", "auto");
        } else if (heightStyle === "auto") {
          maxHeight = 0;
          this.headers.next().each(function() {
            var isVisible2 = $2(this).is(":visible");
            if (!isVisible2) {
              $2(this).show();
            }
            maxHeight = Math.max(maxHeight, $2(this).css("height", "").height());
            if (!isVisible2) {
              $2(this).hide();
            }
          }).height(maxHeight);
        }
      },
      _activate: function(index) {
        var active = this._findActive(index)[0];
        if (active === this.active[0]) {
          return;
        }
        active = active || this.active[0];
        this._eventHandler({
          target: active,
          currentTarget: active,
          preventDefault: $2.noop
        });
      },
      _findActive: function(selector) {
        return typeof selector === "number" ? this.headers.eq(selector) : $2();
      },
      _setupEvents: function(event) {
        var events = {
          keydown: "_keydown"
        };
        if (event) {
          $2.each(event.split(" "), function(index, eventName) {
            events[eventName] = "_eventHandler";
          });
        }
        this._off(this.headers.add(this.headers.next()));
        this._on(this.headers, events);
        this._on(this.headers.next(), { keydown: "_panelKeyDown" });
        this._hoverable(this.headers);
        this._focusable(this.headers);
      },
      _eventHandler: function(event) {
        var activeChildren, clickedChildren, options = this.options, active = this.active, clicked = $2(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $2() : clicked.next(), toHide = active.next(), eventData = {
          oldHeader: active,
          oldPanel: toHide,
          newHeader: collapsing ? $2() : clicked,
          newPanel: toShow
        };
        event.preventDefault();
        if (
          // click on active header, but not collapsible
          clickedIsActive && !options.collapsible || // allow canceling activation
          this._trigger("beforeActivate", event, eventData) === false
        ) {
          return;
        }
        options.active = collapsing ? false : this.headers.index(clicked);
        this.active = clickedIsActive ? $2() : clicked;
        this._toggle(eventData);
        this._removeClass(active, "ui-accordion-header-active", "ui-state-active");
        if (options.icons) {
          activeChildren = active.children(".ui-accordion-header-icon");
          this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header);
        }
        if (!clickedIsActive) {
          this._removeClass(clicked, "ui-accordion-header-collapsed")._addClass(clicked, "ui-accordion-header-active", "ui-state-active");
          if (options.icons) {
            clickedChildren = clicked.children(".ui-accordion-header-icon");
            this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader);
          }
          this._addClass(clicked.next(), "ui-accordion-content-active");
        }
      },
      _toggle: function(data2) {
        var toShow = data2.newPanel, toHide = this.prevShow.length ? this.prevShow : data2.oldPanel;
        this.prevShow.add(this.prevHide).stop(true, true);
        this.prevShow = toShow;
        this.prevHide = toHide;
        if (this.options.animate) {
          this._animate(toShow, toHide, data2);
        } else {
          toHide.hide();
          toShow.show();
          this._toggleComplete(data2);
        }
        toHide.attr({
          "aria-hidden": "true"
        });
        toHide.prev().attr({
          "aria-selected": "false",
          "aria-expanded": "false"
        });
        if (toShow.length && toHide.length) {
          toHide.prev().attr({
            "tabIndex": -1,
            "aria-expanded": "false"
          });
        } else if (toShow.length) {
          this.headers.filter(function() {
            return parseInt($2(this).attr("tabIndex"), 10) === 0;
          }).attr("tabIndex", -1);
        }
        toShow.attr("aria-hidden", "false").prev().attr({
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        });
      },
      _animate: function(toShow, toHide, data2) {
        var total, easing, duration, that = this, adjust = 0, boxSizing = toShow.css("box-sizing"), down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
          that._toggleComplete(data2);
        };
        if (typeof options === "number") {
          duration = options;
        }
        if (typeof options === "string") {
          easing = options;
        }
        easing = easing || options.easing || animate.easing;
        duration = duration || options.duration || animate.duration;
        if (!toHide.length) {
          return toShow.animate(this.showProps, duration, easing, complete);
        }
        if (!toShow.length) {
          return toHide.animate(this.hideProps, duration, easing, complete);
        }
        total = toShow.show().outerHeight();
        toHide.animate(this.hideProps, {
          duration,
          easing,
          step: function(now2, fx) {
            fx.now = Math.round(now2);
          }
        });
        toShow.hide().animate(this.showProps, {
          duration,
          easing,
          complete,
          step: function(now2, fx) {
            fx.now = Math.round(now2);
            if (fx.prop !== "height") {
              if (boxSizing === "content-box") {
                adjust += fx.now;
              }
            } else if (that.options.heightStyle !== "content") {
              fx.now = Math.round(total - toHide.outerHeight() - adjust);
              adjust = 0;
            }
          }
        });
      },
      _toggleComplete: function(data2) {
        var toHide = data2.oldPanel, prev = toHide.prev();
        this._removeClass(toHide, "ui-accordion-content-active");
        this._removeClass(prev, "ui-accordion-header-active")._addClass(prev, "ui-accordion-header-collapsed");
        if (toHide.length) {
          toHide.parent()[0].className = toHide.parent()[0].className;
        }
        this._trigger("activate", null, data2);
      }
    });
    var widgetsMenu = $2.widget("ui.menu", {
      version: "1.13.0",
      defaultElement: "<ul>",
      delay: 300,
      options: {
        icons: {
          submenu: "ui-icon-caret-1-e"
        },
        items: "> *",
        menus: "ul",
        position: {
          my: "left top",
          at: "right top"
        },
        role: "menu",
        // Callbacks
        blur: null,
        focus: null,
        select: null
      },
      _create: function() {
        this.activeMenu = this.element;
        this.mouseHandled = false;
        this.lastMousePosition = { x: null, y: null };
        this.element.uniqueId().attr({
          role: this.options.role,
          tabIndex: 0
        });
        this._addClass("ui-menu", "ui-widget ui-widget-content");
        this._on({
          // Prevent focus from sticking to links inside menu after clicking
          // them (focus should always stay on UL during navigation).
          "mousedown .ui-menu-item": function(event) {
            event.preventDefault();
            this._activateItem(event);
          },
          "click .ui-menu-item": function(event) {
            var target = $2(event.target);
            var active = $2($2.ui.safeActiveElement(this.document[0]));
            if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
              this.select(event);
              if (!event.isPropagationStopped()) {
                this.mouseHandled = true;
              }
              if (target.has(".ui-menu").length) {
                this.expand(event);
              } else if (!this.element.is(":focus") && active.closest(".ui-menu").length) {
                this.element.trigger("focus", [true]);
                if (this.active && this.active.parents(".ui-menu").length === 1) {
                  clearTimeout(this.timer);
                }
              }
            }
          },
          "mouseenter .ui-menu-item": "_activateItem",
          "mousemove .ui-menu-item": "_activateItem",
          mouseleave: "collapseAll",
          "mouseleave .ui-menu": "collapseAll",
          focus: function(event, keepActiveItem) {
            var item = this.active || this._menuItems().first();
            if (!keepActiveItem) {
              this.focus(event, item);
            }
          },
          blur: function(event) {
            this._delay(function() {
              var notContained = !$2.contains(
                this.element[0],
                $2.ui.safeActiveElement(this.document[0])
              );
              if (notContained) {
                this.collapseAll(event);
              }
            });
          },
          keydown: "_keydown"
        });
        this.refresh();
        this._on(this.document, {
          click: function(event) {
            if (this._closeOnDocumentClick(event)) {
              this.collapseAll(event, true);
            }
            this.mouseHandled = false;
          }
        });
      },
      _activateItem: function(event) {
        if (this.previousFilter) {
          return;
        }
        if (event.clientX === this.lastMousePosition.x && event.clientY === this.lastMousePosition.y) {
          return;
        }
        this.lastMousePosition = {
          x: event.clientX,
          y: event.clientY
        };
        var actualTarget = $2(event.target).closest(".ui-menu-item"), target = $2(event.currentTarget);
        if (actualTarget[0] !== target[0]) {
          return;
        }
        if (target.is(".ui-state-active")) {
          return;
        }
        this._removeClass(
          target.siblings().children(".ui-state-active"),
          null,
          "ui-state-active"
        );
        this.focus(event, target);
      },
      _destroy: function() {
        var items = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"), submenus = items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");
        this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show();
        submenus.children().each(function() {
          var elem = $2(this);
          if (elem.data("ui-menu-submenu-caret")) {
            elem.remove();
          }
        });
      },
      _keydown: function(event) {
        var match, prev, character, skip, preventDefault2 = true;
        switch (event.keyCode) {
          case $2.ui.keyCode.PAGE_UP:
            this.previousPage(event);
            break;
          case $2.ui.keyCode.PAGE_DOWN:
            this.nextPage(event);
            break;
          case $2.ui.keyCode.HOME:
            this._move("first", "first", event);
            break;
          case $2.ui.keyCode.END:
            this._move("last", "last", event);
            break;
          case $2.ui.keyCode.UP:
            this.previous(event);
            break;
          case $2.ui.keyCode.DOWN:
            this.next(event);
            break;
          case $2.ui.keyCode.LEFT:
            this.collapse(event);
            break;
          case $2.ui.keyCode.RIGHT:
            if (this.active && !this.active.is(".ui-state-disabled")) {
              this.expand(event);
            }
            break;
          case $2.ui.keyCode.ENTER:
          case $2.ui.keyCode.SPACE:
            this._activate(event);
            break;
          case $2.ui.keyCode.ESCAPE:
            this.collapse(event);
            break;
          default:
            preventDefault2 = false;
            prev = this.previousFilter || "";
            skip = false;
            character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode);
            clearTimeout(this.filterTimer);
            if (character === prev) {
              skip = true;
            } else {
              character = prev + character;
            }
            match = this._filterMenuItems(character);
            match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
            if (!match.length) {
              character = String.fromCharCode(event.keyCode);
              match = this._filterMenuItems(character);
            }
            if (match.length) {
              this.focus(event, match);
              this.previousFilter = character;
              this.filterTimer = this._delay(function() {
                delete this.previousFilter;
              }, 1e3);
            } else {
              delete this.previousFilter;
            }
        }
        if (preventDefault2) {
          event.preventDefault();
        }
      },
      _activate: function(event) {
        if (this.active && !this.active.is(".ui-state-disabled")) {
          if (this.active.children("[aria-haspopup='true']").length) {
            this.expand(event);
          } else {
            this.select(event);
          }
        }
      },
      refresh: function() {
        var menus, items, newSubmenus, newItems, newWrappers, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
        this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length);
        newSubmenus = submenus.filter(":not(.ui-menu)").hide().attr({
          role: this.options.role,
          "aria-hidden": "true",
          "aria-expanded": "false"
        }).each(function() {
          var menu = $2(this), item = menu.prev(), submenuCaret = $2("<span>").data("ui-menu-submenu-caret", true);
          that._addClass(submenuCaret, "ui-menu-icon", "ui-icon " + icon);
          item.attr("aria-haspopup", "true").prepend(submenuCaret);
          menu.attr("aria-labelledby", item.attr("id"));
        });
        this._addClass(newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front");
        menus = submenus.add(this.element);
        items = menus.find(this.options.items);
        items.not(".ui-menu-item").each(function() {
          var item = $2(this);
          if (that._isDivider(item)) {
            that._addClass(item, "ui-menu-divider", "ui-widget-content");
          }
        });
        newItems = items.not(".ui-menu-item, .ui-menu-divider");
        newWrappers = newItems.children().not(".ui-menu").uniqueId().attr({
          tabIndex: -1,
          role: this._itemRole()
        });
        this._addClass(newItems, "ui-menu-item")._addClass(newWrappers, "ui-menu-item-wrapper");
        items.filter(".ui-state-disabled").attr("aria-disabled", "true");
        if (this.active && !$2.contains(this.element[0], this.active[0])) {
          this.blur();
        }
      },
      _itemRole: function() {
        return {
          menu: "menuitem",
          listbox: "option"
        }[this.options.role];
      },
      _setOption: function(key, value) {
        if (key === "icons") {
          var icons = this.element.find(".ui-menu-icon");
          this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu);
        }
        this._super(key, value);
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this.element.attr("aria-disabled", String(value));
        this._toggleClass(null, "ui-state-disabled", !!value);
      },
      focus: function(event, item) {
        var nested, focused, activeParent;
        this.blur(event, event && event.type === "focus");
        this._scrollIntoView(item);
        this.active = item.first();
        focused = this.active.children(".ui-menu-item-wrapper");
        this._addClass(focused, null, "ui-state-active");
        if (this.options.role) {
          this.element.attr("aria-activedescendant", focused.attr("id"));
        }
        activeParent = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper");
        this._addClass(activeParent, null, "ui-state-active");
        if (event && event.type === "keydown") {
          this._close();
        } else {
          this.timer = this._delay(function() {
            this._close();
          }, this.delay);
        }
        nested = item.children(".ui-menu");
        if (nested.length && event && /^mouse/.test(event.type)) {
          this._startOpening(nested);
        }
        this.activeMenu = item.parent();
        this._trigger("focus", event, { item });
      },
      _scrollIntoView: function(item) {
        var borderTop, paddingTop, offset2, scroll, elementHeight, itemHeight;
        if (this._hasScroll()) {
          borderTop = parseFloat($2.css(this.activeMenu[0], "borderTopWidth")) || 0;
          paddingTop = parseFloat($2.css(this.activeMenu[0], "paddingTop")) || 0;
          offset2 = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
          scroll = this.activeMenu.scrollTop();
          elementHeight = this.activeMenu.height();
          itemHeight = item.outerHeight();
          if (offset2 < 0) {
            this.activeMenu.scrollTop(scroll + offset2);
          } else if (offset2 + itemHeight > elementHeight) {
            this.activeMenu.scrollTop(scroll + offset2 - elementHeight + itemHeight);
          }
        }
      },
      blur: function(event, fromFocus) {
        if (!fromFocus) {
          clearTimeout(this.timer);
        }
        if (!this.active) {
          return;
        }
        this._removeClass(
          this.active.children(".ui-menu-item-wrapper"),
          null,
          "ui-state-active"
        );
        this._trigger("blur", event, { item: this.active });
        this.active = null;
      },
      _startOpening: function(submenu) {
        clearTimeout(this.timer);
        if (submenu.attr("aria-hidden") !== "true") {
          return;
        }
        this.timer = this._delay(function() {
          this._close();
          this._open(submenu);
        }, this.delay);
      },
      _open: function(submenu) {
        var position2 = $2.extend({
          of: this.active
        }, this.options.position);
        clearTimeout(this.timer);
        this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
        submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position2);
      },
      collapseAll: function(event, all) {
        clearTimeout(this.timer);
        this.timer = this._delay(function() {
          var currentMenu = all ? this.element : $2(event && event.target).closest(this.element.find(".ui-menu"));
          if (!currentMenu.length) {
            currentMenu = this.element;
          }
          this._close(currentMenu);
          this.blur(event);
          this._removeClass(currentMenu.find(".ui-state-active"), null, "ui-state-active");
          this.activeMenu = currentMenu;
        }, all ? 0 : this.delay);
      },
      // With no arguments, closes the currently active menu - if nothing is active
      // it closes all menus.  If passed an argument, it will search for menus BELOW
      _close: function(startMenu) {
        if (!startMenu) {
          startMenu = this.active ? this.active.parent() : this.element;
        }
        startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
      },
      _closeOnDocumentClick: function(event) {
        return !$2(event.target).closest(".ui-menu").length;
      },
      _isDivider: function(item) {
        return !/[^\-\u2014\u2013\s]/.test(item.text());
      },
      collapse: function(event) {
        var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
        if (newItem && newItem.length) {
          this._close();
          this.focus(event, newItem);
        }
      },
      expand: function(event) {
        var newItem = this.active && this._menuItems(this.active.children(".ui-menu")).first();
        if (newItem && newItem.length) {
          this._open(newItem.parent());
          this._delay(function() {
            this.focus(event, newItem);
          });
        }
      },
      next: function(event) {
        this._move("next", "first", event);
      },
      previous: function(event) {
        this._move("prev", "last", event);
      },
      isFirstItem: function() {
        return this.active && !this.active.prevAll(".ui-menu-item").length;
      },
      isLastItem: function() {
        return this.active && !this.active.nextAll(".ui-menu-item").length;
      },
      _menuItems: function(menu) {
        return (menu || this.element).find(this.options.items).filter(".ui-menu-item");
      },
      _move: function(direction, filter, event) {
        var next;
        if (this.active) {
          if (direction === "first" || direction === "last") {
            next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").last();
          } else {
            next = this.active[direction + "All"](".ui-menu-item").first();
          }
        }
        if (!next || !next.length || !this.active) {
          next = this._menuItems(this.activeMenu)[filter]();
        }
        this.focus(event, next);
      },
      nextPage: function(event) {
        var item, base, height;
        if (!this.active) {
          this.next(event);
          return;
        }
        if (this.isLastItem()) {
          return;
        }
        if (this._hasScroll()) {
          base = this.active.offset().top;
          height = this.element.innerHeight();
          if ($2.fn.jquery.indexOf("3.2.") === 0) {
            height += this.element[0].offsetHeight - this.element.outerHeight();
          }
          this.active.nextAll(".ui-menu-item").each(function() {
            item = $2(this);
            return item.offset().top - base - height < 0;
          });
          this.focus(event, item);
        } else {
          this.focus(event, this._menuItems(this.activeMenu)[!this.active ? "first" : "last"]());
        }
      },
      previousPage: function(event) {
        var item, base, height;
        if (!this.active) {
          this.next(event);
          return;
        }
        if (this.isFirstItem()) {
          return;
        }
        if (this._hasScroll()) {
          base = this.active.offset().top;
          height = this.element.innerHeight();
          if ($2.fn.jquery.indexOf("3.2.") === 0) {
            height += this.element[0].offsetHeight - this.element.outerHeight();
          }
          this.active.prevAll(".ui-menu-item").each(function() {
            item = $2(this);
            return item.offset().top - base + height > 0;
          });
          this.focus(event, item);
        } else {
          this.focus(event, this._menuItems(this.activeMenu).first());
        }
      },
      _hasScroll: function() {
        return this.element.outerHeight() < this.element.prop("scrollHeight");
      },
      select: function(event) {
        this.active = this.active || $2(event.target).closest(".ui-menu-item");
        var ui = { item: this.active };
        if (!this.active.has(".ui-menu").length) {
          this.collapseAll(event, true);
        }
        this._trigger("select", event, ui);
      },
      _filterMenuItems: function(character) {
        var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), regex = new RegExp("^" + escapedCharacter, "i");
        return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
          return regex.test(
            String.prototype.trim.call(
              $2(this).children(".ui-menu-item-wrapper").text()
            )
          );
        });
      }
    });
    $2.widget("ui.autocomplete", {
      version: "1.13.0",
      defaultElement: "<input>",
      options: {
        appendTo: null,
        autoFocus: false,
        delay: 300,
        minLength: 1,
        position: {
          my: "left top",
          at: "left bottom",
          collision: "none"
        },
        source: null,
        // Callbacks
        change: null,
        close: null,
        focus: null,
        open: null,
        response: null,
        search: null,
        select: null
      },
      requestIndex: 0,
      pending: 0,
      _create: function() {
        var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === "textarea", isInput = nodeName === "input";
        this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element);
        this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
        this.isNewMenu = true;
        this._addClass("ui-autocomplete-input");
        this.element.attr("autocomplete", "off");
        this._on(this.element, {
          keydown: function(event) {
            if (this.element.prop("readOnly")) {
              suppressKeyPress = true;
              suppressInput = true;
              suppressKeyPressRepeat = true;
              return;
            }
            suppressKeyPress = false;
            suppressInput = false;
            suppressKeyPressRepeat = false;
            var keyCode = $2.ui.keyCode;
            switch (event.keyCode) {
              case keyCode.PAGE_UP:
                suppressKeyPress = true;
                this._move("previousPage", event);
                break;
              case keyCode.PAGE_DOWN:
                suppressKeyPress = true;
                this._move("nextPage", event);
                break;
              case keyCode.UP:
                suppressKeyPress = true;
                this._keyEvent("previous", event);
                break;
              case keyCode.DOWN:
                suppressKeyPress = true;
                this._keyEvent("next", event);
                break;
              case keyCode.ENTER:
                if (this.menu.active) {
                  suppressKeyPress = true;
                  event.preventDefault();
                  this.menu.select(event);
                }
                break;
              case keyCode.TAB:
                if (this.menu.active) {
                  this.menu.select(event);
                }
                break;
              case keyCode.ESCAPE:
                if (this.menu.element.is(":visible")) {
                  if (!this.isMultiLine) {
                    this._value(this.term);
                  }
                  this.close(event);
                  event.preventDefault();
                }
                break;
              default:
                suppressKeyPressRepeat = true;
                this._searchTimeout(event);
                break;
            }
          },
          keypress: function(event) {
            if (suppressKeyPress) {
              suppressKeyPress = false;
              if (!this.isMultiLine || this.menu.element.is(":visible")) {
                event.preventDefault();
              }
              return;
            }
            if (suppressKeyPressRepeat) {
              return;
            }
            var keyCode = $2.ui.keyCode;
            switch (event.keyCode) {
              case keyCode.PAGE_UP:
                this._move("previousPage", event);
                break;
              case keyCode.PAGE_DOWN:
                this._move("nextPage", event);
                break;
              case keyCode.UP:
                this._keyEvent("previous", event);
                break;
              case keyCode.DOWN:
                this._keyEvent("next", event);
                break;
            }
          },
          input: function(event) {
            if (suppressInput) {
              suppressInput = false;
              event.preventDefault();
              return;
            }
            this._searchTimeout(event);
          },
          focus: function() {
            this.selectedItem = null;
            this.previous = this._value();
          },
          blur: function(event) {
            clearTimeout(this.searching);
            this.close(event);
            this._change(event);
          }
        });
        this._initSource();
        this.menu = $2("<ul>").appendTo(this._appendTo()).menu({
          // disable ARIA support, the live region takes care of that
          role: null
        }).hide().attr({
          "unselectable": "on"
        }).menu("instance");
        this._addClass(this.menu.element, "ui-autocomplete", "ui-front");
        this._on(this.menu.element, {
          mousedown: function(event) {
            event.preventDefault();
          },
          menufocus: function(event, ui) {
            var label, item;
            if (this.isNewMenu) {
              this.isNewMenu = false;
              if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                this.menu.blur();
                this.document.one("mousemove", function() {
                  $2(event.target).trigger(event.originalEvent);
                });
                return;
              }
            }
            item = ui.item.data("ui-autocomplete-item");
            if (false !== this._trigger("focus", event, { item })) {
              if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                this._value(item.value);
              }
            }
            label = ui.item.attr("aria-label") || item.value;
            if (label && String.prototype.trim.call(label).length) {
              this.liveRegion.children().hide();
              $2("<div>").text(label).appendTo(this.liveRegion);
            }
          },
          menuselect: function(event, ui) {
            var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
            if (this.element[0] !== $2.ui.safeActiveElement(this.document[0])) {
              this.element.trigger("focus");
              this.previous = previous;
              this._delay(function() {
                this.previous = previous;
                this.selectedItem = item;
              });
            }
            if (false !== this._trigger("select", event, { item })) {
              this._value(item.value);
            }
            this.term = this._value();
            this.close(event);
            this.selectedItem = item;
          }
        });
        this.liveRegion = $2("<div>", {
          role: "status",
          "aria-live": "assertive",
          "aria-relevant": "additions"
        }).appendTo(this.document[0].body);
        this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
        this._on(this.window, {
          beforeunload: function() {
            this.element.removeAttr("autocomplete");
          }
        });
      },
      _destroy: function() {
        clearTimeout(this.searching);
        this.element.removeAttr("autocomplete");
        this.menu.element.remove();
        this.liveRegion.remove();
      },
      _setOption: function(key, value) {
        this._super(key, value);
        if (key === "source") {
          this._initSource();
        }
        if (key === "appendTo") {
          this.menu.element.appendTo(this._appendTo());
        }
        if (key === "disabled" && value && this.xhr) {
          this.xhr.abort();
        }
      },
      _isEventTargetInWidget: function(event) {
        var menuElement = this.menu.element[0];
        return event.target === this.element[0] || event.target === menuElement || $2.contains(menuElement, event.target);
      },
      _closeOnClickOutside: function(event) {
        if (!this._isEventTargetInWidget(event)) {
          this.close();
        }
      },
      _appendTo: function() {
        var element = this.options.appendTo;
        if (element) {
          element = element.jquery || element.nodeType ? $2(element) : this.document.find(element).eq(0);
        }
        if (!element || !element[0]) {
          element = this.element.closest(".ui-front, dialog");
        }
        if (!element.length) {
          element = this.document[0].body;
        }
        return element;
      },
      _initSource: function() {
        var array, url, that = this;
        if (Array.isArray(this.options.source)) {
          array = this.options.source;
          this.source = function(request, response) {
            response($2.ui.autocomplete.filter(array, request.term));
          };
        } else if (typeof this.options.source === "string") {
          url = this.options.source;
          this.source = function(request, response) {
            if (that.xhr) {
              that.xhr.abort();
            }
            that.xhr = $2.ajax({
              url,
              data: request,
              dataType: "json",
              success: function(data2) {
                response(data2);
              },
              error: function() {
                response([]);
              }
            });
          };
        } else {
          this.source = this.options.source;
        }
      },
      _searchTimeout: function(event) {
        clearTimeout(this.searching);
        this.searching = this._delay(function() {
          var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
          if (!equalValues || equalValues && !menuVisible && !modifierKey) {
            this.selectedItem = null;
            this.search(null, event);
          }
        }, this.options.delay);
      },
      search: function(value, event) {
        value = value != null ? value : this._value();
        this.term = this._value();
        if (value.length < this.options.minLength) {
          return this.close(event);
        }
        if (this._trigger("search", event) === false) {
          return;
        }
        return this._search(value);
      },
      _search: function(value) {
        this.pending++;
        this._addClass("ui-autocomplete-loading");
        this.cancelSearch = false;
        this.source({ term: value }, this._response());
      },
      _response: function() {
        var index = ++this.requestIndex;
        return function(content) {
          if (index === this.requestIndex) {
            this.__response(content);
          }
          this.pending--;
          if (!this.pending) {
            this._removeClass("ui-autocomplete-loading");
          }
        }.bind(this);
      },
      __response: function(content) {
        if (content) {
          content = this._normalize(content);
        }
        this._trigger("response", null, { content });
        if (!this.options.disabled && content && content.length && !this.cancelSearch) {
          this._suggest(content);
          this._trigger("open");
        } else {
          this._close();
        }
      },
      close: function(event) {
        this.cancelSearch = true;
        this._close(event);
      },
      _close: function(event) {
        this._off(this.document, "mousedown");
        if (this.menu.element.is(":visible")) {
          this.menu.element.hide();
          this.menu.blur();
          this.isNewMenu = true;
          this._trigger("close", event);
        }
      },
      _change: function(event) {
        if (this.previous !== this._value()) {
          this._trigger("change", event, { item: this.selectedItem });
        }
      },
      _normalize: function(items) {
        if (items.length && items[0].label && items[0].value) {
          return items;
        }
        return $2.map(items, function(item) {
          if (typeof item === "string") {
            return {
              label: item,
              value: item
            };
          }
          return $2.extend({}, item, {
            label: item.label || item.value,
            value: item.value || item.label
          });
        });
      },
      _suggest: function(items) {
        var ul = this.menu.element.empty();
        this._renderMenu(ul, items);
        this.isNewMenu = true;
        this.menu.refresh();
        ul.show();
        this._resizeMenu();
        ul.position($2.extend({
          of: this.element
        }, this.options.position));
        if (this.options.autoFocus) {
          this.menu.next();
        }
        this._on(this.document, {
          mousedown: "_closeOnClickOutside"
        });
      },
      _resizeMenu: function() {
        var ul = this.menu.element;
        ul.outerWidth(Math.max(
          // Firefox wraps long text (possibly a rounding bug)
          // so we add 1px to avoid the wrapping (#7513)
          ul.width("").outerWidth() + 1,
          this.element.outerWidth()
        ));
      },
      _renderMenu: function(ul, items) {
        var that = this;
        $2.each(items, function(index, item) {
          that._renderItemData(ul, item);
        });
      },
      _renderItemData: function(ul, item) {
        return this._renderItem(ul, item).data("ui-autocomplete-item", item);
      },
      _renderItem: function(ul, item) {
        return $2("<li>").append($2("<div>").text(item.label)).appendTo(ul);
      },
      _move: function(direction, event) {
        if (!this.menu.element.is(":visible")) {
          this.search(null, event);
          return;
        }
        if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
          if (!this.isMultiLine) {
            this._value(this.term);
          }
          this.menu.blur();
          return;
        }
        this.menu[direction](event);
      },
      widget: function() {
        return this.menu.element;
      },
      _value: function() {
        return this.valueMethod.apply(this.element, arguments);
      },
      _keyEvent: function(keyEvent, event) {
        if (!this.isMultiLine || this.menu.element.is(":visible")) {
          this._move(keyEvent, event);
          event.preventDefault();
        }
      },
      // Support: Chrome <=50
      // We should be able to just use this.element.prop( "isContentEditable" )
      // but hidden elements always report false in Chrome.
      // https://code.google.com/p/chromium/issues/detail?id=313082
      _isContentEditable: function(element) {
        if (!element.length) {
          return false;
        }
        var editable = element.prop("contentEditable");
        if (editable === "inherit") {
          return this._isContentEditable(element.parent());
        }
        return editable === "true";
      }
    });
    $2.extend($2.ui.autocomplete, {
      escapeRegex: function(value) {
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      },
      filter: function(array, term) {
        var matcher = new RegExp($2.ui.autocomplete.escapeRegex(term), "i");
        return $2.grep(array, function(value) {
          return matcher.test(value.label || value.value || value);
        });
      }
    });
    $2.widget("ui.autocomplete", $2.ui.autocomplete, {
      options: {
        messages: {
          noResults: "No search results.",
          results: function(amount) {
            return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
          }
        }
      },
      __response: function(content) {
        var message;
        this._superApply(arguments);
        if (this.options.disabled || this.cancelSearch) {
          return;
        }
        if (content && content.length) {
          message = this.options.messages.results(content.length);
        } else {
          message = this.options.messages.noResults;
        }
        this.liveRegion.children().hide();
        $2("<div>").text(message).appendTo(this.liveRegion);
      }
    });
    var widgetsAutocomplete = $2.ui.autocomplete;
    var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;
    var widgetsControlgroup = $2.widget("ui.controlgroup", {
      version: "1.13.0",
      defaultElement: "<div>",
      options: {
        direction: "horizontal",
        disabled: null,
        onlyVisible: true,
        items: {
          "button": "input[type=button], input[type=submit], input[type=reset], button, a",
          "controlgroupLabel": ".ui-controlgroup-label",
          "checkboxradio": "input[type='checkbox'], input[type='radio']",
          "selectmenu": "select",
          "spinner": ".ui-spinner-input"
        }
      },
      _create: function() {
        this._enhance();
      },
      // To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
      _enhance: function() {
        this.element.attr("role", "toolbar");
        this.refresh();
      },
      _destroy: function() {
        this._callChildMethod("destroy");
        this.childWidgets.removeData("ui-controlgroup-data");
        this.element.removeAttr("role");
        if (this.options.items.controlgroupLabel) {
          this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
        }
      },
      _initWidgets: function() {
        var that = this, childWidgets = [];
        $2.each(this.options.items, function(widget2, selector) {
          var labels2;
          var options = {};
          if (!selector) {
            return;
          }
          if (widget2 === "controlgroupLabel") {
            labels2 = that.element.find(selector);
            labels2.each(function() {
              var element = $2(this);
              if (element.children(".ui-controlgroup-label-contents").length) {
                return;
              }
              element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
            });
            that._addClass(labels2, null, "ui-widget ui-widget-content ui-state-default");
            childWidgets = childWidgets.concat(labels2.get());
            return;
          }
          if (!$2.fn[widget2]) {
            return;
          }
          if (that["_" + widget2 + "Options"]) {
            options = that["_" + widget2 + "Options"]("middle");
          } else {
            options = { classes: {} };
          }
          that.element.find(selector).each(function() {
            var element = $2(this);
            var instance = element[widget2]("instance");
            var instanceOptions = $2.widget.extend({}, options);
            if (widget2 === "button" && element.parent(".ui-spinner").length) {
              return;
            }
            if (!instance) {
              instance = element[widget2]()[widget2]("instance");
            }
            if (instance) {
              instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance);
            }
            element[widget2](instanceOptions);
            var widgetElement = element[widget2]("widget");
            $2.data(
              widgetElement[0],
              "ui-controlgroup-data",
              instance ? instance : element[widget2]("instance")
            );
            childWidgets.push(widgetElement[0]);
          });
        });
        this.childWidgets = $2($2.uniqueSort(childWidgets));
        this._addClass(this.childWidgets, "ui-controlgroup-item");
      },
      _callChildMethod: function(method) {
        this.childWidgets.each(function() {
          var element = $2(this), data2 = element.data("ui-controlgroup-data");
          if (data2 && data2[method]) {
            data2[method]();
          }
        });
      },
      _updateCornerClass: function(element, position2) {
        var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
        var add2 = this._buildSimpleOptions(position2, "label").classes.label;
        this._removeClass(element, null, remove);
        this._addClass(element, null, add2);
      },
      _buildSimpleOptions: function(position2, key) {
        var direction = this.options.direction === "vertical";
        var result = {
          classes: {}
        };
        result.classes[key] = {
          "middle": "",
          "first": "ui-corner-" + (direction ? "top" : "left"),
          "last": "ui-corner-" + (direction ? "bottom" : "right"),
          "only": "ui-corner-all"
        }[position2];
        return result;
      },
      _spinnerOptions: function(position2) {
        var options = this._buildSimpleOptions(position2, "ui-spinner");
        options.classes["ui-spinner-up"] = "";
        options.classes["ui-spinner-down"] = "";
        return options;
      },
      _buttonOptions: function(position2) {
        return this._buildSimpleOptions(position2, "ui-button");
      },
      _checkboxradioOptions: function(position2) {
        return this._buildSimpleOptions(position2, "ui-checkboxradio-label");
      },
      _selectmenuOptions: function(position2) {
        var direction = this.options.direction === "vertical";
        return {
          width: direction ? "auto" : false,
          classes: {
            middle: {
              "ui-selectmenu-button-open": "",
              "ui-selectmenu-button-closed": ""
            },
            first: {
              "ui-selectmenu-button-open": "ui-corner-" + (direction ? "top" : "tl"),
              "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "top" : "left")
            },
            last: {
              "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
              "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "bottom" : "right")
            },
            only: {
              "ui-selectmenu-button-open": "ui-corner-top",
              "ui-selectmenu-button-closed": "ui-corner-all"
            }
          }[position2]
        };
      },
      _resolveClassesValues: function(classes, instance) {
        var result = {};
        $2.each(classes, function(key) {
          var current = instance.options.classes[key] || "";
          current = String.prototype.trim.call(current.replace(controlgroupCornerRegex, ""));
          result[key] = (current + " " + classes[key]).replace(/\s+/g, " ");
        });
        return result;
      },
      _setOption: function(key, value) {
        if (key === "direction") {
          this._removeClass("ui-controlgroup-" + this.options.direction);
        }
        this._super(key, value);
        if (key === "disabled") {
          this._callChildMethod(value ? "disable" : "enable");
          return;
        }
        this.refresh();
      },
      refresh: function() {
        var children, that = this;
        this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction);
        if (this.options.direction === "horizontal") {
          this._addClass(null, "ui-helper-clearfix");
        }
        this._initWidgets();
        children = this.childWidgets;
        if (this.options.onlyVisible) {
          children = children.filter(":visible");
        }
        if (children.length) {
          $2.each(["first", "last"], function(index, value) {
            var instance = children[value]().data("ui-controlgroup-data");
            if (instance && that["_" + instance.widgetName + "Options"]) {
              var options = that["_" + instance.widgetName + "Options"](
                children.length === 1 ? "only" : value
              );
              options.classes = that._resolveClassesValues(options.classes, instance);
              instance.element[instance.widgetName](options);
            } else {
              that._updateCornerClass(children[value](), value);
            }
          });
          this._callChildMethod("refresh");
        }
      }
    });
    $2.widget("ui.checkboxradio", [$2.ui.formResetMixin, {
      version: "1.13.0",
      options: {
        disabled: null,
        label: null,
        icon: true,
        classes: {
          "ui-checkboxradio-label": "ui-corner-all",
          "ui-checkboxradio-icon": "ui-corner-all"
        }
      },
      _getCreateOptions: function() {
        var disabled, labels2;
        var that = this;
        var options = this._super() || {};
        this._readType();
        labels2 = this.element.labels();
        this.label = $2(labels2[labels2.length - 1]);
        if (!this.label.length) {
          $2.error("No label found for checkboxradio widget");
        }
        this.originalLabel = "";
        this.label.contents().not(this.element[0]).each(function() {
          that.originalLabel += this.nodeType === 3 ? $2(this).text() : this.outerHTML;
        });
        if (this.originalLabel) {
          options.label = this.originalLabel;
        }
        disabled = this.element[0].disabled;
        if (disabled != null) {
          options.disabled = disabled;
        }
        return options;
      },
      _create: function() {
        var checked = this.element[0].checked;
        this._bindFormResetHandler();
        if (this.options.disabled == null) {
          this.options.disabled = this.element[0].disabled;
        }
        this._setOption("disabled", this.options.disabled);
        this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible");
        this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget");
        if (this.type === "radio") {
          this._addClass(this.label, "ui-checkboxradio-radio-label");
        }
        if (this.options.label && this.options.label !== this.originalLabel) {
          this._updateLabel();
        } else if (this.originalLabel) {
          this.options.label = this.originalLabel;
        }
        this._enhance();
        if (checked) {
          this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active");
        }
        this._on({
          change: "_toggleClasses",
          focus: function() {
            this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
          },
          blur: function() {
            this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
          }
        });
      },
      _readType: function() {
        var nodeName = this.element[0].nodeName.toLowerCase();
        this.type = this.element[0].type;
        if (nodeName !== "input" || !/radio|checkbox/.test(this.type)) {
          $2.error("Can't create checkboxradio on element.nodeName=" + nodeName + " and element.type=" + this.type);
        }
      },
      // Support jQuery Mobile enhanced option
      _enhance: function() {
        this._updateIcon(this.element[0].checked);
      },
      widget: function() {
        return this.label;
      },
      _getRadioGroup: function() {
        var group;
        var name = this.element[0].name;
        var nameSelector = "input[name='" + $2.escapeSelector(name) + "']";
        if (!name) {
          return $2([]);
        }
        if (this.form.length) {
          group = $2(this.form[0].elements).filter(nameSelector);
        } else {
          group = $2(nameSelector).filter(function() {
            return $2(this)._form().length === 0;
          });
        }
        return group.not(this.element);
      },
      _toggleClasses: function() {
        var checked = this.element[0].checked;
        this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
        if (this.options.icon && this.type === "checkbox") {
          this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", checked)._toggleClass(this.icon, null, "ui-icon-blank", !checked);
        }
        if (this.type === "radio") {
          this._getRadioGroup().each(function() {
            var instance = $2(this).checkboxradio("instance");
            if (instance) {
              instance._removeClass(
                instance.label,
                "ui-checkboxradio-checked",
                "ui-state-active"
              );
            }
          });
        }
      },
      _destroy: function() {
        this._unbindFormResetHandler();
        if (this.icon) {
          this.icon.remove();
          this.iconSpace.remove();
        }
      },
      _setOption: function(key, value) {
        if (key === "label" && !value) {
          return;
        }
        this._super(key, value);
        if (key === "disabled") {
          this._toggleClass(this.label, null, "ui-state-disabled", value);
          this.element[0].disabled = value;
          return;
        }
        this.refresh();
      },
      _updateIcon: function(checked) {
        var toAdd = "ui-icon ui-icon-background ";
        if (this.options.icon) {
          if (!this.icon) {
            this.icon = $2("<span>");
            this.iconSpace = $2("<span> </span>");
            this._addClass(this.iconSpace, "ui-checkboxradio-icon-space");
          }
          if (this.type === "checkbox") {
            toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
            this._removeClass(this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check");
          } else {
            toAdd += "ui-icon-blank";
          }
          this._addClass(this.icon, "ui-checkboxradio-icon", toAdd);
          if (!checked) {
            this._removeClass(this.icon, null, "ui-icon-check ui-state-checked");
          }
          this.icon.prependTo(this.label).after(this.iconSpace);
        } else if (this.icon !== void 0) {
          this.icon.remove();
          this.iconSpace.remove();
          delete this.icon;
        }
      },
      _updateLabel: function() {
        var contents = this.label.contents().not(this.element[0]);
        if (this.icon) {
          contents = contents.not(this.icon[0]);
        }
        if (this.iconSpace) {
          contents = contents.not(this.iconSpace[0]);
        }
        contents.remove();
        this.label.append(this.options.label);
      },
      refresh: function() {
        var checked = this.element[0].checked, isDisabled2 = this.element[0].disabled;
        this._updateIcon(checked);
        this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
        if (this.options.label !== null) {
          this._updateLabel();
        }
        if (isDisabled2 !== this.options.disabled) {
          this._setOptions({ "disabled": isDisabled2 });
        }
      }
    }]);
    var widgetsCheckboxradio = $2.ui.checkboxradio;
    $2.widget("ui.button", {
      version: "1.13.0",
      defaultElement: "<button>",
      options: {
        classes: {
          "ui-button": "ui-corner-all"
        },
        disabled: null,
        icon: null,
        iconPosition: "beginning",
        label: null,
        showLabel: true
      },
      _getCreateOptions: function() {
        var disabled, options = this._super() || {};
        this.isInput = this.element.is("input");
        disabled = this.element[0].disabled;
        if (disabled != null) {
          options.disabled = disabled;
        }
        this.originalLabel = this.isInput ? this.element.val() : this.element.html();
        if (this.originalLabel) {
          options.label = this.originalLabel;
        }
        return options;
      },
      _create: function() {
        if (!this.option.showLabel & !this.options.icon) {
          this.options.showLabel = true;
        }
        if (this.options.disabled == null) {
          this.options.disabled = this.element[0].disabled || false;
        }
        this.hasTitle = !!this.element.attr("title");
        if (this.options.label && this.options.label !== this.originalLabel) {
          if (this.isInput) {
            this.element.val(this.options.label);
          } else {
            this.element.html(this.options.label);
          }
        }
        this._addClass("ui-button", "ui-widget");
        this._setOption("disabled", this.options.disabled);
        this._enhance();
        if (this.element.is("a")) {
          this._on({
            "keyup": function(event) {
              if (event.keyCode === $2.ui.keyCode.SPACE) {
                event.preventDefault();
                if (this.element[0].click) {
                  this.element[0].click();
                } else {
                  this.element.trigger("click");
                }
              }
            }
          });
        }
      },
      _enhance: function() {
        if (!this.element.is("button")) {
          this.element.attr("role", "button");
        }
        if (this.options.icon) {
          this._updateIcon("icon", this.options.icon);
          this._updateTooltip();
        }
      },
      _updateTooltip: function() {
        this.title = this.element.attr("title");
        if (!this.options.showLabel && !this.title) {
          this.element.attr("title", this.options.label);
        }
      },
      _updateIcon: function(option, value) {
        var icon = option !== "iconPosition", position2 = icon ? this.options.iconPosition : value, displayBlock = position2 === "top" || position2 === "bottom";
        if (!this.icon) {
          this.icon = $2("<span>");
          this._addClass(this.icon, "ui-button-icon", "ui-icon");
          if (!this.options.showLabel) {
            this._addClass("ui-button-icon-only");
          }
        } else if (icon) {
          this._removeClass(this.icon, null, this.options.icon);
        }
        if (icon) {
          this._addClass(this.icon, null, value);
        }
        this._attachIcon(position2);
        if (displayBlock) {
          this._addClass(this.icon, null, "ui-widget-icon-block");
          if (this.iconSpace) {
            this.iconSpace.remove();
          }
        } else {
          if (!this.iconSpace) {
            this.iconSpace = $2("<span> </span>");
            this._addClass(this.iconSpace, "ui-button-icon-space");
          }
          this._removeClass(this.icon, null, "ui-wiget-icon-block");
          this._attachIconSpace(position2);
        }
      },
      _destroy: function() {
        this.element.removeAttr("role");
        if (this.icon) {
          this.icon.remove();
        }
        if (this.iconSpace) {
          this.iconSpace.remove();
        }
        if (!this.hasTitle) {
          this.element.removeAttr("title");
        }
      },
      _attachIconSpace: function(iconPosition) {
        this.icon[/^(?:end|bottom)/.test(iconPosition) ? "before" : "after"](this.iconSpace);
      },
      _attachIcon: function(iconPosition) {
        this.element[/^(?:end|bottom)/.test(iconPosition) ? "append" : "prepend"](this.icon);
      },
      _setOptions: function(options) {
        var newShowLabel = options.showLabel === void 0 ? this.options.showLabel : options.showLabel, newIcon = options.icon === void 0 ? this.options.icon : options.icon;
        if (!newShowLabel && !newIcon) {
          options.showLabel = true;
        }
        this._super(options);
      },
      _setOption: function(key, value) {
        if (key === "icon") {
          if (value) {
            this._updateIcon(key, value);
          } else if (this.icon) {
            this.icon.remove();
            if (this.iconSpace) {
              this.iconSpace.remove();
            }
          }
        }
        if (key === "iconPosition") {
          this._updateIcon(key, value);
        }
        if (key === "showLabel") {
          this._toggleClass("ui-button-icon-only", null, !value);
          this._updateTooltip();
        }
        if (key === "label") {
          if (this.isInput) {
            this.element.val(value);
          } else {
            this.element.html(value);
            if (this.icon) {
              this._attachIcon(this.options.iconPosition);
              this._attachIconSpace(this.options.iconPosition);
            }
          }
        }
        this._super(key, value);
        if (key === "disabled") {
          this._toggleClass(null, "ui-state-disabled", value);
          this.element[0].disabled = value;
          if (value) {
            this.element.trigger("blur");
          }
        }
      },
      refresh: function() {
        var isDisabled2 = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");
        if (isDisabled2 !== this.options.disabled) {
          this._setOptions({ disabled: isDisabled2 });
        }
        this._updateTooltip();
      }
    });
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.button", $2.ui.button, {
        options: {
          text: true,
          icons: {
            primary: null,
            secondary: null
          }
        },
        _create: function() {
          if (this.options.showLabel && !this.options.text) {
            this.options.showLabel = this.options.text;
          }
          if (!this.options.showLabel && this.options.text) {
            this.options.text = this.options.showLabel;
          }
          if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {
            if (this.options.icons.primary) {
              this.options.icon = this.options.icons.primary;
            } else {
              this.options.icon = this.options.icons.secondary;
              this.options.iconPosition = "end";
            }
          } else if (this.options.icon) {
            this.options.icons.primary = this.options.icon;
          }
          this._super();
        },
        _setOption: function(key, value) {
          if (key === "text") {
            this._super("showLabel", value);
            return;
          }
          if (key === "showLabel") {
            this.options.text = value;
          }
          if (key === "icon") {
            this.options.icons.primary = value;
          }
          if (key === "icons") {
            if (value.primary) {
              this._super("icon", value.primary);
              this._super("iconPosition", "beginning");
            } else if (value.secondary) {
              this._super("icon", value.secondary);
              this._super("iconPosition", "end");
            }
          }
          this._superApply(arguments);
        }
      });
      $2.fn.button = /* @__PURE__ */ function(orig) {
        return function(options) {
          var isMethodCall = typeof options === "string";
          var args = Array.prototype.slice.call(arguments, 1);
          var returnValue = this;
          if (isMethodCall) {
            if (!this.length && options === "instance") {
              returnValue = void 0;
            } else {
              this.each(function() {
                var methodValue;
                var type = $2(this).attr("type");
                var name = type !== "checkbox" && type !== "radio" ? "button" : "checkboxradio";
                var instance = $2.data(this, "ui-" + name);
                if (options === "instance") {
                  returnValue = instance;
                  return false;
                }
                if (!instance) {
                  return $2.error("cannot call methods on button prior to initialization; attempted to call method '" + options + "'");
                }
                if (typeof instance[options] !== "function" || options.charAt(0) === "_") {
                  return $2.error("no such method '" + options + "' for button widget instance");
                }
                methodValue = instance[options].apply(instance, args);
                if (methodValue !== instance && methodValue !== void 0) {
                  returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                  return false;
                }
              });
            }
          } else {
            if (args.length) {
              options = $2.widget.extend.apply(null, [options].concat(args));
            }
            this.each(function() {
              var type = $2(this).attr("type");
              var name = type !== "checkbox" && type !== "radio" ? "button" : "checkboxradio";
              var instance = $2.data(this, "ui-" + name);
              if (instance) {
                instance.option(options || {});
                if (instance._init) {
                  instance._init();
                }
              } else {
                if (name === "button") {
                  orig.call($2(this), options);
                  return;
                }
                $2(this).checkboxradio($2.extend({ icon: false }, options));
              }
            });
          }
          return returnValue;
        };
      }($2.fn.button);
      $2.fn.buttonset = function() {
        if (!$2.ui.controlgroup) {
          $2.error("Controlgroup widget missing");
        }
        if (arguments[0] === "option" && arguments[1] === "items" && arguments[2]) {
          return this.controlgroup.apply(
            this,
            [arguments[0], "items.button", arguments[2]]
          );
        }
        if (arguments[0] === "option" && arguments[1] === "items") {
          return this.controlgroup.apply(this, [arguments[0], "items.button"]);
        }
        if (typeof arguments[0] === "object" && arguments[0].items) {
          arguments[0].items = {
            button: arguments[0].items
          };
        }
        return this.controlgroup.apply(this, arguments);
      };
    }
    var widgetsButton = $2.ui.button;
    $2.extend($2.ui, { datepicker: { version: "1.13.0" } });
    var datepicker_instActive;
    function datepicker_getZindex(elem) {
      var position2, value;
      while (elem.length && elem[0] !== document) {
        position2 = elem.css("position");
        if (position2 === "absolute" || position2 === "relative" || position2 === "fixed") {
          value = parseInt(elem.css("zIndex"), 10);
          if (!isNaN(value) && value !== 0) {
            return value;
          }
        }
        elem = elem.parent();
      }
      return 0;
    }
    function Datepicker() {
      this._curInst = null;
      this._keyEvent = false;
      this._disabledInputs = [];
      this._datepickerShowing = false;
      this._inDialog = false;
      this._mainDivId = "ui-datepicker-div";
      this._inlineClass = "ui-datepicker-inline";
      this._appendClass = "ui-datepicker-append";
      this._triggerClass = "ui-datepicker-trigger";
      this._dialogClass = "ui-datepicker-dialog";
      this._disableClass = "ui-datepicker-disabled";
      this._unselectableClass = "ui-datepicker-unselectable";
      this._currentClass = "ui-datepicker-current-day";
      this._dayOverClass = "ui-datepicker-days-cell-over";
      this.regional = [];
      this.regional[""] = {
        // Default regional settings
        closeText: "Done",
        // Display text for close link
        prevText: "Prev",
        // Display text for previous month link
        nextText: "Next",
        // Display text for next month link
        currentText: "Today",
        // Display text for current month link
        monthNames: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ],
        // Names of months for drop-down and formatting
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        // For formatting
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        // For formatting
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        // For formatting
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        // Column headings for days starting at Sunday
        weekHeader: "Wk",
        // Column header for week of the year
        dateFormat: "mm/dd/yy",
        // See format options on parseDate
        firstDay: 0,
        // The first day of the week, Sun = 0, Mon = 1, ...
        isRTL: false,
        // True if right-to-left language, false if left-to-right
        showMonthAfterYear: false,
        // True if the year select precedes month, false for month then year
        yearSuffix: "",
        // Additional text to append to the year in the month headers,
        selectMonthLabel: "Select month",
        // Invisible label for month selector
        selectYearLabel: "Select year"
        // Invisible label for year selector
      };
      this._defaults = {
        // Global defaults for all the date picker instances
        showOn: "focus",
        // "focus" for popup on focus,
        // "button" for trigger button, or "both" for either
        showAnim: "fadeIn",
        // Name of jQuery animation for popup
        showOptions: {},
        // Options for enhanced animations
        defaultDate: null,
        // Used when field is blank: actual date,
        // +/-number for offset from today, null for today
        appendText: "",
        // Display text following the input box, e.g. showing the format
        buttonText: "...",
        // Text for trigger button
        buttonImage: "",
        // URL for trigger button image
        buttonImageOnly: false,
        // True if the image appears alone, false if it appears on a button
        hideIfNoPrevNext: false,
        // True to hide next/previous month links
        // if not applicable, false to just disable them
        navigationAsDateFormat: false,
        // True if date formatting applied to prev/today/next links
        gotoCurrent: false,
        // True if today link goes back to current selection instead
        changeMonth: false,
        // True if month can be selected directly, false if only prev/next
        changeYear: false,
        // True if year can be selected directly, false if only prev/next
        yearRange: "c-10:c+10",
        // Range of years to display in drop-down,
        // either relative to today's year (-nn:+nn), relative to currently displayed year
        // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
        showOtherMonths: false,
        // True to show dates in other months, false to leave blank
        selectOtherMonths: false,
        // True to allow selection of dates in other months, false for unselectable
        showWeek: false,
        // True to show week of the year, false to not show it
        calculateWeek: this.iso8601Week,
        // How to calculate the week of the year,
        // takes a Date and returns the number of the week for it
        shortYearCutoff: "+10",
        // Short year values < this are in the current century,
        // > this are in the previous century,
        // string value starting with "+" for current year + value
        minDate: null,
        // The earliest selectable date, or null for no limit
        maxDate: null,
        // The latest selectable date, or null for no limit
        duration: "fast",
        // Duration of display/closure
        beforeShowDay: null,
        // Function that takes a date and returns an array with
        // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
        // [2] = cell title (optional), e.g. $.datepicker.noWeekends
        beforeShow: null,
        // Function that takes an input field and
        // returns a set of custom settings for the date picker
        onSelect: null,
        // Define a callback function when a date is selected
        onChangeMonthYear: null,
        // Define a callback function when the month or year is changed
        onClose: null,
        // Define a callback function when the datepicker is closed
        onUpdateDatepicker: null,
        // Define a callback function when the datepicker is updated
        numberOfMonths: 1,
        // Number of months to show at a time
        showCurrentAtPos: 0,
        // The position in multipe months at which to show the current month (starting at 0)
        stepMonths: 1,
        // Number of months to step back/forward
        stepBigMonths: 12,
        // Number of months to step back/forward for the big links
        altField: "",
        // Selector for an alternate field to store selected dates into
        altFormat: "",
        // The date format to use for the alternate field
        constrainInput: true,
        // The input is constrained by the current date format
        showButtonPanel: false,
        // True to show button panel, false to not show it
        autoSize: false,
        // True to size the input for the date format, false to leave as is
        disabled: false
        // The initial disabled state
      };
      $2.extend(this._defaults, this.regional[""]);
      this.regional.en = $2.extend(true, {}, this.regional[""]);
      this.regional["en-US"] = $2.extend(true, {}, this.regional.en);
      this.dpDiv = datepicker_bindHover($2("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }
    $2.extend(Datepicker.prototype, {
      /* Class name added to elements to indicate already configured with a date picker. */
      markerClassName: "hasDatepicker",
      //Keep track of the maximum number of rows displayed (see #7043)
      maxRows: 4,
      // TODO rename to "widget" when switching to widget factory
      _widgetDatepicker: function() {
        return this.dpDiv;
      },
      /* Override the default settings for all instances of the date picker.
       * @param  settings  object - the new settings to use as defaults (anonymous object)
       * @return the manager object
       */
      setDefaults: function(settings) {
        datepicker_extendRemove(this._defaults, settings || {});
        return this;
      },
      /* Attach the date picker to a jQuery selection.
       * @param  target	element - the target input field or division or span
       * @param  settings  object - the new settings to use for this date picker instance (anonymous)
       */
      _attachDatepicker: function(target, settings) {
        var nodeName, inline, inst;
        nodeName = target.nodeName.toLowerCase();
        inline = nodeName === "div" || nodeName === "span";
        if (!target.id) {
          this.uuid += 1;
          target.id = "dp" + this.uuid;
        }
        inst = this._newInst($2(target), inline);
        inst.settings = $2.extend({}, settings || {});
        if (nodeName === "input") {
          this._connectDatepicker(target, inst);
        } else if (inline) {
          this._inlineDatepicker(target, inst);
        }
      },
      /* Create a new instance object. */
      _newInst: function(target, inline) {
        var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
        return {
          id,
          input: target,
          // associated target
          selectedDay: 0,
          selectedMonth: 0,
          selectedYear: 0,
          // current selection
          drawMonth: 0,
          drawYear: 0,
          // month being drawn
          inline,
          // is datepicker inline or not
          dpDiv: !inline ? this.dpDiv : (
            // presentation div
            datepicker_bindHover($2("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
          )
        };
      },
      /* Attach the date picker to an input field. */
      _connectDatepicker: function(target, inst) {
        var input = $2(target);
        inst.append = $2([]);
        inst.trigger = $2([]);
        if (input.hasClass(this.markerClassName)) {
          return;
        }
        this._attachments(input, inst);
        input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
        this._autoSize(inst);
        $2.data(target, "datepicker", inst);
        if (inst.settings.disabled) {
          this._disableDatepicker(target);
        }
      },
      /* Make attachments based on settings. */
      _attachments: function(input, inst) {
        var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL2 = this._get(inst, "isRTL");
        if (inst.append) {
          inst.append.remove();
        }
        if (appendText) {
          inst.append = $2("<span>").addClass(this._appendClass).text(appendText);
          input[isRTL2 ? "before" : "after"](inst.append);
        }
        input.off("focus", this._showDatepicker);
        if (inst.trigger) {
          inst.trigger.remove();
        }
        showOn = this._get(inst, "showOn");
        if (showOn === "focus" || showOn === "both") {
          input.on("focus", this._showDatepicker);
        }
        if (showOn === "button" || showOn === "both") {
          buttonText = this._get(inst, "buttonText");
          buttonImage = this._get(inst, "buttonImage");
          if (this._get(inst, "buttonImageOnly")) {
            inst.trigger = $2("<img>").addClass(this._triggerClass).attr({
              src: buttonImage,
              alt: buttonText,
              title: buttonText
            });
          } else {
            inst.trigger = $2("<button type='button'>").addClass(this._triggerClass);
            if (buttonImage) {
              inst.trigger.html(
                $2("<img>").attr({
                  src: buttonImage,
                  alt: buttonText,
                  title: buttonText
                })
              );
            } else {
              inst.trigger.text(buttonText);
            }
          }
          input[isRTL2 ? "before" : "after"](inst.trigger);
          inst.trigger.on("click", function() {
            if ($2.datepicker._datepickerShowing && $2.datepicker._lastInput === input[0]) {
              $2.datepicker._hideDatepicker();
            } else if ($2.datepicker._datepickerShowing && $2.datepicker._lastInput !== input[0]) {
              $2.datepicker._hideDatepicker();
              $2.datepicker._showDatepicker(input[0]);
            } else {
              $2.datepicker._showDatepicker(input[0]);
            }
            return false;
          });
        }
      },
      /* Apply the maximum length for the date format. */
      _autoSize: function(inst) {
        if (this._get(inst, "autoSize") && !inst.inline) {
          var findMax, max2, maxI, i, date = new Date(2009, 12 - 1, 20), dateFormat = this._get(inst, "dateFormat");
          if (dateFormat.match(/[DM]/)) {
            findMax = function(names) {
              max2 = 0;
              maxI = 0;
              for (i = 0; i < names.length; i++) {
                if (names[i].length > max2) {
                  max2 = names[i].length;
                  maxI = i;
                }
              }
              return maxI;
            };
            date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
            date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
          }
          inst.input.attr("size", this._formatDate(inst, date).length);
        }
      },
      /* Attach an inline date picker to a div. */
      _inlineDatepicker: function(target, inst) {
        var divSpan = $2(target);
        if (divSpan.hasClass(this.markerClassName)) {
          return;
        }
        divSpan.addClass(this.markerClassName).append(inst.dpDiv);
        $2.data(target, "datepicker", inst);
        this._setDate(inst, this._getDefaultDate(inst), true);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
        if (inst.settings.disabled) {
          this._disableDatepicker(target);
        }
        inst.dpDiv.css("display", "block");
      },
      /* Pop-up the date picker in a "dialog" box.
       * @param  input element - ignored
       * @param  date	string or Date - the initial date to display
       * @param  onSelect  function - the function to call when a date is selected
       * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
       * @param  pos int[2] - coordinates for the dialog's position within the screen or
       *					event - with x/y coordinates or
       *					leave empty for default (screen centre)
       * @return the manager object
       */
      _dialogDatepicker: function(input, date, onSelect, settings, pos) {
        var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
        if (!inst) {
          this.uuid += 1;
          id = "dp" + this.uuid;
          this._dialogInput = $2("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
          this._dialogInput.on("keydown", this._doKeyDown);
          $2("body").append(this._dialogInput);
          inst = this._dialogInst = this._newInst(this._dialogInput, false);
          inst.settings = {};
          $2.data(this._dialogInput[0], "datepicker", inst);
        }
        datepicker_extendRemove(inst.settings, settings || {});
        date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
        this._dialogInput.val(date);
        this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;
        if (!this._pos) {
          browserWidth = document.documentElement.clientWidth;
          browserHeight = document.documentElement.clientHeight;
          scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
          scrollY = document.documentElement.scrollTop || document.body.scrollTop;
          this._pos = // should use actual width/height below
          [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];
        }
        this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
        inst.settings.onSelect = onSelect;
        this._inDialog = true;
        this.dpDiv.addClass(this._dialogClass);
        this._showDatepicker(this._dialogInput[0]);
        if ($2.blockUI) {
          $2.blockUI(this.dpDiv);
        }
        $2.data(this._dialogInput[0], "datepicker", inst);
        return this;
      },
      /* Detach a datepicker from its control.
       * @param  target	element - the target input field or division or span
       */
      _destroyDatepicker: function(target) {
        var nodeName, $target = $2(target), inst = $2.data(target, "datepicker");
        if (!$target.hasClass(this.markerClassName)) {
          return;
        }
        nodeName = target.nodeName.toLowerCase();
        $2.removeData(target, "datepicker");
        if (nodeName === "input") {
          inst.append.remove();
          inst.trigger.remove();
          $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp);
        } else if (nodeName === "div" || nodeName === "span") {
          $target.removeClass(this.markerClassName).empty();
        }
        if (datepicker_instActive === inst) {
          datepicker_instActive = null;
          this._curInst = null;
        }
      },
      /* Enable the date picker to a jQuery selection.
       * @param  target	element - the target input field or division or span
       */
      _enableDatepicker: function(target) {
        var nodeName, inline, $target = $2(target), inst = $2.data(target, "datepicker");
        if (!$target.hasClass(this.markerClassName)) {
          return;
        }
        nodeName = target.nodeName.toLowerCase();
        if (nodeName === "input") {
          target.disabled = false;
          inst.trigger.filter("button").each(function() {
            this.disabled = false;
          }).end().filter("img").css({ opacity: "1.0", cursor: "" });
        } else if (nodeName === "div" || nodeName === "span") {
          inline = $target.children("." + this._inlineClass);
          inline.children().removeClass("ui-state-disabled");
          inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
        }
        this._disabledInputs = $2.map(
          this._disabledInputs,
          // Delete entry
          function(value) {
            return value === target ? null : value;
          }
        );
      },
      /* Disable the date picker to a jQuery selection.
       * @param  target	element - the target input field or division or span
       */
      _disableDatepicker: function(target) {
        var nodeName, inline, $target = $2(target), inst = $2.data(target, "datepicker");
        if (!$target.hasClass(this.markerClassName)) {
          return;
        }
        nodeName = target.nodeName.toLowerCase();
        if (nodeName === "input") {
          target.disabled = true;
          inst.trigger.filter("button").each(function() {
            this.disabled = true;
          }).end().filter("img").css({ opacity: "0.5", cursor: "default" });
        } else if (nodeName === "div" || nodeName === "span") {
          inline = $target.children("." + this._inlineClass);
          inline.children().addClass("ui-state-disabled");
          inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
        }
        this._disabledInputs = $2.map(
          this._disabledInputs,
          // Delete entry
          function(value) {
            return value === target ? null : value;
          }
        );
        this._disabledInputs[this._disabledInputs.length] = target;
      },
      /* Is the first field in a jQuery collection disabled as a datepicker?
       * @param  target	element - the target input field or division or span
       * @return boolean - true if disabled, false if enabled
       */
      _isDisabledDatepicker: function(target) {
        if (!target) {
          return false;
        }
        for (var i = 0; i < this._disabledInputs.length; i++) {
          if (this._disabledInputs[i] === target) {
            return true;
          }
        }
        return false;
      },
      /* Retrieve the instance data for the target control.
       * @param  target  element - the target input field or division or span
       * @return  object - the associated instance data
       * @throws  error if a jQuery problem getting data
       */
      _getInst: function(target) {
        try {
          return $2.data(target, "datepicker");
        } catch (err) {
          throw "Missing instance data for this datepicker";
        }
      },
      /* Update or retrieve the settings for a date picker attached to an input field or division.
       * @param  target  element - the target input field or division or span
       * @param  name	object - the new settings to update or
       *				string - the name of the setting to change or retrieve,
       *				when retrieving also "all" for all instance settings or
       *				"defaults" for all global defaults
       * @param  value   any - the new value for the setting
       *				(omit if above is an object or to retrieve a value)
       */
      _optionDatepicker: function(target, name, value) {
        var settings, date, minDate, maxDate, inst = this._getInst(target);
        if (arguments.length === 2 && typeof name === "string") {
          return name === "defaults" ? $2.extend({}, $2.datepicker._defaults) : inst ? name === "all" ? $2.extend({}, inst.settings) : this._get(inst, name) : null;
        }
        settings = name || {};
        if (typeof name === "string") {
          settings = {};
          settings[name] = value;
        }
        if (inst) {
          if (this._curInst === inst) {
            this._hideDatepicker();
          }
          date = this._getDateDatepicker(target, true);
          minDate = this._getMinMaxDate(inst, "min");
          maxDate = this._getMinMaxDate(inst, "max");
          datepicker_extendRemove(inst.settings, settings);
          if (minDate !== null && settings.dateFormat !== void 0 && settings.minDate === void 0) {
            inst.settings.minDate = this._formatDate(inst, minDate);
          }
          if (maxDate !== null && settings.dateFormat !== void 0 && settings.maxDate === void 0) {
            inst.settings.maxDate = this._formatDate(inst, maxDate);
          }
          if ("disabled" in settings) {
            if (settings.disabled) {
              this._disableDatepicker(target);
            } else {
              this._enableDatepicker(target);
            }
          }
          this._attachments($2(target), inst);
          this._autoSize(inst);
          this._setDate(inst, date);
          this._updateAlternate(inst);
          this._updateDatepicker(inst);
        }
      },
      // Change method deprecated
      _changeDatepicker: function(target, name, value) {
        this._optionDatepicker(target, name, value);
      },
      /* Redraw the date picker attached to an input field or division.
       * @param  target  element - the target input field or division or span
       */
      _refreshDatepicker: function(target) {
        var inst = this._getInst(target);
        if (inst) {
          this._updateDatepicker(inst);
        }
      },
      /* Set the dates for a jQuery selection.
       * @param  target element - the target input field or division or span
       * @param  date	Date - the new date
       */
      _setDateDatepicker: function(target, date) {
        var inst = this._getInst(target);
        if (inst) {
          this._setDate(inst, date);
          this._updateDatepicker(inst);
          this._updateAlternate(inst);
        }
      },
      /* Get the date(s) for the first entry in a jQuery selection.
       * @param  target element - the target input field or division or span
       * @param  noDefault boolean - true if no default date is to be used
       * @return Date - the current date
       */
      _getDateDatepicker: function(target, noDefault) {
        var inst = this._getInst(target);
        if (inst && !inst.inline) {
          this._setDateFromField(inst, noDefault);
        }
        return inst ? this._getDate(inst) : null;
      },
      /* Handle keystrokes. */
      _doKeyDown: function(event) {
        var onSelect, dateStr, sel, inst = $2.datepicker._getInst(event.target), handled = true, isRTL2 = inst.dpDiv.is(".ui-datepicker-rtl");
        inst._keyEvent = true;
        if ($2.datepicker._datepickerShowing) {
          switch (event.keyCode) {
            case 9:
              $2.datepicker._hideDatepicker();
              handled = false;
              break;
            case 13:
              sel = $2("td." + $2.datepicker._dayOverClass + ":not(." + $2.datepicker._currentClass + ")", inst.dpDiv);
              if (sel[0]) {
                $2.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
              }
              onSelect = $2.datepicker._get(inst, "onSelect");
              if (onSelect) {
                dateStr = $2.datepicker._formatDate(inst);
                onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);
              } else {
                $2.datepicker._hideDatepicker();
              }
              return false;
            case 27:
              $2.datepicker._hideDatepicker();
              break;
            case 33:
              $2.datepicker._adjustDate(event.target, event.ctrlKey ? -$2.datepicker._get(inst, "stepBigMonths") : -$2.datepicker._get(inst, "stepMonths"), "M");
              break;
            case 34:
              $2.datepicker._adjustDate(event.target, event.ctrlKey ? +$2.datepicker._get(inst, "stepBigMonths") : +$2.datepicker._get(inst, "stepMonths"), "M");
              break;
            case 35:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._clearDate(event.target);
              }
              handled = event.ctrlKey || event.metaKey;
              break;
            case 36:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._gotoToday(event.target);
              }
              handled = event.ctrlKey || event.metaKey;
              break;
            case 37:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._adjustDate(event.target, isRTL2 ? 1 : -1, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              if (event.originalEvent.altKey) {
                $2.datepicker._adjustDate(event.target, event.ctrlKey ? -$2.datepicker._get(inst, "stepBigMonths") : -$2.datepicker._get(inst, "stepMonths"), "M");
              }
              break;
            case 38:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._adjustDate(event.target, -7, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              break;
            case 39:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._adjustDate(event.target, isRTL2 ? -1 : 1, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              if (event.originalEvent.altKey) {
                $2.datepicker._adjustDate(event.target, event.ctrlKey ? +$2.datepicker._get(inst, "stepBigMonths") : +$2.datepicker._get(inst, "stepMonths"), "M");
              }
              break;
            case 40:
              if (event.ctrlKey || event.metaKey) {
                $2.datepicker._adjustDate(event.target, 7, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              break;
            default:
              handled = false;
          }
        } else if (event.keyCode === 36 && event.ctrlKey) {
          $2.datepicker._showDatepicker(this);
        } else {
          handled = false;
        }
        if (handled) {
          event.preventDefault();
          event.stopPropagation();
        }
      },
      /* Filter entered characters - based on date format. */
      _doKeyPress: function(event) {
        var chars, chr, inst = $2.datepicker._getInst(event.target);
        if ($2.datepicker._get(inst, "constrainInput")) {
          chars = $2.datepicker._possibleChars($2.datepicker._get(inst, "dateFormat"));
          chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
          return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
        }
      },
      /* Synchronise manual entry and field/alternate field. */
      _doKeyUp: function(event) {
        var date, inst = $2.datepicker._getInst(event.target);
        if (inst.input.val() !== inst.lastVal) {
          try {
            date = $2.datepicker.parseDate(
              $2.datepicker._get(inst, "dateFormat"),
              inst.input ? inst.input.val() : null,
              $2.datepicker._getFormatConfig(inst)
            );
            if (date) {
              $2.datepicker._setDateFromField(inst);
              $2.datepicker._updateAlternate(inst);
              $2.datepicker._updateDatepicker(inst);
            }
          } catch (err) {
          }
        }
        return true;
      },
      /* Pop-up the date picker for a given input field.
       * If false returned from beforeShow event handler do not show.
       * @param  input  element - the input field attached to the date picker or
       *					event - if triggered by focus
       */
      _showDatepicker: function(input) {
        input = input.target || input;
        if (input.nodeName.toLowerCase() !== "input") {
          input = $2("input", input.parentNode)[0];
        }
        if ($2.datepicker._isDisabledDatepicker(input) || $2.datepicker._lastInput === input) {
          return;
        }
        var inst, beforeShow, beforeShowSettings, isFixed, offset2, showAnim, duration;
        inst = $2.datepicker._getInst(input);
        if ($2.datepicker._curInst && $2.datepicker._curInst !== inst) {
          $2.datepicker._curInst.dpDiv.stop(true, true);
          if (inst && $2.datepicker._datepickerShowing) {
            $2.datepicker._hideDatepicker($2.datepicker._curInst.input[0]);
          }
        }
        beforeShow = $2.datepicker._get(inst, "beforeShow");
        beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
        if (beforeShowSettings === false) {
          return;
        }
        datepicker_extendRemove(inst.settings, beforeShowSettings);
        inst.lastVal = null;
        $2.datepicker._lastInput = input;
        $2.datepicker._setDateFromField(inst);
        if ($2.datepicker._inDialog) {
          input.value = "";
        }
        if (!$2.datepicker._pos) {
          $2.datepicker._pos = $2.datepicker._findPos(input);
          $2.datepicker._pos[1] += input.offsetHeight;
        }
        isFixed = false;
        $2(input).parents().each(function() {
          isFixed |= $2(this).css("position") === "fixed";
          return !isFixed;
        });
        offset2 = { left: $2.datepicker._pos[0], top: $2.datepicker._pos[1] };
        $2.datepicker._pos = null;
        inst.dpDiv.empty();
        inst.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" });
        $2.datepicker._updateDatepicker(inst);
        offset2 = $2.datepicker._checkOffset(inst, offset2, isFixed);
        inst.dpDiv.css({
          position: $2.datepicker._inDialog && $2.blockUI ? "static" : isFixed ? "fixed" : "absolute",
          display: "none",
          left: offset2.left + "px",
          top: offset2.top + "px"
        });
        if (!inst.inline) {
          showAnim = $2.datepicker._get(inst, "showAnim");
          duration = $2.datepicker._get(inst, "duration");
          inst.dpDiv.css("z-index", datepicker_getZindex($2(input)) + 1);
          $2.datepicker._datepickerShowing = true;
          if ($2.effects && $2.effects.effect[showAnim]) {
            inst.dpDiv.show(showAnim, $2.datepicker._get(inst, "showOptions"), duration);
          } else {
            inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
          }
          if ($2.datepicker._shouldFocusInput(inst)) {
            inst.input.trigger("focus");
          }
          $2.datepicker._curInst = inst;
        }
      },
      /* Generate the date picker content. */
      _updateDatepicker: function(inst) {
        this.maxRows = 4;
        datepicker_instActive = inst;
        inst.dpDiv.empty().append(this._generateHTML(inst));
        this._attachHandlers(inst);
        var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a"), onUpdateDatepicker = $2.datepicker._get(inst, "onUpdateDatepicker");
        if (activeCell.length > 0) {
          datepicker_handleMouseover.apply(activeCell.get(0));
        }
        inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
        if (cols > 1) {
          inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
        }
        inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
        inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
        if (inst === $2.datepicker._curInst && $2.datepicker._datepickerShowing && $2.datepicker._shouldFocusInput(inst)) {
          inst.input.trigger("focus");
        }
        if (inst.yearshtml) {
          origyearshtml = inst.yearshtml;
          setTimeout(function() {
            if (origyearshtml === inst.yearshtml && inst.yearshtml) {
              inst.dpDiv.find("select.ui-datepicker-year").first().replaceWith(inst.yearshtml);
            }
            origyearshtml = inst.yearshtml = null;
          }, 0);
        }
        if (onUpdateDatepicker) {
          onUpdateDatepicker.apply(inst.input ? inst.input[0] : null, [inst]);
        }
      },
      // #6694 - don't focus the input if it's already focused
      // this breaks the change event in IE
      // Support: IE and jQuery <1.9
      _shouldFocusInput: function(inst) {
        return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
      },
      /* Check positioning to remain on screen. */
      _checkOffset: function(inst, offset2, isFixed) {
        var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $2(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $2(document).scrollTop());
        offset2.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
        offset2.left -= isFixed && offset2.left === inst.input.offset().left ? $2(document).scrollLeft() : 0;
        offset2.top -= isFixed && offset2.top === inst.input.offset().top + inputHeight ? $2(document).scrollTop() : 0;
        offset2.left -= Math.min(offset2.left, offset2.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset2.left + dpWidth - viewWidth) : 0);
        offset2.top -= Math.min(offset2.top, offset2.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
        return offset2;
      },
      /* Find an object's position on the screen. */
      _findPos: function(obj) {
        var position2, inst = this._getInst(obj), isRTL2 = this._get(inst, "isRTL");
        while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $2.expr.pseudos.hidden(obj))) {
          obj = obj[isRTL2 ? "previousSibling" : "nextSibling"];
        }
        position2 = $2(obj).offset();
        return [position2.left, position2.top];
      },
      /* Hide the date picker from view.
       * @param  input  element - the input field attached to the date picker
       */
      _hideDatepicker: function(input) {
        var showAnim, duration, postProcess, onClose, inst = this._curInst;
        if (!inst || input && inst !== $2.data(input, "datepicker")) {
          return;
        }
        if (this._datepickerShowing) {
          showAnim = this._get(inst, "showAnim");
          duration = this._get(inst, "duration");
          postProcess = function() {
            $2.datepicker._tidyDialog(inst);
          };
          if ($2.effects && ($2.effects.effect[showAnim] || $2.effects[showAnim])) {
            inst.dpDiv.hide(showAnim, $2.datepicker._get(inst, "showOptions"), duration, postProcess);
          } else {
            inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
          }
          if (!showAnim) {
            postProcess();
          }
          this._datepickerShowing = false;
          onClose = this._get(inst, "onClose");
          if (onClose) {
            onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst]);
          }
          this._lastInput = null;
          if (this._inDialog) {
            this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
            if ($2.blockUI) {
              $2.unblockUI();
              $2("body").append(this.dpDiv);
            }
          }
          this._inDialog = false;
        }
      },
      /* Tidy up after a dialog display. */
      _tidyDialog: function(inst) {
        inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
      },
      /* Close date picker if clicked elsewhere. */
      _checkExternalClick: function(event) {
        if (!$2.datepicker._curInst) {
          return;
        }
        var $target = $2(event.target), inst = $2.datepicker._getInst($target[0]);
        if ($target[0].id !== $2.datepicker._mainDivId && $target.parents("#" + $2.datepicker._mainDivId).length === 0 && !$target.hasClass($2.datepicker.markerClassName) && !$target.closest("." + $2.datepicker._triggerClass).length && $2.datepicker._datepickerShowing && !($2.datepicker._inDialog && $2.blockUI) || $target.hasClass($2.datepicker.markerClassName) && $2.datepicker._curInst !== inst) {
          $2.datepicker._hideDatepicker();
        }
      },
      /* Adjust one of the date sub-fields. */
      _adjustDate: function(id, offset2, period) {
        var target = $2(id), inst = this._getInst(target[0]);
        if (this._isDisabledDatepicker(target[0])) {
          return;
        }
        this._adjustInstDate(inst, offset2, period);
        this._updateDatepicker(inst);
      },
      /* Action for current link. */
      _gotoToday: function(id) {
        var date, target = $2(id), inst = this._getInst(target[0]);
        if (this._get(inst, "gotoCurrent") && inst.currentDay) {
          inst.selectedDay = inst.currentDay;
          inst.drawMonth = inst.selectedMonth = inst.currentMonth;
          inst.drawYear = inst.selectedYear = inst.currentYear;
        } else {
          date = /* @__PURE__ */ new Date();
          inst.selectedDay = date.getDate();
          inst.drawMonth = inst.selectedMonth = date.getMonth();
          inst.drawYear = inst.selectedYear = date.getFullYear();
        }
        this._notifyChange(inst);
        this._adjustDate(target);
      },
      /* Action for selecting a new month/year. */
      _selectMonthYear: function(id, select, period) {
        var target = $2(id), inst = this._getInst(target[0]);
        inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
        this._notifyChange(inst);
        this._adjustDate(target);
      },
      /* Action for selecting a day. */
      _selectDay: function(id, month, year, td) {
        var inst, target = $2(id);
        if ($2(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
          return;
        }
        inst = this._getInst(target[0]);
        inst.selectedDay = inst.currentDay = parseInt($2("a", td).attr("data-date"));
        inst.selectedMonth = inst.currentMonth = month;
        inst.selectedYear = inst.currentYear = year;
        this._selectDate(id, this._formatDate(
          inst,
          inst.currentDay,
          inst.currentMonth,
          inst.currentYear
        ));
      },
      /* Erase the input field and hide the date picker. */
      _clearDate: function(id) {
        var target = $2(id);
        this._selectDate(target, "");
      },
      /* Update the input field with the selected date. */
      _selectDate: function(id, dateStr) {
        var onSelect, target = $2(id), inst = this._getInst(target[0]);
        dateStr = dateStr != null ? dateStr : this._formatDate(inst);
        if (inst.input) {
          inst.input.val(dateStr);
        }
        this._updateAlternate(inst);
        onSelect = this._get(inst, "onSelect");
        if (onSelect) {
          onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);
        } else if (inst.input) {
          inst.input.trigger("change");
        }
        if (inst.inline) {
          this._updateDatepicker(inst);
        } else {
          this._hideDatepicker();
          this._lastInput = inst.input[0];
          if (typeof inst.input[0] !== "object") {
            inst.input.trigger("focus");
          }
          this._lastInput = null;
        }
      },
      /* Update any alternate field to synchronise with the main field. */
      _updateAlternate: function(inst) {
        var altFormat, date, dateStr, altField = this._get(inst, "altField");
        if (altField) {
          altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
          date = this._getDate(inst);
          dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
          $2(document).find(altField).val(dateStr);
        }
      },
      /* Set as beforeShowDay function to prevent selection of weekends.
       * @param  date  Date - the date to customise
       * @return [boolean, string] - is this date selectable?, what is its CSS class?
       */
      noWeekends: function(date) {
        var day = date.getDay();
        return [day > 0 && day < 6, ""];
      },
      /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
       * @param  date  Date - the date to get the week for
       * @return  number - the number of the week within the year that contains this date
       */
      iso8601Week: function(date) {
        var time, checkDate = new Date(date.getTime());
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
      },
      /* Parse a string value into a date object.
       * See formatDate below for the possible formats.
       *
       * @param  format string - the expected format of the date
       * @param  value string - the date in the above format
       * @param  settings Object - attributes include:
       *					shortYearCutoff  number - the cutoff year for determining the century (optional)
       *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
       *					dayNames		string[7] - names of the days from Sunday (optional)
       *					monthNamesShort string[12] - abbreviated names of the months (optional)
       *					monthNames		string[12] - names of the months (optional)
       * @return  Date - the extracted date value or null if value is blank
       */
      parseDate: function(format, value, settings) {
        if (format == null || value == null) {
          throw "Invalid arguments";
        }
        value = typeof value === "object" ? value.toString() : value + "";
        if (value === "") {
          return null;
        }
        var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : (/* @__PURE__ */ new Date()).getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function(match) {
          var matches2 = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
          if (matches2) {
            iFormat++;
          }
          return matches2;
        }, getNumber = function(match) {
          var isDoubled = lookAhead(match), size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2, minSize = match === "y" ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
          if (!num) {
            throw "Missing number at position " + iValue;
          }
          iValue += num[0].length;
          return parseInt(num[0], 10);
        }, getName = function(match, shortNames, longNames) {
          var index = -1, names = $2.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
            return [[k, v]];
          }).sort(function(a, b) {
            return -(a[1].length - b[1].length);
          });
          $2.each(names, function(i, pair) {
            var name = pair[1];
            if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
              index = pair[0];
              iValue += name.length;
              return false;
            }
          });
          if (index !== -1) {
            return index + 1;
          } else {
            throw "Unknown name at position " + iValue;
          }
        }, checkLiteral = function() {
          if (value.charAt(iValue) !== format.charAt(iFormat)) {
            throw "Unexpected literal at position " + iValue;
          }
          iValue++;
        };
        for (iFormat = 0; iFormat < format.length; iFormat++) {
          if (literal) {
            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
              literal = false;
            } else {
              checkLiteral();
            }
          } else {
            switch (format.charAt(iFormat)) {
              case "d":
                day = getNumber("d");
                break;
              case "D":
                getName("D", dayNamesShort, dayNames);
                break;
              case "o":
                doy = getNumber("o");
                break;
              case "m":
                month = getNumber("m");
                break;
              case "M":
                month = getName("M", monthNamesShort, monthNames);
                break;
              case "y":
                year = getNumber("y");
                break;
              case "@":
                date = new Date(getNumber("@"));
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;
              case "!":
                date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;
              case "'":
                if (lookAhead("'")) {
                  checkLiteral();
                } else {
                  literal = true;
                }
                break;
              default:
                checkLiteral();
            }
          }
        }
        if (iValue < value.length) {
          extra = value.substr(iValue);
          if (!/^\s+/.test(extra)) {
            throw "Extra/unparsed characters found in date: " + extra;
          }
        }
        if (year === -1) {
          year = (/* @__PURE__ */ new Date()).getFullYear();
        } else if (year < 100) {
          year += (/* @__PURE__ */ new Date()).getFullYear() - (/* @__PURE__ */ new Date()).getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
        }
        if (doy > -1) {
          month = 1;
          day = doy;
          do {
            dim = this._getDaysInMonth(year, month - 1);
            if (day <= dim) {
              break;
            }
            month++;
            day -= dim;
          } while (true);
        }
        date = this._daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
          throw "Invalid date";
        }
        return date;
      },
      /* Standard date formats. */
      ATOM: "yy-mm-dd",
      // RFC 3339 (ISO 8601)
      COOKIE: "D, dd M yy",
      ISO_8601: "yy-mm-dd",
      RFC_822: "D, d M y",
      RFC_850: "DD, dd-M-y",
      RFC_1036: "D, d M y",
      RFC_1123: "D, d M yy",
      RFC_2822: "D, d M yy",
      RSS: "D, d M y",
      // RFC 822
      TICKS: "!",
      TIMESTAMP: "@",
      W3C: "yy-mm-dd",
      // ISO 8601
      _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7,
      /* Format a date object into a string value.
       * The format can be combinations of the following:
       * d  - day of month (no leading zero)
       * dd - day of month (two digit)
       * o  - day of year (no leading zeros)
       * oo - day of year (three digit)
       * D  - day name short
       * DD - day name long
       * m  - month of year (no leading zero)
       * mm - month of year (two digit)
       * M  - month name short
       * MM - month name long
       * y  - year (two digit)
       * yy - year (four digit)
       * @ - Unix timestamp (ms since 01/01/1970)
       * ! - Windows ticks (100ns since 01/01/0001)
       * "..." - literal text
       * '' - single quote
       *
       * @param  format string - the desired format of the date
       * @param  date Date - the date value to format
       * @param  settings Object - attributes include:
       *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
       *					dayNames		string[7] - names of the days from Sunday (optional)
       *					monthNamesShort string[12] - abbreviated names of the months (optional)
       *					monthNames		string[12] - names of the months (optional)
       * @return  string - the date in the above format
       */
      formatDate: function(format, date, settings) {
        if (!date) {
          return "";
        }
        var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function(match) {
          var matches2 = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
          if (matches2) {
            iFormat++;
          }
          return matches2;
        }, formatNumber = function(match, value, len) {
          var num = "" + value;
          if (lookAhead(match)) {
            while (num.length < len) {
              num = "0" + num;
            }
          }
          return num;
        }, formatName = function(match, value, shortNames, longNames) {
          return lookAhead(match) ? longNames[value] : shortNames[value];
        }, output = "", literal = false;
        if (date) {
          for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
              if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                literal = false;
              } else {
                output += format.charAt(iFormat);
              }
            } else {
              switch (format.charAt(iFormat)) {
                case "d":
                  output += formatNumber("d", date.getDate(), 2);
                  break;
                case "D":
                  output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                  break;
                case "o":
                  output += formatNumber(
                    "o",
                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5),
                    3
                  );
                  break;
                case "m":
                  output += formatNumber("m", date.getMonth() + 1, 2);
                  break;
                case "M":
                  output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                  break;
                case "y":
                  output += lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100;
                  break;
                case "@":
                  output += date.getTime();
                  break;
                case "!":
                  output += date.getTime() * 1e4 + this._ticksTo1970;
                  break;
                case "'":
                  if (lookAhead("'")) {
                    output += "'";
                  } else {
                    literal = true;
                  }
                  break;
                default:
                  output += format.charAt(iFormat);
              }
            }
          }
        }
        return output;
      },
      /* Extract all possible characters from the date format. */
      _possibleChars: function(format) {
        var iFormat, chars = "", literal = false, lookAhead = function(match) {
          var matches2 = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
          if (matches2) {
            iFormat++;
          }
          return matches2;
        };
        for (iFormat = 0; iFormat < format.length; iFormat++) {
          if (literal) {
            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
              literal = false;
            } else {
              chars += format.charAt(iFormat);
            }
          } else {
            switch (format.charAt(iFormat)) {
              case "d":
              case "m":
              case "y":
              case "@":
                chars += "0123456789";
                break;
              case "D":
              case "M":
                return null;
              case "'":
                if (lookAhead("'")) {
                  chars += "'";
                } else {
                  literal = true;
                }
                break;
              default:
                chars += format.charAt(iFormat);
            }
          }
        }
        return chars;
      },
      /* Get a setting value, defaulting if necessary. */
      _get: function(inst, name) {
        return inst.settings[name] !== void 0 ? inst.settings[name] : this._defaults[name];
      },
      /* Parse existing date and initialise date picker. */
      _setDateFromField: function(inst, noDefault) {
        if (inst.input.val() === inst.lastVal) {
          return;
        }
        var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
        try {
          date = this.parseDate(dateFormat, dates, settings) || defaultDate;
        } catch (event) {
          dates = noDefault ? "" : dates;
        }
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        inst.currentDay = dates ? date.getDate() : 0;
        inst.currentMonth = dates ? date.getMonth() : 0;
        inst.currentYear = dates ? date.getFullYear() : 0;
        this._adjustInstDate(inst);
      },
      /* Retrieve the default date shown on opening. */
      _getDefaultDate: function(inst) {
        return this._restrictMinMax(
          inst,
          this._determineDate(inst, this._get(inst, "defaultDate"), /* @__PURE__ */ new Date())
        );
      },
      /* A date may be specified as an exact value or a relative one. */
      _determineDate: function(inst, date, defaultDate) {
        var offsetNumeric = function(offset2) {
          var date2 = /* @__PURE__ */ new Date();
          date2.setDate(date2.getDate() + offset2);
          return date2;
        }, offsetString = function(offset2) {
          try {
            return $2.datepicker.parseDate(
              $2.datepicker._get(inst, "dateFormat"),
              offset2,
              $2.datepicker._getFormatConfig(inst)
            );
          } catch (e) {
          }
          var date2 = (offset2.toLowerCase().match(/^c/) ? $2.datepicker._getDate(inst) : null) || /* @__PURE__ */ new Date(), year = date2.getFullYear(), month = date2.getMonth(), day = date2.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches2 = pattern.exec(offset2);
          while (matches2) {
            switch (matches2[2] || "d") {
              case "d":
              case "D":
                day += parseInt(matches2[1], 10);
                break;
              case "w":
              case "W":
                day += parseInt(matches2[1], 10) * 7;
                break;
              case "m":
              case "M":
                month += parseInt(matches2[1], 10);
                day = Math.min(day, $2.datepicker._getDaysInMonth(year, month));
                break;
              case "y":
              case "Y":
                year += parseInt(matches2[1], 10);
                day = Math.min(day, $2.datepicker._getDaysInMonth(year, month));
                break;
            }
            matches2 = pattern.exec(offset2);
          }
          return new Date(year, month, day);
        }, newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
        newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
        if (newDate) {
          newDate.setHours(0);
          newDate.setMinutes(0);
          newDate.setSeconds(0);
          newDate.setMilliseconds(0);
        }
        return this._daylightSavingAdjust(newDate);
      },
      /* Handle switch to/from daylight saving.
       * Hours may be non-zero on daylight saving cut-over:
       * > 12 when midnight changeover, but then cannot generate
       * midnight datetime, so jump to 1AM, otherwise reset.
       * @param  date  (Date) the date to check
       * @return  (Date) the corrected date
       */
      _daylightSavingAdjust: function(date) {
        if (!date) {
          return null;
        }
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
      },
      /* Set the date(s) directly. */
      _setDate: function(inst, date, noChange) {
        var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, /* @__PURE__ */ new Date()));
        inst.selectedDay = inst.currentDay = newDate.getDate();
        inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
        inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
        if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
          this._notifyChange(inst);
        }
        this._adjustInstDate(inst);
        if (inst.input) {
          inst.input.val(clear ? "" : this._formatDate(inst));
        }
      },
      /* Retrieve the date(s) directly. */
      _getDate: function(inst) {
        var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(
          inst.currentYear,
          inst.currentMonth,
          inst.currentDay
        ));
        return startDate;
      },
      /* Attach the onxxx handlers.  These are declared statically so
       * they work with static code transformers like Caja.
       */
      _attachHandlers: function(inst) {
        var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
        inst.dpDiv.find("[data-handler]").map(function() {
          var handler = {
            prev: function() {
              $2.datepicker._adjustDate(id, -stepMonths, "M");
            },
            next: function() {
              $2.datepicker._adjustDate(id, +stepMonths, "M");
            },
            hide: function() {
              $2.datepicker._hideDatepicker();
            },
            today: function() {
              $2.datepicker._gotoToday(id);
            },
            selectDay: function() {
              $2.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
              return false;
            },
            selectMonth: function() {
              $2.datepicker._selectMonthYear(id, this, "M");
              return false;
            },
            selectYear: function() {
              $2.datepicker._selectMonthYear(id, this, "Y");
              return false;
            }
          };
          $2(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
        });
      },
      /* Generate the HTML for the current state of the date picker. */
      _generateHTML: function(inst) {
        var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = /* @__PURE__ */ new Date(), today = this._daylightSavingAdjust(
          new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())
        ), isRTL2 = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1, currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
        if (drawMonth < 0) {
          drawMonth += 12;
          drawYear--;
        }
        if (maxDate) {
          maxDraw = this._daylightSavingAdjust(new Date(
            maxDate.getFullYear(),
            maxDate.getMonth() - numMonths[0] * numMonths[1] + 1,
            maxDate.getDate()
          ));
          maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
          while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
            drawMonth--;
            if (drawMonth < 0) {
              drawMonth = 11;
              drawYear--;
            }
          }
        }
        inst.drawMonth = drawMonth;
        inst.drawYear = drawYear;
        prevText = this._get(inst, "prevText");
        prevText = !navigationAsDateFormat ? prevText : this.formatDate(
          prevText,
          this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
          this._getFormatConfig(inst)
        );
        if (this._canAdjustMonth(inst, -1, drawYear, drawMonth)) {
          prev = $2("<a>").attr({
            "class": "ui-datepicker-prev ui-corner-all",
            "data-handler": "prev",
            "data-event": "click",
            title: prevText
          }).append(
            $2("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL2 ? "e" : "w")).text(prevText)
          )[0].outerHTML;
        } else if (hideIfNoPrevNext) {
          prev = "";
        } else {
          prev = $2("<a>").attr({
            "class": "ui-datepicker-prev ui-corner-all ui-state-disabled",
            title: prevText
          }).append(
            $2("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL2 ? "e" : "w")).text(prevText)
          )[0].outerHTML;
        }
        nextText = this._get(inst, "nextText");
        nextText = !navigationAsDateFormat ? nextText : this.formatDate(
          nextText,
          this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
          this._getFormatConfig(inst)
        );
        if (this._canAdjustMonth(inst, 1, drawYear, drawMonth)) {
          next = $2("<a>").attr({
            "class": "ui-datepicker-next ui-corner-all",
            "data-handler": "next",
            "data-event": "click",
            title: nextText
          }).append(
            $2("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL2 ? "w" : "e")).text(nextText)
          )[0].outerHTML;
        } else if (hideIfNoPrevNext) {
          next = "";
        } else {
          next = $2("<a>").attr({
            "class": "ui-datepicker-next ui-corner-all ui-state-disabled",
            title: nextText
          }).append(
            $2("<span>").attr("class", "ui-icon ui-icon-circle-triangle-" + (isRTL2 ? "w" : "e")).text(nextText)
          )[0].outerHTML;
        }
        currentText = this._get(inst, "currentText");
        gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
        currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));
        controls = "";
        if (!inst.inline) {
          controls = $2("<button>").attr({
            type: "button",
            "class": "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
            "data-handler": "hide",
            "data-event": "click"
          }).text(this._get(inst, "closeText"))[0].outerHTML;
        }
        buttonPanel = "";
        if (showButtonPanel) {
          buttonPanel = $2("<div class='ui-datepicker-buttonpane ui-widget-content'>").append(isRTL2 ? controls : "").append(this._isInRange(inst, gotoDate) ? $2("<button>").attr({
            type: "button",
            "class": "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
            "data-handler": "today",
            "data-event": "click"
          }).text(currentText) : "").append(isRTL2 ? "" : controls)[0].outerHTML;
        }
        firstDay = parseInt(this._get(inst, "firstDay"), 10);
        firstDay = isNaN(firstDay) ? 0 : firstDay;
        showWeek = this._get(inst, "showWeek");
        dayNames = this._get(inst, "dayNames");
        dayNamesMin = this._get(inst, "dayNamesMin");
        monthNames = this._get(inst, "monthNames");
        monthNamesShort = this._get(inst, "monthNamesShort");
        beforeShowDay = this._get(inst, "beforeShowDay");
        showOtherMonths = this._get(inst, "showOtherMonths");
        selectOtherMonths = this._get(inst, "selectOtherMonths");
        defaultDate = this._getDefaultDate(inst);
        html = "";
        for (row = 0; row < numMonths[0]; row++) {
          group = "";
          this.maxRows = 4;
          for (col = 0; col < numMonths[1]; col++) {
            selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
            cornerClass = " ui-corner-all";
            calender = "";
            if (isMultiMonth) {
              calender += "<div class='ui-datepicker-group";
              if (numMonths[1] > 1) {
                switch (col) {
                  case 0:
                    calender += " ui-datepicker-group-first";
                    cornerClass = " ui-corner-" + (isRTL2 ? "right" : "left");
                    break;
                  case numMonths[1] - 1:
                    calender += " ui-datepicker-group-last";
                    cornerClass = " ui-corner-" + (isRTL2 ? "left" : "right");
                    break;
                  default:
                    calender += " ui-datepicker-group-middle";
                    cornerClass = "";
                    break;
                }
              }
              calender += "'>";
            }
            calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL2 ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL2 ? prev : next : "") + this._generateMonthYearHeader(
              inst,
              drawMonth,
              drawYear,
              minDate,
              maxDate,
              row > 0 || col > 0,
              monthNames,
              monthNamesShort
            ) + // draw month headers
            "</div><table class='ui-datepicker-calendar'><thead><tr>";
            thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
            for (dow = 0; dow < 7; dow++) {
              day = (dow + firstDay) % 7;
              thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
            }
            calender += thead + "</tr></thead><tbody>";
            daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
            if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
              inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
            }
            leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
            curRows = Math.ceil((leadDays + daysInMonth) / 7);
            numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;
            this.maxRows = numRows;
            printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
            for (dRow = 0; dRow < numRows; dRow++) {
              calender += "<tr>";
              tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
              for (dow = 0; dow < 7; dow++) {
                daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
                otherMonth = printDate.getMonth() !== drawMonth;
                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
                (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
                (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key
                defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? (
                  // or defaultDate is current printedDate and defaultDate is selectedDate
                  " " + this._dayOverClass
                ) : "") + // highlight selected day
                (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + // highlight unselectable days
                (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
                (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
                (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
                ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
                (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
                (otherMonth && !showOtherMonths ? "&#xa0;" : (
                  // display for other months
                  unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
                  (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                  "' href='#' aria-current='" + (printDate.getTime() === currentDate.getTime() ? "true" : "false") + // mark date as selected for screen reader
                  "' data-date='" + printDate.getDate() + // store date as data
                  "'>" + printDate.getDate() + "</a>"
                )) + "</td>";
                printDate.setDate(printDate.getDate() + 1);
                printDate = this._daylightSavingAdjust(printDate);
              }
              calender += tbody + "</tr>";
            }
            drawMonth++;
            if (drawMonth > 11) {
              drawMonth = 0;
              drawYear++;
            }
            calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
            group += calender;
          }
          html += group;
        }
        html += buttonPanel;
        inst._keyEvent = false;
        return html;
      },
      /* Generate the month and year header. */
      _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
        var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), selectMonthLabel = this._get(inst, "selectMonthLabel"), selectYearLabel = this._get(inst, "selectYearLabel"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
        if (secondary || !changeMonth) {
          monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
        } else {
          inMinYear = minDate && minDate.getFullYear() === drawYear;
          inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
          monthHtml += "<select class='ui-datepicker-month' aria-label='" + selectMonthLabel + "' data-handler='selectMonth' data-event='change'>";
          for (month = 0; month < 12; month++) {
            if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
              monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
            }
          }
          monthHtml += "</select>";
        }
        if (!showMonthAfterYear) {
          html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
        }
        if (!inst.yearshtml) {
          inst.yearshtml = "";
          if (secondary || !changeYear) {
            html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
          } else {
            years = this._get(inst, "yearRange").split(":");
            thisYear = (/* @__PURE__ */ new Date()).getFullYear();
            determineYear = function(value) {
              var year2 = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
              return isNaN(year2) ? thisYear : year2;
            };
            year = determineYear(years[0]);
            endYear = Math.max(year, determineYear(years[1] || ""));
            year = minDate ? Math.max(year, minDate.getFullYear()) : year;
            endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
            inst.yearshtml += "<select class='ui-datepicker-year' aria-label='" + selectYearLabel + "' data-handler='selectYear' data-event='change'>";
            for (; year <= endYear; year++) {
              inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
            }
            inst.yearshtml += "</select>";
            html += inst.yearshtml;
            inst.yearshtml = null;
          }
        }
        html += this._get(inst, "yearSuffix");
        if (showMonthAfterYear) {
          html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
        }
        html += "</div>";
        return html;
      },
      /* Adjust one of the date sub-fields. */
      _adjustInstDate: function(inst, offset2, period) {
        var year = inst.selectedYear + (period === "Y" ? offset2 : 0), month = inst.selectedMonth + (period === "M" ? offset2 : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset2 : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        if (period === "M" || period === "Y") {
          this._notifyChange(inst);
        }
      },
      /* Ensure a date is within any min/max bounds. */
      _restrictMinMax: function(inst, date) {
        var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && date < minDate ? minDate : date;
        return maxDate && newDate > maxDate ? maxDate : newDate;
      },
      /* Notify change of month/year. */
      _notifyChange: function(inst) {
        var onChange = this._get(inst, "onChangeMonthYear");
        if (onChange) {
          onChange.apply(
            inst.input ? inst.input[0] : null,
            [inst.selectedYear, inst.selectedMonth + 1, inst]
          );
        }
      },
      /* Determine the number of months to show. */
      _getNumberOfMonths: function(inst) {
        var numMonths = this._get(inst, "numberOfMonths");
        return numMonths == null ? [1, 1] : typeof numMonths === "number" ? [1, numMonths] : numMonths;
      },
      /* Determine the current maximum date - ensure no time components are set. */
      _getMinMaxDate: function(inst, minMax) {
        return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
      },
      /* Find the number of days in a given month. */
      _getDaysInMonth: function(year, month) {
        return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
      },
      /* Find the day of the week of the first of a month. */
      _getFirstDayOfMonth: function(year, month) {
        return new Date(year, month, 1).getDay();
      },
      /* Determines if we should allow a "next/prev" month display change. */
      _canAdjustMonth: function(inst, offset2, curYear, curMonth) {
        var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(
          curYear,
          curMonth + (offset2 < 0 ? offset2 : numMonths[0] * numMonths[1]),
          1
        ));
        if (offset2 < 0) {
          date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
        }
        return this._isInRange(inst, date);
      },
      /* Is the given date in the accepted range? */
      _isInRange: function(inst, date) {
        var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
        if (years) {
          yearSplit = years.split(":");
          currentYear = (/* @__PURE__ */ new Date()).getFullYear();
          minYear = parseInt(yearSplit[0], 10);
          maxYear = parseInt(yearSplit[1], 10);
          if (yearSplit[0].match(/[+\-].*/)) {
            minYear += currentYear;
          }
          if (yearSplit[1].match(/[+\-].*/)) {
            maxYear += currentYear;
          }
        }
        return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
      },
      /* Provide the configuration settings for formatting/parsing. */
      _getFormatConfig: function(inst) {
        var shortYearCutoff = this._get(inst, "shortYearCutoff");
        shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : (/* @__PURE__ */ new Date()).getFullYear() % 100 + parseInt(shortYearCutoff, 10);
        return {
          shortYearCutoff,
          dayNamesShort: this._get(inst, "dayNamesShort"),
          dayNames: this._get(inst, "dayNames"),
          monthNamesShort: this._get(inst, "monthNamesShort"),
          monthNames: this._get(inst, "monthNames")
        };
      },
      /* Format the given date for display. */
      _formatDate: function(inst, day, month, year) {
        if (!day) {
          inst.currentDay = inst.selectedDay;
          inst.currentMonth = inst.selectedMonth;
          inst.currentYear = inst.selectedYear;
        }
        var date = day ? typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
        return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
      }
    });
    function datepicker_bindHover(dpDiv) {
      var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
      return dpDiv.on("mouseout", selector, function() {
        $2(this).removeClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
          $2(this).removeClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
          $2(this).removeClass("ui-datepicker-next-hover");
        }
      }).on("mouseover", selector, datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
      if (!$2.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
        $2(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
        $2(this).addClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
          $2(this).addClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
          $2(this).addClass("ui-datepicker-next-hover");
        }
      }
    }
    function datepicker_extendRemove(target, props) {
      $2.extend(target, props);
      for (var name in props) {
        if (props[name] == null) {
          target[name] = props[name];
        }
      }
      return target;
    }
    $2.fn.datepicker = function(options) {
      if (!this.length) {
        return this;
      }
      if (!$2.datepicker.initialized) {
        $2(document).on("mousedown", $2.datepicker._checkExternalClick);
        $2.datepicker.initialized = true;
      }
      if ($2("#" + $2.datepicker._mainDivId).length === 0) {
        $2("body").append($2.datepicker.dpDiv);
      }
      var otherArgs = Array.prototype.slice.call(arguments, 1);
      if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
        return $2.datepicker["_" + options + "Datepicker"].apply($2.datepicker, [this[0]].concat(otherArgs));
      }
      if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
        return $2.datepicker["_" + options + "Datepicker"].apply($2.datepicker, [this[0]].concat(otherArgs));
      }
      return this.each(function() {
        if (typeof options === "string") {
          $2.datepicker["_" + options + "Datepicker"].apply($2.datepicker, [this].concat(otherArgs));
        } else {
          $2.datepicker._attachDatepicker(this, options);
        }
      });
    };
    $2.datepicker = new Datepicker();
    $2.datepicker.initialized = false;
    $2.datepicker.uuid = (/* @__PURE__ */ new Date()).getTime();
    $2.datepicker.version = "1.13.0";
    var widgetsDatepicker = $2.datepicker;
    $2.widget("ui.dialog", {
      version: "1.13.0",
      options: {
        appendTo: "body",
        autoOpen: true,
        buttons: [],
        classes: {
          "ui-dialog": "ui-corner-all",
          "ui-dialog-titlebar": "ui-corner-all"
        },
        closeOnEscape: true,
        closeText: "Close",
        draggable: true,
        hide: null,
        height: "auto",
        maxHeight: null,
        maxWidth: null,
        minHeight: 150,
        minWidth: 150,
        modal: false,
        position: {
          my: "center",
          at: "center",
          of: window,
          collision: "fit",
          // Ensure the titlebar is always visible
          using: function(pos) {
            var topOffset = $2(this).css(pos).offset().top;
            if (topOffset < 0) {
              $2(this).css("top", pos.top - topOffset);
            }
          }
        },
        resizable: true,
        show: null,
        title: null,
        width: 300,
        // Callbacks
        beforeClose: null,
        close: null,
        drag: null,
        dragStart: null,
        dragStop: null,
        focus: null,
        open: null,
        resize: null,
        resizeStart: null,
        resizeStop: null
      },
      sizeRelatedOptions: {
        buttons: true,
        height: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        width: true
      },
      resizableRelatedOptions: {
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true
      },
      _create: function() {
        this.originalCss = {
          display: this.element[0].style.display,
          width: this.element[0].style.width,
          minHeight: this.element[0].style.minHeight,
          maxHeight: this.element[0].style.maxHeight,
          height: this.element[0].style.height
        };
        this.originalPosition = {
          parent: this.element.parent(),
          index: this.element.parent().children().index(this.element)
        };
        this.originalTitle = this.element.attr("title");
        if (this.options.title == null && this.originalTitle != null) {
          this.options.title = this.originalTitle;
        }
        if (this.options.disabled) {
          this.options.disabled = false;
        }
        this._createWrapper();
        this.element.show().removeAttr("title").appendTo(this.uiDialog);
        this._addClass("ui-dialog-content", "ui-widget-content");
        this._createTitlebar();
        this._createButtonPane();
        if (this.options.draggable && $2.fn.draggable) {
          this._makeDraggable();
        }
        if (this.options.resizable && $2.fn.resizable) {
          this._makeResizable();
        }
        this._isOpen = false;
        this._trackFocus();
      },
      _init: function() {
        if (this.options.autoOpen) {
          this.open();
        }
      },
      _appendTo: function() {
        var element = this.options.appendTo;
        if (element && (element.jquery || element.nodeType)) {
          return $2(element);
        }
        return this.document.find(element || "body").eq(0);
      },
      _destroy: function() {
        var next, originalPosition = this.originalPosition;
        this._untrackInstance();
        this._destroyOverlay();
        this.element.removeUniqueId().css(this.originalCss).detach();
        this.uiDialog.remove();
        if (this.originalTitle) {
          this.element.attr("title", this.originalTitle);
        }
        next = originalPosition.parent.children().eq(originalPosition.index);
        if (next.length && next[0] !== this.element[0]) {
          next.before(this.element);
        } else {
          originalPosition.parent.append(this.element);
        }
      },
      widget: function() {
        return this.uiDialog;
      },
      disable: $2.noop,
      enable: $2.noop,
      close: function(event) {
        var that = this;
        if (!this._isOpen || this._trigger("beforeClose", event) === false) {
          return;
        }
        this._isOpen = false;
        this._focusedElement = null;
        this._destroyOverlay();
        this._untrackInstance();
        if (!this.opener.filter(":focusable").trigger("focus").length) {
          $2.ui.safeBlur($2.ui.safeActiveElement(this.document[0]));
        }
        this._hide(this.uiDialog, this.options.hide, function() {
          that._trigger("close", event);
        });
      },
      isOpen: function() {
        return this._isOpen;
      },
      moveToTop: function() {
        this._moveToTop();
      },
      _moveToTop: function(event, silent) {
        var moved = false, zIndices = this.uiDialog.siblings(".ui-front:visible").map(function() {
          return +$2(this).css("z-index");
        }).get(), zIndexMax = Math.max.apply(null, zIndices);
        if (zIndexMax >= +this.uiDialog.css("z-index")) {
          this.uiDialog.css("z-index", zIndexMax + 1);
          moved = true;
        }
        if (moved && !silent) {
          this._trigger("focus", event);
        }
        return moved;
      },
      open: function() {
        var that = this;
        if (this._isOpen) {
          if (this._moveToTop()) {
            this._focusTabbable();
          }
          return;
        }
        this._isOpen = true;
        this.opener = $2($2.ui.safeActiveElement(this.document[0]));
        this._size();
        this._position();
        this._createOverlay();
        this._moveToTop(null, true);
        if (this.overlay) {
          this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
        }
        this._show(this.uiDialog, this.options.show, function() {
          that._focusTabbable();
          that._trigger("focus");
        });
        this._makeFocusTarget();
        this._trigger("open");
      },
      _focusTabbable: function() {
        var hasFocus = this._focusedElement;
        if (!hasFocus) {
          hasFocus = this.element.find("[autofocus]");
        }
        if (!hasFocus.length) {
          hasFocus = this.element.find(":tabbable");
        }
        if (!hasFocus.length) {
          hasFocus = this.uiDialogButtonPane.find(":tabbable");
        }
        if (!hasFocus.length) {
          hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
        }
        if (!hasFocus.length) {
          hasFocus = this.uiDialog;
        }
        hasFocus.eq(0).trigger("focus");
      },
      _restoreTabbableFocus: function() {
        var activeElement = $2.ui.safeActiveElement(this.document[0]), isActive = this.uiDialog[0] === activeElement || $2.contains(this.uiDialog[0], activeElement);
        if (!isActive) {
          this._focusTabbable();
        }
      },
      _keepFocus: function(event) {
        event.preventDefault();
        this._restoreTabbableFocus();
        this._delay(this._restoreTabbableFocus);
      },
      _createWrapper: function() {
        this.uiDialog = $2("<div>").hide().attr({
          // Setting tabIndex makes the div focusable
          tabIndex: -1,
          role: "dialog"
        }).appendTo(this._appendTo());
        this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front");
        this._on(this.uiDialog, {
          keydown: function(event) {
            if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $2.ui.keyCode.ESCAPE) {
              event.preventDefault();
              this.close(event);
              return;
            }
            if (event.keyCode !== $2.ui.keyCode.TAB || event.isDefaultPrevented()) {
              return;
            }
            var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.first(), last = tabbables.last();
            if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
              this._delay(function() {
                first.trigger("focus");
              });
              event.preventDefault();
            } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
              this._delay(function() {
                last.trigger("focus");
              });
              event.preventDefault();
            }
          },
          mousedown: function(event) {
            if (this._moveToTop(event)) {
              this._focusTabbable();
            }
          }
        });
        if (!this.element.find("[aria-describedby]").length) {
          this.uiDialog.attr({
            "aria-describedby": this.element.uniqueId().attr("id")
          });
        }
      },
      _createTitlebar: function() {
        var uiDialogTitle;
        this.uiDialogTitlebar = $2("<div>");
        this._addClass(
          this.uiDialogTitlebar,
          "ui-dialog-titlebar",
          "ui-widget-header ui-helper-clearfix"
        );
        this._on(this.uiDialogTitlebar, {
          mousedown: function(event) {
            if (!$2(event.target).closest(".ui-dialog-titlebar-close")) {
              this.uiDialog.trigger("focus");
            }
          }
        });
        this.uiDialogTitlebarClose = $2("<button type='button'></button>").button({
          label: $2("<a>").text(this.options.closeText).html(),
          icon: "ui-icon-closethick",
          showLabel: false
        }).appendTo(this.uiDialogTitlebar);
        this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close");
        this._on(this.uiDialogTitlebarClose, {
          click: function(event) {
            event.preventDefault();
            this.close(event);
          }
        });
        uiDialogTitle = $2("<span>").uniqueId().prependTo(this.uiDialogTitlebar);
        this._addClass(uiDialogTitle, "ui-dialog-title");
        this._title(uiDialogTitle);
        this.uiDialogTitlebar.prependTo(this.uiDialog);
        this.uiDialog.attr({
          "aria-labelledby": uiDialogTitle.attr("id")
        });
      },
      _title: function(title) {
        if (this.options.title) {
          title.text(this.options.title);
        } else {
          title.html("&#160;");
        }
      },
      _createButtonPane: function() {
        this.uiDialogButtonPane = $2("<div>");
        this._addClass(
          this.uiDialogButtonPane,
          "ui-dialog-buttonpane",
          "ui-widget-content ui-helper-clearfix"
        );
        this.uiButtonSet = $2("<div>").appendTo(this.uiDialogButtonPane);
        this._addClass(this.uiButtonSet, "ui-dialog-buttonset");
        this._createButtons();
      },
      _createButtons: function() {
        var that = this, buttons = this.options.buttons;
        this.uiDialogButtonPane.remove();
        this.uiButtonSet.empty();
        if ($2.isEmptyObject(buttons) || Array.isArray(buttons) && !buttons.length) {
          this._removeClass(this.uiDialog, "ui-dialog-buttons");
          return;
        }
        $2.each(buttons, function(name, props) {
          var click, buttonOptions;
          props = typeof props === "function" ? { click: props, text: name } : props;
          props = $2.extend({ type: "button" }, props);
          click = props.click;
          buttonOptions = {
            icon: props.icon,
            iconPosition: props.iconPosition,
            showLabel: props.showLabel,
            // Deprecated options
            icons: props.icons,
            text: props.text
          };
          delete props.click;
          delete props.icon;
          delete props.iconPosition;
          delete props.showLabel;
          delete props.icons;
          if (typeof props.text === "boolean") {
            delete props.text;
          }
          $2("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet).on("click", function() {
            click.apply(that.element[0], arguments);
          });
        });
        this._addClass(this.uiDialog, "ui-dialog-buttons");
        this.uiDialogButtonPane.appendTo(this.uiDialog);
      },
      _makeDraggable: function() {
        var that = this, options = this.options;
        function filteredUi(ui) {
          return {
            position: ui.position,
            offset: ui.offset
          };
        }
        this.uiDialog.draggable({
          cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
          handle: ".ui-dialog-titlebar",
          containment: "document",
          start: function(event, ui) {
            that._addClass($2(this), "ui-dialog-dragging");
            that._blockFrames();
            that._trigger("dragStart", event, filteredUi(ui));
          },
          drag: function(event, ui) {
            that._trigger("drag", event, filteredUi(ui));
          },
          stop: function(event, ui) {
            var left3 = ui.offset.left - that.document.scrollLeft(), top3 = ui.offset.top - that.document.scrollTop();
            options.position = {
              my: "left top",
              at: "left" + (left3 >= 0 ? "+" : "") + left3 + " top" + (top3 >= 0 ? "+" : "") + top3,
              of: that.window
            };
            that._removeClass($2(this), "ui-dialog-dragging");
            that._unblockFrames();
            that._trigger("dragStop", event, filteredUi(ui));
          }
        });
      },
      _makeResizable: function() {
        var that = this, options = this.options, handles = options.resizable, position2 = this.uiDialog.css("position"), resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";
        function filteredUi(ui) {
          return {
            originalPosition: ui.originalPosition,
            originalSize: ui.originalSize,
            position: ui.position,
            size: ui.size
          };
        }
        this.uiDialog.resizable({
          cancel: ".ui-dialog-content",
          containment: "document",
          alsoResize: this.element,
          maxWidth: options.maxWidth,
          maxHeight: options.maxHeight,
          minWidth: options.minWidth,
          minHeight: this._minHeight(),
          handles: resizeHandles,
          start: function(event, ui) {
            that._addClass($2(this), "ui-dialog-resizing");
            that._blockFrames();
            that._trigger("resizeStart", event, filteredUi(ui));
          },
          resize: function(event, ui) {
            that._trigger("resize", event, filteredUi(ui));
          },
          stop: function(event, ui) {
            var offset2 = that.uiDialog.offset(), left3 = offset2.left - that.document.scrollLeft(), top3 = offset2.top - that.document.scrollTop();
            options.height = that.uiDialog.height();
            options.width = that.uiDialog.width();
            options.position = {
              my: "left top",
              at: "left" + (left3 >= 0 ? "+" : "") + left3 + " top" + (top3 >= 0 ? "+" : "") + top3,
              of: that.window
            };
            that._removeClass($2(this), "ui-dialog-resizing");
            that._unblockFrames();
            that._trigger("resizeStop", event, filteredUi(ui));
          }
        }).css("position", position2);
      },
      _trackFocus: function() {
        this._on(this.widget(), {
          focusin: function(event) {
            this._makeFocusTarget();
            this._focusedElement = $2(event.target);
          }
        });
      },
      _makeFocusTarget: function() {
        this._untrackInstance();
        this._trackingInstances().unshift(this);
      },
      _untrackInstance: function() {
        var instances = this._trackingInstances(), exists = $2.inArray(this, instances);
        if (exists !== -1) {
          instances.splice(exists, 1);
        }
      },
      _trackingInstances: function() {
        var instances = this.document.data("ui-dialog-instances");
        if (!instances) {
          instances = [];
          this.document.data("ui-dialog-instances", instances);
        }
        return instances;
      },
      _minHeight: function() {
        var options = this.options;
        return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height);
      },
      _position: function() {
        var isVisible2 = this.uiDialog.is(":visible");
        if (!isVisible2) {
          this.uiDialog.show();
        }
        this.uiDialog.position(this.options.position);
        if (!isVisible2) {
          this.uiDialog.hide();
        }
      },
      _setOptions: function(options) {
        var that = this, resize = false, resizableOptions = {};
        $2.each(options, function(key, value) {
          that._setOption(key, value);
          if (key in that.sizeRelatedOptions) {
            resize = true;
          }
          if (key in that.resizableRelatedOptions) {
            resizableOptions[key] = value;
          }
        });
        if (resize) {
          this._size();
          this._position();
        }
        if (this.uiDialog.is(":data(ui-resizable)")) {
          this.uiDialog.resizable("option", resizableOptions);
        }
      },
      _setOption: function(key, value) {
        var isDraggable, isResizable, uiDialog = this.uiDialog;
        if (key === "disabled") {
          return;
        }
        this._super(key, value);
        if (key === "appendTo") {
          this.uiDialog.appendTo(this._appendTo());
        }
        if (key === "buttons") {
          this._createButtons();
        }
        if (key === "closeText") {
          this.uiDialogTitlebarClose.button({
            // Ensure that we always pass a string
            label: $2("<a>").text("" + this.options.closeText).html()
          });
        }
        if (key === "draggable") {
          isDraggable = uiDialog.is(":data(ui-draggable)");
          if (isDraggable && !value) {
            uiDialog.draggable("destroy");
          }
          if (!isDraggable && value) {
            this._makeDraggable();
          }
        }
        if (key === "position") {
          this._position();
        }
        if (key === "resizable") {
          isResizable = uiDialog.is(":data(ui-resizable)");
          if (isResizable && !value) {
            uiDialog.resizable("destroy");
          }
          if (isResizable && typeof value === "string") {
            uiDialog.resizable("option", "handles", value);
          }
          if (!isResizable && value !== false) {
            this._makeResizable();
          }
        }
        if (key === "title") {
          this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
        }
      },
      _size: function() {
        var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
        this.element.show().css({
          width: "auto",
          minHeight: 0,
          maxHeight: "none",
          height: 0
        });
        if (options.minWidth > options.width) {
          options.width = options.minWidth;
        }
        nonContentHeight = this.uiDialog.css({
          height: "auto",
          width: options.width
        }).outerHeight();
        minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
        maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
        if (options.height === "auto") {
          this.element.css({
            minHeight: minContentHeight,
            maxHeight: maxContentHeight,
            height: "auto"
          });
        } else {
          this.element.height(Math.max(0, options.height - nonContentHeight));
        }
        if (this.uiDialog.is(":data(ui-resizable)")) {
          this.uiDialog.resizable("option", "minHeight", this._minHeight());
        }
      },
      _blockFrames: function() {
        this.iframeBlocks = this.document.find("iframe").map(function() {
          var iframe = $2(this);
          return $2("<div>").css({
            position: "absolute",
            width: iframe.outerWidth(),
            height: iframe.outerHeight()
          }).appendTo(iframe.parent()).offset(iframe.offset())[0];
        });
      },
      _unblockFrames: function() {
        if (this.iframeBlocks) {
          this.iframeBlocks.remove();
          delete this.iframeBlocks;
        }
      },
      _allowInteraction: function(event) {
        if ($2(event.target).closest(".ui-dialog").length) {
          return true;
        }
        return !!$2(event.target).closest(".ui-datepicker").length;
      },
      _createOverlay: function() {
        if (!this.options.modal) {
          return;
        }
        var jqMinor = $2.fn.jquery.substring(0, 4);
        var isOpening = true;
        this._delay(function() {
          isOpening = false;
        });
        if (!this.document.data("ui-dialog-overlays")) {
          this.document.on("focusin.ui-dialog", function(event) {
            if (isOpening) {
              return;
            }
            var instance = this._trackingInstances()[0];
            if (!instance._allowInteraction(event)) {
              event.preventDefault();
              instance._focusTabbable();
              if (jqMinor === "3.4." || jqMinor === "3.5.") {
                instance._delay(instance._restoreTabbableFocus);
              }
            }
          }.bind(this));
        }
        this.overlay = $2("<div>").appendTo(this._appendTo());
        this._addClass(this.overlay, null, "ui-widget-overlay ui-front");
        this._on(this.overlay, {
          mousedown: "_keepFocus"
        });
        this.document.data(
          "ui-dialog-overlays",
          (this.document.data("ui-dialog-overlays") || 0) + 1
        );
      },
      _destroyOverlay: function() {
        if (!this.options.modal) {
          return;
        }
        if (this.overlay) {
          var overlays = this.document.data("ui-dialog-overlays") - 1;
          if (!overlays) {
            this.document.off("focusin.ui-dialog");
            this.document.removeData("ui-dialog-overlays");
          } else {
            this.document.data("ui-dialog-overlays", overlays);
          }
          this.overlay.remove();
          this.overlay = null;
        }
      }
    });
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.dialog", $2.ui.dialog, {
        options: {
          dialogClass: ""
        },
        _createWrapper: function() {
          this._super();
          this.uiDialog.addClass(this.options.dialogClass);
        },
        _setOption: function(key, value) {
          if (key === "dialogClass") {
            this.uiDialog.removeClass(this.options.dialogClass).addClass(value);
          }
          this._superApply(arguments);
        }
      });
    }
    var widgetsDialog = $2.ui.dialog;
    var widgetsProgressbar = $2.widget("ui.progressbar", {
      version: "1.13.0",
      options: {
        classes: {
          "ui-progressbar": "ui-corner-all",
          "ui-progressbar-value": "ui-corner-left",
          "ui-progressbar-complete": "ui-corner-right"
        },
        max: 100,
        value: 0,
        change: null,
        complete: null
      },
      min: 0,
      _create: function() {
        this.oldValue = this.options.value = this._constrainedValue();
        this.element.attr({
          // Only set static values; aria-valuenow and aria-valuemax are
          // set inside _refreshValue()
          role: "progressbar",
          "aria-valuemin": this.min
        });
        this._addClass("ui-progressbar", "ui-widget ui-widget-content");
        this.valueDiv = $2("<div>").appendTo(this.element);
        this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header");
        this._refreshValue();
      },
      _destroy: function() {
        this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow");
        this.valueDiv.remove();
      },
      value: function(newValue) {
        if (newValue === void 0) {
          return this.options.value;
        }
        this.options.value = this._constrainedValue(newValue);
        this._refreshValue();
      },
      _constrainedValue: function(newValue) {
        if (newValue === void 0) {
          newValue = this.options.value;
        }
        this.indeterminate = newValue === false;
        if (typeof newValue !== "number") {
          newValue = 0;
        }
        return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
      },
      _setOptions: function(options) {
        var value = options.value;
        delete options.value;
        this._super(options);
        this.options.value = this._constrainedValue(value);
        this._refreshValue();
      },
      _setOption: function(key, value) {
        if (key === "max") {
          value = Math.max(this.min, value);
        }
        this._super(key, value);
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this.element.attr("aria-disabled", value);
        this._toggleClass(null, "ui-state-disabled", !!value);
      },
      _percentage: function() {
        return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
      },
      _refreshValue: function() {
        var value = this.options.value, percentage = this._percentage();
        this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + "%");
        this._toggleClass(
          this.valueDiv,
          "ui-progressbar-complete",
          null,
          value === this.options.max
        )._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate);
        if (this.indeterminate) {
          this.element.removeAttr("aria-valuenow");
          if (!this.overlayDiv) {
            this.overlayDiv = $2("<div>").appendTo(this.valueDiv);
            this._addClass(this.overlayDiv, "ui-progressbar-overlay");
          }
        } else {
          this.element.attr({
            "aria-valuemax": this.options.max,
            "aria-valuenow": value
          });
          if (this.overlayDiv) {
            this.overlayDiv.remove();
            this.overlayDiv = null;
          }
        }
        if (this.oldValue !== value) {
          this.oldValue = value;
          this._trigger("change");
        }
        if (value === this.options.max) {
          this._trigger("complete");
        }
      }
    });
    var widgetsSelectmenu = $2.widget("ui.selectmenu", [$2.ui.formResetMixin, {
      version: "1.13.0",
      defaultElement: "<select>",
      options: {
        appendTo: null,
        classes: {
          "ui-selectmenu-button-open": "ui-corner-top",
          "ui-selectmenu-button-closed": "ui-corner-all"
        },
        disabled: null,
        icons: {
          button: "ui-icon-triangle-1-s"
        },
        position: {
          my: "left top",
          at: "left bottom",
          collision: "none"
        },
        width: false,
        // Callbacks
        change: null,
        close: null,
        focus: null,
        open: null,
        select: null
      },
      _create: function() {
        var selectmenuId = this.element.uniqueId().attr("id");
        this.ids = {
          element: selectmenuId,
          button: selectmenuId + "-button",
          menu: selectmenuId + "-menu"
        };
        this._drawButton();
        this._drawMenu();
        this._bindFormResetHandler();
        this._rendered = false;
        this.menuItems = $2();
      },
      _drawButton: function() {
        var icon, that = this, item = this._parseOption(
          this.element.find("option:selected"),
          this.element[0].selectedIndex
        );
        this.labels = this.element.labels().attr("for", this.ids.button);
        this._on(this.labels, {
          click: function(event) {
            this.button.trigger("focus");
            event.preventDefault();
          }
        });
        this.element.hide();
        this.button = $2("<span>", {
          tabindex: this.options.disabled ? -1 : 0,
          id: this.ids.button,
          role: "combobox",
          "aria-expanded": "false",
          "aria-autocomplete": "list",
          "aria-owns": this.ids.menu,
          "aria-haspopup": "true",
          title: this.element.attr("title")
        }).insertAfter(this.element);
        this._addClass(
          this.button,
          "ui-selectmenu-button ui-selectmenu-button-closed",
          "ui-button ui-widget"
        );
        icon = $2("<span>").appendTo(this.button);
        this._addClass(icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button);
        this.buttonItem = this._renderButtonItem(item).appendTo(this.button);
        if (this.options.width !== false) {
          this._resizeButton();
        }
        this._on(this.button, this._buttonEvents);
        this.button.one("focusin", function() {
          if (!that._rendered) {
            that._refreshMenu();
          }
        });
      },
      _drawMenu: function() {
        var that = this;
        this.menu = $2("<ul>", {
          "aria-hidden": "true",
          "aria-labelledby": this.ids.button,
          id: this.ids.menu
        });
        this.menuWrap = $2("<div>").append(this.menu);
        this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front");
        this.menuWrap.appendTo(this._appendTo());
        this.menuInstance = this.menu.menu({
          classes: {
            "ui-menu": "ui-corner-bottom"
          },
          role: "listbox",
          select: function(event, ui) {
            event.preventDefault();
            that._setSelection();
            that._select(ui.item.data("ui-selectmenu-item"), event);
          },
          focus: function(event, ui) {
            var item = ui.item.data("ui-selectmenu-item");
            if (that.focusIndex != null && item.index !== that.focusIndex) {
              that._trigger("focus", event, { item });
              if (!that.isOpen) {
                that._select(item, event);
              }
            }
            that.focusIndex = item.index;
            that.button.attr(
              "aria-activedescendant",
              that.menuItems.eq(item.index).attr("id")
            );
          }
        }).menu("instance");
        this.menuInstance._off(this.menu, "mouseleave");
        this.menuInstance._closeOnDocumentClick = function() {
          return false;
        };
        this.menuInstance._isDivider = function() {
          return false;
        };
      },
      refresh: function() {
        this._refreshMenu();
        this.buttonItem.replaceWith(
          this.buttonItem = this._renderButtonItem(
            // Fall back to an empty object in case there are no options
            this._getSelectedItem().data("ui-selectmenu-item") || {}
          )
        );
        if (this.options.width === null) {
          this._resizeButton();
        }
      },
      _refreshMenu: function() {
        var item, options = this.element.find("option");
        this.menu.empty();
        this._parseOptions(options);
        this._renderMenu(this.menu, this.items);
        this.menuInstance.refresh();
        this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper");
        this._rendered = true;
        if (!options.length) {
          return;
        }
        item = this._getSelectedItem();
        this.menuInstance.focus(null, item);
        this._setAria(item.data("ui-selectmenu-item"));
        this._setOption("disabled", this.element.prop("disabled"));
      },
      open: function(event) {
        if (this.options.disabled) {
          return;
        }
        if (!this._rendered) {
          this._refreshMenu();
        } else {
          this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active");
          this.menuInstance.focus(null, this._getSelectedItem());
        }
        if (!this.menuItems.length) {
          return;
        }
        this.isOpen = true;
        this._toggleAttr();
        this._resizeMenu();
        this._position();
        this._on(this.document, this._documentClick);
        this._trigger("open", event);
      },
      _position: function() {
        this.menuWrap.position($2.extend({ of: this.button }, this.options.position));
      },
      close: function(event) {
        if (!this.isOpen) {
          return;
        }
        this.isOpen = false;
        this._toggleAttr();
        this.range = null;
        this._off(this.document);
        this._trigger("close", event);
      },
      widget: function() {
        return this.button;
      },
      menuWidget: function() {
        return this.menu;
      },
      _renderButtonItem: function(item) {
        var buttonItem = $2("<span>");
        this._setText(buttonItem, item.label);
        this._addClass(buttonItem, "ui-selectmenu-text");
        return buttonItem;
      },
      _renderMenu: function(ul, items) {
        var that = this, currentOptgroup = "";
        $2.each(items, function(index, item) {
          var li;
          if (item.optgroup !== currentOptgroup) {
            li = $2("<li>", {
              text: item.optgroup
            });
            that._addClass(li, "ui-selectmenu-optgroup", "ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""));
            li.appendTo(ul);
            currentOptgroup = item.optgroup;
          }
          that._renderItemData(ul, item);
        });
      },
      _renderItemData: function(ul, item) {
        return this._renderItem(ul, item).data("ui-selectmenu-item", item);
      },
      _renderItem: function(ul, item) {
        var li = $2("<li>"), wrapper = $2("<div>", {
          title: item.element.attr("title")
        });
        if (item.disabled) {
          this._addClass(li, null, "ui-state-disabled");
        }
        this._setText(wrapper, item.label);
        return li.append(wrapper).appendTo(ul);
      },
      _setText: function(element, value) {
        if (value) {
          element.text(value);
        } else {
          element.html("&#160;");
        }
      },
      _move: function(direction, event) {
        var item, next, filter = ".ui-menu-item";
        if (this.isOpen) {
          item = this.menuItems.eq(this.focusIndex).parent("li");
        } else {
          item = this.menuItems.eq(this.element[0].selectedIndex).parent("li");
          filter += ":not(.ui-state-disabled)";
        }
        if (direction === "first" || direction === "last") {
          next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1);
        } else {
          next = item[direction + "All"](filter).eq(0);
        }
        if (next.length) {
          this.menuInstance.focus(event, next);
        }
      },
      _getSelectedItem: function() {
        return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
      },
      _toggle: function(event) {
        this[this.isOpen ? "close" : "open"](event);
      },
      _setSelection: function() {
        var selection;
        if (!this.range) {
          return;
        }
        if (window.getSelection) {
          selection = window.getSelection();
          selection.removeAllRanges();
          selection.addRange(this.range);
        } else {
          this.range.select();
        }
        this.button.focus();
      },
      _documentClick: {
        mousedown: function(event) {
          if (!this.isOpen) {
            return;
          }
          if (!$2(event.target).closest(".ui-selectmenu-menu, #" + $2.escapeSelector(this.ids.button)).length) {
            this.close(event);
          }
        }
      },
      _buttonEvents: {
        // Prevent text selection from being reset when interacting with the selectmenu (#10144)
        mousedown: function() {
          var selection;
          if (window.getSelection) {
            selection = window.getSelection();
            if (selection.rangeCount) {
              this.range = selection.getRangeAt(0);
            }
          } else {
            this.range = document.selection.createRange();
          }
        },
        click: function(event) {
          this._setSelection();
          this._toggle(event);
        },
        keydown: function(event) {
          var preventDefault2 = true;
          switch (event.keyCode) {
            case $2.ui.keyCode.TAB:
            case $2.ui.keyCode.ESCAPE:
              this.close(event);
              preventDefault2 = false;
              break;
            case $2.ui.keyCode.ENTER:
              if (this.isOpen) {
                this._selectFocusedItem(event);
              }
              break;
            case $2.ui.keyCode.UP:
              if (event.altKey) {
                this._toggle(event);
              } else {
                this._move("prev", event);
              }
              break;
            case $2.ui.keyCode.DOWN:
              if (event.altKey) {
                this._toggle(event);
              } else {
                this._move("next", event);
              }
              break;
            case $2.ui.keyCode.SPACE:
              if (this.isOpen) {
                this._selectFocusedItem(event);
              } else {
                this._toggle(event);
              }
              break;
            case $2.ui.keyCode.LEFT:
              this._move("prev", event);
              break;
            case $2.ui.keyCode.RIGHT:
              this._move("next", event);
              break;
            case $2.ui.keyCode.HOME:
            case $2.ui.keyCode.PAGE_UP:
              this._move("first", event);
              break;
            case $2.ui.keyCode.END:
            case $2.ui.keyCode.PAGE_DOWN:
              this._move("last", event);
              break;
            default:
              this.menu.trigger(event);
              preventDefault2 = false;
          }
          if (preventDefault2) {
            event.preventDefault();
          }
        }
      },
      _selectFocusedItem: function(event) {
        var item = this.menuItems.eq(this.focusIndex).parent("li");
        if (!item.hasClass("ui-state-disabled")) {
          this._select(item.data("ui-selectmenu-item"), event);
        }
      },
      _select: function(item, event) {
        var oldIndex = this.element[0].selectedIndex;
        this.element[0].selectedIndex = item.index;
        this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));
        this._setAria(item);
        this._trigger("select", event, { item });
        if (item.index !== oldIndex) {
          this._trigger("change", event, { item });
        }
        this.close(event);
      },
      _setAria: function(item) {
        var id = this.menuItems.eq(item.index).attr("id");
        this.button.attr({
          "aria-labelledby": id,
          "aria-activedescendant": id
        });
        this.menu.attr("aria-activedescendant", id);
      },
      _setOption: function(key, value) {
        if (key === "icons") {
          var icon = this.button.find("span.ui-icon");
          this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button);
        }
        this._super(key, value);
        if (key === "appendTo") {
          this.menuWrap.appendTo(this._appendTo());
        }
        if (key === "width") {
          this._resizeButton();
        }
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this.menuInstance.option("disabled", value);
        this.button.attr("aria-disabled", value);
        this._toggleClass(this.button, null, "ui-state-disabled", value);
        this.element.prop("disabled", value);
        if (value) {
          this.button.attr("tabindex", -1);
          this.close();
        } else {
          this.button.attr("tabindex", 0);
        }
      },
      _appendTo: function() {
        var element = this.options.appendTo;
        if (element) {
          element = element.jquery || element.nodeType ? $2(element) : this.document.find(element).eq(0);
        }
        if (!element || !element[0]) {
          element = this.element.closest(".ui-front, dialog");
        }
        if (!element.length) {
          element = this.document[0].body;
        }
        return element;
      },
      _toggleAttr: function() {
        this.button.attr("aria-expanded", this.isOpen);
        this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen);
        this.menu.attr("aria-hidden", !this.isOpen);
      },
      _resizeButton: function() {
        var width = this.options.width;
        if (width === false) {
          this.button.css("width", "");
          return;
        }
        if (width === null) {
          width = this.element.show().outerWidth();
          this.element.hide();
        }
        this.button.outerWidth(width);
      },
      _resizeMenu: function() {
        this.menu.outerWidth(Math.max(
          this.button.outerWidth(),
          // Support: IE10
          // IE10 wraps long text (possibly a rounding bug)
          // so we add 1px to avoid the wrapping
          this.menu.width("").outerWidth() + 1
        ));
      },
      _getCreateOptions: function() {
        var options = this._super();
        options.disabled = this.element.prop("disabled");
        return options;
      },
      _parseOptions: function(options) {
        var that = this, data2 = [];
        options.each(function(index, item) {
          if (item.hidden) {
            return;
          }
          data2.push(that._parseOption($2(item), index));
        });
        this.items = data2;
      },
      _parseOption: function(option, index) {
        var optgroup = option.parent("optgroup");
        return {
          element: option,
          index,
          value: option.val(),
          label: option.text(),
          optgroup: optgroup.attr("label") || "",
          disabled: optgroup.prop("disabled") || option.prop("disabled")
        };
      },
      _destroy: function() {
        this._unbindFormResetHandler();
        this.menuWrap.remove();
        this.button.remove();
        this.element.show();
        this.element.removeUniqueId();
        this.labels.attr("for", this.ids.element);
      }
    }]);
    var widgetsSlider = $2.widget("ui.slider", $2.ui.mouse, {
      version: "1.13.0",
      widgetEventPrefix: "slide",
      options: {
        animate: false,
        classes: {
          "ui-slider": "ui-corner-all",
          "ui-slider-handle": "ui-corner-all",
          // Note: ui-widget-header isn't the most fittingly semantic framework class for this
          // element, but worked best visually with a variety of themes
          "ui-slider-range": "ui-corner-all ui-widget-header"
        },
        distance: 0,
        max: 100,
        min: 0,
        orientation: "horizontal",
        range: false,
        step: 1,
        value: 0,
        values: null,
        // Callbacks
        change: null,
        slide: null,
        start: null,
        stop: null
      },
      // Number of pages in a slider
      // (how many times can you page up/down to go through the whole range)
      numPages: 5,
      _create: function() {
        this._keySliding = false;
        this._mouseSliding = false;
        this._animateOff = true;
        this._handleIndex = null;
        this._detectOrientation();
        this._mouseInit();
        this._calculateNewMax();
        this._addClass(
          "ui-slider ui-slider-" + this.orientation,
          "ui-widget ui-widget-content"
        );
        this._refresh();
        this._animateOff = false;
      },
      _refresh: function() {
        this._createRange();
        this._createHandles();
        this._setupEvents();
        this._refreshValue();
      },
      _createHandles: function() {
        var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle"), handle = "<span tabindex='0'></span>", handles = [];
        handleCount = options.values && options.values.length || 1;
        if (existingHandles.length > handleCount) {
          existingHandles.slice(handleCount).remove();
          existingHandles = existingHandles.slice(0, handleCount);
        }
        for (i = existingHandles.length; i < handleCount; i++) {
          handles.push(handle);
        }
        this.handles = existingHandles.add($2(handles.join("")).appendTo(this.element));
        this._addClass(this.handles, "ui-slider-handle", "ui-state-default");
        this.handle = this.handles.eq(0);
        this.handles.each(function(i2) {
          $2(this).data("ui-slider-handle-index", i2).attr("tabIndex", 0);
        });
      },
      _createRange: function() {
        var options = this.options;
        if (options.range) {
          if (options.range === true) {
            if (!options.values) {
              options.values = [this._valueMin(), this._valueMin()];
            } else if (options.values.length && options.values.length !== 2) {
              options.values = [options.values[0], options.values[0]];
            } else if (Array.isArray(options.values)) {
              options.values = options.values.slice(0);
            }
          }
          if (!this.range || !this.range.length) {
            this.range = $2("<div>").appendTo(this.element);
            this._addClass(this.range, "ui-slider-range");
          } else {
            this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max");
            this.range.css({
              "left": "",
              "bottom": ""
            });
          }
          if (options.range === "min" || options.range === "max") {
            this._addClass(this.range, "ui-slider-range-" + options.range);
          }
        } else {
          if (this.range) {
            this.range.remove();
          }
          this.range = null;
        }
      },
      _setupEvents: function() {
        this._off(this.handles);
        this._on(this.handles, this._handleEvents);
        this._hoverable(this.handles);
        this._focusable(this.handles);
      },
      _destroy: function() {
        this.handles.remove();
        if (this.range) {
          this.range.remove();
        }
        this._mouseDestroy();
      },
      _mouseCapture: function(event) {
        var position2, normValue, distance, closestHandle, index, allowed, offset2, mouseOverHandle, that = this, o = this.options;
        if (o.disabled) {
          return false;
        }
        this.elementSize = {
          width: this.element.outerWidth(),
          height: this.element.outerHeight()
        };
        this.elementOffset = this.element.offset();
        position2 = { x: event.pageX, y: event.pageY };
        normValue = this._normValueFromMouse(position2);
        distance = this._valueMax() - this._valueMin() + 1;
        this.handles.each(function(i) {
          var thisDistance = Math.abs(normValue - that.values(i));
          if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
            distance = thisDistance;
            closestHandle = $2(this);
            index = i;
          }
        });
        allowed = this._start(event, index);
        if (allowed === false) {
          return false;
        }
        this._mouseSliding = true;
        this._handleIndex = index;
        this._addClass(closestHandle, null, "ui-state-active");
        closestHandle.trigger("focus");
        offset2 = closestHandle.offset();
        mouseOverHandle = !$2(event.target).parents().addBack().is(".ui-slider-handle");
        this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
          left: event.pageX - offset2.left - closestHandle.width() / 2,
          top: event.pageY - offset2.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
        };
        if (!this.handles.hasClass("ui-state-hover")) {
          this._slide(event, index, normValue);
        }
        this._animateOff = true;
        return true;
      },
      _mouseStart: function() {
        return true;
      },
      _mouseDrag: function(event) {
        var position2 = { x: event.pageX, y: event.pageY }, normValue = this._normValueFromMouse(position2);
        this._slide(event, this._handleIndex, normValue);
        return false;
      },
      _mouseStop: function(event) {
        this._removeClass(this.handles, null, "ui-state-active");
        this._mouseSliding = false;
        this._stop(event, this._handleIndex);
        this._change(event, this._handleIndex);
        this._handleIndex = null;
        this._clickOffset = null;
        this._animateOff = false;
        return false;
      },
      _detectOrientation: function() {
        this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
      },
      _normValueFromMouse: function(position2) {
        var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
        if (this.orientation === "horizontal") {
          pixelTotal = this.elementSize.width;
          pixelMouse = position2.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
        } else {
          pixelTotal = this.elementSize.height;
          pixelMouse = position2.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
        }
        percentMouse = pixelMouse / pixelTotal;
        if (percentMouse > 1) {
          percentMouse = 1;
        }
        if (percentMouse < 0) {
          percentMouse = 0;
        }
        if (this.orientation === "vertical") {
          percentMouse = 1 - percentMouse;
        }
        valueTotal = this._valueMax() - this._valueMin();
        valueMouse = this._valueMin() + percentMouse * valueTotal;
        return this._trimAlignValue(valueMouse);
      },
      _uiHash: function(index, value, values) {
        var uiHash = {
          handle: this.handles[index],
          handleIndex: index,
          value: value !== void 0 ? value : this.value()
        };
        if (this._hasMultipleValues()) {
          uiHash.value = value !== void 0 ? value : this.values(index);
          uiHash.values = values || this.values();
        }
        return uiHash;
      },
      _hasMultipleValues: function() {
        return this.options.values && this.options.values.length;
      },
      _start: function(event, index) {
        return this._trigger("start", event, this._uiHash(index));
      },
      _slide: function(event, index, newVal) {
        var allowed, otherVal, currentValue = this.value(), newValues = this.values();
        if (this._hasMultipleValues()) {
          otherVal = this.values(index ? 0 : 1);
          currentValue = this.values(index);
          if (this.options.values.length === 2 && this.options.range === true) {
            newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal);
          }
          newValues[index] = newVal;
        }
        if (newVal === currentValue) {
          return;
        }
        allowed = this._trigger("slide", event, this._uiHash(index, newVal, newValues));
        if (allowed === false) {
          return;
        }
        if (this._hasMultipleValues()) {
          this.values(index, newVal);
        } else {
          this.value(newVal);
        }
      },
      _stop: function(event, index) {
        this._trigger("stop", event, this._uiHash(index));
      },
      _change: function(event, index) {
        if (!this._keySliding && !this._mouseSliding) {
          this._lastChangedValue = index;
          this._trigger("change", event, this._uiHash(index));
        }
      },
      value: function(newValue) {
        if (arguments.length) {
          this.options.value = this._trimAlignValue(newValue);
          this._refreshValue();
          this._change(null, 0);
          return;
        }
        return this._value();
      },
      values: function(index, newValue) {
        var vals, newValues, i;
        if (arguments.length > 1) {
          this.options.values[index] = this._trimAlignValue(newValue);
          this._refreshValue();
          this._change(null, index);
          return;
        }
        if (arguments.length) {
          if (Array.isArray(arguments[0])) {
            vals = this.options.values;
            newValues = arguments[0];
            for (i = 0; i < vals.length; i += 1) {
              vals[i] = this._trimAlignValue(newValues[i]);
              this._change(null, i);
            }
            this._refreshValue();
          } else {
            if (this._hasMultipleValues()) {
              return this._values(index);
            } else {
              return this.value();
            }
          }
        } else {
          return this._values();
        }
      },
      _setOption: function(key, value) {
        var i, valsLength = 0;
        if (key === "range" && this.options.range === true) {
          if (value === "min") {
            this.options.value = this._values(0);
            this.options.values = null;
          } else if (value === "max") {
            this.options.value = this._values(this.options.values.length - 1);
            this.options.values = null;
          }
        }
        if (Array.isArray(this.options.values)) {
          valsLength = this.options.values.length;
        }
        this._super(key, value);
        switch (key) {
          case "orientation":
            this._detectOrientation();
            this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation);
            this._refreshValue();
            if (this.options.range) {
              this._refreshRange(value);
            }
            this.handles.css(value === "horizontal" ? "bottom" : "left", "");
            break;
          case "value":
            this._animateOff = true;
            this._refreshValue();
            this._change(null, 0);
            this._animateOff = false;
            break;
          case "values":
            this._animateOff = true;
            this._refreshValue();
            for (i = valsLength - 1; i >= 0; i--) {
              this._change(null, i);
            }
            this._animateOff = false;
            break;
          case "step":
          case "min":
          case "max":
            this._animateOff = true;
            this._calculateNewMax();
            this._refreshValue();
            this._animateOff = false;
            break;
          case "range":
            this._animateOff = true;
            this._refresh();
            this._animateOff = false;
            break;
        }
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this._toggleClass(null, "ui-state-disabled", !!value);
      },
      //internal value getter
      // _value() returns value trimmed by min and max, aligned by step
      _value: function() {
        var val = this.options.value;
        val = this._trimAlignValue(val);
        return val;
      },
      //internal values getter
      // _values() returns array of values trimmed by min and max, aligned by step
      // _values( index ) returns single value trimmed by min and max, aligned by step
      _values: function(index) {
        var val, vals, i;
        if (arguments.length) {
          val = this.options.values[index];
          val = this._trimAlignValue(val);
          return val;
        } else if (this._hasMultipleValues()) {
          vals = this.options.values.slice();
          for (i = 0; i < vals.length; i += 1) {
            vals[i] = this._trimAlignValue(vals[i]);
          }
          return vals;
        } else {
          return [];
        }
      },
      // Returns the step-aligned value that val is closest to, between (inclusive) min and max
      _trimAlignValue: function(val) {
        if (val <= this._valueMin()) {
          return this._valueMin();
        }
        if (val >= this._valueMax()) {
          return this._valueMax();
        }
        var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
        if (Math.abs(valModStep) * 2 >= step) {
          alignValue += valModStep > 0 ? step : -step;
        }
        return parseFloat(alignValue.toFixed(5));
      },
      _calculateNewMax: function() {
        var max2 = this.options.max, min2 = this._valueMin(), step = this.options.step, aboveMin = Math.round((max2 - min2) / step) * step;
        max2 = aboveMin + min2;
        if (max2 > this.options.max) {
          max2 -= step;
        }
        this.max = parseFloat(max2.toFixed(this._precision()));
      },
      _precision: function() {
        var precision = this._precisionOf(this.options.step);
        if (this.options.min !== null) {
          precision = Math.max(precision, this._precisionOf(this.options.min));
        }
        return precision;
      },
      _precisionOf: function(num) {
        var str = num.toString(), decimal = str.indexOf(".");
        return decimal === -1 ? 0 : str.length - decimal - 1;
      },
      _valueMin: function() {
        return this.options.min;
      },
      _valueMax: function() {
        return this.max;
      },
      _refreshRange: function(orientation) {
        if (orientation === "vertical") {
          this.range.css({ "width": "", "left": "" });
        }
        if (orientation === "horizontal") {
          this.range.css({ "height": "", "bottom": "" });
        }
      },
      _refreshValue: function() {
        var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = !this._animateOff ? o.animate : false, _set = {};
        if (this._hasMultipleValues()) {
          this.handles.each(function(i) {
            valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
            _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
            $2(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
            if (that.options.range === true) {
              if (that.orientation === "horizontal") {
                if (i === 0) {
                  that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    left: valPercent + "%"
                  }, o.animate);
                }
                if (i === 1) {
                  that.range[animate ? "animate" : "css"]({
                    width: valPercent - lastValPercent + "%"
                  }, {
                    queue: false,
                    duration: o.animate
                  });
                }
              } else {
                if (i === 0) {
                  that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    bottom: valPercent + "%"
                  }, o.animate);
                }
                if (i === 1) {
                  that.range[animate ? "animate" : "css"]({
                    height: valPercent - lastValPercent + "%"
                  }, {
                    queue: false,
                    duration: o.animate
                  });
                }
              }
            }
            lastValPercent = valPercent;
          });
        } else {
          value = this.value();
          valueMin = this._valueMin();
          valueMax = this._valueMax();
          valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
          _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
          this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
          if (oRange === "min" && this.orientation === "horizontal") {
            this.range.stop(1, 1)[animate ? "animate" : "css"]({
              width: valPercent + "%"
            }, o.animate);
          }
          if (oRange === "max" && this.orientation === "horizontal") {
            this.range.stop(1, 1)[animate ? "animate" : "css"]({
              width: 100 - valPercent + "%"
            }, o.animate);
          }
          if (oRange === "min" && this.orientation === "vertical") {
            this.range.stop(1, 1)[animate ? "animate" : "css"]({
              height: valPercent + "%"
            }, o.animate);
          }
          if (oRange === "max" && this.orientation === "vertical") {
            this.range.stop(1, 1)[animate ? "animate" : "css"]({
              height: 100 - valPercent + "%"
            }, o.animate);
          }
        }
      },
      _handleEvents: {
        keydown: function(event) {
          var allowed, curVal, newVal, step, index = $2(event.target).data("ui-slider-handle-index");
          switch (event.keyCode) {
            case $2.ui.keyCode.HOME:
            case $2.ui.keyCode.END:
            case $2.ui.keyCode.PAGE_UP:
            case $2.ui.keyCode.PAGE_DOWN:
            case $2.ui.keyCode.UP:
            case $2.ui.keyCode.RIGHT:
            case $2.ui.keyCode.DOWN:
            case $2.ui.keyCode.LEFT:
              event.preventDefault();
              if (!this._keySliding) {
                this._keySliding = true;
                this._addClass($2(event.target), null, "ui-state-active");
                allowed = this._start(event, index);
                if (allowed === false) {
                  return;
                }
              }
              break;
          }
          step = this.options.step;
          if (this._hasMultipleValues()) {
            curVal = newVal = this.values(index);
          } else {
            curVal = newVal = this.value();
          }
          switch (event.keyCode) {
            case $2.ui.keyCode.HOME:
              newVal = this._valueMin();
              break;
            case $2.ui.keyCode.END:
              newVal = this._valueMax();
              break;
            case $2.ui.keyCode.PAGE_UP:
              newVal = this._trimAlignValue(
                curVal + (this._valueMax() - this._valueMin()) / this.numPages
              );
              break;
            case $2.ui.keyCode.PAGE_DOWN:
              newVal = this._trimAlignValue(
                curVal - (this._valueMax() - this._valueMin()) / this.numPages
              );
              break;
            case $2.ui.keyCode.UP:
            case $2.ui.keyCode.RIGHT:
              if (curVal === this._valueMax()) {
                return;
              }
              newVal = this._trimAlignValue(curVal + step);
              break;
            case $2.ui.keyCode.DOWN:
            case $2.ui.keyCode.LEFT:
              if (curVal === this._valueMin()) {
                return;
              }
              newVal = this._trimAlignValue(curVal - step);
              break;
          }
          this._slide(event, index, newVal);
        },
        keyup: function(event) {
          var index = $2(event.target).data("ui-slider-handle-index");
          if (this._keySliding) {
            this._keySliding = false;
            this._stop(event, index);
            this._change(event, index);
            this._removeClass($2(event.target), null, "ui-state-active");
          }
        }
      }
    });
    function spinnerModifier(fn2) {
      return function() {
        var previous = this.element.val();
        fn2.apply(this, arguments);
        this._refresh();
        if (previous !== this.element.val()) {
          this._trigger("change");
        }
      };
    }
    $2.widget("ui.spinner", {
      version: "1.13.0",
      defaultElement: "<input>",
      widgetEventPrefix: "spin",
      options: {
        classes: {
          "ui-spinner": "ui-corner-all",
          "ui-spinner-down": "ui-corner-br",
          "ui-spinner-up": "ui-corner-tr"
        },
        culture: null,
        icons: {
          down: "ui-icon-triangle-1-s",
          up: "ui-icon-triangle-1-n"
        },
        incremental: true,
        max: null,
        min: null,
        numberFormat: null,
        page: 10,
        step: 1,
        change: null,
        spin: null,
        start: null,
        stop: null
      },
      _create: function() {
        this._setOption("max", this.options.max);
        this._setOption("min", this.options.min);
        this._setOption("step", this.options.step);
        if (this.value() !== "") {
          this._value(this.element.val(), true);
        }
        this._draw();
        this._on(this._events);
        this._refresh();
        this._on(this.window, {
          beforeunload: function() {
            this.element.removeAttr("autocomplete");
          }
        });
      },
      _getCreateOptions: function() {
        var options = this._super();
        var element = this.element;
        $2.each(["min", "max", "step"], function(i, option) {
          var value = element.attr(option);
          if (value != null && value.length) {
            options[option] = value;
          }
        });
        return options;
      },
      _events: {
        keydown: function(event) {
          if (this._start(event) && this._keydown(event)) {
            event.preventDefault();
          }
        },
        keyup: "_stop",
        focus: function() {
          this.previous = this.element.val();
        },
        blur: function(event) {
          if (this.cancelBlur) {
            delete this.cancelBlur;
            return;
          }
          this._stop();
          this._refresh();
          if (this.previous !== this.element.val()) {
            this._trigger("change", event);
          }
        },
        mousewheel: function(event, delta) {
          var activeElement = $2.ui.safeActiveElement(this.document[0]);
          var isActive = this.element[0] === activeElement;
          if (!isActive || !delta) {
            return;
          }
          if (!this.spinning && !this._start(event)) {
            return false;
          }
          this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
          clearTimeout(this.mousewheelTimer);
          this.mousewheelTimer = this._delay(function() {
            if (this.spinning) {
              this._stop(event);
            }
          }, 100);
          event.preventDefault();
        },
        "mousedown .ui-spinner-button": function(event) {
          var previous;
          previous = this.element[0] === $2.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();
          function checkFocus() {
            var isActive = this.element[0] === $2.ui.safeActiveElement(this.document[0]);
            if (!isActive) {
              this.element.trigger("focus");
              this.previous = previous;
              this._delay(function() {
                this.previous = previous;
              });
            }
          }
          event.preventDefault();
          checkFocus.call(this);
          this.cancelBlur = true;
          this._delay(function() {
            delete this.cancelBlur;
            checkFocus.call(this);
          });
          if (this._start(event) === false) {
            return;
          }
          this._repeat(null, $2(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
        },
        "mouseup .ui-spinner-button": "_stop",
        "mouseenter .ui-spinner-button": function(event) {
          if (!$2(event.currentTarget).hasClass("ui-state-active")) {
            return;
          }
          if (this._start(event) === false) {
            return false;
          }
          this._repeat(null, $2(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
        },
        // TODO: do we really want to consider this a stop?
        // shouldn't we just stop the repeater and wait until mouseup before
        // we trigger the stop event?
        "mouseleave .ui-spinner-button": "_stop"
      },
      // Support mobile enhanced option and make backcompat more sane
      _enhance: function() {
        this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append(
          "<a></a><a></a>"
        );
      },
      _draw: function() {
        this._enhance();
        this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content");
        this._addClass("ui-spinner-input");
        this.element.attr("role", "spinbutton");
        this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", true).button({
          classes: {
            "ui-button": ""
          }
        });
        this._removeClass(this.buttons, "ui-corner-all");
        this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up");
        this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down");
        this.buttons.first().button({
          "icon": this.options.icons.up,
          "showLabel": false
        });
        this.buttons.last().button({
          "icon": this.options.icons.down,
          "showLabel": false
        });
        if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) {
          this.uiSpinner.height(this.uiSpinner.height());
        }
      },
      _keydown: function(event) {
        var options = this.options, keyCode = $2.ui.keyCode;
        switch (event.keyCode) {
          case keyCode.UP:
            this._repeat(null, 1, event);
            return true;
          case keyCode.DOWN:
            this._repeat(null, -1, event);
            return true;
          case keyCode.PAGE_UP:
            this._repeat(null, options.page, event);
            return true;
          case keyCode.PAGE_DOWN:
            this._repeat(null, -options.page, event);
            return true;
        }
        return false;
      },
      _start: function(event) {
        if (!this.spinning && this._trigger("start", event) === false) {
          return false;
        }
        if (!this.counter) {
          this.counter = 1;
        }
        this.spinning = true;
        return true;
      },
      _repeat: function(i, steps, event) {
        i = i || 500;
        clearTimeout(this.timer);
        this.timer = this._delay(function() {
          this._repeat(40, steps, event);
        }, i);
        this._spin(steps * this.options.step, event);
      },
      _spin: function(step, event) {
        var value = this.value() || 0;
        if (!this.counter) {
          this.counter = 1;
        }
        value = this._adjustValue(value + step * this._increment(this.counter));
        if (!this.spinning || this._trigger("spin", event, { value }) !== false) {
          this._value(value);
          this.counter++;
        }
      },
      _increment: function(i) {
        var incremental = this.options.incremental;
        if (incremental) {
          return typeof incremental === "function" ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1);
        }
        return 1;
      },
      _precision: function() {
        var precision = this._precisionOf(this.options.step);
        if (this.options.min !== null) {
          precision = Math.max(precision, this._precisionOf(this.options.min));
        }
        return precision;
      },
      _precisionOf: function(num) {
        var str = num.toString(), decimal = str.indexOf(".");
        return decimal === -1 ? 0 : str.length - decimal - 1;
      },
      _adjustValue: function(value) {
        var base, aboveMin, options = this.options;
        base = options.min !== null ? options.min : 0;
        aboveMin = value - base;
        aboveMin = Math.round(aboveMin / options.step) * options.step;
        value = base + aboveMin;
        value = parseFloat(value.toFixed(this._precision()));
        if (options.max !== null && value > options.max) {
          return options.max;
        }
        if (options.min !== null && value < options.min) {
          return options.min;
        }
        return value;
      },
      _stop: function(event) {
        if (!this.spinning) {
          return;
        }
        clearTimeout(this.timer);
        clearTimeout(this.mousewheelTimer);
        this.counter = 0;
        this.spinning = false;
        this._trigger("stop", event);
      },
      _setOption: function(key, value) {
        var prevValue, first, last;
        if (key === "culture" || key === "numberFormat") {
          prevValue = this._parse(this.element.val());
          this.options[key] = value;
          this.element.val(this._format(prevValue));
          return;
        }
        if (key === "max" || key === "min" || key === "step") {
          if (typeof value === "string") {
            value = this._parse(value);
          }
        }
        if (key === "icons") {
          first = this.buttons.first().find(".ui-icon");
          this._removeClass(first, null, this.options.icons.up);
          this._addClass(first, null, value.up);
          last = this.buttons.last().find(".ui-icon");
          this._removeClass(last, null, this.options.icons.down);
          this._addClass(last, null, value.down);
        }
        this._super(key, value);
      },
      _setOptionDisabled: function(value) {
        this._super(value);
        this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!value);
        this.element.prop("disabled", !!value);
        this.buttons.button(value ? "disable" : "enable");
      },
      _setOptions: spinnerModifier(function(options) {
        this._super(options);
      }),
      _parse: function(val) {
        if (typeof val === "string" && val !== "") {
          val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
        }
        return val === "" || isNaN(val) ? null : val;
      },
      _format: function(value) {
        if (value === "") {
          return "";
        }
        return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
      },
      _refresh: function() {
        this.element.attr({
          "aria-valuemin": this.options.min,
          "aria-valuemax": this.options.max,
          // TODO: what should we do with values that can't be parsed?
          "aria-valuenow": this._parse(this.element.val())
        });
      },
      isValid: function() {
        var value = this.value();
        if (value === null) {
          return false;
        }
        return value === this._adjustValue(value);
      },
      // Update the value without triggering change
      _value: function(value, allowAny) {
        var parsed;
        if (value !== "") {
          parsed = this._parse(value);
          if (parsed !== null) {
            if (!allowAny) {
              parsed = this._adjustValue(parsed);
            }
            value = this._format(parsed);
          }
        }
        this.element.val(value);
        this._refresh();
      },
      _destroy: function() {
        this.element.prop("disabled", false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow");
        this.uiSpinner.replaceWith(this.element);
      },
      stepUp: spinnerModifier(function(steps) {
        this._stepUp(steps);
      }),
      _stepUp: function(steps) {
        if (this._start()) {
          this._spin((steps || 1) * this.options.step);
          this._stop();
        }
      },
      stepDown: spinnerModifier(function(steps) {
        this._stepDown(steps);
      }),
      _stepDown: function(steps) {
        if (this._start()) {
          this._spin((steps || 1) * -this.options.step);
          this._stop();
        }
      },
      pageUp: spinnerModifier(function(pages) {
        this._stepUp((pages || 1) * this.options.page);
      }),
      pageDown: spinnerModifier(function(pages) {
        this._stepDown((pages || 1) * this.options.page);
      }),
      value: function(newVal) {
        if (!arguments.length) {
          return this._parse(this.element.val());
        }
        spinnerModifier(this._value).call(this, newVal);
      },
      widget: function() {
        return this.uiSpinner;
      }
    });
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.spinner", $2.ui.spinner, {
        _enhance: function() {
          this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
        },
        _uiSpinnerHtml: function() {
          return "<span>";
        },
        _buttonHtml: function() {
          return "<a></a><a></a>";
        }
      });
    }
    var widgetsSpinner = $2.ui.spinner;
    $2.widget("ui.tabs", {
      version: "1.13.0",
      delay: 300,
      options: {
        active: null,
        classes: {
          "ui-tabs": "ui-corner-all",
          "ui-tabs-nav": "ui-corner-all",
          "ui-tabs-panel": "ui-corner-bottom",
          "ui-tabs-tab": "ui-corner-top"
        },
        collapsible: false,
        event: "click",
        heightStyle: "content",
        hide: null,
        show: null,
        // Callbacks
        activate: null,
        beforeActivate: null,
        beforeLoad: null,
        load: null
      },
      _isLocal: /* @__PURE__ */ function() {
        var rhash = /#.*$/;
        return function(anchor) {
          var anchorUrl, locationUrl;
          anchorUrl = anchor.href.replace(rhash, "");
          locationUrl = location.href.replace(rhash, "");
          try {
            anchorUrl = decodeURIComponent(anchorUrl);
          } catch (error2) {
          }
          try {
            locationUrl = decodeURIComponent(locationUrl);
          } catch (error2) {
          }
          return anchor.hash.length > 1 && anchorUrl === locationUrl;
        };
      }(),
      _create: function() {
        var that = this, options = this.options;
        this.running = false;
        this._addClass("ui-tabs", "ui-widget ui-widget-content");
        this._toggleClass("ui-tabs-collapsible", null, options.collapsible);
        this._processTabs();
        options.active = this._initialActive();
        if (Array.isArray(options.disabled)) {
          options.disabled = $2.uniqueSort(options.disabled.concat(
            $2.map(this.tabs.filter(".ui-state-disabled"), function(li) {
              return that.tabs.index(li);
            })
          )).sort();
        }
        if (this.options.active !== false && this.anchors.length) {
          this.active = this._findActive(options.active);
        } else {
          this.active = $2();
        }
        this._refresh();
        if (this.active.length) {
          this.load(options.active);
        }
      },
      _initialActive: function() {
        var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
        if (active === null) {
          if (locationHash) {
            this.tabs.each(function(i, tab) {
              if ($2(tab).attr("aria-controls") === locationHash) {
                active = i;
                return false;
              }
            });
          }
          if (active === null) {
            active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
          }
          if (active === null || active === -1) {
            active = this.tabs.length ? 0 : false;
          }
        }
        if (active !== false) {
          active = this.tabs.index(this.tabs.eq(active));
          if (active === -1) {
            active = collapsible ? false : 0;
          }
        }
        if (!collapsible && active === false && this.anchors.length) {
          active = 0;
        }
        return active;
      },
      _getCreateEventData: function() {
        return {
          tab: this.active,
          panel: !this.active.length ? $2() : this._getPanelForTab(this.active)
        };
      },
      _tabKeydown: function(event) {
        var focusedTab = $2($2.ui.safeActiveElement(this.document[0])).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = true;
        if (this._handlePageNav(event)) {
          return;
        }
        switch (event.keyCode) {
          case $2.ui.keyCode.RIGHT:
          case $2.ui.keyCode.DOWN:
            selectedIndex++;
            break;
          case $2.ui.keyCode.UP:
          case $2.ui.keyCode.LEFT:
            goingForward = false;
            selectedIndex--;
            break;
          case $2.ui.keyCode.END:
            selectedIndex = this.anchors.length - 1;
            break;
          case $2.ui.keyCode.HOME:
            selectedIndex = 0;
            break;
          case $2.ui.keyCode.SPACE:
            event.preventDefault();
            clearTimeout(this.activating);
            this._activate(selectedIndex);
            return;
          case $2.ui.keyCode.ENTER:
            event.preventDefault();
            clearTimeout(this.activating);
            this._activate(selectedIndex === this.options.active ? false : selectedIndex);
            return;
          default:
            return;
        }
        event.preventDefault();
        clearTimeout(this.activating);
        selectedIndex = this._focusNextTab(selectedIndex, goingForward);
        if (!event.ctrlKey && !event.metaKey) {
          focusedTab.attr("aria-selected", "false");
          this.tabs.eq(selectedIndex).attr("aria-selected", "true");
          this.activating = this._delay(function() {
            this.option("active", selectedIndex);
          }, this.delay);
        }
      },
      _panelKeydown: function(event) {
        if (this._handlePageNav(event)) {
          return;
        }
        if (event.ctrlKey && event.keyCode === $2.ui.keyCode.UP) {
          event.preventDefault();
          this.active.trigger("focus");
        }
      },
      // Alt+page up/down moves focus to the previous/next tab (and activates)
      _handlePageNav: function(event) {
        if (event.altKey && event.keyCode === $2.ui.keyCode.PAGE_UP) {
          this._activate(this._focusNextTab(this.options.active - 1, false));
          return true;
        }
        if (event.altKey && event.keyCode === $2.ui.keyCode.PAGE_DOWN) {
          this._activate(this._focusNextTab(this.options.active + 1, true));
          return true;
        }
      },
      _findNextTab: function(index, goingForward) {
        var lastTabIndex = this.tabs.length - 1;
        function constrain() {
          if (index > lastTabIndex) {
            index = 0;
          }
          if (index < 0) {
            index = lastTabIndex;
          }
          return index;
        }
        while ($2.inArray(constrain(), this.options.disabled) !== -1) {
          index = goingForward ? index + 1 : index - 1;
        }
        return index;
      },
      _focusNextTab: function(index, goingForward) {
        index = this._findNextTab(index, goingForward);
        this.tabs.eq(index).trigger("focus");
        return index;
      },
      _setOption: function(key, value) {
        if (key === "active") {
          this._activate(value);
          return;
        }
        this._super(key, value);
        if (key === "collapsible") {
          this._toggleClass("ui-tabs-collapsible", null, value);
          if (!value && this.options.active === false) {
            this._activate(0);
          }
        }
        if (key === "event") {
          this._setupEvents(value);
        }
        if (key === "heightStyle") {
          this._setupHeightStyle(value);
        }
      },
      _sanitizeSelector: function(hash3) {
        return hash3 ? hash3.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
      },
      refresh: function() {
        var options = this.options, lis = this.tablist.children(":has(a[href])");
        options.disabled = $2.map(lis.filter(".ui-state-disabled"), function(tab) {
          return lis.index(tab);
        });
        this._processTabs();
        if (options.active === false || !this.anchors.length) {
          options.active = false;
          this.active = $2();
        } else if (this.active.length && !$2.contains(this.tablist[0], this.active[0])) {
          if (this.tabs.length === options.disabled.length) {
            options.active = false;
            this.active = $2();
          } else {
            this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
          }
        } else {
          options.active = this.tabs.index(this.active);
        }
        this._refresh();
      },
      _refresh: function() {
        this._setOptionDisabled(this.options.disabled);
        this._setupEvents(this.options.event);
        this._setupHeightStyle(this.options.heightStyle);
        this.tabs.not(this.active).attr({
          "aria-selected": "false",
          "aria-expanded": "false",
          tabIndex: -1
        });
        this.panels.not(this._getPanelForTab(this.active)).hide().attr({
          "aria-hidden": "true"
        });
        if (!this.active.length) {
          this.tabs.eq(0).attr("tabIndex", 0);
        } else {
          this.active.attr({
            "aria-selected": "true",
            "aria-expanded": "true",
            tabIndex: 0
          });
          this._addClass(this.active, "ui-tabs-active", "ui-state-active");
          this._getPanelForTab(this.active).show().attr({
            "aria-hidden": "false"
          });
        }
      },
      _processTabs: function() {
        var that = this, prevTabs = this.tabs, prevAnchors = this.anchors, prevPanels = this.panels;
        this.tablist = this._getList().attr("role", "tablist");
        this._addClass(
          this.tablist,
          "ui-tabs-nav",
          "ui-helper-reset ui-helper-clearfix ui-widget-header"
        );
        this.tablist.on("mousedown" + this.eventNamespace, "> li", function(event) {
          if ($2(this).is(".ui-state-disabled")) {
            event.preventDefault();
          }
        }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
          if ($2(this).closest("li").is(".ui-state-disabled")) {
            this.blur();
          }
        });
        this.tabs = this.tablist.find("> li:has(a[href])").attr({
          role: "tab",
          tabIndex: -1
        });
        this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default");
        this.anchors = this.tabs.map(function() {
          return $2("a", this)[0];
        }).attr({
          tabIndex: -1
        });
        this._addClass(this.anchors, "ui-tabs-anchor");
        this.panels = $2();
        this.anchors.each(function(i, anchor) {
          var selector, panel, panelId, anchorId = $2(anchor).uniqueId().attr("id"), tab = $2(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
          if (that._isLocal(anchor)) {
            selector = anchor.hash;
            panelId = selector.substring(1);
            panel = that.element.find(that._sanitizeSelector(selector));
          } else {
            panelId = tab.attr("aria-controls") || $2({}).uniqueId()[0].id;
            selector = "#" + panelId;
            panel = that.element.find(selector);
            if (!panel.length) {
              panel = that._createPanel(panelId);
              panel.insertAfter(that.panels[i - 1] || that.tablist);
            }
            panel.attr("aria-live", "polite");
          }
          if (panel.length) {
            that.panels = that.panels.add(panel);
          }
          if (originalAriaControls) {
            tab.data("ui-tabs-aria-controls", originalAriaControls);
          }
          tab.attr({
            "aria-controls": panelId,
            "aria-labelledby": anchorId
          });
          panel.attr("aria-labelledby", anchorId);
        });
        this.panels.attr("role", "tabpanel");
        this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content");
        if (prevTabs) {
          this._off(prevTabs.not(this.tabs));
          this._off(prevAnchors.not(this.anchors));
          this._off(prevPanels.not(this.panels));
        }
      },
      // Allow overriding how to find the list for rare usage scenarios (#7715)
      _getList: function() {
        return this.tablist || this.element.find("ol, ul").eq(0);
      },
      _createPanel: function(id) {
        return $2("<div>").attr("id", id).data("ui-tabs-destroy", true);
      },
      _setOptionDisabled: function(disabled) {
        var currentItem, li, i;
        if (Array.isArray(disabled)) {
          if (!disabled.length) {
            disabled = false;
          } else if (disabled.length === this.anchors.length) {
            disabled = true;
          }
        }
        for (i = 0; li = this.tabs[i]; i++) {
          currentItem = $2(li);
          if (disabled === true || $2.inArray(i, disabled) !== -1) {
            currentItem.attr("aria-disabled", "true");
            this._addClass(currentItem, null, "ui-state-disabled");
          } else {
            currentItem.removeAttr("aria-disabled");
            this._removeClass(currentItem, null, "ui-state-disabled");
          }
        }
        this.options.disabled = disabled;
        this._toggleClass(
          this.widget(),
          this.widgetFullName + "-disabled",
          null,
          disabled === true
        );
      },
      _setupEvents: function(event) {
        var events = {};
        if (event) {
          $2.each(event.split(" "), function(index, eventName) {
            events[eventName] = "_eventHandler";
          });
        }
        this._off(this.anchors.add(this.tabs).add(this.panels));
        this._on(true, this.anchors, {
          click: function(event2) {
            event2.preventDefault();
          }
        });
        this._on(this.anchors, events);
        this._on(this.tabs, { keydown: "_tabKeydown" });
        this._on(this.panels, { keydown: "_panelKeydown" });
        this._focusable(this.tabs);
        this._hoverable(this.tabs);
      },
      _setupHeightStyle: function(heightStyle) {
        var maxHeight, parent = this.element.parent();
        if (heightStyle === "fill") {
          maxHeight = parent.height();
          maxHeight -= this.element.outerHeight() - this.element.height();
          this.element.siblings(":visible").each(function() {
            var elem = $2(this), position2 = elem.css("position");
            if (position2 === "absolute" || position2 === "fixed") {
              return;
            }
            maxHeight -= elem.outerHeight(true);
          });
          this.element.children().not(this.panels).each(function() {
            maxHeight -= $2(this).outerHeight(true);
          });
          this.panels.each(function() {
            $2(this).height(Math.max(0, maxHeight - $2(this).innerHeight() + $2(this).height()));
          }).css("overflow", "auto");
        } else if (heightStyle === "auto") {
          maxHeight = 0;
          this.panels.each(function() {
            maxHeight = Math.max(maxHeight, $2(this).height("").height());
          }).height(maxHeight);
        }
      },
      _eventHandler: function(event) {
        var options = this.options, active = this.active, anchor = $2(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $2() : this._getPanelForTab(tab), toHide = !active.length ? $2() : this._getPanelForTab(active), eventData = {
          oldTab: active,
          oldPanel: toHide,
          newTab: collapsing ? $2() : tab,
          newPanel: toShow
        };
        event.preventDefault();
        if (tab.hasClass("ui-state-disabled") || // tab is already loading
        tab.hasClass("ui-tabs-loading") || // can't switch durning an animation
        this.running || // click on active header, but not collapsible
        clickedIsActive && !options.collapsible || // allow canceling activation
        this._trigger("beforeActivate", event, eventData) === false) {
          return;
        }
        options.active = collapsing ? false : this.tabs.index(tab);
        this.active = clickedIsActive ? $2() : tab;
        if (this.xhr) {
          this.xhr.abort();
        }
        if (!toHide.length && !toShow.length) {
          $2.error("jQuery UI Tabs: Mismatching fragment identifier.");
        }
        if (toShow.length) {
          this.load(this.tabs.index(tab), event);
        }
        this._toggle(event, eventData);
      },
      // Handles show/hide for selecting tabs
      _toggle: function(event, eventData) {
        var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
        this.running = true;
        function complete() {
          that.running = false;
          that._trigger("activate", event, eventData);
        }
        function show() {
          that._addClass(eventData.newTab.closest("li"), "ui-tabs-active", "ui-state-active");
          if (toShow.length && that.options.show) {
            that._show(toShow, that.options.show, complete);
          } else {
            toShow.show();
            complete();
          }
        }
        if (toHide.length && this.options.hide) {
          this._hide(toHide, this.options.hide, function() {
            that._removeClass(
              eventData.oldTab.closest("li"),
              "ui-tabs-active",
              "ui-state-active"
            );
            show();
          });
        } else {
          this._removeClass(
            eventData.oldTab.closest("li"),
            "ui-tabs-active",
            "ui-state-active"
          );
          toHide.hide();
          show();
        }
        toHide.attr("aria-hidden", "true");
        eventData.oldTab.attr({
          "aria-selected": "false",
          "aria-expanded": "false"
        });
        if (toShow.length && toHide.length) {
          eventData.oldTab.attr("tabIndex", -1);
        } else if (toShow.length) {
          this.tabs.filter(function() {
            return $2(this).attr("tabIndex") === 0;
          }).attr("tabIndex", -1);
        }
        toShow.attr("aria-hidden", "false");
        eventData.newTab.attr({
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        });
      },
      _activate: function(index) {
        var anchor, active = this._findActive(index);
        if (active[0] === this.active[0]) {
          return;
        }
        if (!active.length) {
          active = this.active;
        }
        anchor = active.find(".ui-tabs-anchor")[0];
        this._eventHandler({
          target: anchor,
          currentTarget: anchor,
          preventDefault: $2.noop
        });
      },
      _findActive: function(index) {
        return index === false ? $2() : this.tabs.eq(index);
      },
      _getIndex: function(index) {
        if (typeof index === "string") {
          index = this.anchors.index(this.anchors.filter("[href$='" + $2.escapeSelector(index) + "']"));
        }
        return index;
      },
      _destroy: function() {
        if (this.xhr) {
          this.xhr.abort();
        }
        this.tablist.removeAttr("role").off(this.eventNamespace);
        this.anchors.removeAttr("role tabIndex").removeUniqueId();
        this.tabs.add(this.panels).each(function() {
          if ($2.data(this, "ui-tabs-destroy")) {
            $2(this).remove();
          } else {
            $2(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
          }
        });
        this.tabs.each(function() {
          var li = $2(this), prev = li.data("ui-tabs-aria-controls");
          if (prev) {
            li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls");
          } else {
            li.removeAttr("aria-controls");
          }
        });
        this.panels.show();
        if (this.options.heightStyle !== "content") {
          this.panels.css("height", "");
        }
      },
      enable: function(index) {
        var disabled = this.options.disabled;
        if (disabled === false) {
          return;
        }
        if (index === void 0) {
          disabled = false;
        } else {
          index = this._getIndex(index);
          if (Array.isArray(disabled)) {
            disabled = $2.map(disabled, function(num) {
              return num !== index ? num : null;
            });
          } else {
            disabled = $2.map(this.tabs, function(li, num) {
              return num !== index ? num : null;
            });
          }
        }
        this._setOptionDisabled(disabled);
      },
      disable: function(index) {
        var disabled = this.options.disabled;
        if (disabled === true) {
          return;
        }
        if (index === void 0) {
          disabled = true;
        } else {
          index = this._getIndex(index);
          if ($2.inArray(index, disabled) !== -1) {
            return;
          }
          if (Array.isArray(disabled)) {
            disabled = $2.merge([index], disabled).sort();
          } else {
            disabled = [index];
          }
        }
        this._setOptionDisabled(disabled);
      },
      load: function(index, event) {
        index = this._getIndex(index);
        var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
          tab,
          panel
        }, complete = function(jqXHR, status) {
          if (status === "abort") {
            that.panels.stop(false, true);
          }
          that._removeClass(tab, "ui-tabs-loading");
          panel.removeAttr("aria-busy");
          if (jqXHR === that.xhr) {
            delete that.xhr;
          }
        };
        if (this._isLocal(anchor[0])) {
          return;
        }
        this.xhr = $2.ajax(this._ajaxSettings(anchor, event, eventData));
        if (this.xhr && this.xhr.statusText !== "canceled") {
          this._addClass(tab, "ui-tabs-loading");
          panel.attr("aria-busy", "true");
          this.xhr.done(function(response, status, jqXHR) {
            setTimeout(function() {
              panel.html(response);
              that._trigger("load", event, eventData);
              complete(jqXHR, status);
            }, 1);
          }).fail(function(jqXHR, status) {
            setTimeout(function() {
              complete(jqXHR, status);
            }, 1);
          });
        }
      },
      _ajaxSettings: function(anchor, event, eventData) {
        var that = this;
        return {
          // Support: IE <11 only
          // Strip any hash that exists to prevent errors with the Ajax request
          url: anchor.attr("href").replace(/#.*$/, ""),
          beforeSend: function(jqXHR, settings) {
            return that._trigger(
              "beforeLoad",
              event,
              $2.extend({ jqXHR, ajaxSettings: settings }, eventData)
            );
          }
        };
      },
      _getPanelForTab: function(tab) {
        var id = $2(tab).attr("aria-controls");
        return this.element.find(this._sanitizeSelector("#" + id));
      }
    });
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.tabs", $2.ui.tabs, {
        _processTabs: function() {
          this._superApply(arguments);
          this._addClass(this.tabs, "ui-tab");
        }
      });
    }
    var widgetsTabs = $2.ui.tabs;
    $2.widget("ui.tooltip", {
      version: "1.13.0",
      options: {
        classes: {
          "ui-tooltip": "ui-corner-all ui-widget-shadow"
        },
        content: function() {
          var title = $2(this).attr("title");
          return $2("<a>").text(title).html();
        },
        hide: true,
        // Disabled elements have inconsistent behavior across browsers (#8661)
        items: "[title]:not([disabled])",
        position: {
          my: "left top+15",
          at: "left bottom",
          collision: "flipfit flip"
        },
        show: true,
        track: false,
        // Callbacks
        close: null,
        open: null
      },
      _addDescribedBy: function(elem, id) {
        var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
        describedby.push(id);
        elem.data("ui-tooltip-id", id).attr("aria-describedby", String.prototype.trim.call(describedby.join(" ")));
      },
      _removeDescribedBy: function(elem) {
        var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $2.inArray(id, describedby);
        if (index !== -1) {
          describedby.splice(index, 1);
        }
        elem.removeData("ui-tooltip-id");
        describedby = String.prototype.trim.call(describedby.join(" "));
        if (describedby) {
          elem.attr("aria-describedby", describedby);
        } else {
          elem.removeAttr("aria-describedby");
        }
      },
      _create: function() {
        this._on({
          mouseover: "open",
          focusin: "open"
        });
        this.tooltips = {};
        this.parents = {};
        this.liveRegion = $2("<div>").attr({
          role: "log",
          "aria-live": "assertive",
          "aria-relevant": "additions"
        }).appendTo(this.document[0].body);
        this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
        this.disabledTitles = $2([]);
      },
      _setOption: function(key, value) {
        var that = this;
        this._super(key, value);
        if (key === "content") {
          $2.each(this.tooltips, function(id, tooltipData) {
            that._updateContent(tooltipData.element);
          });
        }
      },
      _setOptionDisabled: function(value) {
        this[value ? "_disable" : "_enable"]();
      },
      _disable: function() {
        var that = this;
        $2.each(this.tooltips, function(id, tooltipData) {
          var event = $2.Event("blur");
          event.target = event.currentTarget = tooltipData.element[0];
          that.close(event, true);
        });
        this.disabledTitles = this.disabledTitles.add(
          this.element.find(this.options.items).addBack().filter(function() {
            var element = $2(this);
            if (element.is("[title]")) {
              return element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
            }
          })
        );
      },
      _enable: function() {
        this.disabledTitles.each(function() {
          var element = $2(this);
          if (element.data("ui-tooltip-title")) {
            element.attr("title", element.data("ui-tooltip-title"));
          }
        });
        this.disabledTitles = $2([]);
      },
      open: function(event) {
        var that = this, target = $2(event ? event.target : this.element).closest(this.options.items);
        if (!target.length || target.data("ui-tooltip-id")) {
          return;
        }
        if (target.attr("title")) {
          target.data("ui-tooltip-title", target.attr("title"));
        }
        target.data("ui-tooltip-open", true);
        if (event && event.type === "mouseover") {
          target.parents().each(function() {
            var parent = $2(this), blurEvent;
            if (parent.data("ui-tooltip-open")) {
              blurEvent = $2.Event("blur");
              blurEvent.target = blurEvent.currentTarget = this;
              that.close(blurEvent, true);
            }
            if (parent.attr("title")) {
              parent.uniqueId();
              that.parents[this.id] = {
                element: this,
                title: parent.attr("title")
              };
              parent.attr("title", "");
            }
          });
        }
        this._registerCloseHandlers(event, target);
        this._updateContent(target, event);
      },
      _updateContent: function(target, event) {
        var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
        if (typeof contentOption === "string" || contentOption.nodeType || contentOption.jquery) {
          return this._open(event, target, contentOption);
        }
        content = contentOption.call(target[0], function(response) {
          that._delay(function() {
            if (!target.data("ui-tooltip-open")) {
              return;
            }
            if (event) {
              event.type = eventType;
            }
            this._open(event, target, response);
          });
        });
        if (content) {
          this._open(event, target, content);
        }
      },
      _open: function(event, target, content) {
        var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $2.extend({}, this.options.position);
        if (!content) {
          return;
        }
        tooltipData = this._find(target);
        if (tooltipData) {
          tooltipData.tooltip.find(".ui-tooltip-content").html(content);
          return;
        }
        if (target.is("[title]")) {
          if (event && event.type === "mouseover") {
            target.attr("title", "");
          } else {
            target.removeAttr("title");
          }
        }
        tooltipData = this._tooltip(target);
        tooltip = tooltipData.tooltip;
        this._addDescribedBy(target, tooltip.attr("id"));
        tooltip.find(".ui-tooltip-content").html(content);
        this.liveRegion.children().hide();
        a11yContent = $2("<div>").html(tooltip.find(".ui-tooltip-content").html());
        a11yContent.removeAttr("name").find("[name]").removeAttr("name");
        a11yContent.removeAttr("id").find("[id]").removeAttr("id");
        a11yContent.appendTo(this.liveRegion);
        function position2(event2) {
          positionOption.of = event2;
          if (tooltip.is(":hidden")) {
            return;
          }
          tooltip.position(positionOption);
        }
        if (this.options.track && event && /^mouse/.test(event.type)) {
          this._on(this.document, {
            mousemove: position2
          });
          position2(event);
        } else {
          tooltip.position($2.extend({
            of: target
          }, this.options.position));
        }
        tooltip.hide();
        this._show(tooltip, this.options.show);
        if (this.options.track && this.options.show && this.options.show.delay) {
          delayedShow = this.delayedShow = setInterval(function() {
            if (tooltip.is(":visible")) {
              position2(positionOption.of);
              clearInterval(delayedShow);
            }
          }, 13);
        }
        this._trigger("open", event, { tooltip });
      },
      _registerCloseHandlers: function(event, target) {
        var events = {
          keyup: function(event2) {
            if (event2.keyCode === $2.ui.keyCode.ESCAPE) {
              var fakeEvent = $2.Event(event2);
              fakeEvent.currentTarget = target[0];
              this.close(fakeEvent, true);
            }
          }
        };
        if (target[0] !== this.element[0]) {
          events.remove = function() {
            this._removeTooltip(this._find(target).tooltip);
          };
        }
        if (!event || event.type === "mouseover") {
          events.mouseleave = "close";
        }
        if (!event || event.type === "focusin") {
          events.focusout = "close";
        }
        this._on(true, target, events);
      },
      close: function(event) {
        var tooltip, that = this, target = $2(event ? event.currentTarget : this.element), tooltipData = this._find(target);
        if (!tooltipData) {
          target.removeData("ui-tooltip-open");
          return;
        }
        tooltip = tooltipData.tooltip;
        if (tooltipData.closing) {
          return;
        }
        clearInterval(this.delayedShow);
        if (target.data("ui-tooltip-title") && !target.attr("title")) {
          target.attr("title", target.data("ui-tooltip-title"));
        }
        this._removeDescribedBy(target);
        tooltipData.hiding = true;
        tooltip.stop(true);
        this._hide(tooltip, this.options.hide, function() {
          that._removeTooltip($2(this));
        });
        target.removeData("ui-tooltip-open");
        this._off(target, "mouseleave focusout keyup");
        if (target[0] !== this.element[0]) {
          this._off(target, "remove");
        }
        this._off(this.document, "mousemove");
        if (event && event.type === "mouseleave") {
          $2.each(this.parents, function(id, parent) {
            $2(parent.element).attr("title", parent.title);
            delete that.parents[id];
          });
        }
        tooltipData.closing = true;
        this._trigger("close", event, { tooltip });
        if (!tooltipData.hiding) {
          tooltipData.closing = false;
        }
      },
      _tooltip: function(element) {
        var tooltip = $2("<div>").attr("role", "tooltip"), content = $2("<div>").appendTo(tooltip), id = tooltip.uniqueId().attr("id");
        this._addClass(content, "ui-tooltip-content");
        this._addClass(tooltip, "ui-tooltip", "ui-widget ui-widget-content");
        tooltip.appendTo(this._appendTo(element));
        return this.tooltips[id] = {
          element,
          tooltip
        };
      },
      _find: function(target) {
        var id = target.data("ui-tooltip-id");
        return id ? this.tooltips[id] : null;
      },
      _removeTooltip: function(tooltip) {
        clearInterval(this.delayedShow);
        tooltip.remove();
        delete this.tooltips[tooltip.attr("id")];
      },
      _appendTo: function(target) {
        var element = target.closest(".ui-front, dialog");
        if (!element.length) {
          element = this.document[0].body;
        }
        return element;
      },
      _destroy: function() {
        var that = this;
        $2.each(this.tooltips, function(id, tooltipData) {
          var event = $2.Event("blur"), element = tooltipData.element;
          event.target = event.currentTarget = element[0];
          that.close(event, true);
          $2("#" + id).remove();
          if (element.data("ui-tooltip-title")) {
            if (!element.attr("title")) {
              element.attr("title", element.data("ui-tooltip-title"));
            }
            element.removeData("ui-tooltip-title");
          }
        });
        this.liveRegion.remove();
      }
    });
    if ($2.uiBackCompat !== false) {
      $2.widget("ui.tooltip", $2.ui.tooltip, {
        options: {
          tooltipClass: null
        },
        _tooltip: function() {
          var tooltipData = this._superApply(arguments);
          if (this.options.tooltipClass) {
            tooltipData.tooltip.addClass(this.options.tooltipClass);
          }
          return tooltipData;
        }
      });
    }
    var widgetsTooltip = $2.ui.tooltip;
    var jQuery2 = $2;
    var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", class2type = {}, toString = class2type.toString, rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [{
      re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function(execResult) {
        return [
          execResult[1],
          execResult[2],
          execResult[3],
          execResult[4]
        ];
      }
    }, {
      re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function(execResult) {
        return [
          execResult[1] * 2.55,
          execResult[2] * 2.55,
          execResult[3] * 2.55,
          execResult[4]
        ];
      }
    }, {
      // this regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,
      parse: function(execResult) {
        return [
          parseInt(execResult[1], 16),
          parseInt(execResult[2], 16),
          parseInt(execResult[3], 16),
          execResult[4] ? (parseInt(execResult[4], 16) / 255).toFixed(2) : 1
        ];
      }
    }, {
      // this regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,
      parse: function(execResult) {
        return [
          parseInt(execResult[1] + execResult[1], 16),
          parseInt(execResult[2] + execResult[2], 16),
          parseInt(execResult[3] + execResult[3], 16),
          execResult[4] ? (parseInt(execResult[4] + execResult[4], 16) / 255).toFixed(2) : 1
        ];
      }
    }, {
      re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      space: "hsla",
      parse: function(execResult) {
        return [
          execResult[1],
          execResult[2] / 100,
          execResult[3] / 100,
          execResult[4]
        ];
      }
    }], color = jQuery2.Color = function(color2, green, blue, alpha) {
      return new jQuery2.Color.fn.parse(color2, green, blue, alpha);
    }, spaces = {
      rgba: {
        props: {
          red: {
            idx: 0,
            type: "byte"
          },
          green: {
            idx: 1,
            type: "byte"
          },
          blue: {
            idx: 2,
            type: "byte"
          }
        }
      },
      hsla: {
        props: {
          hue: {
            idx: 0,
            type: "degrees"
          },
          saturation: {
            idx: 1,
            type: "percent"
          },
          lightness: {
            idx: 2,
            type: "percent"
          }
        }
      }
    }, propTypes = {
      "byte": {
        floor: true,
        max: 255
      },
      "percent": {
        max: 1
      },
      "degrees": {
        mod: 360,
        floor: true
      }
    }, support = color.support = {}, supportElem = jQuery2("<p>")[0], colors, each = jQuery2.each;
    supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
    support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
    each(spaces, function(spaceName, space) {
      space.cache = "_" + spaceName;
      space.props.alpha = {
        idx: 3,
        type: "percent",
        def: 1
      };
    });
    jQuery2.each(
      "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
      function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      }
    );
    function getType(obj) {
      if (obj == null) {
        return obj + "";
      }
      return typeof obj === "object" ? class2type[toString.call(obj)] || "object" : typeof obj;
    }
    function clamp(value, prop, allowEmpty) {
      var type = propTypes[prop.type] || {};
      if (value == null) {
        return allowEmpty || !prop.def ? null : prop.def;
      }
      value = type.floor ? ~~value : parseFloat(value);
      if (isNaN(value)) {
        return prop.def;
      }
      if (type.mod) {
        return (value + type.mod) % type.mod;
      }
      return Math.min(type.max, Math.max(0, value));
    }
    function stringParse(string) {
      var inst = color(), rgba = inst._rgba = [];
      string = string.toLowerCase();
      each(stringParsers, function(_i, parser) {
        var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
        if (values) {
          parsed = inst[spaceName](values);
          inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
          rgba = inst._rgba = parsed._rgba;
          return false;
        }
      });
      if (rgba.length) {
        if (rgba.join() === "0,0,0,0") {
          jQuery2.extend(rgba, colors.transparent);
        }
        return inst;
      }
      return colors[string];
    }
    color.fn = jQuery2.extend(color.prototype, {
      parse: function(red, green, blue, alpha) {
        if (red === void 0) {
          this._rgba = [null, null, null, null];
          return this;
        }
        if (red.jquery || red.nodeType) {
          red = jQuery2(red).css(green);
          green = void 0;
        }
        var inst = this, type = getType(red), rgba = this._rgba = [];
        if (green !== void 0) {
          red = [red, green, blue, alpha];
          type = "array";
        }
        if (type === "string") {
          return this.parse(stringParse(red) || colors._default);
        }
        if (type === "array") {
          each(spaces.rgba.props, function(_key, prop) {
            rgba[prop.idx] = clamp(red[prop.idx], prop);
          });
          return this;
        }
        if (type === "object") {
          if (red instanceof color) {
            each(spaces, function(_spaceName, space) {
              if (red[space.cache]) {
                inst[space.cache] = red[space.cache].slice();
              }
            });
          } else {
            each(spaces, function(_spaceName, space) {
              var cache2 = space.cache;
              each(space.props, function(key, prop) {
                if (!inst[cache2] && space.to) {
                  if (key === "alpha" || red[key] == null) {
                    return;
                  }
                  inst[cache2] = space.to(inst._rgba);
                }
                inst[cache2][prop.idx] = clamp(red[key], prop, true);
              });
              if (inst[cache2] && jQuery2.inArray(null, inst[cache2].slice(0, 3)) < 0) {
                if (inst[cache2][3] == null) {
                  inst[cache2][3] = 1;
                }
                if (space.from) {
                  inst._rgba = space.from(inst[cache2]);
                }
              }
            });
          }
          return this;
        }
      },
      is: function(compare) {
        var is = color(compare), same = true, inst = this;
        each(spaces, function(_, space) {
          var localCache, isCache = is[space.cache];
          if (isCache) {
            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
            each(space.props, function(_2, prop) {
              if (isCache[prop.idx] != null) {
                same = isCache[prop.idx] === localCache[prop.idx];
                return same;
              }
            });
          }
          return same;
        });
        return same;
      },
      _space: function() {
        var used = [], inst = this;
        each(spaces, function(spaceName, space) {
          if (inst[space.cache]) {
            used.push(spaceName);
          }
        });
        return used.pop();
      },
      transition: function(other, distance) {
        var end3 = color(other), spaceName = end3._space(), space = spaces[spaceName], startColor = this.alpha() === 0 ? color("transparent") : this, start5 = startColor[space.cache] || space.to(startColor._rgba), result = start5.slice();
        end3 = end3[space.cache];
        each(space.props, function(_key, prop) {
          var index = prop.idx, startValue = start5[index], endValue = end3[index], type = propTypes[prop.type] || {};
          if (endValue === null) {
            return;
          }
          if (startValue === null) {
            result[index] = endValue;
          } else {
            if (type.mod) {
              if (endValue - startValue > type.mod / 2) {
                startValue += type.mod;
              } else if (startValue - endValue > type.mod / 2) {
                startValue -= type.mod;
              }
            }
            result[index] = clamp((endValue - startValue) * distance + startValue, prop);
          }
        });
        return this[spaceName](result);
      },
      blend: function(opaque) {
        if (this._rgba[3] === 1) {
          return this;
        }
        var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
        return color(jQuery2.map(rgb, function(v, i) {
          return (1 - a) * blend[i] + a * v;
        }));
      },
      toRgbaString: function() {
        var prefix = "rgba(", rgba = jQuery2.map(this._rgba, function(v, i) {
          if (v != null) {
            return v;
          }
          return i > 2 ? 1 : 0;
        });
        if (rgba[3] === 1) {
          rgba.pop();
          prefix = "rgb(";
        }
        return prefix + rgba.join() + ")";
      },
      toHslaString: function() {
        var prefix = "hsla(", hsla = jQuery2.map(this.hsla(), function(v, i) {
          if (v == null) {
            v = i > 2 ? 1 : 0;
          }
          if (i && i < 3) {
            v = Math.round(v * 100) + "%";
          }
          return v;
        });
        if (hsla[3] === 1) {
          hsla.pop();
          prefix = "hsl(";
        }
        return prefix + hsla.join() + ")";
      },
      toHexString: function(includeAlpha) {
        var rgba = this._rgba.slice(), alpha = rgba.pop();
        if (includeAlpha) {
          rgba.push(~~(alpha * 255));
        }
        return "#" + jQuery2.map(rgba, function(v) {
          v = (v || 0).toString(16);
          return v.length === 1 ? "0" + v : v;
        }).join("");
      },
      toString: function() {
        return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
      }
    });
    color.fn.parse.prototype = color.fn;
    function hue2rgb(p, q, h) {
      h = (h + 1) % 1;
      if (h * 6 < 1) {
        return p + (q - p) * h * 6;
      }
      if (h * 2 < 1) {
        return q;
      }
      if (h * 3 < 2) {
        return p + (q - p) * (2 / 3 - h) * 6;
      }
      return p;
    }
    spaces.hsla.to = function(rgba) {
      if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
        return [null, null, null, rgba[3]];
      }
      var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max2 = Math.max(r, g, b), min2 = Math.min(r, g, b), diff = max2 - min2, add2 = max2 + min2, l = add2 * 0.5, h, s;
      if (min2 === max2) {
        h = 0;
      } else if (r === max2) {
        h = 60 * (g - b) / diff + 360;
      } else if (g === max2) {
        h = 60 * (b - r) / diff + 120;
      } else {
        h = 60 * (r - g) / diff + 240;
      }
      if (diff === 0) {
        s = 0;
      } else if (l <= 0.5) {
        s = diff / add2;
      } else {
        s = diff / (2 - add2);
      }
      return [Math.round(h) % 360, s, l, a == null ? 1 : a];
    };
    spaces.hsla.from = function(hsla) {
      if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
        return [null, null, null, hsla[3]];
      }
      var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= 0.5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
      return [
        Math.round(hue2rgb(p, q, h + 1 / 3) * 255),
        Math.round(hue2rgb(p, q, h) * 255),
        Math.round(hue2rgb(p, q, h - 1 / 3) * 255),
        a
      ];
    };
    each(spaces, function(spaceName, space) {
      var props = space.props, cache2 = space.cache, to = space.to, from = space.from;
      color.fn[spaceName] = function(value) {
        if (to && !this[cache2]) {
          this[cache2] = to(this._rgba);
        }
        if (value === void 0) {
          return this[cache2].slice();
        }
        var ret, type = getType(value), arr = type === "array" || type === "object" ? value : arguments, local = this[cache2].slice();
        each(props, function(key, prop) {
          var val = arr[type === "object" ? key : prop.idx];
          if (val == null) {
            val = local[prop.idx];
          }
          local[prop.idx] = clamp(val, prop);
        });
        if (from) {
          ret = color(from(local));
          ret[cache2] = local;
          return ret;
        } else {
          return color(local);
        }
      };
      each(props, function(key, prop) {
        if (color.fn[key]) {
          return;
        }
        color.fn[key] = function(value) {
          var local, cur, match, fn2, vtype = getType(value);
          if (key === "alpha") {
            fn2 = this._hsla ? "hsla" : "rgba";
          } else {
            fn2 = spaceName;
          }
          local = this[fn2]();
          cur = local[prop.idx];
          if (vtype === "undefined") {
            return cur;
          }
          if (vtype === "function") {
            value = value.call(this, cur);
            vtype = getType(value);
          }
          if (value == null && prop.empty) {
            return this;
          }
          if (vtype === "string") {
            match = rplusequals.exec(value);
            if (match) {
              value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1);
            }
          }
          local[prop.idx] = value;
          return this[fn2](local);
        };
      });
    });
    color.hook = function(hook) {
      var hooks = hook.split(" ");
      each(hooks, function(_i, hook2) {
        jQuery2.cssHooks[hook2] = {
          set: function(elem, value) {
            var parsed, curElem, backgroundColor = "";
            if (value !== "transparent" && (getType(value) !== "string" || (parsed = stringParse(value)))) {
              value = color(parsed || value);
              if (!support.rgba && value._rgba[3] !== 1) {
                curElem = hook2 === "backgroundColor" ? elem.parentNode : elem;
                while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                  try {
                    backgroundColor = jQuery2.css(curElem, "backgroundColor");
                    curElem = curElem.parentNode;
                  } catch (e) {
                  }
                }
                value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
              }
              value = value.toRgbaString();
            }
            try {
              elem.style[hook2] = value;
            } catch (e) {
            }
          }
        };
        jQuery2.fx.step[hook2] = function(fx) {
          if (!fx.colorInit) {
            fx.start = color(fx.elem, hook2);
            fx.end = color(fx.end);
            fx.colorInit = true;
          }
          jQuery2.cssHooks[hook2].set(fx.elem, fx.start.transition(fx.end, fx.pos));
        };
      });
    };
    color.hook(stepHooks);
    jQuery2.cssHooks.borderColor = {
      expand: function(value) {
        var expanded = {};
        each(["Top", "Right", "Bottom", "Left"], function(_i, part) {
          expanded["border" + part + "Color"] = value;
        });
        return expanded;
      }
    };
    colors = jQuery2.Color.names = {
      // 4.1. Basic color keywords
      aqua: "#00ffff",
      black: "#000000",
      blue: "#0000ff",
      fuchsia: "#ff00ff",
      gray: "#808080",
      green: "#008000",
      lime: "#00ff00",
      maroon: "#800000",
      navy: "#000080",
      olive: "#808000",
      purple: "#800080",
      red: "#ff0000",
      silver: "#c0c0c0",
      teal: "#008080",
      white: "#ffffff",
      yellow: "#ffff00",
      // 4.2.3. "transparent" color keyword
      transparent: [null, null, null, 0],
      _default: "#ffffff"
    };
    var dataSpace = "ui-effects-", dataSpaceStyle = "ui-effects-style", dataSpaceAnimated = "ui-effects-animated";
    $2.effects = {
      effect: {}
    };
    (function() {
      var classAnimationActions = ["add", "remove", "toggle"], shorthandStyles = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
      };
      $2.each(
        ["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"],
        function(_, prop) {
          $2.fx.step[prop] = function(fx) {
            if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
              jQuery2.style(fx.elem, prop, fx.end);
              fx.setAttr = true;
            }
          };
        }
      );
      function camelCase(string) {
        return string.replace(/-([\da-z])/gi, function(all, letter) {
          return letter.toUpperCase();
        });
      }
      function getElementStyles(elem) {
        var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
        if (style && style.length && style[0] && style[style[0]]) {
          len = style.length;
          while (len--) {
            key = style[len];
            if (typeof style[key] === "string") {
              styles[camelCase(key)] = style[key];
            }
          }
        } else {
          for (key in style) {
            if (typeof style[key] === "string") {
              styles[key] = style[key];
            }
          }
        }
        return styles;
      }
      function styleDifference(oldStyle, newStyle) {
        var diff = {}, name, value;
        for (name in newStyle) {
          value = newStyle[name];
          if (oldStyle[name] !== value) {
            if (!shorthandStyles[name]) {
              if ($2.fx.step[name] || !isNaN(parseFloat(value))) {
                diff[name] = value;
              }
            }
          }
        }
        return diff;
      }
      if (!$2.fn.addBack) {
        $2.fn.addBack = function(selector) {
          return this.add(
            selector == null ? this.prevObject : this.prevObject.filter(selector)
          );
        };
      }
      $2.effects.animateClass = function(value, duration, easing, callback) {
        var o = $2.speed(duration, easing, callback);
        return this.queue(function() {
          var animated = $2(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
          allAnimations = allAnimations.map(function() {
            var el = $2(this);
            return {
              el,
              start: getElementStyles(this)
            };
          });
          applyClassChange = function() {
            $2.each(classAnimationActions, function(i, action) {
              if (value[action]) {
                animated[action + "Class"](value[action]);
              }
            });
          };
          applyClassChange();
          allAnimations = allAnimations.map(function() {
            this.end = getElementStyles(this.el[0]);
            this.diff = styleDifference(this.start, this.end);
            return this;
          });
          animated.attr("class", baseClass);
          allAnimations = allAnimations.map(function() {
            var styleInfo = this, dfd = $2.Deferred(), opts = $2.extend({}, o, {
              queue: false,
              complete: function() {
                dfd.resolve(styleInfo);
              }
            });
            this.el.animate(this.diff, opts);
            return dfd.promise();
          });
          $2.when.apply($2, allAnimations.get()).done(function() {
            applyClassChange();
            $2.each(arguments, function() {
              var el = this.el;
              $2.each(this.diff, function(key) {
                el.css(key, "");
              });
            });
            o.complete.call(animated[0]);
          });
        });
      };
      $2.fn.extend({
        addClass: /* @__PURE__ */ function(orig) {
          return function(classNames, speed, easing, callback) {
            return speed ? $2.effects.animateClass.call(
              this,
              { add: classNames },
              speed,
              easing,
              callback
            ) : orig.apply(this, arguments);
          };
        }($2.fn.addClass),
        removeClass: /* @__PURE__ */ function(orig) {
          return function(classNames, speed, easing, callback) {
            return arguments.length > 1 ? $2.effects.animateClass.call(
              this,
              { remove: classNames },
              speed,
              easing,
              callback
            ) : orig.apply(this, arguments);
          };
        }($2.fn.removeClass),
        toggleClass: /* @__PURE__ */ function(orig) {
          return function(classNames, force, speed, easing, callback) {
            if (typeof force === "boolean" || force === void 0) {
              if (!speed) {
                return orig.apply(this, arguments);
              } else {
                return $2.effects.animateClass.call(
                  this,
                  force ? { add: classNames } : { remove: classNames },
                  speed,
                  easing,
                  callback
                );
              }
            } else {
              return $2.effects.animateClass.call(
                this,
                { toggle: classNames },
                force,
                speed,
                easing
              );
            }
          };
        }($2.fn.toggleClass),
        switchClass: function(remove, add2, speed, easing, callback) {
          return $2.effects.animateClass.call(this, {
            add: add2,
            remove
          }, speed, easing, callback);
        }
      });
    })();
    (function() {
      if ($2.expr && $2.expr.pseudos && $2.expr.pseudos.animated) {
        $2.expr.pseudos.animated = /* @__PURE__ */ function(orig) {
          return function(elem) {
            return !!$2(elem).data(dataSpaceAnimated) || orig(elem);
          };
        }($2.expr.pseudos.animated);
      }
      if ($2.uiBackCompat !== false) {
        $2.extend($2.effects, {
          // Saves a set of properties in a data storage
          save: function(element, set) {
            var i = 0, length = set.length;
            for (; i < length; i++) {
              if (set[i] !== null) {
                element.data(dataSpace + set[i], element[0].style[set[i]]);
              }
            }
          },
          // Restores a set of previously saved properties from a data storage
          restore: function(element, set) {
            var val, i = 0, length = set.length;
            for (; i < length; i++) {
              if (set[i] !== null) {
                val = element.data(dataSpace + set[i]);
                element.css(set[i], val);
              }
            }
          },
          setMode: function(el, mode) {
            if (mode === "toggle") {
              mode = el.is(":hidden") ? "show" : "hide";
            }
            return mode;
          },
          // Wraps the element around a wrapper that copies position properties
          createWrapper: function(element) {
            if (element.parent().is(".ui-effects-wrapper")) {
              return element.parent();
            }
            var props = {
              width: element.outerWidth(true),
              height: element.outerHeight(true),
              "float": element.css("float")
            }, wrapper = $2("<div></div>").addClass("ui-effects-wrapper").css({
              fontSize: "100%",
              background: "transparent",
              border: "none",
              margin: 0,
              padding: 0
            }), size = {
              width: element.width(),
              height: element.height()
            }, active = document.activeElement;
            try {
              active.id;
            } catch (e) {
              active = document.body;
            }
            element.wrap(wrapper);
            if (element[0] === active || $2.contains(element[0], active)) {
              $2(active).trigger("focus");
            }
            wrapper = element.parent();
            if (element.css("position") === "static") {
              wrapper.css({ position: "relative" });
              element.css({ position: "relative" });
            } else {
              $2.extend(props, {
                position: element.css("position"),
                zIndex: element.css("z-index")
              });
              $2.each(["top", "left", "bottom", "right"], function(i, pos) {
                props[pos] = element.css(pos);
                if (isNaN(parseInt(props[pos], 10))) {
                  props[pos] = "auto";
                }
              });
              element.css({
                position: "relative",
                top: 0,
                left: 0,
                right: "auto",
                bottom: "auto"
              });
            }
            element.css(size);
            return wrapper.css(props).show();
          },
          removeWrapper: function(element) {
            var active = document.activeElement;
            if (element.parent().is(".ui-effects-wrapper")) {
              element.parent().replaceWith(element);
              if (element[0] === active || $2.contains(element[0], active)) {
                $2(active).trigger("focus");
              }
            }
            return element;
          }
        });
      }
      $2.extend($2.effects, {
        version: "1.13.0",
        define: function(name, mode, effect5) {
          if (!effect5) {
            effect5 = mode;
            mode = "effect";
          }
          $2.effects.effect[name] = effect5;
          $2.effects.effect[name].mode = mode;
          return effect5;
        },
        scaledDimensions: function(element, percent, direction) {
          if (percent === 0) {
            return {
              height: 0,
              width: 0,
              outerHeight: 0,
              outerWidth: 0
            };
          }
          var x = direction !== "horizontal" ? (percent || 100) / 100 : 1, y = direction !== "vertical" ? (percent || 100) / 100 : 1;
          return {
            height: element.height() * y,
            width: element.width() * x,
            outerHeight: element.outerHeight() * y,
            outerWidth: element.outerWidth() * x
          };
        },
        clipToBox: function(animation) {
          return {
            width: animation.clip.right - animation.clip.left,
            height: animation.clip.bottom - animation.clip.top,
            left: animation.clip.left,
            top: animation.clip.top
          };
        },
        // Injects recently queued functions to be first in line (after "inprogress")
        unshift: function(element, queueLength, count) {
          var queue = element.queue();
          if (queueLength > 1) {
            queue.splice.apply(
              queue,
              [1, 0].concat(queue.splice(queueLength, count))
            );
          }
          element.dequeue();
        },
        saveStyle: function(element) {
          element.data(dataSpaceStyle, element[0].style.cssText);
        },
        restoreStyle: function(element) {
          element[0].style.cssText = element.data(dataSpaceStyle) || "";
          element.removeData(dataSpaceStyle);
        },
        mode: function(element, mode) {
          var hidden = element.is(":hidden");
          if (mode === "toggle") {
            mode = hidden ? "show" : "hide";
          }
          if (hidden ? mode === "hide" : mode === "show") {
            mode = "none";
          }
          return mode;
        },
        // Translates a [top,left] array into a baseline value
        getBaseline: function(origin, original) {
          var y, x;
          switch (origin[0]) {
            case "top":
              y = 0;
              break;
            case "middle":
              y = 0.5;
              break;
            case "bottom":
              y = 1;
              break;
            default:
              y = origin[0] / original.height;
          }
          switch (origin[1]) {
            case "left":
              x = 0;
              break;
            case "center":
              x = 0.5;
              break;
            case "right":
              x = 1;
              break;
            default:
              x = origin[1] / original.width;
          }
          return {
            x,
            y
          };
        },
        // Creates a placeholder element so that the original element can be made absolute
        createPlaceholder: function(element) {
          var placeholder, cssPosition = element.css("position"), position2 = element.position();
          element.css({
            marginTop: element.css("marginTop"),
            marginBottom: element.css("marginBottom"),
            marginLeft: element.css("marginLeft"),
            marginRight: element.css("marginRight")
          }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());
          if (/^(static|relative)/.test(cssPosition)) {
            cssPosition = "absolute";
            placeholder = $2("<" + element[0].nodeName + ">").insertAfter(element).css({
              // Convert inline to inline block to account for inline elements
              // that turn to inline block based on content (like img)
              display: /^(inline|ruby)/.test(element.css("display")) ? "inline-block" : "block",
              visibility: "hidden",
              // Margins need to be set to account for margin collapse
              marginTop: element.css("marginTop"),
              marginBottom: element.css("marginBottom"),
              marginLeft: element.css("marginLeft"),
              marginRight: element.css("marginRight"),
              "float": element.css("float")
            }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass("ui-effects-placeholder");
            element.data(dataSpace + "placeholder", placeholder);
          }
          element.css({
            position: cssPosition,
            left: position2.left,
            top: position2.top
          });
          return placeholder;
        },
        removePlaceholder: function(element) {
          var dataKey = dataSpace + "placeholder", placeholder = element.data(dataKey);
          if (placeholder) {
            placeholder.remove();
            element.removeData(dataKey);
          }
        },
        // Removes a placeholder if it exists and restores
        // properties that were modified during placeholder creation
        cleanUp: function(element) {
          $2.effects.restoreStyle(element);
          $2.effects.removePlaceholder(element);
        },
        setTransition: function(element, list, factor, value) {
          value = value || {};
          $2.each(list, function(i, x) {
            var unit = element.cssUnit(x);
            if (unit[0] > 0) {
              value[x] = unit[0] * factor + unit[1];
            }
          });
          return value;
        }
      });
      function _normalizeArguments(effect5, options, speed, callback) {
        if ($2.isPlainObject(effect5)) {
          options = effect5;
          effect5 = effect5.effect;
        }
        effect5 = { effect: effect5 };
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          callback = options;
          speed = null;
          options = {};
        }
        if (typeof options === "number" || $2.fx.speeds[options]) {
          callback = speed;
          speed = options;
          options = {};
        }
        if (typeof speed === "function") {
          callback = speed;
          speed = null;
        }
        if (options) {
          $2.extend(effect5, options);
        }
        speed = speed || options.duration;
        effect5.duration = $2.fx.off ? 0 : typeof speed === "number" ? speed : speed in $2.fx.speeds ? $2.fx.speeds[speed] : $2.fx.speeds._default;
        effect5.complete = callback || options.complete;
        return effect5;
      }
      function standardAnimationOption(option) {
        if (!option || typeof option === "number" || $2.fx.speeds[option]) {
          return true;
        }
        if (typeof option === "string" && !$2.effects.effect[option]) {
          return true;
        }
        if (typeof option === "function") {
          return true;
        }
        if (typeof option === "object" && !option.effect) {
          return true;
        }
        return false;
      }
      $2.fn.extend({
        effect: function() {
          var args = _normalizeArguments.apply(this, arguments), effectMethod = $2.effects.effect[args.effect], defaultMode = effectMethod.mode, queue = args.queue, queueName = queue || "fx", complete = args.complete, mode = args.mode, modes = [], prefilter = function(next) {
            var el = $2(this), normalizedMode = $2.effects.mode(el, mode) || defaultMode;
            el.data(dataSpaceAnimated, true);
            modes.push(normalizedMode);
            if (defaultMode && (normalizedMode === "show" || normalizedMode === defaultMode && normalizedMode === "hide")) {
              el.show();
            }
            if (!defaultMode || normalizedMode !== "none") {
              $2.effects.saveStyle(el);
            }
            if (typeof next === "function") {
              next();
            }
          };
          if ($2.fx.off || !effectMethod) {
            if (mode) {
              return this[mode](args.duration, complete);
            } else {
              return this.each(function() {
                if (complete) {
                  complete.call(this);
                }
              });
            }
          }
          function run(next) {
            var elem = $2(this);
            function cleanup() {
              elem.removeData(dataSpaceAnimated);
              $2.effects.cleanUp(elem);
              if (args.mode === "hide") {
                elem.hide();
              }
              done();
            }
            function done() {
              if (typeof complete === "function") {
                complete.call(elem[0]);
              }
              if (typeof next === "function") {
                next();
              }
            }
            args.mode = modes.shift();
            if ($2.uiBackCompat !== false && !defaultMode) {
              if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                elem[mode]();
                done();
              } else {
                effectMethod.call(elem[0], args, done);
              }
            } else {
              if (args.mode === "none") {
                elem[mode]();
                done();
              } else {
                effectMethod.call(elem[0], args, cleanup);
              }
            }
          }
          return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run);
        },
        show: /* @__PURE__ */ function(orig) {
          return function(option) {
            if (standardAnimationOption(option)) {
              return orig.apply(this, arguments);
            } else {
              var args = _normalizeArguments.apply(this, arguments);
              args.mode = "show";
              return this.effect.call(this, args);
            }
          };
        }($2.fn.show),
        hide: /* @__PURE__ */ function(orig) {
          return function(option) {
            if (standardAnimationOption(option)) {
              return orig.apply(this, arguments);
            } else {
              var args = _normalizeArguments.apply(this, arguments);
              args.mode = "hide";
              return this.effect.call(this, args);
            }
          };
        }($2.fn.hide),
        toggle: /* @__PURE__ */ function(orig) {
          return function(option) {
            if (standardAnimationOption(option) || typeof option === "boolean") {
              return orig.apply(this, arguments);
            } else {
              var args = _normalizeArguments.apply(this, arguments);
              args.mode = "toggle";
              return this.effect.call(this, args);
            }
          };
        }($2.fn.toggle),
        cssUnit: function(key) {
          var style = this.css(key), val = [];
          $2.each(["em", "px", "%", "pt"], function(i, unit) {
            if (style.indexOf(unit) > 0) {
              val = [parseFloat(style), unit];
            }
          });
          return val;
        },
        cssClip: function(clipObj) {
          if (clipObj) {
            return this.css("clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " + clipObj.bottom + "px " + clipObj.left + "px)");
          }
          return parseClip(this.css("clip"), this);
        },
        transfer: function(options, done) {
          var element = $2(this), target = $2(options.to), targetFixed = target.css("position") === "fixed", body = $2("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
            top: endPosition.top - fixTop,
            left: endPosition.left - fixLeft,
            height: target.innerHeight(),
            width: target.innerWidth()
          }, startPosition = element.offset(), transfer = $2("<div class='ui-effects-transfer'></div>");
          transfer.appendTo("body").addClass(options.className).css({
            top: startPosition.top - fixTop,
            left: startPosition.left - fixLeft,
            height: element.innerHeight(),
            width: element.innerWidth(),
            position: targetFixed ? "fixed" : "absolute"
          }).animate(animation, options.duration, options.easing, function() {
            transfer.remove();
            if (typeof done === "function") {
              done();
            }
          });
        }
      });
      function parseClip(str, element) {
        var outerWidth = element.outerWidth(), outerHeight = element.outerHeight(), clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/, values = clipRegex.exec(str) || ["", 0, outerWidth, outerHeight, 0];
        return {
          top: parseFloat(values[1]) || 0,
          right: values[2] === "auto" ? outerWidth : parseFloat(values[2]),
          bottom: values[3] === "auto" ? outerHeight : parseFloat(values[3]),
          left: parseFloat(values[4]) || 0
        };
      }
      $2.fx.step.clip = function(fx) {
        if (!fx.clipInit) {
          fx.start = $2(fx.elem).cssClip();
          if (typeof fx.end === "string") {
            fx.end = parseClip(fx.end, fx.elem);
          }
          fx.clipInit = true;
        }
        $2(fx.elem).cssClip({
          top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top,
          right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right,
          bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom,
          left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left
        });
      };
    })();
    (function() {
      var baseEasings = {};
      $2.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function(i, name) {
        baseEasings[name] = function(p) {
          return Math.pow(p, i + 2);
        };
      });
      $2.extend(baseEasings, {
        Sine: function(p) {
          return 1 - Math.cos(p * Math.PI / 2);
        },
        Circ: function(p) {
          return 1 - Math.sqrt(1 - p * p);
        },
        Elastic: function(p) {
          return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
        },
        Back: function(p) {
          return p * p * (3 * p - 2);
        },
        Bounce: function(p) {
          var pow2, bounce = 4;
          while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {
          }
          return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
        }
      });
      $2.each(baseEasings, function(name, easeIn) {
        $2.easing["easeIn" + name] = easeIn;
        $2.easing["easeOut" + name] = function(p) {
          return 1 - easeIn(1 - p);
        };
        $2.easing["easeInOut" + name] = function(p) {
          return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
        };
      });
    })();
    var effect4 = $2.effects;
    var effectsEffectBlind = $2.effects.define("blind", "hide", function(options, done) {
      var map = {
        up: ["bottom", "top"],
        vertical: ["bottom", "top"],
        down: ["top", "bottom"],
        left: ["right", "left"],
        horizontal: ["right", "left"],
        right: ["left", "right"]
      }, element = $2(this), direction = options.direction || "up", start5 = element.cssClip(), animate = { clip: $2.extend({}, start5) }, placeholder = $2.effects.createPlaceholder(element);
      animate.clip[map[direction][0]] = animate.clip[map[direction][1]];
      if (options.mode === "show") {
        element.cssClip(animate.clip);
        if (placeholder) {
          placeholder.css($2.effects.clipToBox(animate));
        }
        animate.clip = start5;
      }
      if (placeholder) {
        placeholder.animate($2.effects.clipToBox(animate), options.duration, options.easing);
      }
      element.animate(animate, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effectsEffectBounce = $2.effects.define("bounce", function(options, done) {
      var upAnim, downAnim, refValue, element = $2(this), mode = options.mode, hide2 = mode === "hide", show = mode === "show", direction = options.direction || "up", distance = options.distance, times = options.times || 5, anims = times * 2 + (show || hide2 ? 1 : 0), speed = options.duration / anims, easing = options.easing, ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left", i = 0, queuelen = element.queue().length;
      $2.effects.createPlaceholder(element);
      refValue = element.css(ref);
      if (!distance) {
        distance = element[ref === "top" ? "outerHeight" : "outerWidth"]() / 3;
      }
      if (show) {
        downAnim = { opacity: 1 };
        downAnim[ref] = refValue;
        element.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
      }
      if (hide2) {
        distance = distance / Math.pow(2, times - 1);
      }
      downAnim = {};
      downAnim[ref] = refValue;
      for (; i < times; i++) {
        upAnim = {};
        upAnim[ref] = (motion ? "-=" : "+=") + distance;
        element.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
        distance = hide2 ? distance * 2 : distance / 2;
      }
      if (hide2) {
        upAnim = { opacity: 0 };
        upAnim[ref] = (motion ? "-=" : "+=") + distance;
        element.animate(upAnim, speed, easing);
      }
      element.queue(done);
      $2.effects.unshift(element, queuelen, anims + 1);
    });
    var effectsEffectClip = $2.effects.define("clip", "hide", function(options, done) {
      var start5, animate = {}, element = $2(this), direction = options.direction || "vertical", both = direction === "both", horizontal = both || direction === "horizontal", vertical = both || direction === "vertical";
      start5 = element.cssClip();
      animate.clip = {
        top: vertical ? (start5.bottom - start5.top) / 2 : start5.top,
        right: horizontal ? (start5.right - start5.left) / 2 : start5.right,
        bottom: vertical ? (start5.bottom - start5.top) / 2 : start5.bottom,
        left: horizontal ? (start5.right - start5.left) / 2 : start5.left
      };
      $2.effects.createPlaceholder(element);
      if (options.mode === "show") {
        element.cssClip(animate.clip);
        animate.clip = start5;
      }
      element.animate(animate, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effectsEffectDrop = $2.effects.define("drop", "hide", function(options, done) {
      var distance, element = $2(this), mode = options.mode, show = mode === "show", direction = options.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left" ? "-=" : "+=", oppositeMotion = motion === "+=" ? "-=" : "+=", animation = {
        opacity: 0
      };
      $2.effects.createPlaceholder(element);
      distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;
      animation[ref] = motion + distance;
      if (show) {
        element.css(animation);
        animation[ref] = oppositeMotion + distance;
        animation.opacity = 1;
      }
      element.animate(animation, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effectsEffectExplode = $2.effects.define("explode", "hide", function(options, done) {
      var i, j, left3, top3, mx, my, rows = options.pieces ? Math.round(Math.sqrt(options.pieces)) : 3, cells = rows, element = $2(this), mode = options.mode, show = mode === "show", offset2 = element.show().css("visibility", "hidden").offset(), width = Math.ceil(element.outerWidth() / cells), height = Math.ceil(element.outerHeight() / rows), pieces = [];
      function childComplete() {
        pieces.push(this);
        if (pieces.length === rows * cells) {
          animComplete();
        }
      }
      for (i = 0; i < rows; i++) {
        top3 = offset2.top + i * height;
        my = i - (rows - 1) / 2;
        for (j = 0; j < cells; j++) {
          left3 = offset2.left + j * width;
          mx = j - (cells - 1) / 2;
          element.clone().appendTo("body").wrap("<div></div>").css({
            position: "absolute",
            visibility: "visible",
            left: -j * width,
            top: -i * height
          }).parent().addClass("ui-effects-explode").css({
            position: "absolute",
            overflow: "hidden",
            width,
            height,
            left: left3 + (show ? mx * width : 0),
            top: top3 + (show ? my * height : 0),
            opacity: show ? 0 : 1
          }).animate({
            left: left3 + (show ? 0 : mx * width),
            top: top3 + (show ? 0 : my * height),
            opacity: show ? 1 : 0
          }, options.duration || 500, options.easing, childComplete);
        }
      }
      function animComplete() {
        element.css({
          visibility: "visible"
        });
        $2(pieces).remove();
        done();
      }
    });
    var effectsEffectFade = $2.effects.define("fade", "toggle", function(options, done) {
      var show = options.mode === "show";
      $2(this).css("opacity", show ? 0 : 1).animate({
        opacity: show ? 1 : 0
      }, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effectsEffectFold = $2.effects.define("fold", "hide", function(options, done) {
      var element = $2(this), mode = options.mode, show = mode === "show", hide2 = mode === "hide", size = options.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!options.horizFirst, ref = horizFirst ? ["right", "bottom"] : ["bottom", "right"], duration = options.duration / 2, placeholder = $2.effects.createPlaceholder(element), start5 = element.cssClip(), animation1 = { clip: $2.extend({}, start5) }, animation2 = { clip: $2.extend({}, start5) }, distance = [start5[ref[0]], start5[ref[1]]], queuelen = element.queue().length;
      if (percent) {
        size = parseInt(percent[1], 10) / 100 * distance[hide2 ? 0 : 1];
      }
      animation1.clip[ref[0]] = size;
      animation2.clip[ref[0]] = size;
      animation2.clip[ref[1]] = 0;
      if (show) {
        element.cssClip(animation2.clip);
        if (placeholder) {
          placeholder.css($2.effects.clipToBox(animation2));
        }
        animation2.clip = start5;
      }
      element.queue(function(next) {
        if (placeholder) {
          placeholder.animate($2.effects.clipToBox(animation1), duration, options.easing).animate($2.effects.clipToBox(animation2), duration, options.easing);
        }
        next();
      }).animate(animation1, duration, options.easing).animate(animation2, duration, options.easing).queue(done);
      $2.effects.unshift(element, queuelen, 4);
    });
    var effectsEffectHighlight = $2.effects.define("highlight", "show", function(options, done) {
      var element = $2(this), animation = {
        backgroundColor: element.css("backgroundColor")
      };
      if (options.mode === "hide") {
        animation.opacity = 0;
      }
      $2.effects.saveStyle(element);
      element.css({
        backgroundImage: "none",
        backgroundColor: options.color || "#ffff99"
      }).animate(animation, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effectsEffectSize = $2.effects.define("size", function(options, done) {
      var baseline, factor, temp, element = $2(this), cProps = ["fontSize"], vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], mode = options.mode, restore = mode !== "effect", scale = options.scale || "both", origin = options.origin || ["middle", "center"], position2 = element.css("position"), pos = element.position(), original = $2.effects.scaledDimensions(element), from = options.from || original, to = options.to || $2.effects.scaledDimensions(element, 0);
      $2.effects.createPlaceholder(element);
      if (mode === "show") {
        temp = from;
        from = to;
        to = temp;
      }
      factor = {
        from: {
          y: from.height / original.height,
          x: from.width / original.width
        },
        to: {
          y: to.height / original.height,
          x: to.width / original.width
        }
      };
      if (scale === "box" || scale === "both") {
        if (factor.from.y !== factor.to.y) {
          from = $2.effects.setTransition(element, vProps, factor.from.y, from);
          to = $2.effects.setTransition(element, vProps, factor.to.y, to);
        }
        if (factor.from.x !== factor.to.x) {
          from = $2.effects.setTransition(element, hProps, factor.from.x, from);
          to = $2.effects.setTransition(element, hProps, factor.to.x, to);
        }
      }
      if (scale === "content" || scale === "both") {
        if (factor.from.y !== factor.to.y) {
          from = $2.effects.setTransition(element, cProps, factor.from.y, from);
          to = $2.effects.setTransition(element, cProps, factor.to.y, to);
        }
      }
      if (origin) {
        baseline = $2.effects.getBaseline(origin, original);
        from.top = (original.outerHeight - from.outerHeight) * baseline.y + pos.top;
        from.left = (original.outerWidth - from.outerWidth) * baseline.x + pos.left;
        to.top = (original.outerHeight - to.outerHeight) * baseline.y + pos.top;
        to.left = (original.outerWidth - to.outerWidth) * baseline.x + pos.left;
      }
      delete from.outerHeight;
      delete from.outerWidth;
      element.css(from);
      if (scale === "content" || scale === "both") {
        vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps);
        hProps = hProps.concat(["marginLeft", "marginRight"]);
        element.find("*[width]").each(function() {
          var child = $2(this), childOriginal = $2.effects.scaledDimensions(child), childFrom = {
            height: childOriginal.height * factor.from.y,
            width: childOriginal.width * factor.from.x,
            outerHeight: childOriginal.outerHeight * factor.from.y,
            outerWidth: childOriginal.outerWidth * factor.from.x
          }, childTo = {
            height: childOriginal.height * factor.to.y,
            width: childOriginal.width * factor.to.x,
            outerHeight: childOriginal.height * factor.to.y,
            outerWidth: childOriginal.width * factor.to.x
          };
          if (factor.from.y !== factor.to.y) {
            childFrom = $2.effects.setTransition(child, vProps, factor.from.y, childFrom);
            childTo = $2.effects.setTransition(child, vProps, factor.to.y, childTo);
          }
          if (factor.from.x !== factor.to.x) {
            childFrom = $2.effects.setTransition(child, hProps, factor.from.x, childFrom);
            childTo = $2.effects.setTransition(child, hProps, factor.to.x, childTo);
          }
          if (restore) {
            $2.effects.saveStyle(child);
          }
          child.css(childFrom);
          child.animate(childTo, options.duration, options.easing, function() {
            if (restore) {
              $2.effects.restoreStyle(child);
            }
          });
        });
      }
      element.animate(to, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: function() {
          var offset2 = element.offset();
          if (to.opacity === 0) {
            element.css("opacity", from.opacity);
          }
          if (!restore) {
            element.css("position", position2 === "static" ? "relative" : position2).offset(offset2);
            $2.effects.saveStyle(element);
          }
          done();
        }
      });
    });
    var effectsEffectScale = $2.effects.define("scale", function(options, done) {
      var el = $2(this), mode = options.mode, percent = parseInt(options.percent, 10) || (parseInt(options.percent, 10) === 0 ? 0 : mode !== "effect" ? 0 : 100), newOptions = $2.extend(true, {
        from: $2.effects.scaledDimensions(el),
        to: $2.effects.scaledDimensions(el, percent, options.direction || "both"),
        origin: options.origin || ["middle", "center"]
      }, options);
      if (options.fade) {
        newOptions.from.opacity = 1;
        newOptions.to.opacity = 0;
      }
      $2.effects.effect.size.call(this, newOptions, done);
    });
    var effectsEffectPuff = $2.effects.define("puff", "hide", function(options, done) {
      var newOptions = $2.extend(true, {}, options, {
        fade: true,
        percent: parseInt(options.percent, 10) || 150
      });
      $2.effects.effect.scale.call(this, newOptions, done);
    });
    var effectsEffectPulsate = $2.effects.define("pulsate", "show", function(options, done) {
      var element = $2(this), mode = options.mode, show = mode === "show", hide2 = mode === "hide", showhide = show || hide2, anims = (options.times || 5) * 2 + (showhide ? 1 : 0), duration = options.duration / anims, animateTo = 0, i = 1, queuelen = element.queue().length;
      if (show || !element.is(":visible")) {
        element.css("opacity", 0).show();
        animateTo = 1;
      }
      for (; i < anims; i++) {
        element.animate({ opacity: animateTo }, duration, options.easing);
        animateTo = 1 - animateTo;
      }
      element.animate({ opacity: animateTo }, duration, options.easing);
      element.queue(done);
      $2.effects.unshift(element, queuelen, anims + 1);
    });
    var effectsEffectShake = $2.effects.define("shake", function(options, done) {
      var i = 1, element = $2(this), direction = options.direction || "left", distance = options.distance || 20, times = options.times || 3, anims = times * 2 + 1, speed = Math.round(options.duration / anims), ref = direction === "up" || direction === "down" ? "top" : "left", positiveMotion = direction === "up" || direction === "left", animation = {}, animation1 = {}, animation2 = {}, queuelen = element.queue().length;
      $2.effects.createPlaceholder(element);
      animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
      animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
      animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;
      element.animate(animation, speed, options.easing);
      for (; i < times; i++) {
        element.animate(animation1, speed, options.easing).animate(animation2, speed, options.easing);
      }
      element.animate(animation1, speed, options.easing).animate(animation, speed / 2, options.easing).queue(done);
      $2.effects.unshift(element, queuelen, anims + 1);
    });
    var effectsEffectSlide = $2.effects.define("slide", "show", function(options, done) {
      var startClip, startRef, element = $2(this), map = {
        up: ["bottom", "top"],
        down: ["top", "bottom"],
        left: ["right", "left"],
        right: ["left", "right"]
      }, mode = options.mode, direction = options.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", positiveMotion = direction === "up" || direction === "left", distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true), animation = {};
      $2.effects.createPlaceholder(element);
      startClip = element.cssClip();
      startRef = element.position()[ref];
      animation[ref] = (positiveMotion ? -1 : 1) * distance + startRef;
      animation.clip = element.cssClip();
      animation.clip[map[direction][1]] = animation.clip[map[direction][0]];
      if (mode === "show") {
        element.cssClip(animation.clip);
        element.css(ref, animation[ref]);
        animation.clip = startClip;
        animation[ref] = startRef;
      }
      element.animate(animation, {
        queue: false,
        duration: options.duration,
        easing: options.easing,
        complete: done
      });
    });
    var effect4;
    if ($2.uiBackCompat !== false) {
      effect4 = $2.effects.define("transfer", function(options, done) {
        $2(this).transfer(options, done);
      });
    }
    var effectsEffectTransfer = effect4;
  });

  // ../../node_modules/popper.js/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var basePlacements = [top, bottom, right, left];
  var start3 = "start";
  var end = "end";
  var placements = basePlacements.reduce((acc, placement) => acc.concat([placement, `${placement}-${start3}`, `${placement}-${end}`]), []);

  // ../../node_modules/popper.js/lib/modifiers/index.js
  var modifiers_exports = {};
  __export(modifiers_exports, {
    applyStyles: () => applyStyles_default,
    computeStyles: () => computeStyles_default
  });

  // ../../node_modules/popper.js/lib/modifiers/computeStyles.js
  var mapStrategyToPosition = (strategy) => {
    switch (strategy) {
      case "fixed":
        return "fixed";
      case "absolute":
      default:
        return "absolute";
    }
  };
  var computePopperStyles = ({
    offsets,
    strategy,
    gpuAcceleration
  }) => {
    if (gpuAcceleration === false) {
      return {
        top: `${offsets.y}px`,
        left: `${offsets.x}px`,
        position: mapStrategyToPosition(strategy)
      };
    } else {
      return {
        transform: `translate3d(${offsets.x}px, ${offsets.y}px, 0)`,
        position: mapStrategyToPosition(strategy)
      };
    }
  };
  var computeArrowStyles = ({
    offsets,
    gpuAcceleration
  }) => {
    if (gpuAcceleration) {
      return {
        top: `${offsets.y}px`,
        left: `${offsets.x}px`,
        position: "absolute"
      };
    } else {
      return {
        transform: `translate3d(${offsets.x}px, ${offsets.y}px, 0)`,
        position: "absolute"
      };
    }
  };
  function computeStyles(state, options) {
    const gpuAcceleration = options && options.gpuAcceleration != null ? options.gpuAcceleration : true;
    state.styles = {};
    state.styles.popper = computePopperStyles({
      offsets: state.offsets.popper,
      strategy: state.options.strategy,
      gpuAcceleration
    });
    if (state.offsets.arrow != null) {
      state.styles.arrow = computeArrowStyles({
        offsets: state.offsets.arrow,
        gpuAcceleration
      });
    }
    return state;
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "main",
    fn: computeStyles
  };

  // ../../node_modules/popper.js/lib/modifiers/applyStyles.js
  function applyStyles(state) {
    Object.keys(state.elements).forEach((name) => {
      const style = state.styles.hasOwnProperty(name) ? state.styles[name] : null;
      Object.assign(state.elements[name].style, style);
    });
    return state;
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    requires: ["computeStyles"]
  };

  // ../../node_modules/popper.js/lib/index.js
  var defaultModifiers = Object.values(modifiers_exports);

  // ../../node_modules/@popperjs/core/lib/index.js
  var lib_exports = {};
  __export(lib_exports, {
    afterMain: () => afterMain,
    afterRead: () => afterRead,
    afterWrite: () => afterWrite,
    applyStyles: () => applyStyles_default2,
    arrow: () => arrow_default,
    auto: () => auto,
    basePlacements: () => basePlacements2,
    beforeMain: () => beforeMain,
    beforeRead: () => beforeRead,
    beforeWrite: () => beforeWrite,
    bottom: () => bottom2,
    clippingParents: () => clippingParents,
    computeStyles: () => computeStyles_default2,
    createPopper: () => createPopper3,
    createPopperBase: () => createPopper,
    createPopperLite: () => createPopper2,
    detectOverflow: () => detectOverflow,
    end: () => end2,
    eventListeners: () => eventListeners_default,
    flip: () => flip_default,
    hide: () => hide_default,
    left: () => left2,
    main: () => main2,
    modifierPhases: () => modifierPhases,
    offset: () => offset_default,
    placements: () => placements2,
    popper: () => popper,
    popperGenerator: () => popperGenerator,
    popperOffsets: () => popperOffsets_default,
    preventOverflow: () => preventOverflow_default,
    read: () => read2,
    reference: () => reference,
    right: () => right2,
    start: () => start4,
    top: () => top2,
    variationPlacements: () => variationPlacements,
    viewport: () => viewport,
    write: () => write2
  });

  // ../../node_modules/@popperjs/core/lib/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right2 = "right";
  var left2 = "left";
  var auto = "auto";
  var basePlacements2 = [top2, bottom2, right2, left2];
  var start4 = "start";
  var end2 = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements2.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start4, placement + "-" + end2]);
  }, []);
  var placements2 = /* @__PURE__ */ [].concat(basePlacements2, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start4, placement + "-" + end2]);
  }, []);
  var beforeRead = "beforeRead";
  var read2 = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main2 = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write2 = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read2, afterRead, beforeMain, main2, afterMain, beforeWrite, write2, afterWrite];

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow2(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow2(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow2(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow2(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default2 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect,
    requires: ["computeStyles"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // ../../node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // ../../node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow2(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle3(element) {
    return getWindow2(element).getComputedStyle(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle3(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle3(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle3(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent2(element) {
    var window2 = getWindow2(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle3(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // ../../node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // ../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements2));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left2, right2].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top2 : left2;
    var maxProp = axis === "y" ? bottom2 : right2;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent2(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left2;
    var sideY = top2;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent2(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow2(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle3(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top2 || (placement === left2 || placement === right2) && variation === end2) {
        sideY = bottom2;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left2 || (placement === top2 || placement === bottom2) && variation === end2) {
        sideX = right2;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow2(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles2(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default2 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles2,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow2(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll2(node) {
    var win = getWindow2(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll2(element).scrollLeft;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow2(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll2(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle3(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle3(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent2(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent2(getParentNode(node));
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents2(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent2(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow2(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents2(getParentNode(target)))
    );
  }

  // ../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents2(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle3(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent2(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right2:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left2:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start4:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end2:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements2));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right2, bottom2].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements2 : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements2;
    var allowedPlacements = placements3.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements3[0];
    for (var i = 0; i < placements3.length; i++) {
      var placement = placements3[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start4;
      var isVertical = [top2, bottom2].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right2 : left2 : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements3.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top2, right2, bottom2, left2].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left2, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left2, right2].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements2.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top2 : left2;
      var altSide = mainAxis === "y" ? bottom2 : right2;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start4 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start4 ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent2(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top2 : left2;
      var _altSide = mainAxis === "x" ? bottom2 : right2;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top2, left2].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // ../../node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll2(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow2(node) || !isHTMLElement(node)) {
      return getWindowScroll2(node);
    } else {
      return getHTMLElementScroll2(node);
    }
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // ../../node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // ../../node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers4 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper4(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents2(reference2) : reference2.contextElement ? listScrollParents2(reference2.contextElement) : [],
            popper: listScrollParents2(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers4, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m2) {
            return m2.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent2(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper = /* @__PURE__ */ popperGenerator();

  // ../../node_modules/@popperjs/core/lib/popper-lite.js
  var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default2, applyStyles_default2];
  var createPopper2 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers2
  });

  // ../../node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers3 = [eventListeners_default, popperOffsets_default, computeStyles_default2, applyStyles_default2, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper3 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers3
  });

  // ../../node_modules/bootstrap/dist/js/bootstrap.esm.js
  var elementMap = /* @__PURE__ */ new Map();
  var Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, /* @__PURE__ */ new Map());
      }
      const instanceMap = elementMap.get(element);
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }
      instanceMap.set(key, instance);
    },
    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }
      return null;
    },
    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }
      const instanceMap = elementMap.get(element);
      instanceMap.delete(key);
      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };
  var MAX_UID = 1e6;
  var MILLISECONDS_MULTIPLIER = 1e3;
  var TRANSITION_END = "transitionend";
  var parseSelector = (selector) => {
    if (selector && window.CSS && window.CSS.escape) {
      selector = selector.replace(/#([^\s"#']+)/g, (match, id) => `#${CSS.escape(id)}`);
    }
    return selector;
  };
  var toType = (object) => {
    if (object === null || object === void 0) {
      return `${object}`;
    }
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  var getUID = (prefix) => {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));
    return prefix;
  };
  var getTransitionDurationFromElement = (element) => {
    if (!element) {
      return 0;
    }
    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    }
    transitionDuration = transitionDuration.split(",")[0];
    transitionDelay = transitionDelay.split(",")[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  var triggerTransitionEnd = (element) => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };
  var isElement2 = (object) => {
    if (!object || typeof object !== "object") {
      return false;
    }
    if (typeof object.jquery !== "undefined") {
      object = object[0];
    }
    return typeof object.nodeType !== "undefined";
  };
  var getElement = (object) => {
    if (isElement2(object)) {
      return object.jquery ? object[0] : object;
    }
    if (typeof object === "string" && object.length > 0) {
      return document.querySelector(parseSelector(object));
    }
    return null;
  };
  var isVisible = (element) => {
    if (!isElement2(element) || element.getClientRects().length === 0) {
      return false;
    }
    const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
    const closedDetails = element.closest("details:not([open])");
    if (!closedDetails) {
      return elementIsVisible;
    }
    if (closedDetails !== element) {
      const summary = element.closest("summary");
      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }
      if (summary === null) {
        return false;
      }
    }
    return elementIsVisible;
  };
  var isDisabled = (element) => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }
    if (element.classList.contains("disabled")) {
      return true;
    }
    if (typeof element.disabled !== "undefined") {
      return element.disabled;
    }
    return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
  };
  var findShadowRoot = (element) => {
    if (!document.documentElement.attachShadow) {
      return null;
    }
    if (typeof element.getRootNode === "function") {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) {
      return element;
    }
    if (!element.parentNode) {
      return null;
    }
    return findShadowRoot(element.parentNode);
  };
  var noop = () => {
  };
  var reflow = (element) => {
    element.offsetHeight;
  };
  var getjQuery = () => {
    if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
      return window.jQuery;
    }
    return null;
  };
  var DOMContentLoadedCallbacks = [];
  var onDOMContentLoaded = (callback) => {
    if (document.readyState === "loading") {
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener("DOMContentLoaded", () => {
          for (const callback2 of DOMContentLoadedCallbacks) {
            callback2();
          }
        });
      }
      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };
  var isRTL = () => document.documentElement.dir === "rtl";
  var defineJQueryPlugin = (plugin) => {
    onDOMContentLoaded(() => {
      const $2 = getjQuery();
      if ($2) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $2.fn[name];
        $2.fn[name] = plugin.jQueryInterface;
        $2.fn[name].Constructor = plugin;
        $2.fn[name].noConflict = () => {
          $2.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  var execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {
    return typeof possibleCallback === "function" ? possibleCallback(...args) : defaultValue;
  };
  var executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }
      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  var getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    const listLength = list.length;
    let index = list.indexOf(activeElement);
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }
    return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {};
  var uidEvent = 1;
  var customEvents = {
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  };
  var nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
  function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }
  function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn2) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });
      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn2);
      }
      return fn2.apply(element, [event]);
    };
  }
  function bootstrapDelegationHandler(element, selector, fn2) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);
      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (const domElement of domElements) {
          if (domElement !== target) {
            continue;
          }
          hydrateObj(event, {
            delegateTarget: target
          });
          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn2);
          }
          return fn2.apply(target, [event]);
        }
      }
    };
  }
  function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
  }
  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === "string";
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }
    return [isDelegated, callable, typeEvent];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== "string" || !element) {
      return;
    }
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    if (originalTypeEvent in customEvents) {
      const wrapFunction = (fn3) => {
        return function(event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn3.call(this, event);
          }
        };
      };
      callable = wrapFunction(callable);
    }
    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
    const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn2.delegationSelector = isDelegated ? handler : null;
    fn2.callable = callable;
    fn2.oneOff = oneOff;
    fn2.uidEvent = uid;
    handlers[uid] = fn2;
    element.addEventListener(typeEvent, fn2, isDelegated);
  }
  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn2 = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn2) {
      return;
    }
    element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
    delete events[typeEvent][fn2.uidEvent];
  }
  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    for (const [handlerKey, event] of Object.entries(storeElementEvent)) {
      if (handlerKey.includes(namespace)) {
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }
  function getTypeEvent(event) {
    event = event.replace(stripNameRegex, "");
    return customEvents[event] || event;
  }
  var EventHandler = {
    on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== "string" || !element) {
        return;
      }
      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getElementEvents(element);
      const storeElementEvent = events[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith(".");
      if (typeof callable !== "undefined") {
        if (!Object.keys(storeElementEvent).length) {
          return;
        }
        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return;
      }
      if (isNamespace) {
        for (const elementEvent of Object.keys(events)) {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }
      for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {
        const handlerKey = keyHandlers.replace(stripUidRegex, "");
        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger(element, event, args) {
      if (typeof event !== "string" || !element) {
        return null;
      }
      const $2 = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      let jQueryEvent = null;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      if (inNamespace && $2) {
        jQueryEvent = $2.Event(event, args);
        $2(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }
      const evt = hydrateObj(new Event(event, {
        bubbles,
        cancelable: true
      }), args);
      if (defaultPrevented) {
        evt.preventDefault();
      }
      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }
      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }
      return evt;
    }
  };
  function hydrateObj(obj, meta = {}) {
    for (const [key, value] of Object.entries(meta)) {
      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get() {
            return value;
          }
        });
      }
    }
    return obj;
  }
  function normalizeData(value) {
    if (value === "true") {
      return true;
    }
    if (value === "false") {
      return false;
    }
    if (value === Number(value).toString()) {
      return Number(value);
    }
    if (value === "" || value === "null") {
      return null;
    }
    if (typeof value !== "string") {
      return value;
    }
    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }
  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, (chr) => `-${chr.toLowerCase()}`);
  }
  var Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes(element) {
      if (!element) {
        return {};
      }
      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter((key) => key.startsWith("bs") && !key.startsWith("bsConfig"));
      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, "");
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      }
      return attributes;
    },
    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
  };
  var Config = class {
    // Getters
    static get Default() {
      return {};
    }
    static get DefaultType() {
      return {};
    }
    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      return config;
    }
    _mergeConfigObj(config, element) {
      const jsonConfig = isElement2(element) ? Manipulator.getDataAttribute(element, "config") : {};
      return {
        ...this.constructor.Default,
        ...typeof jsonConfig === "object" ? jsonConfig : {},
        ...isElement2(element) ? Manipulator.getDataAttributes(element) : {},
        ...typeof config === "object" ? config : {}
      };
    }
    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
      for (const [property, expectedTypes] of Object.entries(configTypes)) {
        const value = config[property];
        const valueType = isElement2(value) ? "element" : toType(value);
        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
      }
    }
  };
  var VERSION = "5.3.3";
  var BaseComponent = class extends Config {
    constructor(element, config) {
      super();
      element = getElement(element);
      if (!element) {
        return;
      }
      this._element = element;
      this._config = this._getConfig(config);
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }
    // Public
    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      for (const propertyName of Object.getOwnPropertyNames(this)) {
        this[propertyName] = null;
      }
    }
    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config, this._element);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    // Static
    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === "object" ? config : null);
    }
    static get VERSION() {
      return VERSION;
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
      return `${name}${this.EVENT_KEY}`;
    }
  };
  var getSelector = (element) => {
    let selector = element.getAttribute("data-bs-target");
    if (!selector || selector === "#") {
      let hrefAttribute = element.getAttribute("href");
      if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
        return null;
      }
      if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
        hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
      }
      selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
    }
    return selector ? selector.split(",").map((sel) => parseSelector(sel)).join(",") : null;
  };
  var SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },
    children(element, selector) {
      return [].concat(...element.children).filter((child) => child.matches(selector));
    },
    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev(element, selector) {
      let previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next(element, selector) {
      let next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren(element) {
      const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
      return this.find(focusables, element).filter((el) => !isDisabled(el) && isVisible(el));
    },
    getSelectorFromElement(element) {
      const selector = getSelector(element);
      if (selector) {
        return SelectorEngine.findOne(selector) ? selector : null;
      }
      return null;
    },
    getElementFromSelector(element) {
      const selector = getSelector(element);
      return selector ? SelectorEngine.findOne(selector) : null;
    },
    getMultipleElementsFromSelector(element) {
      const selector = getSelector(element);
      return selector ? SelectorEngine.find(selector) : [];
    }
  };
  var enableDismissTrigger = (component, method = "hide") => {
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`);
      const instance = component.getOrCreateInstance(target);
      instance[method]();
    });
  };
  var NAME$f = "alert";
  var DATA_KEY$a = "bs.alert";
  var EVENT_KEY$b = `.${DATA_KEY$a}`;
  var EVENT_CLOSE = `close${EVENT_KEY$b}`;
  var EVENT_CLOSED = `closed${EVENT_KEY$b}`;
  var CLASS_NAME_FADE$5 = "fade";
  var CLASS_NAME_SHOW$8 = "show";
  var Alert = class _Alert extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$f;
    }
    // Public
    close() {
      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
      if (closeEvent.defaultPrevented) {
        return;
      }
      this._element.classList.remove(CLASS_NAME_SHOW$8);
      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
    }
    // Private
    _destroyElement() {
      this._element.remove();
      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Alert.getOrCreateInstance(this);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  };
  enableDismissTrigger(Alert, "close");
  defineJQueryPlugin(Alert);
  var NAME$e = "button";
  var DATA_KEY$9 = "bs.button";
  var EVENT_KEY$a = `.${DATA_KEY$9}`;
  var DATA_API_KEY$6 = ".data-api";
  var CLASS_NAME_ACTIVE$3 = "active";
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
  var Button = class _Button extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$e;
    }
    // Public
    toggle() {
      this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Button.getOrCreateInstance(this);
        if (config === "toggle") {
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  defineJQueryPlugin(Button);
  var NAME$d = "swipe";
  var EVENT_KEY$9 = ".bs.swipe";
  var EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
  var EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
  var EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
  var EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
  var EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
  var POINTER_TYPE_TOUCH = "touch";
  var POINTER_TYPE_PEN = "pen";
  var CLASS_NAME_POINTER_EVENT = "pointer-event";
  var SWIPE_THRESHOLD = 40;
  var Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  var DefaultType$c = {
    endCallback: "(function|null)",
    leftCallback: "(function|null)",
    rightCallback: "(function|null)"
  };
  var Swipe = class _Swipe extends Config {
    constructor(element, config) {
      super();
      this._element = element;
      if (!element || !_Swipe.isSupported()) {
        return;
      }
      this._config = this._getConfig(config);
      this._deltaX = 0;
      this._supportPointerEvents = Boolean(window.PointerEvent);
      this._initEvents();
    }
    // Getters
    static get Default() {
      return Default$c;
    }
    static get DefaultType() {
      return DefaultType$c;
    }
    static get NAME() {
      return NAME$d;
    }
    // Public
    dispose() {
      EventHandler.off(this._element, EVENT_KEY$9);
    }
    // Private
    _start(event) {
      if (!this._supportPointerEvents) {
        this._deltaX = event.touches[0].clientX;
        return;
      }
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX;
      }
    }
    _end(event) {
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX - this._deltaX;
      }
      this._handleSwipe();
      execute(this._config.endCallback);
    }
    _move(event) {
      this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
      const absDeltaX = Math.abs(this._deltaX);
      if (absDeltaX <= SWIPE_THRESHOLD) {
        return;
      }
      const direction = absDeltaX / this._deltaX;
      this._deltaX = 0;
      if (!direction) {
        return;
      }
      execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
      if (this._supportPointerEvents) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
        EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
      }
    }
    _eventIsPointerPenTouch(event) {
      return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }
    // Static
    static isSupported() {
      return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    }
  };
  var NAME$c = "carousel";
  var DATA_KEY$8 = "bs.carousel";
  var EVENT_KEY$8 = `.${DATA_KEY$8}`;
  var DATA_API_KEY$5 = ".data-api";
  var ARROW_LEFT_KEY$1 = "ArrowLeft";
  var ARROW_RIGHT_KEY$1 = "ArrowRight";
  var TOUCHEVENT_COMPAT_WAIT = 500;
  var ORDER_NEXT = "next";
  var ORDER_PREV = "prev";
  var DIRECTION_LEFT = "left";
  var DIRECTION_RIGHT = "right";
  var EVENT_SLIDE = `slide${EVENT_KEY$8}`;
  var EVENT_SLID = `slid${EVENT_KEY$8}`;
  var EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
  var EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
  var EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
  var EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
  var EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var CLASS_NAME_CAROUSEL = "carousel";
  var CLASS_NAME_ACTIVE$2 = "active";
  var CLASS_NAME_SLIDE = "slide";
  var CLASS_NAME_END = "carousel-item-end";
  var CLASS_NAME_START = "carousel-item-start";
  var CLASS_NAME_NEXT = "carousel-item-next";
  var CLASS_NAME_PREV = "carousel-item-prev";
  var SELECTOR_ACTIVE = ".active";
  var SELECTOR_ITEM = ".carousel-item";
  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  var SELECTOR_ITEM_IMG = ".carousel-item img";
  var SELECTOR_INDICATORS = ".carousel-indicators";
  var SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
  };
  var Default$b = {
    interval: 5e3,
    keyboard: true,
    pause: "hover",
    ride: false,
    touch: true,
    wrap: true
  };
  var DefaultType$b = {
    interval: "(number|boolean)",
    // TODO:v6 remove boolean support
    keyboard: "boolean",
    pause: "(string|boolean)",
    ride: "(boolean|string)",
    touch: "boolean",
    wrap: "boolean"
  };
  var Carousel = class _Carousel extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._interval = null;
      this._activeElement = null;
      this._isSliding = false;
      this.touchTimeout = null;
      this._swipeHelper = null;
      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
      this._addEventListeners();
      if (this._config.ride === CLASS_NAME_CAROUSEL) {
        this.cycle();
      }
    }
    // Getters
    static get Default() {
      return Default$b;
    }
    static get DefaultType() {
      return DefaultType$b;
    }
    static get NAME() {
      return NAME$c;
    }
    // Public
    next() {
      this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }
    prev() {
      this._slide(ORDER_PREV);
    }
    pause() {
      if (this._isSliding) {
        triggerTransitionEnd(this._element);
      }
      this._clearInterval();
    }
    cycle() {
      this._clearInterval();
      this._updateInterval();
      this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
    }
    _maybeEnableCycle() {
      if (!this._config.ride) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
        return;
      }
      this.cycle();
    }
    to(index) {
      const items = this._getItems();
      if (index > items.length - 1 || index < 0) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
        return;
      }
      const activeIndex = this._getItemIndex(this._getActive());
      if (activeIndex === index) {
        return;
      }
      const order2 = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
      this._slide(order2, items[index]);
    }
    dispose() {
      if (this._swipeHelper) {
        this._swipeHelper.dispose();
      }
      super.dispose();
    }
    // Private
    _configAfterMerge(config) {
      config.defaultInterval = config.interval;
      return config;
    }
    _addEventListeners() {
      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
      }
      if (this._config.pause === "hover") {
        EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
        EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
      }
      if (this._config.touch && Swipe.isSupported()) {
        this._addTouchEventListeners();
      }
    }
    _addTouchEventListeners() {
      for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
        EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
      }
      const endCallBack = () => {
        if (this._config.pause !== "hover") {
          return;
        }
        this.pause();
        if (this.touchTimeout) {
          clearTimeout(this.touchTimeout);
        }
        this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
      };
      const swipeConfig = {
        leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
        rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
        endCallback: endCallBack
      };
      this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }
      const direction = KEY_TO_DIRECTION[event.key];
      if (direction) {
        event.preventDefault();
        this._slide(this._directionToOrder(direction));
      }
    }
    _getItemIndex(element) {
      return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
      if (!this._indicatorsElement) {
        return;
      }
      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
      activeIndicator.removeAttribute("aria-current");
      const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
      if (newActiveIndicator) {
        newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
        newActiveIndicator.setAttribute("aria-current", "true");
      }
    }
    _updateInterval() {
      const element = this._activeElement || this._getActive();
      if (!element) {
        return;
      }
      const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
      this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order2, element = null) {
      if (this._isSliding) {
        return;
      }
      const activeElement = this._getActive();
      const isNext = order2 === ORDER_NEXT;
      const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
      if (nextElement === activeElement) {
        return;
      }
      const nextElementIndex = this._getItemIndex(nextElement);
      const triggerEvent = (eventName) => {
        return EventHandler.trigger(this._element, eventName, {
          relatedTarget: nextElement,
          direction: this._orderToDirection(order2),
          from: this._getItemIndex(activeElement),
          to: nextElementIndex
        });
      };
      const slideEvent = triggerEvent(EVENT_SLIDE);
      if (slideEvent.defaultPrevented) {
        return;
      }
      if (!activeElement || !nextElement) {
        return;
      }
      const isCycling = Boolean(this._interval);
      this.pause();
      this._isSliding = true;
      this._setActiveIndicatorElement(nextElementIndex);
      this._activeElement = nextElement;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
      nextElement.classList.add(orderClassName);
      reflow(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const completeCallBack = () => {
        nextElement.classList.remove(directionalClassName, orderClassName);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
        this._isSliding = false;
        triggerEvent(EVENT_SLID);
      };
      this._queueCallback(completeCallBack, activeElement, this._isAnimated());
      if (isCycling) {
        this.cycle();
      }
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
      return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
      return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }
    }
    _directionToOrder(direction) {
      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }
      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order2) {
      if (isRTL()) {
        return order2 === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }
      return order2 === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Carousel.getOrCreateInstance(this, config);
        if (typeof config === "number") {
          data.to(config);
          return;
        }
        if (typeof config === "string") {
          if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute("data-bs-slide-to");
    if (slideIndex) {
      carousel.to(slideIndex);
      carousel._maybeEnableCycle();
      return;
    }
    if (Manipulator.getDataAttribute(this, "slide") === "next") {
      carousel.next();
      carousel._maybeEnableCycle();
      return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels) {
      Carousel.getOrCreateInstance(carousel);
    }
  });
  defineJQueryPlugin(Carousel);
  var NAME$b = "collapse";
  var DATA_KEY$7 = "bs.collapse";
  var EVENT_KEY$7 = `.${DATA_KEY$7}`;
  var DATA_API_KEY$4 = ".data-api";
  var EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
  var EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
  var EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
  var EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
  var EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
  var CLASS_NAME_SHOW$7 = "show";
  var CLASS_NAME_COLLAPSE = "collapse";
  var CLASS_NAME_COLLAPSING = "collapsing";
  var CLASS_NAME_COLLAPSED = "collapsed";
  var CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
  var CLASS_NAME_HORIZONTAL = "collapse-horizontal";
  var WIDTH = "width";
  var HEIGHT = "height";
  var SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  var Default$a = {
    parent: null,
    toggle: true
  };
  var DefaultType$a = {
    parent: "(null|element)",
    toggle: "boolean"
  };
  var Collapse = class _Collapse extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isTransitioning = false;
      this._triggerArray = [];
      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
      for (const elem of toggleList) {
        const selector = SelectorEngine.getSelectorFromElement(elem);
        const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
        if (selector !== null && filterElement.length) {
          this._triggerArray.push(elem);
        }
      }
      this._initializeChildren();
      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
      }
      if (this._config.toggle) {
        this.toggle();
      }
    }
    // Getters
    static get Default() {
      return Default$a;
    }
    static get DefaultType() {
      return DefaultType$a;
    }
    static get NAME() {
      return NAME$b;
    }
    // Public
    toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }
    show() {
      if (this._isTransitioning || this._isShown()) {
        return;
      }
      let activeChildren = [];
      if (this._config.parent) {
        activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => _Collapse.getOrCreateInstance(element, {
          toggle: false
        }));
      }
      if (activeChildren.length && activeChildren[0]._isTransitioning) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      for (const activeInstance of activeChildren) {
        activeInstance.hide();
      }
      const dimension = this._getDimension();
      this._element.classList.remove(CLASS_NAME_COLLAPSE);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;
      this._addAriaAndCollapsedClass(this._triggerArray, true);
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        this._element.style[dimension] = "";
        EventHandler.trigger(this._element, EVENT_SHOWN$6);
      };
      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      const scrollSize = `scroll${capitalizedDimension}`;
      this._queueCallback(complete, this._element, true);
      this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      const dimension = this._getDimension();
      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      for (const trigger of this._triggerArray) {
        const element = SelectorEngine.getElementFromSelector(trigger);
        if (element && !this._isShown(element)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE);
        EventHandler.trigger(this._element, EVENT_HIDDEN$6);
      };
      this._element.style[dimension] = "";
      this._queueCallback(complete, this._element, true);
    }
    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    // Private
    _configAfterMerge(config) {
      config.toggle = Boolean(config.toggle);
      config.parent = getElement(config.parent);
      return config;
    }
    _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
      if (!this._config.parent) {
        return;
      }
      const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
      for (const element of children) {
        const selected = SelectorEngine.getElementFromSelector(element);
        if (selected) {
          this._addAriaAndCollapsedClass([element], this._isShown(selected));
        }
      }
    }
    _getFirstLevelChildren(selector) {
      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      return SelectorEngine.find(selector, this._config.parent).filter((element) => !children.includes(element));
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }
      for (const element of triggerArray) {
        element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
        element.setAttribute("aria-expanded", isOpen);
      }
    }
    // Static
    static jQueryInterface(config) {
      const _config = {};
      if (typeof config === "string" && /show|hide/.test(config)) {
        _config.toggle = false;
      }
      return this.each(function() {
        const data = _Collapse.getOrCreateInstance(this, _config);
        if (typeof config === "string") {
          if (typeof data[config] === "undefined") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
    if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
      event.preventDefault();
    }
    for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    }
  });
  defineJQueryPlugin(Collapse);
  var NAME$a = "dropdown";
  var DATA_KEY$6 = "bs.dropdown";
  var EVENT_KEY$6 = `.${DATA_KEY$6}`;
  var DATA_API_KEY$3 = ".data-api";
  var ESCAPE_KEY$2 = "Escape";
  var TAB_KEY$1 = "Tab";
  var ARROW_UP_KEY$1 = "ArrowUp";
  var ARROW_DOWN_KEY$1 = "ArrowDown";
  var RIGHT_MOUSE_BUTTON = 2;
  var EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
  var EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
  var EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
  var EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
  var EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var CLASS_NAME_SHOW$6 = "show";
  var CLASS_NAME_DROPUP = "dropup";
  var CLASS_NAME_DROPEND = "dropend";
  var CLASS_NAME_DROPSTART = "dropstart";
  var CLASS_NAME_DROPUP_CENTER = "dropup-center";
  var CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  var SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
  var SELECTOR_MENU = ".dropdown-menu";
  var SELECTOR_NAVBAR = ".navbar";
  var SELECTOR_NAVBAR_NAV = ".navbar-nav";
  var SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
  var PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
  var PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
  var PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
  var PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
  var PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
  var PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
  var PLACEMENT_TOPCENTER = "top";
  var PLACEMENT_BOTTOMCENTER = "bottom";
  var Default$9 = {
    autoClose: true,
    boundary: "clippingParents",
    display: "dynamic",
    offset: [0, 2],
    popperConfig: null,
    reference: "toggle"
  };
  var DefaultType$9 = {
    autoClose: "(boolean|string)",
    boundary: "(string|element)",
    display: "string",
    offset: "(array|string|function)",
    popperConfig: "(null|object|function)",
    reference: "(string|element|object)"
  };
  var Dropdown = class _Dropdown extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._popper = null;
      this._parent = this._element.parentNode;
      this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
      this._inNavbar = this._detectNavbar();
    }
    // Getters
    static get Default() {
      return Default$9;
    }
    static get DefaultType() {
      return DefaultType$9;
    }
    static get NAME() {
      return NAME$a;
    }
    // Public
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (isDisabled(this._element) || this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._createPopper();
      if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      this._element.focus();
      this._element.setAttribute("aria-expanded", true);
      this._menu.classList.add(CLASS_NAME_SHOW$6);
      this._element.classList.add(CLASS_NAME_SHOW$6);
      EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
      if (isDisabled(this._element) || !this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      this._completeHide(relatedTarget);
    }
    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }
      super.dispose();
    }
    update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper) {
        this._popper.update();
      }
    }
    // Private
    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
      if (hideEvent.defaultPrevented) {
        return;
      }
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      if (this._popper) {
        this._popper.destroy();
      }
      this._menu.classList.remove(CLASS_NAME_SHOW$6);
      this._element.classList.remove(CLASS_NAME_SHOW$6);
      this._element.setAttribute("aria-expanded", "false");
      Manipulator.removeDataAttribute(this._menu, "popper");
      EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
    }
    _getConfig(config) {
      config = super._getConfig(config);
      if (typeof config.reference === "object" && !isElement2(config.reference) && typeof config.reference.getBoundingClientRect !== "function") {
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }
      return config;
    }
    _createPopper() {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
      }
      let referenceElement = this._element;
      if (this._config.reference === "parent") {
        referenceElement = this._parent;
      } else if (isElement2(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === "object") {
        referenceElement = this._config.reference;
      }
      const popperConfig = this._getPopperConfig();
      this._popper = createPopper3(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
      return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
      const parentDropdown = this._parent;
      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
        return PLACEMENT_TOPCENTER;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
        return PLACEMENT_BOTTOMCENTER;
      }
      const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }
      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
      return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }]
      };
      if (this._inNavbar || this._config.display === "static") {
        Manipulator.setDataAttribute(this._menu, "popper", "static");
        defaultBsPopperConfig.modifiers = [{
          name: "applyStyles",
          enabled: false
        }];
      }
      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [defaultBsPopperConfig])
      };
    }
    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
      if (!items.length) {
        return;
      }
      getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Dropdown.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
    static clearMenus(event) {
      if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
        return;
      }
      const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
      for (const toggle of openToggles) {
        const context = _Dropdown.getInstance(toggle);
        if (!context || context._config.autoClose === false) {
          continue;
        }
        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context._menu);
        if (composedPath.includes(context._element) || context._config.autoClose === "inside" && !isMenuTarget || context._config.autoClose === "outside" && isMenuTarget) {
          continue;
        }
        if (context._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue;
        }
        const relatedTarget = {
          relatedTarget: context._element
        };
        if (event.type === "click") {
          relatedTarget.clickEvent = event;
        }
        context._completeHide(relatedTarget);
      }
    }
    static dataApiKeydownHandler(event) {
      const isInput = /input|textarea/i.test(event.target.tagName);
      const isEscapeEvent = event.key === ESCAPE_KEY$2;
      const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
      if (!isUpOrDownEvent && !isEscapeEvent) {
        return;
      }
      if (isInput && !isEscapeEvent) {
        return;
      }
      event.preventDefault();
      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
      const instance = _Dropdown.getOrCreateInstance(getToggleButton);
      if (isUpOrDownEvent) {
        event.stopPropagation();
        instance.show();
        instance._selectMenuItem(event);
        return;
      }
      if (instance._isShown()) {
        event.stopPropagation();
        instance.hide();
        getToggleButton.focus();
      }
    }
  };
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  defineJQueryPlugin(Dropdown);
  var NAME$9 = "backdrop";
  var CLASS_NAME_FADE$4 = "fade";
  var CLASS_NAME_SHOW$5 = "show";
  var EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
  var Default$8 = {
    className: "modal-backdrop",
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: "body"
    // give the choice to place backdrop under different elements
  };
  var DefaultType$8 = {
    className: "string",
    clickCallback: "(function|null)",
    isAnimated: "boolean",
    isVisible: "boolean",
    rootElement: "(element|string)"
  };
  var Backdrop = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isAppended = false;
      this._element = null;
    }
    // Getters
    static get Default() {
      return Default$8;
    }
    static get DefaultType() {
      return DefaultType$8;
    }
    static get NAME() {
      return NAME$9;
    }
    // Public
    show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._append();
      const element = this._getElement();
      if (this._config.isAnimated) {
        reflow(element);
      }
      element.classList.add(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        execute(callback);
      });
    }
    hide(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._getElement().classList.remove(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        this.dispose();
        execute(callback);
      });
    }
    dispose() {
      if (!this._isAppended) {
        return;
      }
      EventHandler.off(this._element, EVENT_MOUSEDOWN);
      this._element.remove();
      this._isAppended = false;
    }
    // Private
    _getElement() {
      if (!this._element) {
        const backdrop = document.createElement("div");
        backdrop.className = this._config.className;
        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }
        this._element = backdrop;
      }
      return this._element;
    }
    _configAfterMerge(config) {
      config.rootElement = getElement(config.rootElement);
      return config;
    }
    _append() {
      if (this._isAppended) {
        return;
      }
      const element = this._getElement();
      this._config.rootElement.append(element);
      EventHandler.on(element, EVENT_MOUSEDOWN, () => {
        execute(this._config.clickCallback);
      });
      this._isAppended = true;
    }
    _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
  };
  var NAME$8 = "focustrap";
  var DATA_KEY$5 = "bs.focustrap";
  var EVENT_KEY$5 = `.${DATA_KEY$5}`;
  var EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
  var EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
  var TAB_KEY = "Tab";
  var TAB_NAV_FORWARD = "forward";
  var TAB_NAV_BACKWARD = "backward";
  var Default$7 = {
    autofocus: true,
    trapElement: null
    // The element to trap focus inside of
  };
  var DefaultType$7 = {
    autofocus: "boolean",
    trapElement: "element"
  };
  var FocusTrap = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }
    // Getters
    static get Default() {
      return Default$7;
    }
    static get DefaultType() {
      return DefaultType$7;
    }
    static get NAME() {
      return NAME$8;
    }
    // Public
    activate() {
      if (this._isActive) {
        return;
      }
      if (this._config.autofocus) {
        this._config.trapElement.focus();
      }
      EventHandler.off(document, EVENT_KEY$5);
      EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
      EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
      this._isActive = true;
    }
    deactivate() {
      if (!this._isActive) {
        return;
      }
      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$5);
    }
    // Private
    _handleFocusin(event) {
      const {
        trapElement
      } = this._config;
      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
        return;
      }
      const elements = SelectorEngine.focusableChildren(trapElement);
      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
    _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }
      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  };
  var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
  var SELECTOR_STICKY_CONTENT = ".sticky-top";
  var PROPERTY_PADDING = "padding-right";
  var PROPERTY_MARGIN = "margin-right";
  var ScrollBarHelper = class {
    constructor() {
      this._element = document.body;
    }
    // Public
    getWidth() {
      const documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
      const width = this.getWidth();
      this._disableOverFlow();
      this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
    }
    reset() {
      this._resetElementAttributes(this._element, "overflow");
      this._resetElementAttributes(this._element, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    }
    // Private
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, "overflow");
      this._element.style.overflow = "hidden";
    }
    _setElementAttributes(selector, styleProperty, callback) {
      const scrollbarWidth = this.getWidth();
      const manipulationCallBack = (element) => {
        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }
        this._saveInitialAttribute(element, styleProperty);
        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
      const actualValue = element.style.getPropertyValue(styleProperty);
      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProperty, actualValue);
      }
    }
    _resetElementAttributes(selector, styleProperty) {
      const manipulationCallBack = (element) => {
        const value = Manipulator.getDataAttribute(element, styleProperty);
        if (value === null) {
          element.style.removeProperty(styleProperty);
          return;
        }
        Manipulator.removeDataAttribute(element, styleProperty);
        element.style.setProperty(styleProperty, value);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
      if (isElement2(selector)) {
        callBack(selector);
        return;
      }
      for (const sel of SelectorEngine.find(selector, this._element)) {
        callBack(sel);
      }
    }
  };
  var NAME$7 = "modal";
  var DATA_KEY$4 = "bs.modal";
  var EVENT_KEY$4 = `.${DATA_KEY$4}`;
  var DATA_API_KEY$2 = ".data-api";
  var ESCAPE_KEY$1 = "Escape";
  var EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
  var EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
  var EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
  var EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
  var EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
  var EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
  var EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
  var EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
  var EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
  var EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
  var CLASS_NAME_OPEN = "modal-open";
  var CLASS_NAME_FADE$3 = "fade";
  var CLASS_NAME_SHOW$4 = "show";
  var CLASS_NAME_STATIC = "modal-static";
  var OPEN_SELECTOR$1 = ".modal.show";
  var SELECTOR_DIALOG = ".modal-dialog";
  var SELECTOR_MODAL_BODY = ".modal-body";
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  var Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  var DefaultType$6 = {
    backdrop: "(boolean|string)",
    focus: "boolean",
    keyboard: "boolean"
  };
  var Modal = class _Modal extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._isShown = false;
      this._isTransitioning = false;
      this._scrollBar = new ScrollBarHelper();
      this._addEventListeners();
    }
    // Getters
    static get Default() {
      return Default$6;
    }
    static get DefaultType() {
      return DefaultType$6;
    }
    static get NAME() {
      return NAME$7;
    }
    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown || this._isTransitioning) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._isTransitioning = true;
      this._scrollBar.hide();
      document.body.classList.add(CLASS_NAME_OPEN);
      this._adjustDialog();
      this._backdrop.show(() => this._showElement(relatedTarget));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._isShown = false;
      this._isTransitioning = true;
      this._focustrap.deactivate();
      this._element.classList.remove(CLASS_NAME_SHOW$4);
      this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
    }
    dispose() {
      EventHandler.off(window, EVENT_KEY$4);
      EventHandler.off(this._dialog, EVENT_KEY$4);
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    }
    // Private
    _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        // 'static' option will be translated to true, and booleans will keep their value,
        isAnimated: this._isAnimated()
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _showElement(relatedTarget) {
      if (!document.body.contains(this._element)) {
        document.body.append(this._element);
      }
      this._element.style.display = "block";
      this._element.removeAttribute("aria-hidden");
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.scrollTop = 0;
      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
      if (modalBody) {
        modalBody.scrollTop = 0;
      }
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW$4);
      const transitionComplete = () => {
        if (this._config.focus) {
          this._focustrap.activate();
        }
        this._isTransitioning = false;
        EventHandler.trigger(this._element, EVENT_SHOWN$4, {
          relatedTarget
        });
      };
      this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
        if (event.key !== ESCAPE_KEY$1) {
          return;
        }
        if (this._config.keyboard) {
          this.hide();
          return;
        }
        this._triggerBackdropTransition();
      });
      EventHandler.on(window, EVENT_RESIZE$1, () => {
        if (this._isShown && !this._isTransitioning) {
          this._adjustDialog();
        }
      });
      EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
        EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
          if (this._element !== event.target || this._element !== event2.target) {
            return;
          }
          if (this._config.backdrop === "static") {
            this._triggerBackdropTransition();
            return;
          }
          if (this._config.backdrop) {
            this.hide();
          }
        });
      });
    }
    _hideModal() {
      this._element.style.display = "none";
      this._element.setAttribute("aria-hidden", true);
      this._element.removeAttribute("aria-modal");
      this._element.removeAttribute("role");
      this._isTransitioning = false;
      this._backdrop.hide(() => {
        document.body.classList.remove(CLASS_NAME_OPEN);
        this._resetAdjustments();
        this._scrollBar.reset();
        EventHandler.trigger(this._element, EVENT_HIDDEN$4);
      });
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const initialOverflowY = this._element.style.overflowY;
      if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
        return;
      }
      if (!isModalOverflowing) {
        this._element.style.overflowY = "hidden";
      }
      this._element.classList.add(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.classList.remove(CLASS_NAME_STATIC);
        this._queueCallback(() => {
          this._element.style.overflowY = initialOverflowY;
        }, this._dialog);
      }, this._dialog);
      this._element.focus();
    }
    /**
     * The following methods are used to handle overflowing modals
     */
    _adjustDialog() {
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const scrollbarWidth = this._scrollBar.getWidth();
      const isBodyOverflowing = scrollbarWidth > 0;
      if (isBodyOverflowing && !isModalOverflowing) {
        const property = isRTL() ? "paddingLeft" : "paddingRight";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
      if (!isBodyOverflowing && isModalOverflowing) {
        const property = isRTL() ? "paddingRight" : "paddingLeft";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
    }
    _resetAdjustments() {
      this._element.style.paddingLeft = "";
      this._element.style.paddingRight = "";
    }
    // Static
    static jQueryInterface(config, relatedTarget) {
      return this.each(function() {
        const data = _Modal.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](relatedTarget);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
      if (showEvent.defaultPrevented) {
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$4, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  defineJQueryPlugin(Modal);
  var NAME$6 = "offcanvas";
  var DATA_KEY$3 = "bs.offcanvas";
  var EVENT_KEY$3 = `.${DATA_KEY$3}`;
  var DATA_API_KEY$1 = ".data-api";
  var EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var ESCAPE_KEY = "Escape";
  var CLASS_NAME_SHOW$3 = "show";
  var CLASS_NAME_SHOWING$1 = "showing";
  var CLASS_NAME_HIDING = "hiding";
  var CLASS_NAME_BACKDROP = "offcanvas-backdrop";
  var OPEN_SELECTOR = ".offcanvas.show";
  var EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
  var EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
  var EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
  var EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
  var EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
  var EVENT_RESIZE = `resize${EVENT_KEY$3}`;
  var EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$5 = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    scroll: "boolean"
  };
  var Offcanvas = class _Offcanvas extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isShown = false;
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._addEventListeners();
    }
    // Getters
    static get Default() {
      return Default$5;
    }
    static get DefaultType() {
      return DefaultType$5;
    }
    static get NAME() {
      return NAME$6;
    }
    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._backdrop.show();
      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.classList.add(CLASS_NAME_SHOWING$1);
      const completeCallBack = () => {
        if (!this._config.scroll || this._config.backdrop) {
          this._focustrap.activate();
        }
        this._element.classList.add(CLASS_NAME_SHOW$3);
        this._element.classList.remove(CLASS_NAME_SHOWING$1);
        EventHandler.trigger(this._element, EVENT_SHOWN$3, {
          relatedTarget
        });
      };
      this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
      if (!this._isShown) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._focustrap.deactivate();
      this._element.blur();
      this._isShown = false;
      this._element.classList.add(CLASS_NAME_HIDING);
      this._backdrop.hide();
      const completeCallback = () => {
        this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
        this._element.removeAttribute("aria-modal");
        this._element.removeAttribute("role");
        if (!this._config.scroll) {
          new ScrollBarHelper().reset();
        }
        EventHandler.trigger(this._element, EVENT_HIDDEN$3);
      };
      this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    // Private
    _initializeBackDrop() {
      const clickCallback = () => {
        if (this._config.backdrop === "static") {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      };
      const isVisible2 = Boolean(this._config.backdrop);
      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible: isVisible2,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: isVisible2 ? clickCallback : null
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
        if (event.key !== ESCAPE_KEY) {
          return;
        }
        if (this._config.keyboard) {
          this.hide();
          return;
        }
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
      });
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Offcanvas.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
    const target = SelectorEngine.getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$3, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
    for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
      Offcanvas.getOrCreateInstance(selector).show();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, () => {
    for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
      if (getComputedStyle(element).position !== "fixed") {
        Offcanvas.getOrCreateInstance(element).hide();
      }
    }
  });
  enableDismissTrigger(Offcanvas);
  defineJQueryPlugin(Offcanvas);
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    dd: [],
    div: [],
    dl: [],
    dt: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "srcset", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  var uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
  var SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
  var allowedAttribute = (attribute, allowedAttributeList) => {
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));
      }
      return true;
    }
    return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex) => regex.test(attributeName));
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }
    if (sanitizeFunction && typeof sanitizeFunction === "function") {
      return sanitizeFunction(unsafeHtml);
    }
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
    const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
    for (const element of elements) {
      const elementName = element.nodeName.toLowerCase();
      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        continue;
      }
      const attributeList = [].concat(...element.attributes);
      const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
      for (const attribute of attributeList) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      }
    }
    return createdDocument.body.innerHTML;
  }
  var NAME$5 = "TemplateFactory";
  var Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: "",
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: "<div></div>"
  };
  var DefaultType$4 = {
    allowList: "object",
    content: "object",
    extraClass: "(string|function)",
    html: "boolean",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    template: "string"
  };
  var DefaultContentType = {
    entry: "(string|element|function|null)",
    selector: "(string|element)"
  };
  var TemplateFactory = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
    }
    // Getters
    static get Default() {
      return Default$4;
    }
    static get DefaultType() {
      return DefaultType$4;
    }
    static get NAME() {
      return NAME$5;
    }
    // Public
    getContent() {
      return Object.values(this._config.content).map((config) => this._resolvePossibleFunction(config)).filter(Boolean);
    }
    hasContent() {
      return this.getContent().length > 0;
    }
    changeContent(content) {
      this._checkContent(content);
      this._config.content = {
        ...this._config.content,
        ...content
      };
      return this;
    }
    toHtml() {
      const templateWrapper = document.createElement("div");
      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
      for (const [selector, text] of Object.entries(this._config.content)) {
        this._setContent(templateWrapper, text, selector);
      }
      const template = templateWrapper.children[0];
      const extraClass = this._resolvePossibleFunction(this._config.extraClass);
      if (extraClass) {
        template.classList.add(...extraClass.split(" "));
      }
      return template;
    }
    // Private
    _typeCheckConfig(config) {
      super._typeCheckConfig(config);
      this._checkContent(config.content);
    }
    _checkContent(arg) {
      for (const [selector, content] of Object.entries(arg)) {
        super._typeCheckConfig({
          selector,
          entry: content
        }, DefaultContentType);
      }
    }
    _setContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);
      if (!templateElement) {
        return;
      }
      content = this._resolvePossibleFunction(content);
      if (!content) {
        templateElement.remove();
        return;
      }
      if (isElement2(content)) {
        this._putElementInTemplate(getElement(content), templateElement);
        return;
      }
      if (this._config.html) {
        templateElement.innerHTML = this._maybeSanitize(content);
        return;
      }
      templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
      return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
      return execute(arg, [this]);
    }
    _putElementInTemplate(element, templateElement) {
      if (this._config.html) {
        templateElement.innerHTML = "";
        templateElement.append(element);
        return;
      }
      templateElement.textContent = element.textContent;
    }
  };
  var NAME$4 = "tooltip";
  var DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
  var CLASS_NAME_FADE$2 = "fade";
  var CLASS_NAME_MODAL = "modal";
  var CLASS_NAME_SHOW$2 = "show";
  var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
  var SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  var EVENT_MODAL_HIDE = "hide.bs.modal";
  var TRIGGER_HOVER = "hover";
  var TRIGGER_FOCUS = "focus";
  var TRIGGER_CLICK = "click";
  var TRIGGER_MANUAL = "manual";
  var EVENT_HIDE$2 = "hide";
  var EVENT_HIDDEN$2 = "hidden";
  var EVENT_SHOW$2 = "show";
  var EVENT_SHOWN$2 = "shown";
  var EVENT_INSERTED = "inserted";
  var EVENT_CLICK$1 = "click";
  var EVENT_FOCUSIN$1 = "focusin";
  var EVENT_FOCUSOUT$1 = "focusout";
  var EVENT_MOUSEENTER = "mouseenter";
  var EVENT_MOUSELEAVE = "mouseleave";
  var AttachmentMap = {
    AUTO: "auto",
    TOP: "top",
    RIGHT: isRTL() ? "left" : "right",
    BOTTOM: "bottom",
    LEFT: isRTL() ? "right" : "left"
  };
  var Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: "clippingParents",
    container: false,
    customClass: "",
    delay: 0,
    fallbackPlacements: ["top", "right", "bottom", "left"],
    html: false,
    offset: [0, 6],
    placement: "top",
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    title: "",
    trigger: "hover focus"
  };
  var DefaultType$3 = {
    allowList: "object",
    animation: "boolean",
    boundary: "(string|element)",
    container: "(string|element|boolean)",
    customClass: "(string|function)",
    delay: "(number|object)",
    fallbackPlacements: "array",
    html: "boolean",
    offset: "(array|string|function)",
    placement: "(string|function)",
    popperConfig: "(null|object|function)",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    selector: "(string|boolean)",
    template: "string",
    title: "(string|element|function)",
    trigger: "string"
  };
  var Tooltip = class _Tooltip extends BaseComponent {
    constructor(element, config) {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
      }
      super(element, config);
      this._isEnabled = true;
      this._timeout = 0;
      this._isHovered = null;
      this._activeTrigger = {};
      this._popper = null;
      this._templateFactory = null;
      this._newContent = null;
      this.tip = null;
      this._setListeners();
      if (!this._config.selector) {
        this._fixTitle();
      }
    }
    // Getters
    static get Default() {
      return Default$3;
    }
    static get DefaultType() {
      return DefaultType$3;
    }
    static get NAME() {
      return NAME$4;
    }
    // Public
    enable() {
      this._isEnabled = true;
    }
    disable() {
      this._isEnabled = false;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle() {
      if (!this._isEnabled) {
        return;
      }
      this._activeTrigger.click = !this._activeTrigger.click;
      if (this._isShown()) {
        this._leave();
        return;
      }
      this._enter();
    }
    dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      if (this._element.getAttribute("data-bs-original-title")) {
        this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
      }
      this._disposePopper();
      super.dispose();
    }
    show() {
      if (this._element.style.display === "none") {
        throw new Error("Please use show on visible elements");
      }
      if (!(this._isWithContent() && this._isEnabled)) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }
      this._disposePopper();
      const tip = this._getTipElement();
      this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
      const {
        container
      } = this._config;
      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
      }
      this._popper = this._createPopper(tip);
      tip.classList.add(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      const complete = () => {
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
        if (this._isHovered === false) {
          this._leave();
        }
        this._isHovered = false;
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
      if (!this._isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
      if (hideEvent.defaultPrevented) {
        return;
      }
      const tip = this._getTipElement();
      tip.classList.remove(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      this._isHovered = null;
      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return;
        }
        if (!this._isHovered) {
          this._disposePopper();
        }
        this._element.removeAttribute("aria-describedby");
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
      if (this._popper) {
        this._popper.update();
      }
    }
    // Protected
    _isWithContent() {
      return Boolean(this._getTitle());
    }
    _getTipElement() {
      if (!this.tip) {
        this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
      }
      return this.tip;
    }
    _createTipElement(content) {
      const tip = this._getTemplateFactory(content).toHtml();
      if (!tip) {
        return null;
      }
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      tip.classList.add(`bs-${this.constructor.NAME}-auto`);
      const tipId = getUID(this.constructor.NAME).toString();
      tip.setAttribute("id", tipId);
      if (this._isAnimated()) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }
      return tip;
    }
    setContent(content) {
      this._newContent = content;
      if (this._isShown()) {
        this._disposePopper();
        this.show();
      }
    }
    _getTemplateFactory(content) {
      if (this._templateFactory) {
        this._templateFactory.changeContent(content);
      } else {
        this._templateFactory = new TemplateFactory({
          ...this._config,
          // the `content` var has to be after `this._config`
          // to override config.content in case of popover
          content,
          extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
      }
      return this._templateFactory;
    }
    _getContentForTemplate() {
      return {
        [SELECTOR_TOOLTIP_INNER]: this._getTitle()
      };
    }
    _getTitle() {
      return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
    }
    // Private
    _initializeOnDelegatedTarget(event) {
      return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
      return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
      return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
      const placement = execute(this._config.placement, [this, tip, this._element]);
      const attachment = AttachmentMap[placement.toUpperCase()];
      return createPopper3(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _resolvePossibleFunction(arg) {
      return execute(arg, [this._element]);
    }
    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: "flip",
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }, {
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "arrow",
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        }, {
          name: "preSetPlacement",
          enabled: true,
          phase: "beforeMain",
          fn: (data) => {
            this._getTipElement().setAttribute("data-popper-placement", data.state.placement);
          }
        }]
      };
      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [defaultBsPopperConfig])
      };
    }
    _setListeners() {
      const triggers = this._config.trigger.split(" ");
      for (const trigger of triggers) {
        if (trigger === "click") {
          EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context.toggle();
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
          EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            context._enter();
          });
          EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
            context._leave();
          });
        }
      }
      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };
      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }
    _fixTitle() {
      const title = this._element.getAttribute("title");
      if (!title) {
        return;
      }
      if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
        this._element.setAttribute("aria-label", title);
      }
      this._element.setAttribute("data-bs-original-title", title);
      this._element.removeAttribute("title");
    }
    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = true;
        return;
      }
      this._isHovered = true;
      this._setTimeout(() => {
        if (this._isHovered) {
          this.show();
        }
      }, this._config.delay.show);
    }
    _leave() {
      if (this._isWithActiveTrigger()) {
        return;
      }
      this._isHovered = false;
      this._setTimeout(() => {
        if (!this._isHovered) {
          this.hide();
        }
      }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
      clearTimeout(this._timeout);
      this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);
      for (const dataAttribute of Object.keys(dataAttributes)) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
          delete dataAttributes[dataAttribute];
        }
      }
      config = {
        ...dataAttributes,
        ...typeof config === "object" && config ? config : {}
      };
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      config.container = config.container === false ? document.body : getElement(config.container);
      if (typeof config.delay === "number") {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }
      if (typeof config.title === "number") {
        config.title = config.title.toString();
      }
      if (typeof config.content === "number") {
        config.content = config.content.toString();
      }
      return config;
    }
    _getDelegateConfig() {
      const config = {};
      for (const [key, value] of Object.entries(this._config)) {
        if (this.constructor.Default[key] !== value) {
          config[key] = value;
        }
      }
      config.selector = false;
      config.trigger = "manual";
      return config;
    }
    _disposePopper() {
      if (this._popper) {
        this._popper.destroy();
        this._popper = null;
      }
      if (this.tip) {
        this.tip.remove();
        this.tip = null;
      }
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Tooltip.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  defineJQueryPlugin(Tooltip);
  var NAME$3 = "popover";
  var SELECTOR_TITLE = ".popover-header";
  var SELECTOR_CONTENT = ".popover-body";
  var Default$2 = {
    ...Tooltip.Default,
    content: "",
    offset: [0, 8],
    placement: "right",
    template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    trigger: "click"
  };
  var DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: "(null|string|element|function)"
  };
  var Popover = class _Popover extends Tooltip {
    // Getters
    static get Default() {
      return Default$2;
    }
    static get DefaultType() {
      return DefaultType$2;
    }
    static get NAME() {
      return NAME$3;
    }
    // Overrides
    _isWithContent() {
      return this._getTitle() || this._getContent();
    }
    // Private
    _getContentForTemplate() {
      return {
        [SELECTOR_TITLE]: this._getTitle(),
        [SELECTOR_CONTENT]: this._getContent()
      };
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Popover.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  defineJQueryPlugin(Popover);
  var NAME$2 = "scrollspy";
  var DATA_KEY$2 = "bs.scrollspy";
  var EVENT_KEY$2 = `.${DATA_KEY$2}`;
  var DATA_API_KEY = ".data-api";
  var EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  var EVENT_CLICK = `click${EVENT_KEY$2}`;
  var EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
  var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
  var CLASS_NAME_ACTIVE$1 = "active";
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_TARGET_LINKS = "[href]";
  var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
  var SELECTOR_NAV_LINKS = ".nav-link";
  var SELECTOR_NAV_ITEMS = ".nav-item";
  var SELECTOR_LIST_ITEMS = ".list-group-item";
  var SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
  var SELECTOR_DROPDOWN = ".dropdown";
  var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
  var Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: "0px 0px -25%",
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  var DefaultType$1 = {
    offset: "(number|null)",
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: "string",
    smoothScroll: "boolean",
    target: "element",
    threshold: "array"
  };
  var ScrollSpy = class _ScrollSpy extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
      this._activeTarget = null;
      this._observer = null;
      this._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };
      this.refresh();
    }
    // Getters
    static get Default() {
      return Default$1;
    }
    static get DefaultType() {
      return DefaultType$1;
    }
    static get NAME() {
      return NAME$2;
    }
    // Public
    refresh() {
      this._initializeTargetsAndObservables();
      this._maybeEnableSmoothScroll();
      if (this._observer) {
        this._observer.disconnect();
      } else {
        this._observer = this._getNewObserver();
      }
      for (const section of this._observableSections.values()) {
        this._observer.observe(section);
      }
    }
    dispose() {
      this._observer.disconnect();
      super.dispose();
    }
    // Private
    _configAfterMerge(config) {
      config.target = getElement(config.target) || document.body;
      config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
      if (typeof config.threshold === "string") {
        config.threshold = config.threshold.split(",").map((value) => Number.parseFloat(value));
      }
      return config;
    }
    _maybeEnableSmoothScroll() {
      if (!this._config.smoothScroll) {
        return;
      }
      EventHandler.off(this._config.target, EVENT_CLICK);
      EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
        const observableSection = this._observableSections.get(event.target.hash);
        if (observableSection) {
          event.preventDefault();
          const root = this._rootElement || window;
          const height = observableSection.offsetTop - this._element.offsetTop;
          if (root.scrollTo) {
            root.scrollTo({
              top: height,
              behavior: "smooth"
            });
            return;
          }
          root.scrollTop = height;
        }
      });
    }
    _getNewObserver() {
      const options = {
        root: this._rootElement,
        threshold: this._config.threshold,
        rootMargin: this._config.rootMargin
      };
      return new IntersectionObserver((entries) => this._observerCallback(entries), options);
    }
    // The logic of selection
    _observerCallback(entries) {
      const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
      const activate = (entry) => {
        this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
        this._process(targetElement(entry));
      };
      const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
      const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
      this._previousScrollData.parentScrollTop = parentScrollTop;
      for (const entry of entries) {
        if (!entry.isIntersecting) {
          this._activeTarget = null;
          this._clearActiveClass(targetElement(entry));
          continue;
        }
        const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
        if (userScrollsDown && entryIsLowerThanPrevious) {
          activate(entry);
          if (!parentScrollTop) {
            return;
          }
          continue;
        }
        if (!userScrollsDown && !entryIsLowerThanPrevious) {
          activate(entry);
        }
      }
    }
    _initializeTargetsAndObservables() {
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
      for (const anchor of targetLinks) {
        if (!anchor.hash || isDisabled(anchor)) {
          continue;
        }
        const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);
        if (isVisible(observableSection)) {
          this._targetLinks.set(decodeURI(anchor.hash), anchor);
          this._observableSections.set(anchor.hash, observableSection);
        }
      }
    }
    _process(target) {
      if (this._activeTarget === target) {
        return;
      }
      this._clearActiveClass(this._config.target);
      this._activeTarget = target;
      target.classList.add(CLASS_NAME_ACTIVE$1);
      this._activateParents(target);
      EventHandler.trigger(this._element, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }
    _activateParents(target) {
      if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
        return;
      }
      for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
          item.classList.add(CLASS_NAME_ACTIVE$1);
        }
      }
    }
    _clearActiveClass(parent) {
      parent.classList.remove(CLASS_NAME_ACTIVE$1);
      const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
      for (const node of activeNodes) {
        node.classList.remove(CLASS_NAME_ACTIVE$1);
      }
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _ScrollSpy.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
      ScrollSpy.getOrCreateInstance(spy);
    }
  });
  defineJQueryPlugin(ScrollSpy);
  var NAME$1 = "tab";
  var DATA_KEY$1 = "bs.tab";
  var EVENT_KEY$1 = `.${DATA_KEY$1}`;
  var EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  var EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  var EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  var EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  var EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
  var EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
  var EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
  var ARROW_LEFT_KEY = "ArrowLeft";
  var ARROW_RIGHT_KEY = "ArrowRight";
  var ARROW_UP_KEY = "ArrowUp";
  var ARROW_DOWN_KEY = "ArrowDown";
  var HOME_KEY = "Home";
  var END_KEY = "End";
  var CLASS_NAME_ACTIVE = "active";
  var CLASS_NAME_FADE$1 = "fade";
  var CLASS_NAME_SHOW$1 = "show";
  var CLASS_DROPDOWN = "dropdown";
  var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
  var SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
  var NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;
  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  var SELECTOR_OUTER = ".nav-item, .list-group-item";
  var SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  var SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
  var Tab = class _Tab extends BaseComponent {
    constructor(element) {
      super(element);
      this._parent = this._element.closest(SELECTOR_TAB_PANEL);
      if (!this._parent) {
        return;
      }
      this._setInitialAttributes(this._parent, this._getChildren());
      EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
    }
    // Getters
    static get NAME() {
      return NAME$1;
    }
    // Public
    show() {
      const innerElem = this._element;
      if (this._elemIsActive(innerElem)) {
        return;
      }
      const active = this._getActiveElem();
      const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
        relatedTarget: innerElem
      }) : null;
      const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
        relatedTarget: active
      });
      if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
        return;
      }
      this._deactivate(active, innerElem);
      this._activate(innerElem, active);
    }
    // Private
    _activate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.add(CLASS_NAME_ACTIVE);
      this._activate(SelectorEngine.getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.add(CLASS_NAME_SHOW$1);
          return;
        }
        element.removeAttribute("tabindex");
        element.setAttribute("aria-selected", true);
        this._toggleDropDown(element, true);
        EventHandler.trigger(element, EVENT_SHOWN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.remove(CLASS_NAME_ACTIVE);
      element.blur();
      this._deactivate(SelectorEngine.getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.remove(CLASS_NAME_SHOW$1);
          return;
        }
        element.setAttribute("aria-selected", false);
        element.setAttribute("tabindex", "-1");
        this._toggleDropDown(element, false);
        EventHandler.trigger(element, EVENT_HIDDEN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
      if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key)) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      const children = this._getChildren().filter((element) => !isDisabled(element));
      let nextActiveElement;
      if ([HOME_KEY, END_KEY].includes(event.key)) {
        nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];
      } else {
        const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
        nextActiveElement = getNextActiveElement(children, event.target, isNext, true);
      }
      if (nextActiveElement) {
        nextActiveElement.focus({
          preventScroll: true
        });
        _Tab.getOrCreateInstance(nextActiveElement).show();
      }
    }
    _getChildren() {
      return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
      return this._getChildren().find((child) => this._elemIsActive(child)) || null;
    }
    _setInitialAttributes(parent, children) {
      this._setAttributeIfNotExists(parent, "role", "tablist");
      for (const child of children) {
        this._setInitialAttributesOnChild(child);
      }
    }
    _setInitialAttributesOnChild(child) {
      child = this._getInnerElement(child);
      const isActive = this._elemIsActive(child);
      const outerElem = this._getOuterElement(child);
      child.setAttribute("aria-selected", isActive);
      if (outerElem !== child) {
        this._setAttributeIfNotExists(outerElem, "role", "presentation");
      }
      if (!isActive) {
        child.setAttribute("tabindex", "-1");
      }
      this._setAttributeIfNotExists(child, "role", "tab");
      this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
      const target = SelectorEngine.getElementFromSelector(child);
      if (!target) {
        return;
      }
      this._setAttributeIfNotExists(target, "role", "tabpanel");
      if (child.id) {
        this._setAttributeIfNotExists(target, "aria-labelledby", `${child.id}`);
      }
    }
    _toggleDropDown(element, open) {
      const outerElem = this._getOuterElement(element);
      if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
        return;
      }
      const toggle = (selector, className) => {
        const element2 = SelectorEngine.findOne(selector, outerElem);
        if (element2) {
          element2.classList.toggle(className, open);
        }
      };
      toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
      toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
      outerElem.setAttribute("aria-expanded", open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
      if (!element.hasAttribute(attribute)) {
        element.setAttribute(attribute, value);
      }
    }
    _elemIsActive(elem) {
      return elem.classList.contains(CLASS_NAME_ACTIVE);
    }
    // Try to get the inner element (usually the .nav-link)
    _getInnerElement(elem) {
      return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }
    // Try to get the outer element (usually the .nav-item)
    _getOuterElement(elem) {
      return elem.closest(SELECTOR_OUTER) || elem;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Tab.getOrCreateInstance(this);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    Tab.getOrCreateInstance(this).show();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
      Tab.getOrCreateInstance(element);
    }
  });
  defineJQueryPlugin(Tab);
  var NAME = "toast";
  var DATA_KEY = "bs.toast";
  var EVENT_KEY = `.${DATA_KEY}`;
  var EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  var EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  var EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  var EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  var EVENT_HIDE = `hide${EVENT_KEY}`;
  var EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  var EVENT_SHOW = `show${EVENT_KEY}`;
  var EVENT_SHOWN = `shown${EVENT_KEY}`;
  var CLASS_NAME_FADE = "fade";
  var CLASS_NAME_HIDE = "hide";
  var CLASS_NAME_SHOW = "show";
  var CLASS_NAME_SHOWING = "showing";
  var DefaultType = {
    animation: "boolean",
    autohide: "boolean",
    delay: "number"
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5e3
  };
  var Toast = class _Toast extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._timeout = null;
      this._hasMouseInteraction = false;
      this._hasKeyboardInteraction = false;
      this._setListeners();
    }
    // Getters
    static get Default() {
      return Default;
    }
    static get DefaultType() {
      return DefaultType;
    }
    static get NAME() {
      return NAME;
    }
    // Public
    show() {
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._clearTimeout();
      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }
      const complete = () => {
        this._element.classList.remove(CLASS_NAME_SHOWING);
        EventHandler.trigger(this._element, EVENT_SHOWN);
        this._maybeScheduleHide();
      };
      this._element.classList.remove(CLASS_NAME_HIDE);
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
      if (!this.isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const complete = () => {
        this._element.classList.add(CLASS_NAME_HIDE);
        this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
        EventHandler.trigger(this._element, EVENT_HIDDEN);
      };
      this._element.classList.add(CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
      this._clearTimeout();
      if (this.isShown()) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }
      super.dispose();
    }
    isShown() {
      return this._element.classList.contains(CLASS_NAME_SHOW);
    }
    // Private
    _maybeScheduleHide() {
      if (!this._config.autohide) {
        return;
      }
      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }
      this._timeout = setTimeout(() => {
        this.hide();
      }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
      switch (event.type) {
        case "mouseover":
        case "mouseout": {
          this._hasMouseInteraction = isInteracting;
          break;
        }
        case "focusin":
        case "focusout": {
          this._hasKeyboardInteraction = isInteracting;
          break;
        }
      }
      if (isInteracting) {
        this._clearTimeout();
        return;
      }
      const nextElement = event.relatedTarget;
      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }
      this._maybeScheduleHide();
    }
    _setListeners() {
      EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
      EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
    }
    _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = _Toast.getOrCreateInstance(this, config);
        if (typeof config === "string") {
          if (typeof data[config] === "undefined") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config](this);
        }
      });
    }
  };
  enableDismissTrigger(Toast);
  defineJQueryPlugin(Toast);

  // application.js
  var import_bootstrap_datepicker = __toESM(require_bootstrap_datepicker());

  // ../../node_modules/bootstrap-datepicker/dist/locales/bootstrap-datepicker.es.min.js
  !function(a) {
    a.fn.datepicker.dates.es = { days: ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"], daysShort: ["Dom", "Lun", "Mar", "Mi\xE9", "Jue", "Vie", "S\xE1b"], daysMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"], months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"], today: "Hoy", monthsTitle: "Meses", clear: "Borrar", weekStart: 1, format: "dd/mm/yyyy" };
  }(jQuery);

  // application.js
  var import_apexcharts = __toESM(require_apexcharts_common());

  // ../../node_modules/apexcharts/dist/locales/es.json
  var es_default = {
    name: "es",
    options: {
      months: [
        "Enero",
        "Febrero",
        "Marzo",
        "Abril",
        "Mayo",
        "Junio",
        "Julio",
        "Agosto",
        "Septiembre",
        "Octubre",
        "Noviembre",
        "Diciembre"
      ],
      shortMonths: [
        "Ene",
        "Feb",
        "Mar",
        "Abr",
        "May",
        "Jun",
        "Jul",
        "Ago",
        "Sep",
        "Oct",
        "Nov",
        "Dic"
      ],
      days: [
        "Domingo",
        "Lunes",
        "Martes",
        "Mi\xE9rcoles",
        "Jueves",
        "Viernes",
        "S\xE1bado"
      ],
      shortDays: ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"],
      toolbar: {
        exportToSVG: "Descargar SVG",
        exportToPNG: "Descargar PNG",
        exportToCSV: "Descargar CSV",
        menu: "Menu",
        selection: "Seleccionar",
        selectionZoom: "Seleccionar Zoom",
        zoomIn: "Aumentar",
        zoomOut: "Disminuir",
        pan: "Navegaci\xF3n",
        reset: "Reiniciar Zoom"
      }
    }
  };

  // controllers/msip/motor.js
  var Msip__Motor = class _Msip__Motor {
    /* 
     * Librería de funciones comunes.
     * Aunque no es un controlador lo dejamos dentro del directorio
     * controllers para aprovechar método de msip para compartir controladores
     * Stimulus de motores.
     *
     * Como su nombre no termina en _controller no será incluido en 
     * controllers/index.js
     *
     * Desde controladores stimulus importelo con
     *
     *  import Msip__Motor from "../msip/motor"
     *
     * Use funciones por ejemplo con
     *
     *  Msip__Motor.partiFechaLocalizada(fl, formato)
     *
     * Para poderlo usar desde Javascript global con 
     * window.Msip__Motor 
     * asegure que en app/javascript/application.js ejecuta:
     *
     * import Msip__Motor from './controllers/msip/motor.js'
     * window.Msip__Motor = Msip__Motor
     *
     */
    static MESES = ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"];
    static arreglarPuntoMontaje() {
      var purl = window.puntomontaje;
      if (purl == "/") {
        purl = "";
      }
      return purl;
    }
    // Si el elemento es campos de selección le configura tom-select
    static configurarElementoTomSelect(el) {
      if (typeof el.tomselect == "undefined" && (el.tagName == "INPUT" || el.tagName == "SELECT")) {
        new window.TomSelect(el, window.configuracionTomSelect);
      }
    }
    // Busca elementos input y select con la clase tom-select
    // y si les falta los inicializa como campos de selección
    // con TomSelect
    static configurarElementosTomSelect() {
      document.querySelectorAll(".tom-select").forEach((el) => {
        _Msip__Motor.configurarElementoTomSelect(el);
      });
    }
    // Pone colores del tema en elementos de la interfaz de manera dinámica
    static ponerTema(root, tema) {
      console.log("entro a msip_ pone_tema");
      document.querySelectorAll(".table-striped>tbody>tr:nth-child(odd)").forEach((element) => {
        element.style.backgroundColor = tema.fondo_lista;
      });
      document.querySelector(".navbar").style.backgroundImage = `linear-gradient(${tema.nav_ini}, ${tema.nav_fin})`;
      document.querySelectorAll(".navbar-default .navbar-nav>li>a").forEach((element) => {
        element.style.color = tema.nav_fuente;
      });
      document.querySelector(".navbar .navbar-brand").style.color = tema.nav_fuente;
      document.querySelectorAll(".navbar-light .navbar-nav .nav-link").forEach((element) => {
        element.style.color = tema.nav_fuente;
      });
      document.querySelector(".navbar-light .navbar-brand").style.color = tema.nav_fuente;
      document.querySelector(".dropdown-menu").style.backgroundColor = tema.nav_fin;
      document.querySelectorAll(".dropdown-item").forEach((element) => {
        element.style.color = tema.nav_fuente;
        element.addEventListener("mouseover", () => {
          element.style.color = tema.color_flota_subitem_fuente;
          element.style.backgroundColor = tema.color_flota_subitem_fondo;
        });
        element.addEventListener("mouseout", () => {
          element.style.color = tema.nav_fuente;
          element.style.backgroundColor = tema.nav_fin;
        });
      });
      document.querySelectorAll(".alert-success").forEach((element) => {
        element.style.color = tema.alerta_exito_fuente;
        element.style.backgroundColor = tema.alerta_exito_fondo;
      });
      document.querySelectorAll(".alert-danger").forEach((element) => {
        element.style.color = tema.alerta_problema_fuente;
        element.style.backgroundColor = tema.alerta_problema_fondo;
      });
      document.querySelectorAll(".btn").forEach((element) => {
        element.style.backgroundImage = `linear-gradient(to bottom, ${tema.btn_accion_fondo_ini}, ${tema.btn_accion_fondo_fin})`;
        element.style.color = tema.btn_accion_fuente;
      });
      document.querySelectorAll(".btn-primary").forEach((element) => {
        element.style.backgroundImage = `linear-gradient(to bottom, ${tema.btn_primario_fondo_ini}, ${tema.btn_primario_fondo_fin})`;
        element.style.color = tema.btn_primario_fuente;
      });
      document.querySelectorAll(".btn-danger").forEach((element) => {
        element.style.backgroundImage = `linear-gradient(to bottom, ${tema.btn_peligro_fondo_ini}, ${tema.btn_peligro_fondo_fin})`;
        element.style.color = tema.btn_peligro_fuente;
      });
      document.body.style.backgroundColor = tema.fondo;
      document.querySelectorAll(".card").forEach((element) => {
        element.style.backgroundColor = tema.fondo;
      });
      document.querySelectorAll(".msip-sf-bs-input:not(.form-check-input)").forEach((element) => {
        element.style.backgroundColor = tema.fondo;
        element.style.color = tema.color_fuente;
      });
      document.querySelectorAll(".page-link").forEach((element) => {
        element.style.backgroundColor = tema.fondo;
      });
      document.body.style.color = tema.color_fuente;
      document.querySelectorAll("table").forEach((element) => {
        element.style.color = tema.color_fuente;
      });
    }
    static async ponerTemaUsuarioAjax() {
      var root = window;
      var ruta = "temausuario";
      var datos = {};
      var t = Date.now();
      var d = -1;
      if (root.msip_ajax_recibe_json_t) {
        if (root.msip_ajax_recibe_json_t[ruta]) {
          d = (t - root.msip_ajax_recibe_json_t[ruta]) / 1e3;
        }
      } else {
        root.msip_ajax_recibe_json_t = {};
      }
      root.msip_ajax_recibe_json_t[ruta] = t;
      if (d === -1 || d > 2) {
        var rutac = root.puntomontaje + ruta + ".json";
        await fetch(rutac).then(function(response) {
          if (!response.ok) {
            console.error("Request failed with status:", response.status);
          }
          return response.json();
        }).then(function(data) {
          return _Msip__Motor.ponerTema(root, data);
        });
      }
      return true;
    }
    // Si el elemento es campos de selección tal vez antes con tom-select
    // pero con opciones modificadas dinamicamente, refresca
    static refrescarElementoTomSelect(el) {
      if (typeof el.tomselect == "undefined" && (el.tagName == "INPUT" || el.tagName == "SELECT")) {
        new window.TomSelect(el, window.configuracionTomSelect);
      }
      el.tomselect.clear();
      el.tomselect.clearOptions();
      el.tomselect.sync();
      el.tomselect.refreshOptions();
    }
    // y los recurso sprockets
    static ejecutarAlCargarDocumentoYRecursos() {
      _Msip__Motor.configurarElementosTomSelect();
    }
    // Llamar cada vez que se cargue una página detectada con turbo:load
    // Tal vez en cache por lo que podría no haberse ejecutado iniciar 
    // nuevamente.
    // Podría ser llamada varias veces consecutivas por lo que debe detectarlo
    // para no ejecutar dos veces lo que no conviene.
    static ejecutarAlCargarPagina() {
      _Msip__Motor.ponerTemaUsuarioAjax();
      _Msip__Motor.configurarElementosTomSelect();
    }
    // Llamada desde application.js tal vez antes de cargar el documento,
    // paquetes javascript y recursos sprockets
    static iniciar() {
    }
    static partirFechaLocalizada(fechaLocalizada, formato) {
      let anio = 1900;
      let dia = 15;
      let mes = 6;
      if (formato == "dd/M/yyyy" || formato == "dd-M-yyyy") {
        anio = +fechaLocalizada.slice(7, 11);
        dia = +fechaLocalizada.slice(0, 2);
        let nmes = fechaLocalizada.slice(3, 6);
        if (typeof nmes != "undefined" && _Msip__Motor.MESES.includes(nmes.toLowerCase())) {
          mes = _Msip__Motor.MESES.indexOf(nmes.toLowerCase()) + 1;
        } else {
          mes = 6;
        }
      } else {
        if (typeof fechaLocalizada == "string") {
          anio = +fechaLocalizada.slice(0, 4);
          mes = +fechaLocalizada.slice(5, 7);
          dia = +fechaLocalizada.slice(8, 10);
        } else {
          anio = 1900;
          mes = 1;
          dia = 1;
        }
      }
      return [anio, mes, dia];
    }
    static prepararEventosComunes() {
    }
    /* Remplaza las opciones de un cuadro de seleccion por unas nuevas
     * @idsel es identificación del select
     * @nuevasop Arreglo de hashes con nuevas opciones, cada una tiene propiedades
     *   para la id (por omision id) y la etiqueta (por omisión nombre).
     * @usatomselect Es verdadero si y solo si el cuadro de selección usa tom-select
     * @cid campo con id en cada elemento de @nuevasop por omision id
     * @cetiqueta campo con etiqueta en cada elemento de @nuevasop por omision nombre
     * @opvacia Incluye opción vacia entre las posibles
     */
    static remplazarOpcionesSelect(idElemento, nuevasop, usatomselect = false, cid = "id", cetiqueta = "nombre", opvacia = false) {
      let elemento = document.getElementById(idElemento);
      let sel = elemento.value;
      for (; elemento.length > 0; elemento.remove(0)) {
      }
      if (opvacia) {
        const opt = document.createElement("option");
        opt.value = "";
        opt.text = "";
        elemento.add(opt);
      }
      let index = 0;
      let encontrado = false;
      for (const v of nuevasop) {
        const opt = document.createElement("option");
        opt.value = v[cid];
        if (opt.value == sel) {
          encontrado = true;
        }
        opt.text = v[cetiqueta];
        elemento.add(opt);
        index++;
      }
      if (!encontrado) {
        sel = "";
        elemento.value = "";
      }
      if (usatomselect) {
        if (typeof elemento.tomselect != "undefined") {
          elemento.tomselect.clear();
          elemento.tomselect.clearOptions();
          elemento.tomselect.sync();
          elemento.tomselect.refreshOptions();
        } else {
          let et = new TomSelect("#" + idElemento, {
            create: true,
            sortField: {
              field: "text",
              direction: "asc"
            }
          });
        }
      }
      elemento.value = sel;
    }
  };

  // application.js
  var import_tom_select = __toESM(require_tom_select_complete());
  var import_gridstack = __toESM(require_gridstack());

  // ../../node_modules/@pasosdejesus/autocompleta_ajax/dist/AutocompletaAjaxBase.js
  var AutocompletaAjaxBase = class {
    /** Constructra
     * @param url Responderá llamado Ajax con opciones e.g "/sip/personas.json"
     * @param idDatalist id de elemento datalist donde se pondrán opciones de
     *        autocompletación obtenidas con Ajax, e.g "fuente-asistentes"
     * @param operarElegida  función por llamar cuando se elija una opción
     *        su primer argumento es evento
     *        su segundo argumento es valor de opción elegida (o.value)
     *        su tercer argumento será texto de opción elegida (o.innerText)
     *        su cuarto argumento son otros datos asociados a la opción elegida
     */
    constructor(url, idDatalist, operarElegida) {
      this.url = url;
      const dl = document.getElementById(idDatalist);
      this.idDatalist = idDatalist;
      if (typeof operarElegida !== "function") {
        window.alert("* AutocompletaAjax: operarElegida no es funci\xF3n");
        return false;
      }
      this.operarElegida = operarElegida;
      this.teclapresionada = false;
      this.ultimoVal = "";
      this.ultimoTiempo = 0;
      if (dl != null) {
        dl.innerHTML = "";
      }
    }
    /**
     * Añade opciones al datalist (con lo obtenido con AJAX)
     * @param {array} resp - arreglo de opciones para el datalist
     */
    llenarDatalist(resp) {
      const frag = document.createDocumentFragment();
      resp.forEach((item) => {
        const opcion = document.createElement("option");
        for (const prop in item) {
          if (prop !== "value" && prop !== "id") {
            const nid = prop.replace(/\W/g, "-");
            const ip = item[prop] == null ? "" : item[prop];
            opcion.setAttribute(
              "data-" + nid,
              prop.replace(/:/g, "|") + ":" + ip
            );
          }
        }
        if (typeof item.id === "string") {
          const pid = item.id;
          const ppid = pid.split(";");
          if (typeof ppid[0] === "string") {
            [opcion.value, opcion.text] = [ppid[0], item.value];
            opcion.setAttribute("data-idorig", item.id);
          } else {
            window.alert("extra\xF1o problema");
          }
          frag.appendChild(opcion);
        } else if (typeof item.value === "string") {
          if (typeof item.id === "number") {
            [opcion.value, opcion.text] = [item.id, item.value];
          } else {
            [opcion.value, opcion.text] = [item.value, item.value];
          }
          frag.appendChild(opcion);
        }
      });
      const sel = document.getElementById(this.idDatalist);
      sel.innerHTML = "";
      if (frag.hasChildNodes()) {
        sel.appendChild(frag);
      }
    }
    /**
     * Usa texto tecleado por el usuario de más de 4 caracteres
     * para hacer llamada AJAX que busca con ese término y
     * después ejecuta llenarDatalist con el resultado
     * @param {event} e evento
     */
    buscar(e) {
      if (e.target.getAttribute("data-autocompleta") === "no") {
        return;
      }
      const val = e.target.value;
      this.tiempo = Date.now();
      const d = this.tiempo - this.ultimoTiempo;
      if (this.ultimoVal === val && d > 0 && d < 2) {
        return;
      }
      this.ultimoVal = val;
      this.ultimoTiempo = this.tiempo;
      if (val.length < 4) {
        return;
      }
      let p = new URLSearchParams();
      let izq = this.url;
      const posi = this.url.indexOf("?");
      if (posi >= 0) {
        p = new URLSearchParams(this.url.substr(posi + 1));
        izq = this.url.substr(0, posi);
      }
      p.append("term", val);
      const u = izq + "?" + p.toString();
      window.Rails.ajax({
        type: "GET",
        url: u,
        data: null,
        success: (resp, estado, xhr) => {
          if (e.target.getAttribute("data-autocompleta") === "no") {
          } else {
            this.llenarDatalist(resp);
          }
        },
        error: (req, estado, xhr) => {
          window.alert("No pudo consultarse listado de personas.");
        }
      });
    }
    /**
     * Detecta teclas presionadas para diferenciar algo tecleado de click en
     * opción
     * @param {event} e evento
     */
    manejarEventoKeydown(e) {
      if (e.key) {
        this.teclapresionada = true;
      }
    }
    /**
     * Detecta teclas levantadas para mejorar listado de datalist
     * @param {event} e evento
     */
    manejarEventoKeyup(e) {
      this.buscar(e);
    }
    /**
     * Detecta cuando se elige una de las opciones autocompletadas.
     * @param {event} e evento
     */
    manejarEventoInput(e) {
      if (this.teclapresionada === false) {
        const el = document.querySelector("#" + this.idDatalist);
        let idop = null;
        let nomop = null;
        const otrosop = {};
        el.childNodes.forEach((o) => {
          if (o.value === e.target.value) {
            idop = o.value;
            nomop = o.innerText;
            const idorigop = o.getAttribute("data-idorig");
            otrosop["data-idorig"] = idorigop;
            for (const [llave, valor] of Object.entries(o.dataset)) {
              const ud = valor.indexOf(":");
              if (llave !== "value" && ud >= 0) {
                const nomprop = valor.substr(0, ud);
                const valprop = valor.substr(ud + 1);
                otrosop[nomprop] = valprop;
              }
            }
          }
        });
        if (idop != null) {
          e.stopPropagation();
          e.preventDefault();
          e.target.value = "";
          this.operarElegida(e, nomop, idop, otrosop);
        } else {
        }
      }
      this.teclapresionada = false;
    }
  };

  // ../../node_modules/@pasosdejesus/autocompleta_ajax/dist/AutocompletaAjaxExpreg.js
  var AutocompletaAjaxExpreg = class extends AutocompletaAjaxBase {
    /** Constructra
     * @param expregselem Vector con expresiones regular de identificadores de campos por dotar de autocompletación e.g [/^actividad_asistencia_attributes_[0-9]*_persona_attributes_numerodocumento$/]
     * @param url "/sip/personas.json"
     * @param idDatalist "fuente-asistentes"
     * @param operarElegida  función por llamar cuando se elija una opción debe tener argumentos evento, nomop, idop, otrosop
     */
    constructor(expregselem, url, idDatalist, operarElegida) {
      super(url, idDatalist, operarElegida);
      this.expregselem = expregselem;
    }
    funKeyup(e) {
    }
    iniciar() {
      console.log("Agrega escuchadores de eventos para datalist con id", this.idDatalist);
      document.addEventListener("keyup", (e) => {
        this.expregselem.forEach((ere) => {
          if (ere.test(e.target.id)) {
            this.manejarEventoKeyup(e);
          }
        });
      });
      if (document.body.getAttribute("data-autocompleta-ajax-expreg-keydown-" + this.idDatalist) === null) {
        document.body.setAttribute(
          "data-autocompleta-ajax-expreg-keydown-" + this.idDatalist,
          "definido"
        );
        document.addEventListener("keydown", (e) => {
          this.expregselem.forEach((ere) => {
            if (ere.test(e.target.id)) {
              this.manejarEventoKeydown(e);
            }
          });
        }, false);
      }
      if (document.body.getAttribute("data-autocompleta-ajax-expreg-input-" + this.idDatalist) === null) {
        document.body.setAttribute(
          "data-autocompleta-ajax-expreg-input-" + this.idDatalist,
          "definido"
        );
        document.addEventListener("input", (e) => {
          this.expregselem.forEach((ere) => {
            if (ere.test(e.target.id)) {
              this.manejarEventoInput(e);
            }
          });
        }, false);
      }
    }
  };

  // ../../vendor/javascript/prosidebar/libs/constants.js
  var ANIMATION_DURATION = 300;
  var sidebarEl = () => document.getElementById("sidebar");
  var subMenuEls = () => document.querySelectorAll(
    ".menu > ul > .menu-item.sub-menu"
  );
  var firstSubMenusBtn = () => document.querySelectorAll(
    ".menu > ul > .menu-item.sub-menu > a"
  );
  var innerSubMenusBtn = () => document.querySelectorAll(
    ".menu > ul > .menu-item.sub-menu .menu-item.sub-menu > a"
  );

  // ../../vendor/javascript/prosidebar/libs/slide.js
  var slideUp = (target, duration = ANIMATION_DURATION) => {
    const { parentElement } = target;
    parentElement.classList.remove("open");
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = `${duration}ms`;
    target.style.boxSizing = "border-box";
    target.style.height = `${target.offsetHeight}px`;
    target.offsetHeight;
    target.style.overflow = "hidden";
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    window.setTimeout(() => {
      target.style.display = "none";
      target.style.removeProperty("height");
      target.style.removeProperty("padding-top");
      target.style.removeProperty("padding-bottom");
      target.style.removeProperty("margin-top");
      target.style.removeProperty("margin-bottom");
      target.style.removeProperty("overflow");
      target.style.removeProperty("transition-duration");
      target.style.removeProperty("transition-property");
    }, duration);
  };
  var slideDown = (target, duration = ANIMATION_DURATION) => {
    const { parentElement } = target;
    parentElement.classList.add("open");
    target.style.removeProperty("display");
    let { display } = window.getComputedStyle(target);
    if (display === "none")
      display = "block";
    target.style.display = display;
    const height = target.offsetHeight;
    target.style.overflow = "hidden";
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.boxSizing = "border-box";
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = `${duration}ms`;
    target.style.height = `${height}px`;
    target.style.removeProperty("padding-top");
    target.style.removeProperty("padding-bottom");
    target.style.removeProperty("margin-top");
    target.style.removeProperty("margin-bottom");
    window.setTimeout(() => {
      target.style.removeProperty("height");
      target.style.removeProperty("overflow");
      target.style.removeProperty("transition-duration");
      target.style.removeProperty("transition-property");
    }, duration);
  };
  var slideToggle = (target, duration = ANIMATION_DURATION) => {
    if (window.getComputedStyle(target).display === "none")
      return slideDown(target, duration);
    return slideUp(target, duration);
  };

  // ../../vendor/javascript/prosidebar/libs/popper.js
  var Popper = class {
    instance = null;
    reference = null;
    popperTarget = null;
    constructor(reference2, popperTarget) {
      this.init(reference2, popperTarget);
    }
    init(reference2, popperTarget) {
      this.reference = reference2;
      this.popperTarget = popperTarget;
      this.instance = createPopper3(this.reference, this.popperTarget, {
        placement: "right",
        strategy: "fixed",
        resize: true,
        modifiers: [
          {
            name: "computeStyles",
            options: {
              adaptive: false
            }
          },
          {
            name: "flip",
            options: {
              fallbackPlacements: ["left", "right"]
            }
          }
        ]
      });
      document.addEventListener(
        "click",
        (e) => this.clicker(e, this.popperTarget, this.reference),
        false
      );
      const ro = new ResizeObserver(() => {
        this.instance.update();
      });
      ro.observe(this.popperTarget);
      ro.observe(this.reference);
    }
    clicker(event, popperTarget, reference2) {
      if (sidebarEl().classList.contains("collapsed") && !popperTarget.contains(event.target) && !reference2.contains(event.target)) {
        this.hide();
      }
    }
    hide() {
      this.instance.state.elements.popper.style.visibility = "hidden";
    }
  };
  var popper_default = Popper;

  // ../../vendor/javascript/prosidebar/libs/poppers.js
  var Poppers = class {
    subMenuPoppers = [];
    constructor() {
      this.init();
    }
    init() {
      subMenuEls().forEach((element) => {
        this.subMenuPoppers.push(new popper_default(element, element.lastElementChild));
        this.closePoppers();
      });
    }
    togglePopper(target) {
      if (window.getComputedStyle(target).visibility === "hidden")
        target.style.visibility = "visible";
      else
        target.style.visibility = "hidden";
    }
    updatePoppers() {
      this.subMenuPoppers.forEach((element) => {
        element.instance.state.elements.popper.style.display = "none";
        element.instance.update();
      });
    }
    closePoppers() {
      this.subMenuPoppers.forEach((element) => {
        element.hide();
      });
    }
  };
  var poppers_default = Poppers;

  // ../../vendor/javascript/prosidebar/index.js
  var inicializaProsidebar = () => {
    const PoppersInstance = new poppers_default();
    const updatePoppersTimeout = () => {
      setTimeout(() => {
        PoppersInstance.updatePoppers();
      }, ANIMATION_DURATION);
    };
    document.getElementById("btn-collapse").addEventListener("click", () => {
      sidebarEl().classList.toggle("collapsed");
      PoppersInstance.closePoppers();
      if (sidebarEl().classList.contains("collapsed"))
        firstSubMenusBtn().forEach((element) => {
          element.parentElement.classList.remove("open");
        });
      updatePoppersTimeout();
    });
    document.getElementById("btn-toggle").addEventListener("click", () => {
      sidebarEl().classList.toggle("toggled");
      updatePoppersTimeout();
    });
    document.getElementById("overlay").addEventListener("click", () => {
      sidebarEl().classList.toggle("toggled");
    });
    const defaultOpenMenus = document.querySelectorAll(".menu-item.sub-menu.open");
    defaultOpenMenus.forEach((element) => {
      element.lastElementChild.style.display = "block";
    });
    firstSubMenusBtn().forEach((element) => {
      element.addEventListener("click", () => {
        if (sidebarEl().classList.contains("collapsed"))
          PoppersInstance.togglePopper(element.nextElementSibling);
        else {
          const parentMenu = element.closest(".menu.open-current-submenu");
          if (parentMenu)
            parentMenu.querySelectorAll(":scope > ul > .menu-item.sub-menu > a").forEach(
              (el) => window.getComputedStyle(el.nextElementSibling).display !== "none" && slideUp(el.nextElementSibling)
            );
          slideToggle(element.nextElementSibling);
        }
      });
    });
    innerSubMenusBtn().forEach((element) => {
      element.addEventListener("click", () => {
        slideToggle(element.nextElementSibling);
      });
    });
  };
  var prosidebar_default = inicializaProsidebar;

  // ../../node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left3, right3) => {
        const leftIndex = left3.index, rightIndex = right3.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches2 = source.match(descriptorPattern) || [];
    let eventName = matches2[2];
    let keyFilter = matches2[3];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches2[4]),
      eventName,
      eventOptions: matches2[7] ? parseEventOptions(matches2[7]) : {},
      identifier: matches2[5],
      methodName: matches2[6],
      keyFilter: matches2[1] || keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  function isSomething(object) {
    return object !== null && object !== void 0;
  }
  function hasProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  var allModifiers = ["meta", "ctrl", "alt", "shift"];
  var Action = class {
    constructor(element, index, descriptor, schema) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    shouldIgnoreKeyboardEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = this.keyFilter.split("+");
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!hasProperty(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    shouldIgnoreMouseEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = [this.keyFilter];
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      return false;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
    keyFilterDissatisfied(event, filters) {
      const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));
      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e) => e.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      const actionEvent = this.prepareActionEvent(event);
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {
        this.invokeWithEvent(actionEvent);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      const { controller } = this.context;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter = actionDescriptorFilters[name];
          passes = passes && filter({ name, value, event, element, controller });
        } else {
          continue;
        }
      }
      return passes;
    }
    prepareActionEvent(event) {
      return Object.assign(event, { params: this.action.params });
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        this.method.call(this.controller, event);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {
        return false;
      }
      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate2) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate2;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches2 = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches2.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches2)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(element, attributeName) {
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate2) {
      this.attributeName = attributeName;
      this.delegate = delegate2;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches2 = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches2);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set) => values.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values]) => values.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate2, details) {
      this._selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate2;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    get selector() {
      return this._selector;
    }
    set selector(selector) {
      this._selector = selector;
      this.refresh();
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const { selector } = this;
      if (selector) {
        const matches2 = element.matches(selector);
        if (this.delegate.selectorMatchElement) {
          return matches2 && this.delegate.selectorMatchElement(element, this.details);
        }
        return matches2;
      } else {
        return false;
      }
    }
    matchElementsInTree(tree) {
      const { selector } = this;
      if (selector) {
        const match = this.matchElement(tree) ? [tree] : [];
        const matches2 = Array.from(tree.querySelectorAll(selector)).filter((match2) => this.matchElement(match2));
        return match.concat(matches2);
      } else {
        return [];
      }
    }
    elementMatched(element) {
      const { selector } = this;
      if (selector) {
        this.selectorMatched(element, selector);
      }
    }
    elementUnmatched(element) {
      const selectors = this.matchesByElement.getKeysForValue(element);
      for (const selector of selectors) {
        this.selectorUnmatched(element, selector);
      }
    }
    elementAttributeChanged(element, _attributeName) {
      const { selector } = this;
      if (selector) {
        const matches2 = this.matchElement(element);
        const matchedBefore = this.matchesByElement.has(selector, element);
        if (matches2 && !matchedBefore) {
          this.selectorMatched(element, selector);
        } else if (!matches2 && matchedBefore) {
          this.selectorUnmatched(element, selector);
        }
      }
    }
    selectorMatched(element, selector) {
      this.delegate.selectorMatched(element, selector, this.details);
      this.matchesByElement.add(selector, element);
    }
    selectorUnmatched(element, selector) {
      this.delegate.selectorUnmatched(element, selector, this.details);
      this.matchesByElement.delete(selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate2) {
      this.element = element;
      this.delegate = delegate2;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate2) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate2;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left3, right3) {
    const length = Math.max(left3.length, right3.length);
    return Array.from({ length }, (_, index) => [left3[index], right3[index]]);
  }
  function tokensAreEqual(left3, right3) {
    return left3 && right3 && left3.index == right3.index && left3.content == right3.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate2) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate2;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate2) {
      this.context = context;
      this.delegate = delegate2;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate2) {
      this.context = context;
      this.delegate = delegate2;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate2) {
      this.started = false;
      this.context = context;
      this.delegate = delegate2;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
      this.attributeObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.started) {
        this.outletDefinitions.forEach((outletName) => {
          this.setupSelectorObserverForOutlet(outletName);
          this.setupAttributeObserverForOutlet(outletName);
        });
        this.started = true;
        this.dependentContexts.forEach((context) => context.refresh());
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
      this.attributeObserverMap.forEach((observer) => observer.refresh());
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.disconnectAllOutlets();
        this.stopSelectorObservers();
        this.stopAttributeObservers();
      }
    }
    stopSelectorObservers() {
      if (this.selectorObserverMap.size > 0) {
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    stopAttributeObservers() {
      if (this.attributeObserverMap.size > 0) {
        this.attributeObserverMap.forEach((observer) => observer.stop());
        this.attributeObserverMap.clear();
      }
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      const selector = this.selector(outletName);
      const hasOutlet = this.hasOutlet(element, outletName);
      const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);
      if (selector) {
        return hasOutlet && hasOutletController && element.matches(selector);
      } else {
        return false;
      }
    }
    elementMatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementAttributeValueChanged(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementUnmatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    updateSelectorObserverForOutlet(outletName) {
      const observer = this.selectorObserverMap.get(outletName);
      if (observer) {
        observer.selector = this.selector(outletName);
      }
    }
    setupSelectorObserverForOutlet(outletName) {
      const selector = this.selector(outletName);
      const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });
      this.selectorObserverMap.set(outletName, selectorObserver);
      selectorObserver.start();
    }
    setupAttributeObserverForOutlet(outletName) {
      const attributeName = this.attributeNameForOutletName(outletName);
      const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);
      this.attributeObserverMap.set(outletName, attributeObserver);
      attributeObserver.start();
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    attributeNameForOutletName(outletName) {
      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);
    }
    getOutletNameFromOutletAttributeName(attributeName) {
      return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module) => {
        const constructor = module.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get schema() {
      return this.context.schema;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module;
      this.scope = scope;
      this.controller = new module.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend2(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend2 = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a = function() {
        this.a.call(this);
      };
      const b = extendWithReflect(a);
      b.prototype.a = function() {
      };
      return new b();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class _Scope {
    constructor(schema, element, identifier, logger) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new _Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate2) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate2;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      return this.parseValueForElementAndIdentifier(element, identifier);
    }
    parseValueForElementAndIdentifier(element, identifier) {
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module = new Module(this.application, definition);
      this.connectModule(module);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        this.disconnectModule(module);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        return module.contexts.find((context) => context.element == element);
      }
    }
    proposeToConnectScopeForElementAndIdentifier(element, identifier) {
      const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);
      if (scope) {
        this.scopeObserver.elementMatchedValue(scope.element, scope);
      } else {
        console.error(`Couldn't find or create scope for identifier: "${identifier}" and element:`, element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.disconnectContextForScope(scope);
      }
    }
    connectModule(module) {
      this.modulesByIdentifier.set(module.identifier, module);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.connectContextForScope(scope));
    }
    disconnectModule(module) {
      this.modulesByIdentifier.delete(module.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End", page_up: "PageUp", page_down: "PageDown" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c) => [c, c]))), objectFromEntries("0123456789".split("").map((n) => [n, n])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo, [k, v]) => Object.assign(Object.assign({}, memo), { [k]: v }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter) {
      this.actionDescriptorFilters[name] = filter;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function getOutletController(controller, element, identifier) {
    return controller.application.getControllerForElementAndIdentifier(element, identifier);
  }
  function getControllerAndEnsureConnectedScope(controller, element, outletName) {
    let outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);
    outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
            if (outletController)
              return outletController;
            throw new Error(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`);
          }
          throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outletElement) => {
              const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
              if (outletController)
                return outletController;
              console.warn(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`, outletElement);
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            return outletElement;
          } else {
            throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read3, writer: write3 } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read3(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write3(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const { controller, token, typeObject } = payload;
    const hasType = isSomething(typeObject.type);
    const hasDefault = isSomething(typeObject.default);
    const fullObject = hasType && hasDefault;
    const onlyType = hasType && !hasDefault;
    const onlyDefault = !hasType && hasDefault;
    const typeFromObject = parseValueTypeConstant(typeObject.type);
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);
    if (onlyType)
      return typeFromObject;
    if (onlyDefault)
      return typeFromDefaultValue;
    if (typeFromObject !== typeFromDefaultValue) {
      const propertyPath = controller ? `${controller}.${token}` : token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${typeObject.default}" is of type "${typeFromDefaultValue}".`);
    }
    if (fullObject)
      return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const { controller, token, typeDefinition } = payload;
    const typeObject = { controller, token, typeObject: typeDefinition };
    const typeFromObject = parseValueTypeObject(typeObject);
    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);
    const typeFromConstant = parseValueTypeConstant(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;
    throw new Error(`Unknown value type "${propertyPath}" for "${token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const hasDefault = hasProperty(typeDefinition, "default");
    const hasType = hasProperty(typeDefinition, "type");
    const typeObject = typeDefinition;
    if (hasDefault)
      return typeObject.default;
    if (hasType) {
      const { type } = typeObject;
      const constantFromType = parseValueTypeConstant(type);
      if (constantFromType)
        return defaultValuesByType[constantFromType];
    }
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const { token, typeDefinition } = payload;
    const key = `${dasherize(token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value.replace(/_/g, ""));
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // controllers/application.js
  var application = Application.start();
  application.debug = false;
  window.Stimulus = application;

  // controllers/hello_controller.js
  var hello_controller_default = class extends Controller {
    connect() {
      this.element.textContent = "Hello World!";
    }
  };

  // controllers/msip/bitacoraap_controller.js
  var bitacoraap_controller_default = class extends Controller {
    // Conecta por ejemplo en form con data-controller="msip--bitacoraap"
    // En el botón para enviar agregar
    // data-action='submit->msip--bitacoraap#enviarFormulario'
    static targets = [];
    initialize() {
      console.log("inicializa controlador bitacoraap");
    }
    connect() {
      console.log("conectado controlador bitacoraap");
      let campo = document.querySelector("input.bitacora_cambio");
      if (campo != null && typeof MsipSerializarFormularioEnArreglo == "function") {
        window.bitacora_estado_inicial_formulario = MsipSerializarFormularioEnArreglo(
          campo.closest("form")
        );
      }
    }
    enviarFormulario(e) {
      let campo = document.querySelector("input.bitacora_cambio");
      if (campo == null) {
        return;
      }
      let cambio = MsipCalcularCambiosParaBitacora();
      campo.value = JSON.stringify(cambio);
    }
  };

  // controllers/msip/cancelar_vacio_es_eliminar_controller.js
  var cancelar_vacio_es_eliminar_controller_default = class extends Controller {
    /* Convierte botón cancelar a eliminación cuando algunos campos
     * determinadores del formulario están vacíos
     *
     * 1. Conecte el formulario con este controlador con:
     *    data-controller="msip--cancelar-vacio-es-eliminar"
     * 2. Marque uno a uno los campos determinadores con
     *    data-msip--cancelar-vacio-es-eliminar-target='determinador'
     * 3. Cambie el botón cancelar para agregarle:
     *    'data-msip--cancelar-vacio-es-eliminar-target' => 'boton',
     *    'data-msip--cancelar-vacio-es-eliminar-id-param' => @registro.nil? ? '' :
     *      @registro.id.to_s,
     *    'data-msip--cancelar-vacio-es-eliminar-urlparcial-param' => '/casos/',
     *
     *     Teniendo en cuenta que:
     *       - id debe tener id del registro que se edita y que podría borrarse
     *       - urlparcial debe ser ruta a registros que permita borrar con ruta/id
     */
    static targets = [
      "boton",
      "determinador"
    ];
    connect() {
    }
    talvezEliminar(evento) {
      if (!this.hasDeterminadorTarget) {
        return;
      }
      var borrar = this.determinadorTargets.length > 0;
      this.determinadorTargets.forEach((d) => {
        if (d.value != "") {
          borrar = false;
        }
      });
      var purl = window.puntomontaje;
      if (purl == "/") {
        purl = "";
      }
      if (borrar) {
        var id = evento.params.id;
        var urlparcial = evento.params.urlparcial;
        this.botonTarget.setAttribute("data-method", "delete");
        var url = purl + "/" + urlparcial + "/" + id;
        url = url.replace(/\/\/*/g, "/");
        this.botonTarget.setAttribute("href", url);
      }
    }
  };

  // controllers/msip/filtro_tan_controller.js
  var filtro_tan_controller_default = class extends Controller {
    // Conecta con data-controller="msip--filtro-tan"
    // En el campo con botones de radio agregar
    // data-action='change->msip--filtro-tan#cambia_boton_todos'
    // data-msip--filtro-tan-target='boton-todos'
    // data-action='change->msip--filtro-tan#cambia_boton_ninguno'
    // data-msip--filtro-tan-target='boton-ninguno'
    // data-msip--filtro-tan-target='boton-algunos'
    // En el campo de selección por ayudar a controlar
    // data-msip--filtro-tan-target='cuadro-de-seleccion'
    static targets = [
      "todos",
      "algunos",
      "ninguno",
      "seleccion"
    ];
    initialize() {
      console.log("inicializa controlador filto-tan");
    }
    connect() {
      console.log("conectado controlador filto-tan");
    }
    cambiarATodos(e) {
      console.log(this.seleccionTarget.id);
      csSeleccionarTodasSinSpan(this.seleccionTarget.id);
    }
    cambiarANinguno(e) {
      console.log(this.seleccionTarget.id);
      csDeseleccionarTodas(this.seleccionTarget.id);
    }
    revisarCambioAlgunas(e) {
      debugger;
    }
  };

  // controllers/msip/geodep_controller.js
  var geodep_controller_default = class extends Controller {
    // Conecta un área que incluye campos pais/dep/mun con 
    //   data-controller="msip--geodep"
    // En el campo para el país agrega
    //   data-action='change->msip--geodep#cambiar_pais'
    // En el campo para el departamento agrega
    //   data-action='change->msip--geodep#cambiar_departamento y
    //   data-msip--geodep-target='departamento'
    // En el campo para el municipio agrega
    //   data-action='change->msip--geodep#cambiar_municipio y
    //   data-msip--geodep-target='municipio'
    // En el campo para el centro poblado agrega
    //   data-action='change->msip--geodep#cambiar_centropoblado y
    //   data-msip--geodep-target='centropoblado'
    static targets = [
      "departamento",
      "municipio",
      "centropoblado"
    ];
    initialize() {
      console.log("inicializa controlador geodep");
    }
    connect() {
      console.log("conectado controlador geodep");
    }
    cambiar_pais(e) {
      var purl = Msip__Motor.arreglarPuntoMontaje();
      console.log("departamento ahora es", this.departamentoTarget.value);
      let url = purl + "/admin/departamentos.json?pais_id=" + e.target.value;
      window.Rails.ajax({
        type: "GET",
        url,
        data: null,
        success: (resp, estado, xhr) => {
          Msip__Motor.remplazarOpcionesSelect(
            this.departamentoTarget.id,
            resp,
            true,
            "id",
            "nombre",
            true
          );
          Msip__Motor.remplazarOpcionesSelect(
            this.municipioTarget.id,
            [],
            true,
            "id",
            "nombre",
            true
          );
          Msip__Motor.remplazarOpcionesSelect(
            this.centropobladoTarget.id,
            [],
            true,
            "id",
            "nombre",
            true
          );
        },
        error: (req, estado, xhr) => {
          window.alert("No pudo consultar departamentos");
        }
      });
    }
    cambiar_departamento(e) {
      var purl = Msip__Motor.arreglarPuntoMontaje();
      console.log("municipio ahora es", this.municipioTarget.value);
      let url = purl + "/admin/municipios.json?departamento_id=" + e.target.value;
      window.Rails.ajax({
        type: "GET",
        url,
        data: null,
        success: (resp, estado, xhr) => {
          Msip__Motor.remplazarOpcionesSelect(
            this.municipioTarget.id,
            resp,
            true,
            "id",
            "nombre",
            true
          );
          Msip__Motor.remplazarOpcionesSelect(
            this.centropobladoTarget.id,
            [],
            true,
            "id",
            "nombre",
            true
          );
        },
        error: (req, estado, xhr) => {
          window.alert("No pudo consultar municipios");
        }
      });
    }
    cambiar_municipio(e) {
      var purl = Msip__Motor.arreglarPuntoMontaje();
      console.log("centro poblado ahora es", this.centropobladoTarget.value);
      let url = purl + "/admin/centrospoblados.json?municipio_id=" + e.target.value;
      window.Rails.ajax({
        type: "GET",
        url,
        data: null,
        success: (resp, estado, xhr) => {
          Msip__Motor.remplazarOpcionesSelect(
            this.centropobladoTarget.id,
            resp,
            true,
            "id",
            "nombre",
            true
          );
        },
        error: (req, estado, xhr) => {
          window.alert("No pudo consultar centrospoblados");
        }
      });
    }
    cambiar_centropoblado(e) {
    }
  };

  // controllers/msip/sindocaut_controller.js
  var sindocaut_controller_default = class extends Controller {
    // Conecta con data-controller="msip--sindocaut"
    // En el campo para el tipo de documento agregar
    // data-action='change->msip--sindocaut#cambia_tdocumento
    // En el campo con la id de la persona agregar
    // data-msip--sindocaut-target='id'
    // Y en el campo con el número de documento agregar
    // data-msip--sindocaut-target='numerodocumento'
    static targets = [
      "numerodocumento",
      "id"
    ];
    initialize() {
      console.log("inicializa controlador sindocaut");
    }
    connect() {
      console.log("conectado controlador sindocaut");
    }
    cambia_tdocumento(e) {
      var purl = window.puntomontaje;
      if (purl == "/") {
        purl = "";
      }
      console.log("numerodocumento ahora es", this.numerodocumentoTarget.value);
      if (e.target.value == "11" && this.numerodocumentoTarget.value == "") {
        let bindice = this.idTarget.id.match(
          new RegExp("attributes_([0-9]+)_persona", "g")
        );
        if (bindice == null) {
          bindice = ["attributes_0_persona"];
        }
        let indice = bindice.at(-1).substr(11, bindice.at(-1).length - 19);
        window.Rails.ajax({
          type: "GET",
          url: purl + "/personas/identificacionsd?persona_id=" + this.idTarget.value + "&indice=" + indice,
          data: null,
          success: (resp, estado, xhr) => {
            this.numerodocumentoTarget.value = resp;
          },
          error: (req, estado, xhr) => {
            window.alert("No pudo consultar identificaci\xF3n.");
          }
        });
      }
      window.Rails.ajax({
        type: "GET",
        url: purl + "/admin/tdocumentos/" + e.target.value + ".json",
        data: null,
        success: (resp, estado, xhr) => {
          this.numerodocumentoTarget.setAttribute("data-bs-toggle", "tooltip");
          this.numerodocumentoTarget.setAttribute(
            "data-bs-original-title",
            resp.ayuda
          );
          this.numerodocumentoTarget.setAttribute("title", resp.ayuda);
        },
        error: (req, estado, xhr) => {
          window.alert("No pudo consultar tipo de documento " + e.target.value);
        }
      });
    }
  };

  // controllers/index.js
  application.register("hello", hello_controller_default);
  application.register("msip--bitacoraap", bitacoraap_controller_default);
  application.register("msip--cancelar-vacio-es-eliminar", cancelar_vacio_es_eliminar_controller_default);
  application.register("msip--filtro-tan", filtro_tan_controller_default);
  application.register("msip--geodep", geodep_controller_default);
  application.register("msip--sindocaut", sindocaut_controller_default);

  // application.js
  console.log("Hola Mundo desde ESM");
  if (typeof window.Rails == "undefined") {
    Rails.start();
    window.Rails = Rails;
  }
  window.ApexCharts = import_apexcharts.default;
  Apex.chart = {
    locales: [es_default],
    defaultLocale: "es"
  };
  window.Msip__Motor = Msip__Motor;
  Msip__Motor.iniciar();
  window.TomSelect = import_tom_select.default;
  window.configuracionTomSelect = {
    create: false,
    diacritics: true,
    //no sensitivo a acentos
    sortField: {
      field: "text",
      direction: "asc"
    }
  };
  window.AutocompletaAjaxExpreg = AutocompletaAjaxExpreg;
  window.inicializaProsidebar = prosidebar_default;
  var esperarRecursosSprocketsYDocumento = function(resolver) {
    if (typeof window.puntomontaje == "undefined") {
      setTimeout(esperarRecursosSprocketsYDocumento, 100, resolver);
      return false;
    }
    if (document.readyState !== "complete") {
      setTimeout(esperarRecursosSprocketsYDocumento, 100, resolver);
      return false;
    }
    resolver("Recursos manejados con sprockets cargados y documento presentado en navegador");
    return true;
  };
  var promesaRecursosSprocketsYDocumento = new Promise((resolver, rechazar) => {
    esperarRecursosSprocketsYDocumento(resolver);
  });
  promesaRecursosSprocketsYDocumento.then((mensaje) => {
    console.log(mensaje);
    var root = window;
    root.cor1440_gen_activa_autocompleta_mismotipo = true;
    msip_prepara_eventos_comunes(root);
    heb412_gen_prepara_eventos_comunes(root);
    mr519_gen_prepara_eventos_comunes(root);
    cor1440_gen_prepara_eventos_comunes(root);
    Msip__Motor.ejecutarAlCargarDocumentoYRecursos();
  });
  document.addEventListener("turbo:load", (e) => {
    console.log("Escuchador turbo:load");
    Msip__Motor.ejecutarAlCargarPagina();
    msip_ejecutarAlCargarPagina(window);
    window.inicializaProsidebar();
  });
})();
/*! jQuery UI - v1.13.0 - 2021-11-29
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, form-reset-mixin.js, jquery-patch.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/draggable.js, widgets/droppable.js, widgets/resizable.js, widgets/selectable.js, widgets/sortable.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/selectmenu.js, widgets/slider.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */
/*!
 * jQuery UI Widget 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Position 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
/*!
 * jQuery UI :data 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Disable Selection 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Focusable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Form Reset Mixin 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Support for jQuery core 1.8.x and newer 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */
/*!
 * jQuery UI Keycode 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Labels 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Scroll Parent 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Tabbable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Unique ID 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Mouse 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Draggable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Droppable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Resizable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Selectable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Sortable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Accordion 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Menu 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Autocomplete 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Controlgroup 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Checkboxradio 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Button 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Datepicker 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Dialog 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Progressbar 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Selectmenu 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Slider 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Spinner 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Tabs 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Tooltip 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery Color Animations v2.2.0
 * https://github.com/jquery/jquery-color
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Sun May 10 09:02:36 2020 +0200
 */
/*!
 * jQuery UI Effects 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Blind 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Bounce 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Clip 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Drop 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Explode 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Fade 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Fold 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Highlight 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Size 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Scale 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Puff 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Pulsate 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Shake 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Slide 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Effects Transfer 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
/*! Bundled license information:

jquery/dist/jquery.js:
  (*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   *)

bootstrap-datepicker/dist/js/bootstrap-datepicker.js:
  (*!
   * Datepicker for Bootstrap v1.10.0 (https://github.com/uxsolutions/bootstrap-datepicker)
   *
   * Licensed under the Apache License v2.0 (https://www.apache.org/licenses/LICENSE-2.0)
   *)

apexcharts/dist/apexcharts.common.js:
  (*!
   * ApexCharts v3.49.1
   * (c) 2018-2024 ApexCharts
   * Released under the MIT License.
   *)

tom-select/dist/js/tom-select.complete.js:
  (*! @orchidjs/unicode-variants | https://github.com/orchidjs/unicode-variants | Apache License (v2) *)
  (*! sifter.js | https://github.com/orchidjs/sifter.js | Apache License (v2) *)

gridstack/dist/gridstack.js:
  (**
   * gridstack.js 0.6.4
   * https://gridstackjs.com/
   * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov
   * gridstack.js may be freely distributed under the MIT license.
   * @preserve
  *)

bootstrap/dist/js/bootstrap.esm.js:
  (*!
    * Bootstrap v5.3.3 (https://getbootstrap.com/)
    * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)
*/
